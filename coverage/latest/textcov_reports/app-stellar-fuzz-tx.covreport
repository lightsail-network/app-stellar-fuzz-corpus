buffer_can_read:
   28|  64.2M|{
   29|  64.2M|    return buffer->size - buffer->offset >= n;
   30|  64.2M|}
buffer_seek_cur:
   44|   113M|{
   45|   113M|    if (buffer->offset + offset < buffer->offset ||  // overflow
  ------------------
  |  Branch (45:9): [True: 0, False: 113M]
  ------------------
   46|   113M|        buffer->offset + offset > buffer->size) {    // exceed buffer size
  ------------------
  |  Branch (46:9): [True: 695, False: 113M]
  ------------------
   47|    695|        return false;
   48|    695|    }
   49|       |
   50|   113M|    buffer->offset += offset;
   51|       |
   52|   113M|    return true;
   53|   113M|}
buffer_read_u32:
   97|  63.3M|{
   98|  63.3M|    if (!buffer_can_read(buffer, 4)) {
  ------------------
  |  Branch (98:9): [True: 2.77k, False: 63.3M]
  ------------------
   99|  2.77k|        *value = 0;
  100|       |
  101|  2.77k|        return false;
  102|  2.77k|    }
  103|       |
  104|  63.3M|    *value = ((endianness == BE) ? read_u32_be(buffer->ptr, buffer->offset)
  ------------------
  |  Branch (104:15): [True: 63.3M, False: 0]
  ------------------
  105|  63.3M|                                 : read_u32_le(buffer->ptr, buffer->offset));
  106|       |
  107|  63.3M|    buffer_seek_cur(buffer, 4);
  108|       |
  109|  63.3M|    return true;
  110|  63.3M|}
buffer_read_u64:
  113|  30.4k|{
  114|  30.4k|    if (!buffer_can_read(buffer, 8)) {
  ------------------
  |  Branch (114:9): [True: 29, False: 30.4k]
  ------------------
  115|     29|        *value = 0;
  116|       |
  117|     29|        return false;
  118|     29|    }
  119|       |
  120|  30.4k|    *value = ((endianness == BE) ? read_u64_be(buffer->ptr, buffer->offset)
  ------------------
  |  Branch (120:15): [True: 30.4k, False: 0]
  ------------------
  121|  30.4k|                                 : read_u64_le(buffer->ptr, buffer->offset));
  122|       |
  123|  30.4k|    buffer_seek_cur(buffer, 8);
  124|       |
  125|  30.4k|    return true;
  126|  30.4k|}

format_hex:
  157|  1.76k|{
  158|  1.76k|    if (out_len < 2 * in_len + 1) {
  ------------------
  |  Branch (158:9): [True: 0, False: 1.76k]
  ------------------
  159|      0|        return -1;
  160|      0|    }
  161|       |
  162|  1.76k|    const char hex[]   = "0123456789ABCDEF";
  163|  1.76k|    size_t     i       = 0;
  164|  1.76k|    int        written = 0;
  165|       |
  166|  60.2k|    while (i < in_len && (i * 2 + (2 + 1)) <= out_len) {
  ------------------
  |  Branch (166:12): [True: 58.4k, False: 1.76k]
  |  Branch (166:26): [True: 58.4k, False: 0]
  ------------------
  167|  58.4k|        uint8_t high_nibble = (in[i] & 0xF0) >> 4;
  168|  58.4k|        *out                = hex[high_nibble];
  169|  58.4k|        out++;
  170|       |
  171|  58.4k|        uint8_t low_nibble = in[i] & 0x0F;
  172|  58.4k|        *out               = hex[low_nibble];
  173|  58.4k|        out++;
  174|       |
  175|  58.4k|        i++;
  176|  58.4k|        written += 2;
  177|  58.4k|    }
  178|       |
  179|  1.76k|    *out = '\0';
  180|       |
  181|  1.76k|    return written + 1;
  182|  1.76k|}

read_u32_be:
   27|  63.3M|{
   28|  63.3M|    return (uint32_t) ptr[offset + 0] << 24 |  //
   29|  63.3M|           (uint32_t) ptr[offset + 1] << 16 |  //
   30|  63.3M|           (uint32_t) ptr[offset + 2] << 8 |   //
   31|  63.3M|           (uint32_t) ptr[offset + 3] << 0;
   32|  63.3M|}
read_u64_be:
   35|  30.4k|{
   36|  30.4k|    return (uint64_t) ptr[offset + 0] << 56 |  //
   37|  30.4k|           (uint64_t) ptr[offset + 1] << 48 |  //
   38|  30.4k|           (uint64_t) ptr[offset + 2] << 40 |  //
   39|  30.4k|           (uint64_t) ptr[offset + 3] << 32 |  //
   40|  30.4k|           (uint64_t) ptr[offset + 4] << 24 |  //
   41|  30.4k|           (uint64_t) ptr[offset + 5] << 16 |  //
   42|  30.4k|           (uint64_t) ptr[offset + 6] << 8 |   //
   43|  30.4k|           (uint64_t) ptr[offset + 7] << 0;
   44|  30.4k|}

LLVMFuzzerTestOneInput:
   23|  25.4k|int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   24|  25.4k|    envelope_t envelope;
   25|  25.4k|    bool data_exists = true;
   26|  25.4k|    bool is_op_header = false;
   27|  25.4k|    char detail_caption[DETAIL_CAPTION_MAX_LENGTH];
   28|  25.4k|    char detail_value[DETAIL_VALUE_MAX_LENGTH];
   29|  25.4k|    uint8_t signing_key[] = {0xe9, 0x33, 0x88, 0xbb, 0xfd, 0x2f, 0xbd, 0x11, 0x80, 0x6d, 0xd0,
   30|  25.4k|                             0xbd, 0x59, 0xce, 0xa9, 0x7,  0x9e, 0x7c, 0xc7, 0xc,  0xe7, 0xb1,
   31|  25.4k|                             0xe1, 0x54, 0xf1, 0x14, 0xcd, 0xfe, 0x4e, 0x46, 0x6e, 0xcd};
   32|       |
   33|  25.4k|    memset(&envelope, 0, sizeof(envelope_t));
   34|  25.4k|    if (parse_transaction_envelope(data, size, &envelope)) {
  ------------------
  |  Branch (34:9): [True: 7.36k, False: 18.1k]
  ------------------
   35|  7.36k|        formatter_data_t tx_fdata = {
   36|  7.36k|            .raw_data = data,
   37|  7.36k|            .raw_data_len = size,
   38|  7.36k|            .envelope = &envelope,
   39|  7.36k|            .caption = detail_caption,
   40|  7.36k|            .value = detail_value,
   41|  7.36k|            .signing_key = signing_key,
   42|  7.36k|            .caption_len = DETAIL_CAPTION_MAX_LENGTH,
  ------------------
  |  |    9|  7.36k|#define DETAIL_CAPTION_MAX_LENGTH 21
  ------------------
   43|  7.36k|            .value_len = DETAIL_VALUE_MAX_LENGTH,
  ------------------
  |  |   10|  7.36k|#define DETAIL_VALUE_MAX_LENGTH   105
  ------------------
   44|  7.36k|            .display_sequence = true,
   45|  7.36k|        };
   46|  7.36k|        reset_formatter();
   47|       |
   48|   231k|        while (true) {
   49|   231k|            if (!get_next_data(&tx_fdata, true, &data_exists, &is_op_header)) {
  ------------------
  |  Branch (49:17): [True: 368, False: 230k]
  ------------------
   50|    368|                break;
   51|    368|            }
   52|       |
   53|   230k|            if (!data_exists) {
  ------------------
  |  Branch (53:17): [True: 6.99k, False: 223k]
  ------------------
   54|  6.99k|                break;
   55|  6.99k|            }
   56|   230k|        }
   57|  7.36k|    }
   58|       |
   59|  25.4k|    memset(&envelope, 0, sizeof(envelope_t));
   60|  25.4k|    if (parse_soroban_authorization_envelope(data, size, &envelope)) {
  ------------------
  |  Branch (60:9): [True: 4.58k, False: 20.8k]
  ------------------
   61|  4.58k|        formatter_data_t auth_fdata = {
   62|  4.58k|            .raw_data = data,
   63|  4.58k|            .raw_data_len = size,
   64|  4.58k|            .envelope = &envelope,
   65|  4.58k|            .caption = detail_caption,
   66|  4.58k|            .value = detail_value,
   67|  4.58k|            .signing_key = signing_key,
   68|  4.58k|            .caption_len = DETAIL_CAPTION_MAX_LENGTH,
  ------------------
  |  |    9|  4.58k|#define DETAIL_CAPTION_MAX_LENGTH 21
  ------------------
   69|  4.58k|            .value_len = DETAIL_VALUE_MAX_LENGTH,
  ------------------
  |  |   10|  4.58k|#define DETAIL_VALUE_MAX_LENGTH   105
  ------------------
   70|  4.58k|            .display_sequence = true,
   71|  4.58k|            .plugin_check_presence = &plugin_check_presence,
   72|  4.58k|            .plugin_init_contract = &plugin_init_contract,
   73|  4.58k|            .plugin_query_data_pair_count = &plugin_query_data_pair_count,
   74|  4.58k|            .plugin_query_data_pair = &plugin_query_data_pair,
   75|  4.58k|        };
   76|       |
   77|  4.58k|        reset_formatter();
   78|       |
   79|  86.2k|        while (true) {
   80|  86.2k|            if (!get_next_data(&auth_fdata, true, &data_exists, &is_op_header)) {
  ------------------
  |  Branch (80:17): [True: 1.10k, False: 85.1k]
  ------------------
   81|  1.10k|                break;
   82|  1.10k|            }
   83|       |
   84|  85.1k|            if (!data_exists) {
  ------------------
  |  Branch (84:17): [True: 3.48k, False: 81.6k]
  ------------------
   85|  3.48k|                break;
   86|  3.48k|            }
   87|  85.1k|        }
   88|  4.58k|    }
   89|       |
   90|  25.4k|    return 0;
   91|  25.4k|}
fuzz_tx.c:plugin_check_presence:
   93|  30.3k|static bool plugin_check_presence(const uint8_t *contract_address) {
   94|  30.3k|    uint8_t expected[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   95|  30.3k|                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   96|  30.3k|                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
   97|  30.3k|    return memcmp(contract_address, expected, 32) == 0;
   98|  30.3k|}
fuzz_tx.c:plugin_init_contract:
  100|  3.90k|stellar_plugin_result_t plugin_init_contract(const uint8_t *contract_address) {
  101|       |    // Build-in token plugin
  102|  3.90k|    if (plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (102:9): [True: 3.90k, False: 0]
  ------------------
  103|  3.90k|        return STELLAR_PLUGIN_RESULT_OK;
  104|  3.90k|    }
  105|      0|    return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  106|  3.90k|}
fuzz_tx.c:plugin_query_data_pair_count:
  109|  3.90k|                                                     uint8_t *data_pair_count) {
  110|       |    // Build-in token plugin
  111|  3.90k|    if (plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (111:9): [True: 3.90k, False: 0]
  ------------------
  112|  3.90k|        *data_pair_count = 3;
  113|  3.90k|        return STELLAR_PLUGIN_RESULT_OK;
  114|  3.90k|    }
  115|      0|    return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  116|  3.90k|}
fuzz_tx.c:plugin_query_data_pair:
  123|  11.7k|                                               uint8_t value_len) {
  124|  11.7k|    if (!plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (124:9): [True: 0, False: 11.7k]
  ------------------
  125|      0|        return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  126|      0|    }
  127|  11.7k|    switch (data_pair_index) {
  128|  3.90k|        case 0:
  ------------------
  |  Branch (128:9): [True: 3.90k, False: 7.80k]
  ------------------
  129|  3.90k|            strncpy(caption, "caption 0", caption_len);
  130|  3.90k|            strncpy(value, "value 0", value_len);
  131|  3.90k|            break;
  132|  3.90k|        case 1:
  ------------------
  |  Branch (132:9): [True: 3.90k, False: 7.80k]
  ------------------
  133|  3.90k|            strncpy(caption, "caption 1", caption_len);
  134|  3.90k|            strncpy(value, "value 1", value_len);
  135|  3.90k|            break;
  136|  3.90k|        case 2:
  ------------------
  |  Branch (136:9): [True: 3.90k, False: 7.80k]
  ------------------
  137|  3.90k|            strncpy(caption, "caption 2", caption_len);
  138|  3.90k|            strncpy(value, "value 2", value_len);
  139|  3.90k|            break;
  140|      0|        default:
  ------------------
  |  Branch (140:9): [True: 0, False: 11.7k]
  ------------------
  141|      0|            return STELLAR_PLUGIN_RESULT_ERROR;
  142|  11.7k|    }
  143|  11.7k|    return STELLAR_PLUGIN_RESULT_OK;
  144|  11.7k|}

base32_encode:
   64|  61.7k|int base32_encode(const uint8_t *data, int length, uint8_t *result, int buf_size) {
   65|  61.7k|    if (length < 0 || length > (1 << 28)) {
  ------------------
  |  Branch (65:9): [True: 0, False: 61.7k]
  |  Branch (65:23): [True: 0, False: 61.7k]
  ------------------
   66|      0|        return -1;
   67|      0|    }
   68|  61.7k|    int count = 0;
   69|  61.7k|    if (length > 0) {
  ------------------
  |  Branch (69:9): [True: 61.7k, False: 0]
  ------------------
   70|  61.7k|        uint32_t buffer = data[0];
   71|  61.7k|        int next = 1;
   72|  61.7k|        int bits_left = 8;
   73|  3.55M|        while (count < buf_size && (bits_left > 0 || next < length)) {
  ------------------
  |  Branch (73:16): [True: 3.48M, False: 60.8k]
  |  Branch (73:37): [True: 3.11M, False: 375k]
  |  Branch (73:54): [True: 374k, False: 887]
  ------------------
   74|  3.48M|            if (bits_left < 5) {
  ------------------
  |  Branch (74:17): [True: 2.11M, False: 1.36M]
  ------------------
   75|  2.11M|                if (next < length) {
  ------------------
  |  Branch (75:21): [True: 2.11M, False: 872]
  ------------------
   76|  2.11M|                    buffer <<= 8;
   77|  2.11M|                    buffer |= data[next++] & 0xFF;
   78|  2.11M|                    bits_left += 8;
   79|  2.11M|                } else {
   80|    872|                    int pad = 5 - bits_left;
   81|    872|                    buffer <<= pad;
   82|    872|                    bits_left += pad;
   83|    872|                }
   84|  2.11M|            }
   85|  3.48M|            int index = 0x1F & (buffer >> (bits_left - 5));
   86|  3.48M|            bits_left -= 5;
   87|  3.48M|            result[count++] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"[index];
   88|  3.48M|        }
   89|  61.7k|    }
   90|  61.7k|    if (count < buf_size) {
  ------------------
  |  Branch (90:9): [True: 887, False: 60.8k]
  ------------------
   91|    887|        result[count] = '\000';
   92|    887|    }
   93|  61.7k|    return count;
   94|  61.7k|}

base64_encode:
   11|    160|bool base64_encode(const uint8_t *data, size_t in_len, char *out, size_t out_len) {
   12|    160|    size_t encoded_len = 4 * ((in_len + 2) / 3);
   13|    160|    if (encoded_len > out_len) {
  ------------------
  |  Branch (13:9): [True: 0, False: 160]
  ------------------
   14|      0|        return false;
   15|      0|    }
   16|       |
   17|    891|    for (unsigned int i = 0, j = 0; i < in_len;) {
  ------------------
  |  Branch (17:37): [True: 731, False: 160]
  ------------------
   18|    731|        uint32_t octet_a = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (18:28): [True: 731, False: 0]
  ------------------
   19|    731|        uint32_t octet_b = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (19:28): [True: 668, False: 63]
  ------------------
   20|    731|        uint32_t octet_c = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (20:28): [True: 615, False: 116]
  ------------------
   21|       |
   22|    731|        uint32_t triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;
   23|       |
   24|    731|        out[j++] = BASE64_ALPHABET[(triple >> 3 * 6) & 0x3F];
   25|    731|        out[j++] = BASE64_ALPHABET[(triple >> 2 * 6) & 0x3F];
   26|    731|        out[j++] = BASE64_ALPHABET[(triple >> 1 * 6) & 0x3F];
   27|    731|        out[j++] = BASE64_ALPHABET[(triple >> 0 * 6) & 0x3F];
   28|    731|    }
   29|       |
   30|    339|    for (int i = 0; i < BASE64_MOD_TABLE[in_len % 3]; i++) {
  ------------------
  |  Branch (30:21): [True: 179, False: 160]
  ------------------
   31|    179|        out[encoded_len - 1 - i] = '=';
   32|    179|    }
   33|       |
   34|    160|    out[encoded_len] = '\0';
   35|    160|    return true;
   36|    160|}

reset_formatter:
 2428|  11.9k|void reset_formatter(void) {
 2429|  11.9k|    explicit_bzero(formatter_stack, sizeof(formatter_stack));
 2430|  11.9k|    formatter_index = 0;
 2431|  11.9k|    current_data_index = 0;
 2432|  11.9k|}
get_next_data:
 2434|   317k|bool get_next_data(formatter_data_t *fdata, bool forward, bool *data_exists, bool *is_op_header) {
 2435|   317k|    if (current_data_index == 0 && formatter_index == 0 && !forward) {
  ------------------
  |  Branch (2435:9): [True: 124k, False: 193k]
  |  Branch (2435:36): [True: 11.9k, False: 112k]
  |  Branch (2435:60): [True: 0, False: 11.9k]
  ------------------
 2436|      0|        return false;
 2437|      0|    }
 2438|   317k|    explicit_bzero(fdata->caption, fdata->caption_len);
 2439|   317k|    explicit_bzero(fdata->value, fdata->value_len);
 2440|   317k|    *is_op_header = false;
 2441|   317k|    uint8_t total_data = get_data_count(fdata);
 2442|       |    // printf("current_data_index: %d, formatter_index: %d\n", current_data_index,
 2443|       |    // formatter_index);
 2444|   317k|    if (forward) {
  ------------------
  |  Branch (2444:9): [True: 317k, False: 0]
  ------------------
 2445|   317k|        if (current_data_index == 0 && formatter_index == 0) {
  ------------------
  |  Branch (2445:13): [True: 124k, False: 193k]
  |  Branch (2445:40): [True: 11.9k, False: 112k]
  ------------------
 2446|  11.9k|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|  11.9k|    {                           \
  |  |   31|  11.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 11.9k]
  |  |  ------------------
  |  |   32|  11.9k|    }
  ------------------
 2447|  11.9k|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2447:17): [True: 0, False: 11.9k]
  ------------------
 2448|      0|                return false;
 2449|      0|            }
 2450|  11.9k|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|  11.9k|    {                           \
  |  |   31|  11.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 11.9k]
  |  |  ------------------
  |  |   32|  11.9k|    }
  ------------------
 2451|  11.9k|            *data_exists = true;
 2452|   305k|        } else if (current_data_index < total_data - 1 &&
  ------------------
  |  Branch (2452:20): [True: 191k, False: 113k]
  ------------------
 2453|   305k|                   formatter_stack[formatter_index - 1] == NULL) {
  ------------------
  |  Branch (2453:20): [True: 48.4k, False: 143k]
  ------------------
 2454|  48.4k|            current_data_index++;
 2455|  48.4k|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|  48.4k|    {                           \
  |  |   31|  48.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 48.4k]
  |  |  ------------------
  |  |   32|  48.4k|    }
  ------------------
 2456|  48.4k|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2456:17): [True: 0, False: 48.4k]
  ------------------
 2457|      0|                return false;
 2458|      0|            }
 2459|  48.4k|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|  48.4k|    {                           \
  |  |   31|  48.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 10, False: 48.4k]
  |  |  ------------------
  |  |   32|  48.4k|    }
  ------------------
 2460|  48.4k|            *is_op_header = true;
 2461|  48.4k|            *data_exists = true;
 2462|   256k|        } else if (current_data_index == total_data - 1 &&
  ------------------
  |  Branch (2462:20): [True: 113k, False: 143k]
  ------------------
 2463|   256k|                   formatter_stack[formatter_index - 1] == NULL) {
  ------------------
  |  Branch (2463:20): [True: 10.4k, False: 103k]
  ------------------
 2464|  10.4k|            formatter_index++;  // we can back from the approve page
 2465|  10.4k|            *data_exists = false;
 2466|   246k|        } else {
 2467|   246k|            FORMATTER_CHECK(formatter_stack[formatter_index - 1](fdata));
  ------------------
  |  |   30|   246k|    {                           \
  |  |   31|   246k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1.45k, False: 245k]
  |  |  ------------------
  |  |   32|   246k|    }
  ------------------
 2468|   245k|            *data_exists = true;
 2469|   245k|        }
 2470|   317k|    } else {
 2471|      0|        if (current_data_index == 0 && formatter_index == 2) {
  ------------------
  |  Branch (2471:13): [True: 0, False: 0]
  |  Branch (2471:40): [True: 0, False: 0]
  ------------------
 2472|      0|            formatter_index = 0;
 2473|      0|            *data_exists = false;
 2474|      0|        } else if (current_data_index > 0 && formatter_index == 2) {
  ------------------
  |  Branch (2474:20): [True: 0, False: 0]
  |  Branch (2474:46): [True: 0, False: 0]
  ------------------
 2475|      0|            current_data_index -= 1;
 2476|      0|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2477|      0|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2477:17): [True: 0, False: 0]
  ------------------
 2478|      0|                return false;
 2479|      0|            }
 2480|      0|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2481|      0|            *data_exists = true;
 2482|      0|            if (current_data_index > 0) {
  ------------------
  |  Branch (2482:17): [True: 0, False: 0]
  ------------------
 2483|      0|                *is_op_header = true;
 2484|      0|            }
 2485|      0|        } else {
 2486|      0|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2487|      0|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2487:17): [True: 0, False: 0]
  ------------------
 2488|      0|                return false;
 2489|      0|            }
 2490|      0|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2491|      0|            *data_exists = true;
 2492|      0|            if (current_data_index > 0) {
  ------------------
  |  Branch (2492:17): [True: 0, False: 0]
  ------------------
 2493|      0|                *is_op_header = true;
 2494|      0|            }
 2495|      0|        }
 2496|      0|    }
 2497|       |
 2498|   315k|    return true;
 2499|   317k|}
formatter.c:get_data_count:
 2420|   317k|static uint8_t get_data_count(formatter_data_t *fdata) {
 2421|   317k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2421:9): [True: 86.2k, False: 231k]
  ------------------
 2422|  86.2k|        return 1;
 2423|  86.2k|    }
 2424|   231k|    uint8_t op_cnt = fdata->envelope->tx_details.tx.operations_count;
 2425|   231k|    return op_cnt + 1;
 2426|   317k|}
formatter.c:format:
 2398|  60.4k|static bool format(formatter_data_t *fdata, uint8_t data_index) {
 2399|  60.4k|    explicit_bzero(formatter_stack, sizeof(formatter_stack));
 2400|  60.4k|    formatter_index = 0;
 2401|  60.4k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2401:9): [True: 4.58k, False: 55.8k]
  ------------------
 2402|  4.58k|        return format_soroban_authorization(fdata);
 2403|  55.8k|    } else {
 2404|  55.8k|        if (data_index == 0) {
  ------------------
  |  Branch (2404:13): [True: 7.36k, False: 48.4k]
  ------------------
 2405|  7.36k|            return format_transaction_info(fdata);
 2406|  48.4k|        } else {
 2407|  48.4k|            uint8_t op_index = data_index - 1;
 2408|  48.4k|            if (!parse_transaction_operation(fdata->raw_data,
  ------------------
  |  Branch (2408:17): [True: 0, False: 48.4k]
  ------------------
 2409|  48.4k|                                             fdata->raw_data_len,
 2410|  48.4k|                                             fdata->envelope,
 2411|  48.4k|                                             op_index)) {
 2412|      0|                return false;
 2413|  48.4k|            };
 2414|  48.4k|            FORMATTER_CHECK(push_to_formatter_stack(&format_confirm_operation))
  ------------------
  |  |   30|  48.4k|    {                           \
  |  |   31|  48.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 48.4k]
  |  |  ------------------
  |  |   32|  48.4k|    }
  ------------------
 2415|  48.4k|        }
 2416|  55.8k|    }
 2417|  48.4k|    return true;
 2418|  60.4k|}
formatter.c:format_soroban_authorization:
 2389|  4.58k|static bool format_soroban_authorization(formatter_data_t *fdata) {
 2390|  4.58k|    if (fdata->envelope->network != 0) {
  ------------------
  |  Branch (2390:9): [True: 4.22k, False: 355]
  ------------------
 2391|  4.22k|        FORMATTER_CHECK(push_to_formatter_stack(&format_network))
  ------------------
  |  |   30|  4.22k|    {                           \
  |  |   31|  4.22k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.22k]
  |  |  ------------------
  |  |   32|  4.22k|    }
  ------------------
 2392|  4.22k|    } else {
 2393|    355|        FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_nonce))
  ------------------
  |  |   30|    355|    {                           \
  |  |   31|    355|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 355]
  |  |  ------------------
  |  |   32|    355|    }
  ------------------
 2394|    355|    }
 2395|  4.58k|    return true;
 2396|  4.58k|}
formatter.c:format_network:
 2369|  11.2k|static bool format_network(formatter_data_t *fdata) {
 2370|  11.2k|    STRLCPY(fdata->caption, "Network", fdata->caption_len);
  ------------------
  |  |   35|  11.2k|    {                                         \
  |  |   36|  11.2k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  11.2k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 11.2k]
  |  |  ------------------
  |  |   38|  11.2k|    }
  ------------------
 2371|  11.2k|    STRLCPY(fdata->value, (char *) PIC(NETWORK_NAMES[fdata->envelope->network]), fdata->value_len);
  ------------------
  |  |   35|  11.2k|    {                                         \
  |  |   36|  11.2k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  11.2k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 11.2k]
  |  |  ------------------
  |  |   38|  11.2k|    }
  ------------------
 2372|  11.2k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2372:9): [True: 4.22k, False: 6.98k]
  ------------------
 2373|  4.22k|        FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_nonce))
  ------------------
  |  |   30|  4.22k|    {                           \
  |  |   31|  4.22k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.22k]
  |  |  ------------------
  |  |   32|  4.22k|    }
  ------------------
 2374|  6.98k|    } else {
 2375|  6.98k|        return get_tx_details_formatter(fdata);
 2376|  6.98k|    }
 2377|  4.22k|    return true;
 2378|  11.2k|}
formatter.c:get_tx_details_formatter:
 2328|  7.36k|static bool get_tx_details_formatter(formatter_data_t *fdata) {
 2329|  7.36k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX_FEE_BUMP) {
  ------------------
  |  Branch (2329:9): [True: 86, False: 7.27k]
  ------------------
 2330|     86|        FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_details))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 2331|     86|    }
 2332|       |
 2333|  7.36k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX) {
  ------------------
  |  Branch (2333:9): [True: 7.27k, False: 86]
  ------------------
 2334|  7.27k|        if (fdata->envelope->tx_details.tx.memo.type != MEMO_NONE) {
  ------------------
  |  Branch (2334:13): [True: 519, False: 6.75k]
  ------------------
 2335|    519|            FORMATTER_CHECK(push_to_formatter_stack(&format_memo))
  ------------------
  |  |   30|    519|    {                           \
  |  |   31|    519|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 519]
  |  |  ------------------
  |  |   32|    519|    }
  ------------------
 2336|  6.75k|        } else {
 2337|  6.75k|            FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|  6.75k|    {                           \
  |  |   31|  6.75k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.75k]
  |  |  ------------------
  |  |   32|  6.75k|    }
  ------------------
 2338|  6.75k|        }
 2339|  7.27k|    }
 2340|       |
 2341|  7.36k|    return true;
 2342|  7.36k|}
formatter.c:format_fee_bump_transaction_details:
 2320|     86|static bool format_fee_bump_transaction_details(formatter_data_t *fdata) {
 2321|     86|    (void) fdata;
 2322|     86|    STRLCPY(fdata->caption, "Fee Bump", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 2323|     86|    STRLCPY(fdata->value, "Transaction Details", fdata->value_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 2324|     86|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_source))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 2325|     86|    return true;
 2326|     86|}
formatter.c:format_fee_bump_transaction_source:
 2297|     86|static bool format_fee_bump_transaction_source(formatter_data_t *fdata) {
 2298|     86|    STRLCPY(fdata->caption, "Fee Source", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 2299|     86|    if (fdata->envelope->type == ENVELOPE_TYPE_TX_FEE_BUMP &&
  ------------------
  |  Branch (2299:9): [True: 86, False: 0]
  ------------------
 2300|     86|        fdata->envelope->tx_details.fee_bump_tx.fee_source.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (2300:9): [True: 82, False: 4]
  ------------------
 2301|     86|        memcmp(fdata->envelope->tx_details.fee_bump_tx.fee_source.ed25519,
  ------------------
  |  Branch (2301:9): [True: 36, False: 46]
  ------------------
 2302|     82|               fdata->signing_key,
 2303|     82|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|     82|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 2304|     36|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.fee_bump_tx.fee_source,
  ------------------
  |  |   30|     36|    {                           \
  |  |   31|     36|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   32|     36|    }
  ------------------
 2305|     36|                                            fdata->value,
 2306|     36|                                            fdata->value_len,
 2307|     36|                                            6,
 2308|     36|                                            6))
 2309|     50|    } else {
 2310|     50|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.fee_bump_tx.fee_source,
  ------------------
  |  |   30|     50|    {                           \
  |  |   31|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   32|     50|    }
  ------------------
 2311|     50|                                            fdata->value,
 2312|     50|                                            fdata->value_len,
 2313|     50|                                            0,
 2314|     50|                                            0))
 2315|     50|    }
 2316|     86|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_fee))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 2317|     86|    return true;
 2318|     86|}
formatter.c:format_fee_bump_transaction_fee:
 2285|     86|static bool format_fee_bump_transaction_fee(formatter_data_t *fdata) {
 2286|     86|    STRLCPY(fdata->caption, "Max Fee", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 2287|     86|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
 2288|     86|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.fee_bump_tx.fee,
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 2289|     86|                                 &asset,
 2290|     86|                                 fdata->envelope->network,
 2291|     86|                                 fdata->value,
 2292|     86|                                 fdata->value_len))
 2293|     86|    FORMATTER_CHECK(push_to_formatter_stack(&format_transaction_details))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 2294|     86|    return true;
 2295|     86|}
formatter.c:format_transaction_details:
  285|     86|static bool format_transaction_details(formatter_data_t *fdata) {
  286|     86|    switch (fdata->envelope->type) {
  287|     86|        case ENVELOPE_TYPE_TX_FEE_BUMP:
  ------------------
  |  Branch (287:9): [True: 86, False: 0]
  ------------------
  288|     86|            STRLCPY(fdata->caption, "InnerTx", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
  289|     86|            break;
  290|      0|        case ENVELOPE_TYPE_TX:
  ------------------
  |  Branch (290:9): [True: 0, False: 86]
  ------------------
  291|      0|            STRLCPY(fdata->caption, "Transaction", fdata->caption_len);
  ------------------
  |  |   35|      0|    {                                         \
  |  |   36|      0|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      0|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   38|      0|    }
  ------------------
  292|      0|            break;
  293|      0|        default:
  ------------------
  |  Branch (293:9): [True: 0, False: 86]
  ------------------
  294|      0|            return false;
  295|     86|    }
  296|     86|    STRLCPY(fdata->value, "Details", fdata->value_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
  297|     86|    if (fdata->envelope->tx_details.tx.memo.type != MEMO_NONE) {
  ------------------
  |  Branch (297:9): [True: 43, False: 43]
  ------------------
  298|     43|        FORMATTER_CHECK(push_to_formatter_stack(&format_memo))
  ------------------
  |  |   30|     43|    {                           \
  |  |   31|     43|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   32|     43|    }
  ------------------
  299|     43|    } else {
  300|     43|        FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|     43|    {                           \
  |  |   31|     43|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   32|     43|    }
  ------------------
  301|     43|    }
  302|     86|    return true;
  303|     86|}
formatter.c:format_memo:
  242|    562|static bool format_memo(formatter_data_t *fdata) {
  243|    562|    memo_t *memo = &fdata->envelope->tx_details.tx.memo;
  244|    562|    switch (memo->type) {
  245|     26|        case MEMO_ID: {
  ------------------
  |  Branch (245:9): [True: 26, False: 536]
  ------------------
  246|     26|            STRLCPY(fdata->caption, "Memo ID", fdata->caption_len);
  ------------------
  |  |   35|     26|    {                                         \
  |  |   36|     26|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     26|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   38|     26|    }
  ------------------
  247|     26|            FORMATTER_CHECK(print_uint64_num(memo->id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     26|    {                           \
  |  |   31|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   32|     26|    }
  ------------------
  248|     26|            break;
  249|     26|        }
  250|    524|        case MEMO_TEXT: {
  ------------------
  |  Branch (250:9): [True: 524, False: 38]
  ------------------
  251|    524|            STRLCPY(fdata->caption, "Memo Text", fdata->caption_len);
  ------------------
  |  |   35|    524|    {                                         \
  |  |   36|    524|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    524|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 524]
  |  |  ------------------
  |  |   38|    524|    }
  ------------------
  252|    524|            if (is_printable_binary(memo->text.text, memo->text.text_size)) {
  ------------------
  |  Branch (252:17): [True: 395, False: 129]
  ------------------
  253|    395|                FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|    395|    {                           \
  |  |   31|    395|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 395]
  |  |  ------------------
  |  |   32|    395|    }
  ------------------
  254|    395|                                             fdata->value_len,
  255|    395|                                             memo->text.text,
  256|    395|                                             memo->text.text_size))
  257|    395|            } else {
  258|    129|                STRLCPY(fdata->value, "Base64: ", fdata->value_len)
  ------------------
  |  |   35|    129|    {                                         \
  |  |   36|    129|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    129|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 129]
  |  |  ------------------
  |  |   38|    129|    }
  ------------------
  259|    129|                FORMATTER_CHECK(base64_encode(memo->text.text,
  ------------------
  |  |   30|    129|    {                           \
  |  |   31|    129|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 129]
  |  |  ------------------
  |  |   32|    129|    }
  ------------------
  260|    129|                                              memo->text.text_size,
  261|    129|                                              fdata->value + strlen(fdata->value),
  262|    129|                                              fdata->value_len - strlen(fdata->value)))
  263|    129|            }
  264|    524|            break;
  265|    524|        }
  266|    524|        case MEMO_HASH: {
  ------------------
  |  Branch (266:9): [True: 6, False: 556]
  ------------------
  267|      6|            STRLCPY(fdata->caption, "Memo Hash", fdata->caption_len);
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
  268|      6|            FORMATTER_CHECK(
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
  269|      6|                print_binary(memo->hash, HASH_SIZE, fdata->value, fdata->value_len, 0, 0))
  270|      6|            break;
  271|      6|        }
  272|      6|        case MEMO_RETURN: {
  ------------------
  |  Branch (272:9): [True: 6, False: 556]
  ------------------
  273|      6|            STRLCPY(fdata->caption, "Memo Return", fdata->caption_len);
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
  274|      6|            FORMATTER_CHECK(
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
  275|      6|                print_binary(memo->hash, HASH_SIZE, fdata->value, fdata->value_len, 0, 0))
  276|      6|            break;
  277|      6|        }
  278|      6|        default:
  ------------------
  |  Branch (278:9): [True: 0, False: 562]
  ------------------
  279|      0|            return false;
  280|    562|    }
  281|    562|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|    562|    {                           \
  |  |   31|    562|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 562]
  |  |  ------------------
  |  |   32|    562|    }
  ------------------
  282|    562|    return true;
  283|    562|}
formatter.c:format_fee:
  226|  7.36k|static bool format_fee(formatter_data_t *fdata) {
  227|  7.36k|    STRLCPY(fdata->caption, "Max Fee", fdata->caption_len);
  ------------------
  |  |   35|  7.36k|    {                                         \
  |  |   36|  7.36k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  7.36k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7.36k]
  |  |  ------------------
  |  |   38|  7.36k|    }
  ------------------
  228|  7.36k|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
  229|  7.36k|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.fee,
  ------------------
  |  |   30|  7.36k|    {                           \
  |  |   31|  7.36k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.36k]
  |  |  ------------------
  |  |   32|  7.36k|    }
  ------------------
  230|  7.36k|                                 &asset,
  231|  7.36k|                                 fdata->envelope->network,
  232|  7.36k|                                 fdata->value,
  233|  7.36k|                                 fdata->value_len))
  234|  7.36k|    if (fdata->display_sequence) {
  ------------------
  |  Branch (234:9): [True: 7.36k, False: 0]
  ------------------
  235|  7.36k|        FORMATTER_CHECK(push_to_formatter_stack(&format_sequence))
  ------------------
  |  |   30|  7.36k|    {                           \
  |  |   31|  7.36k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.36k]
  |  |  ------------------
  |  |   32|  7.36k|    }
  ------------------
  236|  7.36k|    } else {
  237|      0|        FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds))
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
  238|      0|    }
  239|  7.36k|    return true;
  240|  7.36k|}
formatter.c:format_sequence:
  217|  7.36k|static bool format_sequence(formatter_data_t *fdata) {
  218|  7.36k|    STRLCPY(fdata->caption, "Sequence Num", fdata->caption_len);
  ------------------
  |  |   35|  7.36k|    {                                         \
  |  |   36|  7.36k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  7.36k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7.36k]
  |  |  ------------------
  |  |   38|  7.36k|    }
  ------------------
  219|  7.36k|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.sequence_number,
  ------------------
  |  |   30|  7.36k|    {                           \
  |  |   31|  7.36k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.36k]
  |  |  ------------------
  |  |   32|  7.36k|    }
  ------------------
  220|  7.36k|                                     fdata->value,
  221|  7.36k|                                     fdata->value_len))
  222|  7.36k|    FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds))
  ------------------
  |  |   30|  7.36k|    {                           \
  |  |   31|  7.36k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.36k]
  |  |  ------------------
  |  |   32|  7.36k|    }
  ------------------
  223|  7.36k|    return true;
  224|  7.36k|}
formatter.c:format_time_bounds:
  204|  7.36k|static bool format_time_bounds(formatter_data_t *fdata) {
  205|  7.36k|    if (!fdata->envelope->tx_details.tx.cond.time_bounds_present ||
  ------------------
  |  Branch (205:9): [True: 6.79k, False: 570]
  ------------------
  206|  7.36k|        (fdata->envelope->tx_details.tx.cond.time_bounds.min_time == 0 &&
  ------------------
  |  Branch (206:10): [True: 466, False: 104]
  ------------------
  207|  6.93k|         fdata->envelope->tx_details.tx.cond.time_bounds.max_time == 0)) {
  ------------------
  |  Branch (207:10): [True: 139, False: 327]
  ------------------
  208|  6.93k|        return format_ledger_bounds(fdata);
  209|  6.93k|    } else if (fdata->envelope->tx_details.tx.cond.time_bounds.min_time != 0) {
  ------------------
  |  Branch (209:16): [True: 104, False: 327]
  ------------------
  210|    104|        return format_time_bounds_min_time(fdata);
  211|    327|    } else {
  212|    327|        return format_time_bounds_max_time(fdata);
  213|    327|    }
  214|      0|    return true;
  215|  7.36k|}
formatter.c:format_ledger_bounds:
  168|  7.32k|static bool format_ledger_bounds(formatter_data_t *fdata) {
  169|  7.32k|    if (!fdata->envelope->tx_details.tx.cond.ledger_bounds_present ||
  ------------------
  |  Branch (169:9): [True: 7.27k, False: 49]
  ------------------
  170|  7.32k|        (fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger == 0 &&
  ------------------
  |  Branch (170:10): [True: 20, False: 29]
  ------------------
  171|  7.28k|         fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger == 0)) {
  ------------------
  |  Branch (171:10): [True: 12, False: 8]
  ------------------
  172|  7.28k|        return format_min_seq_num_prepare(fdata);
  173|  7.28k|    } else if (fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger != 0) {
  ------------------
  |  Branch (173:16): [True: 29, False: 8]
  ------------------
  174|     29|        return format_ledger_bounds_min_ledger(fdata);
  175|     29|    } else {
  176|      8|        return format_ledger_bounds_max_ledger(fdata);
  177|      8|    }
  178|      0|    return true;
  179|  7.32k|}
formatter.c:format_min_seq_num_prepare:
  137|  7.32k|static bool format_min_seq_num_prepare(formatter_data_t *fdata) {
  138|  7.32k|    if (!fdata->envelope->tx_details.tx.cond.min_seq_num_present ||
  ------------------
  |  Branch (138:9): [True: 7.29k, False: 27]
  ------------------
  139|  7.32k|        fdata->envelope->tx_details.tx.cond.min_seq_num == 0) {
  ------------------
  |  Branch (139:9): [True: 20, False: 7]
  ------------------
  140|  7.31k|        return format_min_seq_age_prepare(fdata);
  141|  7.31k|    } else {
  142|      7|        return format_min_seq_num(fdata);
  143|      7|    }
  144|  7.32k|}
formatter.c:format_min_seq_age_prepare:
  119|  7.32k|static bool format_min_seq_age_prepare(formatter_data_t *fdata) {
  120|  7.32k|    if (fdata->envelope->tx_details.tx.cond.min_seq_age == 0) {
  ------------------
  |  Branch (120:9): [True: 7.28k, False: 35]
  ------------------
  121|  7.28k|        format_min_seq_ledger_gap_prepare(fdata);
  122|  7.28k|    } else {
  123|     35|        format_min_seq_age(fdata);
  124|     35|    }
  125|  7.32k|    return true;
  126|  7.32k|}
formatter.c:format_min_seq_ledger_gap_prepare:
  102|  7.32k|static bool format_min_seq_ledger_gap_prepare(formatter_data_t *fdata) {
  103|  7.32k|    if (fdata->envelope->tx_details.tx.cond.min_seq_ledger_gap == 0) {
  ------------------
  |  Branch (103:9): [True: 7.30k, False: 14]
  ------------------
  104|  7.30k|        return format_transaction_source(fdata);
  105|  7.30k|    } else {
  106|     14|        return format_min_seq_ledger_gap(fdata);
  107|     14|    }
  108|  7.32k|}
formatter.c:format_transaction_source:
   70|  7.32k|static bool format_transaction_source(formatter_data_t *fdata) {
   71|  7.32k|    STRLCPY(fdata->caption, "Tx Source", fdata->caption_len);
  ------------------
  |  |   35|  7.32k|    {                                         \
  |  |   36|  7.32k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  7.32k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7.32k]
  |  |  ------------------
  |  |   38|  7.32k|    }
  ------------------
   72|  7.32k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (72:9): [True: 7.23k, False: 86]
  ------------------
   73|  7.32k|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (73:9): [True: 7.14k, False: 94]
  ------------------
   74|  7.32k|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (74:9): [True: 700, False: 6.44k]
  ------------------
   75|  7.14k|               fdata->signing_key,
   76|  7.14k|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|  7.14k|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
   77|    700|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.source_account,
  ------------------
  |  |   30|    700|    {                           \
  |  |   31|    700|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 700]
  |  |  ------------------
  |  |   32|    700|    }
  ------------------
   78|    700|                                            fdata->value,
   79|    700|                                            fdata->value_len,
   80|    700|                                            6,
   81|    700|                                            6))
   82|  6.62k|    } else {
   83|  6.62k|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.source_account,
  ------------------
  |  |   30|  6.62k|    {                           \
  |  |   31|  6.62k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.62k]
  |  |  ------------------
  |  |   32|  6.62k|    }
  ------------------
   84|  6.62k|                                            fdata->value,
   85|  6.62k|                                            fdata->value_len,
   86|  6.62k|                                            0,
   87|  6.62k|                                            0))
   88|  6.62k|    }
   89|  7.32k|    FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  7.32k|    {                           \
  |  |   31|  7.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.32k]
  |  |  ------------------
  |  |   32|  7.32k|    }
  ------------------
   90|  7.32k|    return true;
   91|  7.32k|}
formatter.c:format_min_seq_ledger_gap:
   93|     14|static bool format_min_seq_ledger_gap(formatter_data_t *fdata) {
   94|     14|    STRLCPY(fdata->caption, "Min Seq Ledger Gap", fdata->caption_len);
  ------------------
  |  |   35|     14|    {                                         \
  |  |   36|     14|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     14|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   38|     14|    }
  ------------------
   95|     14|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_ledger_gap,
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
   96|     14|                                     fdata->value,
   97|     14|                                     fdata->value_len))
   98|     14|    FORMATTER_CHECK(push_to_formatter_stack(&format_transaction_source))
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
   99|     14|    return true;
  100|     14|}
formatter.c:format_min_seq_age:
  110|     35|static bool format_min_seq_age(formatter_data_t *fdata) {
  111|     35|    STRLCPY(fdata->caption, "Min Seq Age", fdata->caption_len);
  ------------------
  |  |   35|     35|    {                                         \
  |  |   36|     35|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     35|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 35]
  |  |  ------------------
  |  |   38|     35|    }
  ------------------
  112|     35|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_age,
  ------------------
  |  |   30|     35|    {                           \
  |  |   31|     35|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 35]
  |  |  ------------------
  |  |   32|     35|    }
  ------------------
  113|     35|                                     fdata->value,
  114|     35|                                     fdata->value_len))
  115|     35|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_ledger_gap_prepare))
  ------------------
  |  |   30|     35|    {                           \
  |  |   31|     35|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 35]
  |  |  ------------------
  |  |   32|     35|    }
  ------------------
  116|     35|    return true;
  117|     35|}
formatter.c:format_min_seq_num:
  128|      7|static bool format_min_seq_num(formatter_data_t *fdata) {
  129|      7|    STRLCPY(fdata->caption, "Min Seq Num", fdata->caption_len);
  ------------------
  |  |   35|      7|    {                                         \
  |  |   36|      7|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      7|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   38|      7|    }
  ------------------
  130|      7|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_num,
  ------------------
  |  |   30|      7|    {                           \
  |  |   31|      7|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   32|      7|    }
  ------------------
  131|      7|                                     fdata->value,
  132|      7|                                     fdata->value_len))
  133|      7|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_age_prepare))
  ------------------
  |  |   30|      7|    {                           \
  |  |   31|      7|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   32|      7|    }
  ------------------
  134|      7|    return true;
  135|      7|}
formatter.c:format_ledger_bounds_min_ledger:
  155|     29|static bool format_ledger_bounds_min_ledger(formatter_data_t *fdata) {
  156|     29|    STRLCPY(fdata->caption, "Ledger Bounds Min", fdata->caption_len);
  ------------------
  |  |   35|     29|    {                                         \
  |  |   36|     29|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     29|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   38|     29|    }
  ------------------
  157|     29|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger,
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  158|     29|                                     fdata->value,
  159|     29|                                     fdata->value_len))
  160|     29|    if (fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger != 0) {
  ------------------
  |  Branch (160:9): [True: 17, False: 12]
  ------------------
  161|     17|        FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds_max_ledger))
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
  162|     17|    } else {
  163|     12|        FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_num_prepare))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  164|     12|    }
  165|     29|    return true;
  166|     29|}
formatter.c:format_ledger_bounds_max_ledger:
  146|     25|static bool format_ledger_bounds_max_ledger(formatter_data_t *fdata) {
  147|     25|    STRLCPY(fdata->caption, "Ledger Bounds Max", fdata->caption_len);
  ------------------
  |  |   35|     25|    {                                         \
  |  |   36|     25|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     25|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   38|     25|    }
  ------------------
  148|     25|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger,
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  149|     25|                                     fdata->value,
  150|     25|                                     fdata->value_len))
  151|     25|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_num_prepare))
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  152|     25|    return true;
  153|     25|}
formatter.c:format_time_bounds_min_time:
  190|    104|static bool format_time_bounds_min_time(formatter_data_t *fdata) {
  191|    104|    STRLCPY(fdata->caption, "Valid After (UTC)", fdata->caption_len);
  ------------------
  |  |   35|    104|    {                                         \
  |  |   36|    104|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    104|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 104]
  |  |  ------------------
  |  |   38|    104|    }
  ------------------
  192|    104|    FORMATTER_CHECK(print_time(fdata->envelope->tx_details.tx.cond.time_bounds.min_time,
  ------------------
  |  |   30|    104|    {                           \
  |  |   31|    104|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 29, False: 75]
  |  |  ------------------
  |  |   32|    104|    }
  ------------------
  193|    104|                               fdata->value,
  194|    104|                               fdata->value_len))
  195|       |
  196|     75|    if (fdata->envelope->tx_details.tx.cond.time_bounds.max_time != 0) {
  ------------------
  |  Branch (196:9): [True: 63, False: 12]
  ------------------
  197|     63|        FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds_max_time))
  ------------------
  |  |   30|     63|    {                           \
  |  |   31|     63|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 63]
  |  |  ------------------
  |  |   32|     63|    }
  ------------------
  198|     63|    } else {
  199|     12|        FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  200|     12|    }
  201|     75|    return true;
  202|     75|}
formatter.c:format_time_bounds_max_time:
  181|    390|static bool format_time_bounds_max_time(formatter_data_t *fdata) {
  182|    390|    STRLCPY(fdata->caption, "Valid Before (UTC)", fdata->caption_len);
  ------------------
  |  |   35|    390|    {                                         \
  |  |   36|    390|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    390|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 390]
  |  |  ------------------
  |  |   38|    390|    }
  ------------------
  183|    390|    FORMATTER_CHECK(print_time(fdata->envelope->tx_details.tx.cond.time_bounds.max_time,
  ------------------
  |  |   30|    390|    {                           \
  |  |   31|    390|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 14, False: 376]
  |  |  ------------------
  |  |   32|    390|    }
  ------------------
  184|    390|                               fdata->value,
  185|    390|                               fdata->value_len))
  186|    376|    FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds))
  ------------------
  |  |   30|    376|    {                           \
  |  |   31|    376|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 376]
  |  |  ------------------
  |  |   32|    376|    }
  ------------------
  187|    376|    return true;
  188|    376|}
formatter.c:format_soroban_authorization_nonce:
 2354|  4.58k|static bool format_soroban_authorization_nonce(formatter_data_t *fdata) {
 2355|       |    // avoid the root invoke_contract_args be overwritten by the sub-invocation
 2356|  4.58k|    if (!parse_soroban_authorization_envelope(fdata->raw_data,
  ------------------
  |  Branch (2356:9): [True: 0, False: 4.58k]
  ------------------
 2357|  4.58k|                                              fdata->raw_data_len,
 2358|  4.58k|                                              fdata->envelope)) {
 2359|      0|        return false;
 2360|  4.58k|    };
 2361|  4.58k|    STRLCPY(fdata->caption, "Nonce", fdata->caption_len);
  ------------------
  |  |   35|  4.58k|    {                                         \
  |  |   36|  4.58k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  4.58k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4.58k]
  |  |  ------------------
  |  |   38|  4.58k|    }
  ------------------
 2362|  4.58k|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->soroban_authorization.nonce,
  ------------------
  |  |   30|  4.58k|    {                           \
  |  |   31|  4.58k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.58k]
  |  |  ------------------
  |  |   32|  4.58k|    }
  ------------------
 2363|  4.58k|                                     fdata->value,
 2364|  4.58k|                                     fdata->value_len))
 2365|  4.58k|    FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_sig_exp))
  ------------------
  |  |   30|  4.58k|    {                           \
  |  |   31|  4.58k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.58k]
  |  |  ------------------
  |  |   32|  4.58k|    }
  ------------------
 2366|  4.58k|    return true;
 2367|  4.58k|}
formatter.c:format_soroban_authorization_sig_exp:
 2344|  4.58k|static bool format_soroban_authorization_sig_exp(formatter_data_t *fdata) {
 2345|  4.58k|    STRLCPY(fdata->caption, "Sig Exp Ledger", fdata->caption_len);
  ------------------
  |  |   35|  4.58k|    {                                         \
  |  |   36|  4.58k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  4.58k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4.58k]
  |  |  ------------------
  |  |   38|  4.58k|    }
  ------------------
 2346|  4.58k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  4.58k|    {                           \
  |  |   31|  4.58k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.58k]
  |  |  ------------------
  |  |   32|  4.58k|    }
  ------------------
 2347|  4.58k|        print_uint64_num(fdata->envelope->soroban_authorization.signature_expiration_ledger,
 2348|  4.58k|                         fdata->value,
 2349|  4.58k|                         fdata->value_len))
 2350|  4.58k|    FORMATTER_CHECK(push_to_formatter_stack(&format_auth_function));
  ------------------
  |  |   30|  4.58k|    {                           \
  |  |   31|  4.58k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.58k]
  |  |  ------------------
  |  |   32|  4.58k|    }
  ------------------
 2351|  4.58k|    return true;
 2352|  4.58k|}
formatter.c:format_auth_function:
 2203|  4.58k|static bool format_auth_function(formatter_data_t *fdata) {
 2204|  4.58k|    switch (fdata->envelope->soroban_authorization.auth_function_type) {
 2205|  4.47k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
  ------------------
  |  Branch (2205:9): [True: 4.47k, False: 108]
  ------------------
 2206|  4.47k|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|  4.47k|    {                                         \
  |  |   36|  4.47k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  4.47k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4.47k]
  |  |  ------------------
  |  |   38|  4.47k|    }
  ------------------
 2207|  4.47k|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|  4.47k|    {                                         \
  |  |   36|  4.47k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  4.47k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4.47k]
  |  |  ------------------
  |  |   38|  4.47k|    }
  ------------------
 2208|  4.47k|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_contract_id));
  ------------------
  |  |   30|  4.47k|    {                           \
  |  |   31|  4.47k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.47k]
  |  |  ------------------
  |  |   32|  4.47k|    }
  ------------------
 2209|  4.47k|            break;
 2210|    108|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (2210:9): [True: 108, False: 4.47k]
  ------------------
 2211|    108|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    108|    {                                         \
  |  |   36|    108|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    108|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 108]
  |  |  ------------------
  |  |   38|    108|    }
  ------------------
 2212|    108|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|    108|    {                                         \
  |  |   36|    108|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    108|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 108]
  |  |  ------------------
  |  |   38|    108|    }
  ------------------
 2213|       |            // we dont need to care the sub-invocation here
 2214|    108|            FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|    108|    {                           \
  |  |   31|    108|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 108]
  |  |  ------------------
  |  |   32|    108|    }
  ------------------
 2215|    108|            break;
 2216|    108|        default:
  ------------------
  |  Branch (2216:9): [True: 0, False: 4.58k]
  ------------------
 2217|      0|            return false;
 2218|  4.58k|    }
 2219|  4.58k|    return true;
 2220|  4.58k|}
formatter.c:format_invoke_host_function_contract_id:
 2156|  5.32k|static bool format_invoke_host_function_contract_id(formatter_data_t *fdata) {
 2157|  5.32k|    sc_address_t *address =
 2158|  5.32k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2158:9): [True: 4.47k, False: 856]
  ------------------
 2159|  5.32k|            ? &fdata->envelope->soroban_authorization.invoke_contract_args.address
 2160|  5.32k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2161|    856|                   .invoke_contract_args.address;
 2162|       |
 2163|  5.32k|    STRLCPY(fdata->caption, "Contract ID", fdata->caption_len);
  ------------------
  |  |   35|  5.32k|    {                                         \
  |  |   36|  5.32k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  5.32k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.32k]
  |  |  ------------------
  |  |   38|  5.32k|    }
  ------------------
 2164|       |
 2165|  5.32k|    FORMATTER_CHECK(print_sc_address(address, fdata->value, fdata->value_len, 0, 0))
  ------------------
  |  |   30|  5.32k|    {                           \
  |  |   31|  5.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.32k]
  |  |  ------------------
  |  |   32|  5.32k|    }
  ------------------
 2166|  5.32k|    push_to_formatter_stack(&format_invoke_host_function_func_name);
 2167|  5.32k|    return true;
 2168|  5.32k|}
formatter.c:format_invoke_host_function_func_name:
 2124|  5.32k|static bool format_invoke_host_function_func_name(formatter_data_t *fdata) {
 2125|  5.32k|    invoke_contract_args_t invoke_contract_args;
 2126|  5.32k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2126:9): [True: 4.47k, False: 856]
  ------------------
 2127|  4.47k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2128|  4.47k|    } else {
 2129|    856|        invoke_contract_args =
 2130|    856|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2131|    856|    }
 2132|  5.32k|    STRLCPY(fdata->caption, "Function", fdata->caption_len);
  ------------------
  |  |   35|  5.32k|    {                                         \
  |  |   36|  5.32k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  5.32k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.32k]
  |  |  ------------------
  |  |   38|  5.32k|    }
  ------------------
 2133|  5.32k|    FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|  5.32k|    {                           \
  |  |   31|  5.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.32k]
  |  |  ------------------
  |  |   32|  5.32k|    }
  ------------------
 2134|  5.32k|                                 fdata->value_len,
 2135|  5.32k|                                 invoke_contract_args.function.name,
 2136|  5.32k|                                 invoke_contract_args.function.name_size))
 2137|       |
 2138|  5.32k|    uint8_t data_count = should_move_control_to_plugin(fdata);
 2139|  5.32k|    if (data_count == 0) {
  ------------------
  |  Branch (2139:9): [True: 4.99k, False: 335]
  ------------------
 2140|       |        // we should not move control to plugin
 2141|  4.99k|        if (invoke_contract_args.parameters_length == 0) {
  ------------------
  |  Branch (2141:13): [True: 1.82k, False: 3.16k]
  ------------------
 2142|  1.82k|            return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2143|  3.16k|        } else {
 2144|  3.16k|            parameters_index = 0;
 2145|  3.16k|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args))
  ------------------
  |  |   30|  3.16k|    {                           \
  |  |   31|  3.16k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.16k]
  |  |  ------------------
  |  |   32|  3.16k|    }
  ------------------
 2146|  3.16k|        }
 2147|  4.99k|    } else {
 2148|    335|        PRINTF("we should move control to plugin\n");
 2149|    335|        parameters_index = 0;
 2150|    335|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args_with_plugin))
  ------------------
  |  |   30|    335|    {                           \
  |  |   31|    335|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 335]
  |  |  ------------------
  |  |   32|    335|    }
  ------------------
 2151|    335|    }
 2152|       |
 2153|  3.50k|    return true;
 2154|  5.32k|}
formatter.c:should_move_control_to_plugin:
 1662|  12.3k|static bool should_move_control_to_plugin(formatter_data_t *fdata) {
 1663|  12.3k|    if (fdata->plugin_check_presence == NULL || fdata->plugin_init_contract == NULL ||
  ------------------
  |  Branch (1663:9): [True: 1.51k, False: 10.7k]
  |  Branch (1663:49): [True: 0, False: 10.7k]
  ------------------
 1664|  12.3k|        fdata->plugin_query_data_pair_count == NULL || fdata->plugin_query_data_pair == NULL) {
  ------------------
  |  Branch (1664:9): [True: 0, False: 10.7k]
  |  Branch (1664:56): [True: 0, False: 10.7k]
  ------------------
 1665|  1.51k|        return false;
 1666|  1.51k|    }
 1667|       |
 1668|  10.7k|    invoke_contract_args_t invoke_contract_args;
 1669|  10.7k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1669:9): [True: 10.7k, False: 0]
  ------------------
 1670|  10.7k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1671|  10.7k|    } else {
 1672|      0|        invoke_contract_args =
 1673|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1674|      0|    }
 1675|       |
 1676|  10.7k|    const uint8_t *contract_address = invoke_contract_args.address.address;
 1677|       |
 1678|       |    // check if plugin exists
 1679|  10.7k|    if (!fdata->plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (1679:9): [True: 6.89k, False: 3.90k]
  ------------------
 1680|  6.89k|        return false;
 1681|  6.89k|    }
 1682|       |
 1683|       |    // init plugin
 1684|  3.90k|    if (fdata->plugin_init_contract(contract_address) != STELLAR_PLUGIN_RESULT_OK) {
  ------------------
  |  Branch (1684:9): [True: 0, False: 3.90k]
  ------------------
 1685|      0|        return false;
 1686|      0|    }
 1687|       |
 1688|       |    // get data count
 1689|  3.90k|    if (fdata->plugin_query_data_pair_count(contract_address, &plugin_data_pair_count) !=
  ------------------
  |  Branch (1689:9): [True: 0, False: 3.90k]
  ------------------
 1690|  3.90k|        STELLAR_PLUGIN_RESULT_OK) {
 1691|      0|        return false;
 1692|      0|    }
 1693|       |
 1694|  3.90k|    return plugin_data_pair_count != 0;
 1695|  3.90k|}
formatter.c:format_operation_source_prepare_for_invoke_host_function_op:
 2025|  4.20k|static bool format_operation_source_prepare_for_invoke_host_function_op(formatter_data_t *fdata) {
 2026|  4.20k|    if (fdata->envelope->type != ENVELOPE_TYPE_SOROBAN_AUTHORIZATION &&
  ------------------
  |  Branch (2026:9): [True: 712, False: 3.49k]
  ------------------
 2027|  4.20k|        fdata->envelope->tx_details.tx.op_details.source_account_present) {
  ------------------
  |  Branch (2027:9): [True: 279, False: 433]
  ------------------
 2028|       |        // If the source exists, when the user clicks the next button,
 2029|       |        // it will jump to the page showing the source
 2030|    279|        FORMATTER_CHECK(
  ------------------
  |  |   30|    279|    {                           \
  |  |   31|    279|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 279]
  |  |  ------------------
  |  |   32|    279|    }
  ------------------
 2031|    279|            push_to_formatter_stack(&format_operation_source_for_invoke_host_function_op))
 2032|  3.92k|    } else {
 2033|  3.92k|        uint8_t sub_invocations_count =
 2034|  3.92k|            fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2034:13): [True: 3.49k, False: 433]
  ------------------
 2035|  3.92k|                ? fdata->envelope->soroban_authorization.sub_invocations_count
 2036|  3.92k|                : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2037|    433|                      .sub_invocations_count;
 2038|  3.92k|        if (sub_invocations_count > 0) {
  ------------------
  |  Branch (2038:13): [True: 1.17k, False: 2.75k]
  ------------------
 2039|  1.17k|            formatter_index = 0;
 2040|  1.17k|            FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_start))
  ------------------
  |  |   30|  1.17k|    {                           \
  |  |   31|  1.17k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.17k]
  |  |  ------------------
  |  |   32|  1.17k|    }
  ------------------
 2041|  2.75k|        } else {
 2042|  2.75k|            FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  2.75k|    {                           \
  |  |   31|  2.75k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 35, False: 2.72k]
  |  |  ------------------
  |  |   32|  2.75k|    }
  ------------------
 2043|  2.75k|        }
 2044|  3.92k|    }
 2045|  4.17k|    return true;
 2046|  4.20k|}
formatter.c:format_operation_source_for_invoke_host_function_op:
 1986|    279|static bool format_operation_source_for_invoke_host_function_op(formatter_data_t *fdata) {
 1987|    279|    STRLCPY(fdata->caption, "Op Source", fdata->caption_len);
  ------------------
  |  |   35|    279|    {                                         \
  |  |   36|    279|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    279|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 279]
  |  |  ------------------
  |  |   38|    279|    }
  ------------------
 1988|    279|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (1988:9): [True: 269, False: 10]
  ------------------
 1989|    279|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (1989:9): [True: 261, False: 8]
  ------------------
 1990|    279|        fdata->envelope->tx_details.tx.op_details.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (1990:9): [True: 258, False: 3]
  ------------------
 1991|    279|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (1991:9): [True: 176, False: 82]
  ------------------
 1992|    258|               fdata->signing_key,
 1993|    258|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0 &&
  ------------------
  |  |   18|    258|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 1994|    279|        memcmp(fdata->envelope->tx_details.tx.op_details.source_account.ed25519,
  ------------------
  |  Branch (1994:9): [True: 132, False: 44]
  ------------------
 1995|    176|               fdata->signing_key,
 1996|    176|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|    176|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 1997|    132|        FORMATTER_CHECK(
  ------------------
  |  |   30|    132|    {                           \
  |  |   31|    132|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 132]
  |  |  ------------------
  |  |   32|    132|    }
  ------------------
 1998|    132|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
 1999|    132|                                fdata->value,
 2000|    132|                                fdata->value_len,
 2001|    132|                                6,
 2002|    132|                                6))
 2003|    147|    } else {
 2004|    147|        FORMATTER_CHECK(
  ------------------
  |  |   30|    147|    {                           \
  |  |   31|    147|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 147]
  |  |  ------------------
  |  |   32|    147|    }
  ------------------
 2005|    147|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
 2006|    147|                                fdata->value,
 2007|    147|                                fdata->value_len,
 2008|    147|                                0,
 2009|    147|                                0))
 2010|    147|    }
 2011|    279|    uint8_t sub_invocations_count =
 2012|    279|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2012:9): [True: 0, False: 279]
  ------------------
 2013|    279|            ? fdata->envelope->soroban_authorization.sub_invocations_count
 2014|    279|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2015|    279|                  .sub_invocations_count;
 2016|    279|    if (sub_invocations_count > 0) {
  ------------------
  |  Branch (2016:9): [True: 147, False: 132]
  ------------------
 2017|    147|        formatter_index = 0;
 2018|    147|        FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_start))
  ------------------
  |  |   30|    147|    {                           \
  |  |   31|    147|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 147]
  |  |  ------------------
  |  |   32|    147|    }
  ------------------
 2019|    147|    } else {
 2020|    132|        FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|    132|    {                           \
  |  |   31|    132|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 132]
  |  |  ------------------
  |  |   32|    132|    }
  ------------------
 2021|    132|    }
 2022|    279|    return true;
 2023|    279|}
formatter.c:format_sub_invocation_start:
 1939|  7.22k|static bool format_sub_invocation_start(formatter_data_t *fdata) {
 1940|  7.22k|    uint8_t sub_invocation_index = 0;
 1941|  7.22k|    uint8_t sub_invocations_count = 0;
 1942|  7.22k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1942:9): [True: 6.51k, False: 712]
  ------------------
 1943|  6.51k|        sub_invocation_index = fdata->envelope->soroban_authorization.sub_invocation_index;
 1944|  6.51k|        sub_invocations_count = fdata->envelope->soroban_authorization.sub_invocations_count;
 1945|  6.51k|    } else {
 1946|    712|        sub_invocation_index =
 1947|    712|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocation_index;
 1948|    712|        sub_invocations_count =
 1949|    712|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocations_count;
 1950|    712|    }
 1951|       |
 1952|  7.22k|    STRLCPY(fdata->caption, "Nested Authorization", fdata->caption_len);
  ------------------
  |  |   35|  7.22k|    {                                         \
  |  |   36|  7.22k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  7.22k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7.22k]
  |  |  ------------------
  |  |   38|  7.22k|    }
  ------------------
 1953|       |
 1954|  7.22k|    FORMATTER_CHECK(print_uint64_num(sub_invocation_index + 1, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  7.22k|    {                           \
  |  |   31|  7.22k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.22k]
  |  |  ------------------
  |  |   32|  7.22k|    }
  ------------------
 1955|  7.22k|    STRLCAT(fdata->value, " of ", fdata->value_len)
  ------------------
  |  |   41|  7.22k|    {                                         \
  |  |   42|  7.22k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  7.22k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 7.22k]
  |  |  ------------------
  |  |   44|  7.22k|    }
  ------------------
 1956|  7.22k|    FORMATTER_CHECK(print_uint64_num(sub_invocations_count,
  ------------------
  |  |   30|  7.22k|    {                           \
  |  |   31|  7.22k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.22k]
  |  |  ------------------
  |  |   32|  7.22k|    }
  ------------------
 1957|  7.22k|                                     fdata->value + strlen(fdata->value),
 1958|  7.22k|                                     fdata->value_len - strlen(fdata->value)))
 1959|       |
 1960|  7.22k|    buffer_t buffer = {
 1961|  7.22k|        .ptr = fdata->raw_data,
 1962|  7.22k|        .size = fdata->raw_data_len,
 1963|  7.22k|        .offset = fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1963:19): [True: 6.51k, False: 712]
  ------------------
 1964|  7.22k|                      ? fdata->envelope->soroban_authorization
 1965|  6.51k|                            .sub_invocation_positions[sub_invocation_index]
 1966|  7.22k|                      : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1967|    712|                            .sub_invocation_positions[sub_invocation_index]};
 1968|       |
 1969|       |    // here we parse the sub-invocation, and store it in the invoke_contract_args
 1970|  7.22k|    FORMATTER_CHECK(parse_auth_function(
  ------------------
  |  |   30|  7.22k|    {                           \
  |  |   31|  28.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.22k]
  |  |  |  Branch (31:15): [True: 6.51k, False: 712]
  |  |  |  Branch (31:15): [True: 6.51k, False: 712]
  |  |  ------------------
  |  |   32|  7.22k|    }
  ------------------
 1971|  7.22k|        &buffer,
 1972|  7.22k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
 1973|  7.22k|            ? &fdata->envelope->soroban_authorization.auth_function_type
 1974|  7.22k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.auth_function_type,
 1975|  7.22k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
 1976|  7.22k|            ? &fdata->envelope->soroban_authorization.invoke_contract_args
 1977|  7.22k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1978|  7.22k|                   .invoke_contract_args))
 1979|       |
 1980|  7.22k|    FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_auth_function))
  ------------------
  |  |   30|  7.22k|    {                           \
  |  |   31|  7.22k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.22k]
  |  |  ------------------
  |  |   32|  7.22k|    }
  ------------------
 1981|  7.22k|    return true;
 1982|  7.22k|}
formatter.c:format_sub_invocation_auth_function:
 1915|  7.22k|static bool format_sub_invocation_auth_function(formatter_data_t *fdata) {
 1916|  7.22k|    soroban_authorization_function_type_t auth_function_type =
 1917|  7.22k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1917:9): [True: 6.51k, False: 712]
  ------------------
 1918|  7.22k|            ? fdata->envelope->soroban_authorization.auth_function_type
 1919|  7.22k|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.auth_function_type;
 1920|  7.22k|    PRINTF("auth_function_type: %d\n", auth_function_type);
 1921|  7.22k|    switch (auth_function_type) {
 1922|  6.98k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
  ------------------
  |  Branch (1922:9): [True: 6.98k, False: 248]
  ------------------
 1923|  6.98k|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|  6.98k|    {                                         \
  |  |   36|  6.98k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.98k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.98k]
  |  |  ------------------
  |  |   38|  6.98k|    }
  ------------------
 1924|  6.98k|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|  6.98k|    {                                         \
  |  |   36|  6.98k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.98k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.98k]
  |  |  ------------------
  |  |   38|  6.98k|    }
  ------------------
 1925|  6.98k|            FORMATTER_CHECK(
  ------------------
  |  |   30|  6.98k|    {                           \
  |  |   31|  6.98k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.98k]
  |  |  ------------------
  |  |   32|  6.98k|    }
  ------------------
 1926|  6.98k|                push_to_formatter_stack(&format_sub_invocation_invoke_host_function_contract_id));
 1927|  6.98k|            break;
 1928|    248|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1928:9): [True: 248, False: 6.98k]
  ------------------
 1929|    248|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    248|    {                                         \
  |  |   36|    248|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    248|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 248]
  |  |  ------------------
  |  |   38|    248|    }
  ------------------
 1930|    248|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|    248|    {                                         \
  |  |   36|    248|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    248|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 248]
  |  |  ------------------
  |  |   38|    248|    }
  ------------------
 1931|    248|            FORMATTER_CHECK(format_next_sub_invocation(fdata));
  ------------------
  |  |   30|    248|    {                           \
  |  |   31|    248|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 248]
  |  |  ------------------
  |  |   32|    248|    }
  ------------------
 1932|    248|            break;
 1933|      0|        default:
  ------------------
  |  Branch (1933:9): [True: 0, False: 7.22k]
  ------------------
 1934|      0|            return false;
 1935|  7.22k|    }
 1936|  7.22k|    return true;
 1937|  7.22k|}
formatter.c:format_sub_invocation_invoke_host_function_contract_id:
 1898|  6.98k|static bool format_sub_invocation_invoke_host_function_contract_id(formatter_data_t *fdata) {
 1899|  6.98k|    invoke_contract_args_t invoke_contract_args;
 1900|  6.98k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1900:9): [True: 6.32k, False: 658]
  ------------------
 1901|  6.32k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1902|  6.32k|    } else {
 1903|    658|        invoke_contract_args =
 1904|    658|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1905|    658|    }
 1906|       |
 1907|  6.98k|    STRLCPY(fdata->caption, "Contract ID", fdata->caption_len);
  ------------------
  |  |   35|  6.98k|    {                                         \
  |  |   36|  6.98k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.98k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.98k]
  |  |  ------------------
  |  |   38|  6.98k|    }
  ------------------
 1908|       |
 1909|  6.98k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  6.98k|    {                           \
  |  |   31|  6.98k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.98k]
  |  |  ------------------
  |  |   32|  6.98k|    }
  ------------------
 1910|  6.98k|        print_sc_address(&invoke_contract_args.address, fdata->value, fdata->value_len, 0, 0))
 1911|  6.98k|    push_to_formatter_stack(&format_sub_invocation_invoke_host_function_func_name);
 1912|  6.98k|    return true;
 1913|  6.98k|}
formatter.c:format_sub_invocation_invoke_host_function_func_name:
 1864|  6.98k|static bool format_sub_invocation_invoke_host_function_func_name(formatter_data_t *fdata) {
 1865|  6.98k|    invoke_contract_args_t invoke_contract_args;
 1866|  6.98k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1866:9): [True: 6.32k, False: 658]
  ------------------
 1867|  6.32k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1868|  6.32k|    } else {
 1869|    658|        invoke_contract_args =
 1870|    658|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1871|    658|    }
 1872|  6.98k|    STRLCPY(fdata->caption, "Function", fdata->caption_len);
  ------------------
  |  |   35|  6.98k|    {                                         \
  |  |   36|  6.98k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.98k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.98k]
  |  |  ------------------
  |  |   38|  6.98k|    }
  ------------------
 1873|  6.98k|    FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|  6.98k|    {                           \
  |  |   31|  6.98k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.98k]
  |  |  ------------------
  |  |   32|  6.98k|    }
  ------------------
 1874|  6.98k|                                 fdata->value_len,
 1875|  6.98k|                                 invoke_contract_args.function.name,
 1876|  6.98k|                                 invoke_contract_args.function.name_size))
 1877|       |
 1878|  6.98k|    uint8_t data_count = should_move_control_to_plugin(fdata);
 1879|  6.98k|    if (data_count == 0) {
  ------------------
  |  Branch (1879:9): [True: 3.41k, False: 3.56k]
  ------------------
 1880|       |        // we should not move control to plugin
 1881|  3.41k|        if (invoke_contract_args.parameters_length == 0) {
  ------------------
  |  Branch (1881:13): [True: 2.03k, False: 1.38k]
  ------------------
 1882|  2.03k|            return format_next_sub_invocation(fdata);
 1883|  2.03k|        } else {
 1884|  1.38k|            parameters_index = 0;
 1885|  1.38k|            FORMATTER_CHECK(
  ------------------
  |  |   30|  1.38k|    {                           \
  |  |   31|  1.38k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.38k]
  |  |  ------------------
  |  |   32|  1.38k|    }
  ------------------
 1886|  1.38k|                push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args))
 1887|  1.38k|        }
 1888|  3.56k|    } else {
 1889|  3.56k|        PRINTF("we should move control to plugin\n");
 1890|  3.56k|        parameters_index = 0;
 1891|  3.56k|        FORMATTER_CHECK(
  ------------------
  |  |   30|  3.56k|    {                           \
  |  |   31|  3.56k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.56k]
  |  |  ------------------
  |  |   32|  3.56k|    }
  ------------------
 1892|  3.56k|            push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args_with_plugin))
 1893|  3.56k|    }
 1894|       |
 1895|  4.94k|    return true;
 1896|  6.98k|}
formatter.c:format_sub_invocation_invoke_host_function_args:
 1792|  3.86k|static bool format_sub_invocation_invoke_host_function_args(formatter_data_t *fdata) {
 1793|  3.86k|    invoke_contract_args_t invoke_contract_args;
 1794|  3.86k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1794:9): [True: 3.36k, False: 505]
  ------------------
 1795|  3.36k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1796|  3.36k|    } else {
 1797|    505|        invoke_contract_args =
 1798|    505|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1799|    505|    }
 1800|       |
 1801|  3.86k|    size_t length;
 1802|  3.86k|    STRLCPY(fdata->caption, "Arg ", fdata->caption_len);
  ------------------
  |  |   35|  3.86k|    {                                         \
  |  |   36|  3.86k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  3.86k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3.86k]
  |  |  ------------------
  |  |   38|  3.86k|    }
  ------------------
 1803|  3.86k|    length = strlen(fdata->caption);
 1804|  3.86k|    FORMATTER_CHECK(print_uint64_num(parameters_index + 1,
  ------------------
  |  |   30|  3.86k|    {                           \
  |  |   31|  3.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.86k]
  |  |  ------------------
  |  |   32|  3.86k|    }
  ------------------
 1805|  3.86k|                                     fdata->caption + length,
 1806|  3.86k|                                     fdata->caption_len - length))
 1807|       |
 1808|  3.86k|    STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  3.86k|    {                                         \
  |  |   42|  3.86k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  3.86k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 3.86k]
  |  |  ------------------
  |  |   44|  3.86k|    }
  ------------------
 1809|  3.86k|    length = strlen(fdata->caption);
 1810|  3.86k|    FORMATTER_CHECK(print_uint64_num(invoke_contract_args.parameters_length,
  ------------------
  |  |   30|  3.86k|    {                           \
  |  |   31|  3.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.86k]
  |  |  ------------------
  |  |   32|  3.86k|    }
  ------------------
 1811|  3.86k|                                     fdata->caption + length,
 1812|  3.86k|                                     fdata->caption_len - length))
 1813|       |
 1814|  3.86k|    buffer_t buffer = {.ptr = fdata->raw_data,
 1815|  3.86k|                       .size = fdata->raw_data_len,
 1816|  3.86k|                       .offset = invoke_contract_args.parameters_position};
 1817|       |    // Content
 1818|  13.5k|    for (uint8_t i = 0; i < parameters_index; i++) {
  ------------------
  |  Branch (1818:25): [True: 9.72k, False: 3.86k]
  ------------------
 1819|  9.72k|        FORMATTER_CHECK(read_scval_advance(&buffer))
  ------------------
  |  |   30|  9.72k|    {                           \
  |  |   31|  9.72k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 9.72k]
  |  |  ------------------
  |  |   32|  9.72k|    }
  ------------------
 1820|  9.72k|    }
 1821|       |
 1822|  3.86k|    FORMATTER_CHECK(print_scval(buffer, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  3.86k|    {                           \
  |  |   31|  3.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 94, False: 3.77k]
  |  |  ------------------
  |  |   32|  3.86k|    }
  ------------------
 1823|       |
 1824|  3.77k|    parameters_index++;
 1825|  3.77k|    if (parameters_index == invoke_contract_args.parameters_length) {
  ------------------
  |  Branch (1825:9): [True: 1.28k, False: 2.48k]
  ------------------
 1826|  1.28k|        return format_next_sub_invocation(fdata);
 1827|  2.48k|    } else {
 1828|  2.48k|        FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args))
  ------------------
  |  |   30|  2.48k|    {                           \
  |  |   31|  2.48k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.48k]
  |  |  ------------------
  |  |   32|  2.48k|    }
  ------------------
 1829|  2.48k|    }
 1830|  2.48k|    return true;
 1831|  3.77k|}
formatter.c:print_scval:
 1697|  20.6k|static bool print_scval(buffer_t buffer, char *value, uint8_t value_len) {
 1698|  20.6k|    uint32_t sc_type;
 1699|  20.6k|    FORMATTER_CHECK(parse_uint32(&buffer, &sc_type))
  ------------------
  |  |   30|  20.6k|    {                           \
  |  |   31|  20.6k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 20.6k]
  |  |  ------------------
  |  |   32|  20.6k|    }
  ------------------
 1700|       |
 1701|  20.6k|    switch (sc_type) {
 1702|  11.8k|        case SCV_BOOL: {
  ------------------
  |  Branch (1702:9): [True: 11.8k, False: 8.80k]
  ------------------
 1703|  11.8k|            bool b;
 1704|  11.8k|            FORMATTER_CHECK(parse_bool(&buffer, &b))
  ------------------
  |  |   30|  11.8k|    {                           \
  |  |   31|  11.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1.16k, False: 10.6k]
  |  |  ------------------
  |  |   32|  11.8k|    }
  ------------------
 1705|  10.6k|            STRLCPY(value, b ? "true" : "false", value_len);
  ------------------
  |  |   35|  10.6k|    {                                         \
  |  |   36|  21.3k|        size_t len = strlcpy(dst, src, size); \
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 154, False: 10.4k]
  |  |  ------------------
  |  |   37|  10.6k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10.6k]
  |  |  ------------------
  |  |   38|  10.6k|    }
  ------------------
 1706|  10.6k|            break;
 1707|  10.6k|        }
 1708|  1.27k|        case SCV_VOID:
  ------------------
  |  Branch (1708:9): [True: 1.27k, False: 19.3k]
  ------------------
 1709|  1.27k|            STRLCPY(value, "[void]", value_len);
  ------------------
  |  |   35|  1.27k|    {                                         \
  |  |   36|  1.27k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.27k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.27k]
  |  |  ------------------
  |  |   38|  1.27k|    }
  ------------------
 1710|  1.27k|            break;  // void
 1711|    198|        case SCV_U32:
  ------------------
  |  Branch (1711:9): [True: 198, False: 20.4k]
  ------------------
 1712|    198|            FORMATTER_CHECK(print_uint32(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    198|    {                           \
  |  |   31|    198|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 198]
  |  |  ------------------
  |  |   32|    198|    }
  ------------------
 1713|    198|            break;
 1714|    366|        case SCV_I32:
  ------------------
  |  Branch (1714:9): [True: 366, False: 20.2k]
  ------------------
 1715|    366|            FORMATTER_CHECK(print_int32(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    366|    {                           \
  |  |   31|    366|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 366]
  |  |  ------------------
  |  |   32|    366|    }
  ------------------
 1716|    366|            break;
 1717|    159|        case SCV_U64:
  ------------------
  |  Branch (1717:9): [True: 159, False: 20.4k]
  ------------------
 1718|    159|            FORMATTER_CHECK(print_uint64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    159|    {                           \
  |  |   31|    159|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 159]
  |  |  ------------------
  |  |   32|    159|    }
  ------------------
 1719|    159|            break;
 1720|    207|        case SCV_I64:
  ------------------
  |  Branch (1720:9): [True: 207, False: 20.4k]
  ------------------
 1721|    207|            FORMATTER_CHECK(print_int64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    207|    {                           \
  |  |   31|    207|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 207]
  |  |  ------------------
  |  |   32|    207|    }
  ------------------
 1722|    207|            break;
 1723|    290|        case SCV_TIMEPOINT: {
  ------------------
  |  Branch (1723:9): [True: 290, False: 20.3k]
  ------------------
 1724|    290|            uint64_t timepoint;
 1725|    290|            FORMATTER_CHECK(parse_uint64(&buffer, &timepoint));
  ------------------
  |  |   30|    290|    {                           \
  |  |   31|    290|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 290]
  |  |  ------------------
  |  |   32|    290|    }
  ------------------
 1726|    290|            FORMATTER_CHECK(print_time(timepoint, value, value_len));
  ------------------
  |  |   30|    290|    {                           \
  |  |   31|    290|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 29, False: 261]
  |  |  ------------------
  |  |   32|    290|    }
  ------------------
 1727|    261|            break;
 1728|    290|        }
 1729|    356|        case SCV_DURATION:
  ------------------
  |  Branch (1729:9): [True: 356, False: 20.2k]
  ------------------
 1730|    356|            FORMATTER_CHECK(print_int64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    356|    {                           \
  |  |   31|    356|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 356]
  |  |  ------------------
  |  |   32|    356|    }
  ------------------
 1731|    356|            break;
 1732|    347|        case SCV_U128:
  ------------------
  |  Branch (1732:9): [True: 347, False: 20.2k]
  ------------------
 1733|    347|            FORMATTER_CHECK(print_uint128(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    347|    {                           \
  |  |   31|    347|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 347]
  |  |  ------------------
  |  |   32|    347|    }
  ------------------
 1734|    347|            break;
 1735|  1.81k|        case SCV_I128:
  ------------------
  |  Branch (1735:9): [True: 1.81k, False: 18.8k]
  ------------------
 1736|  1.81k|            FORMATTER_CHECK(print_int128(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|  1.81k|    {                           \
  |  |   31|  1.81k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.81k]
  |  |  ------------------
  |  |   32|  1.81k|    }
  ------------------
 1737|  1.81k|            break;
 1738|    321|        case SCV_U256:
  ------------------
  |  Branch (1738:9): [True: 321, False: 20.3k]
  ------------------
 1739|    321|            FORMATTER_CHECK(print_uint256(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    321|    {                           \
  |  |   31|    321|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 321]
  |  |  ------------------
  |  |   32|    321|    }
  ------------------
 1740|    321|            break;
 1741|    473|        case SCV_I256:
  ------------------
  |  Branch (1741:9): [True: 473, False: 20.1k]
  ------------------
 1742|    473|            FORMATTER_CHECK(print_int256(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    473|    {                           \
  |  |   31|    473|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 473]
  |  |  ------------------
  |  |   32|    473|    }
  ------------------
 1743|    473|            break;
 1744|    341|        case SCV_BYTES:
  ------------------
  |  Branch (1744:9): [True: 341, False: 20.2k]
  ------------------
 1745|    341|            STRLCPY(value, "[Bytes Data]", value_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1746|    341|            break;
 1747|    789|        case SCV_STRING: {
  ------------------
  |  Branch (1747:9): [True: 789, False: 19.8k]
  ------------------
 1748|    789|            scv_string_t scv_string;
 1749|    789|            FORMATTER_CHECK(parse_scv_string(&buffer, &scv_string));
  ------------------
  |  |   30|    789|    {                           \
  |  |   31|    789|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 5, False: 784]
  |  |  ------------------
  |  |   32|    789|    }
  ------------------
 1750|    784|            FORMATTER_CHECK(print_scv_string(&scv_string, value, value_len));
  ------------------
  |  |   30|    784|    {                           \
  |  |   31|    784|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 784]
  |  |  ------------------
  |  |   32|    784|    }
  ------------------
 1751|    784|            break;
 1752|    784|        }
 1753|    403|        case SCV_SYMBOL: {
  ------------------
  |  Branch (1753:9): [True: 403, False: 20.2k]
  ------------------
 1754|    403|            scv_symbol_t scv_symbol;
 1755|    403|            FORMATTER_CHECK(parse_scv_symbol(&buffer, &scv_symbol));
  ------------------
  |  |   30|    403|    {                           \
  |  |   31|    403|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 10, False: 393]
  |  |  ------------------
  |  |   32|    403|    }
  ------------------
 1756|    393|            FORMATTER_CHECK(print_scv_symbol(&scv_symbol, value, value_len));
  ------------------
  |  |   30|    393|    {                           \
  |  |   31|    393|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 9, False: 384]
  |  |  ------------------
  |  |   32|    393|    }
  ------------------
 1757|    384|            break;
 1758|    393|        }
 1759|    561|        case SCV_ADDRESS: {
  ------------------
  |  Branch (1759:9): [True: 561, False: 20.0k]
  ------------------
 1760|    561|            sc_address_t sc_address;
 1761|    561|            FORMATTER_CHECK(parse_sc_address(&buffer, &sc_address));
  ------------------
  |  |   30|    561|    {                           \
  |  |   31|    561|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 561]
  |  |  ------------------
  |  |   32|    561|    }
  ------------------
 1762|    561|            FORMATTER_CHECK(print_sc_address(&sc_address, value, value_len, 0, 0));
  ------------------
  |  |   30|    561|    {                           \
  |  |   31|    561|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 561]
  |  |  ------------------
  |  |   32|    561|    }
  ------------------
 1763|    561|            break;
 1764|    561|        }
 1765|    913|        default:
  ------------------
  |  Branch (1765:9): [True: 913, False: 19.7k]
  ------------------
 1766|    913|            STRLCPY(value, "[unable to display]", value_len);
  ------------------
  |  |   35|    913|    {                                         \
  |  |   36|    913|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    913|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 913]
  |  |  ------------------
  |  |   38|    913|    }
  ------------------
 1767|  20.6k|    }
 1768|  19.4k|    return true;
 1769|  20.6k|}
formatter.c:format_sub_invocation_invoke_host_function_args_with_plugin:
 1833|  10.7k|static bool format_sub_invocation_invoke_host_function_args_with_plugin(formatter_data_t *fdata) {
 1834|  10.7k|    invoke_contract_args_t invoke_contract_args;
 1835|  10.7k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1835:9): [True: 10.7k, False: 0]
  ------------------
 1836|  10.7k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1837|  10.7k|    } else {
 1838|      0|        invoke_contract_args =
 1839|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1840|      0|    }
 1841|       |
 1842|  10.7k|    const uint8_t *contract_address = invoke_contract_args.address.address;
 1843|       |
 1844|       |    // get data pair
 1845|  10.7k|    if (fdata->plugin_query_data_pair(contract_address,
  ------------------
  |  Branch (1845:9): [True: 0, False: 10.7k]
  ------------------
 1846|  10.7k|                                      parameters_index,
 1847|  10.7k|                                      fdata->caption,
 1848|  10.7k|                                      fdata->caption_len,
 1849|  10.7k|                                      fdata->value,
 1850|  10.7k|                                      fdata->value_len) != STELLAR_PLUGIN_RESULT_OK) {
 1851|      0|        return false;
 1852|      0|    }
 1853|       |
 1854|  10.7k|    parameters_index++;
 1855|  10.7k|    if (parameters_index == plugin_data_pair_count) {
  ------------------
  |  Branch (1855:9): [True: 3.56k, False: 7.13k]
  ------------------
 1856|  3.56k|        return format_next_sub_invocation(fdata);
 1857|  7.13k|    } else {
 1858|  7.13k|        FORMATTER_CHECK(
  ------------------
  |  |   30|  7.13k|    {                           \
  |  |   31|  7.13k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.13k]
  |  |  ------------------
  |  |   32|  7.13k|    }
  ------------------
 1859|  7.13k|            push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args_with_plugin))
 1860|  7.13k|    }
 1861|  7.13k|    return true;
 1862|  10.7k|}
formatter.c:format_next_sub_invocation:
 1772|  7.13k|static bool format_next_sub_invocation(formatter_data_t *fdata) {
 1773|  7.13k|    uint8_t sub_invocations_count =
 1774|  7.13k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1774:9): [True: 6.43k, False: 704]
  ------------------
 1775|  7.13k|            ? fdata->envelope->soroban_authorization.sub_invocations_count
 1776|  7.13k|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1777|    704|                  .sub_invocations_count;
 1778|  7.13k|    uint8_t *sub_invocation_index =
 1779|  7.13k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1779:9): [True: 6.43k, False: 704]
  ------------------
 1780|  7.13k|            ? &fdata->envelope->soroban_authorization.sub_invocation_index
 1781|  7.13k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1782|    704|                   .sub_invocation_index;
 1783|  7.13k|    (*sub_invocation_index)++;
 1784|  7.13k|    if (*sub_invocation_index == sub_invocations_count) {
  ------------------
  |  Branch (1784:9): [True: 1.22k, False: 5.90k]
  ------------------
 1785|  1.22k|        return push_to_formatter_stack(NULL);
 1786|  5.90k|    } else {
 1787|  5.90k|        formatter_index = 0;
 1788|  5.90k|        return push_to_formatter_stack(format_sub_invocation_start);
 1789|  5.90k|    }
 1790|  7.13k|}
formatter.c:format_invoke_host_function_args:
 2048|  16.7k|static bool format_invoke_host_function_args(formatter_data_t *fdata) {
 2049|  16.7k|    invoke_contract_args_t invoke_contract_args;
 2050|  16.7k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2050:9): [True: 15.0k, False: 1.69k]
  ------------------
 2051|  15.0k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2052|  15.0k|    } else {
 2053|  1.69k|        invoke_contract_args =
 2054|  1.69k|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2055|  1.69k|    }
 2056|       |
 2057|  16.7k|    size_t length;
 2058|  16.7k|    STRLCPY(fdata->caption, "Arg ", fdata->caption_len);
  ------------------
  |  |   35|  16.7k|    {                                         \
  |  |   36|  16.7k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  16.7k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 16.7k]
  |  |  ------------------
  |  |   38|  16.7k|    }
  ------------------
 2059|  16.7k|    length = strlen(fdata->caption);
 2060|  16.7k|    FORMATTER_CHECK(print_uint64_num(parameters_index + 1,
  ------------------
  |  |   30|  16.7k|    {                           \
  |  |   31|  16.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 16.7k]
  |  |  ------------------
  |  |   32|  16.7k|    }
  ------------------
 2061|  16.7k|                                     fdata->caption + length,
 2062|  16.7k|                                     fdata->caption_len - length))
 2063|       |
 2064|  16.7k|    STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  16.7k|    {                                         \
  |  |   42|  16.7k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  16.7k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 16.7k]
  |  |  ------------------
  |  |   44|  16.7k|    }
  ------------------
 2065|  16.7k|    length = strlen(fdata->caption);
 2066|  16.7k|    FORMATTER_CHECK(print_uint64_num(invoke_contract_args.parameters_length,
  ------------------
  |  |   30|  16.7k|    {                           \
  |  |   31|  16.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 16.7k]
  |  |  ------------------
  |  |   32|  16.7k|    }
  ------------------
 2067|  16.7k|                                     fdata->caption + length,
 2068|  16.7k|                                     fdata->caption_len - length))
 2069|       |
 2070|  16.7k|    buffer_t buffer = {.ptr = fdata->raw_data,
 2071|  16.7k|                       .size = fdata->raw_data_len,
 2072|  16.7k|                       .offset = invoke_contract_args.parameters_position};
 2073|       |    // Content
 2074|  65.3k|    for (uint8_t i = 0; i < parameters_index; i++) {
  ------------------
  |  Branch (2074:25): [True: 48.5k, False: 16.7k]
  ------------------
 2075|  48.5k|        FORMATTER_CHECK(read_scval_advance(&buffer))
  ------------------
  |  |   30|  48.5k|    {                           \
  |  |   31|  48.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 48.5k]
  |  |  ------------------
  |  |   32|  48.5k|    }
  ------------------
 2076|  48.5k|    }
 2077|       |
 2078|  16.7k|    FORMATTER_CHECK(print_scval(buffer, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  16.7k|    {                           \
  |  |   31|  16.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1.12k, False: 15.6k]
  |  |  ------------------
  |  |   32|  16.7k|    }
  ------------------
 2079|       |
 2080|  15.6k|    parameters_index++;
 2081|  15.6k|    if (parameters_index == invoke_contract_args.parameters_length) {
  ------------------
  |  Branch (2081:9): [True: 2.04k, False: 13.5k]
  ------------------
 2082|  2.04k|        return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2083|  13.5k|    } else {
 2084|  13.5k|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args))
  ------------------
  |  |   30|  13.5k|    {                           \
  |  |   31|  13.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 13.5k]
  |  |  ------------------
  |  |   32|  13.5k|    }
  ------------------
 2085|  13.5k|    }
 2086|  13.5k|    return true;
 2087|  15.6k|}
formatter.c:format_invoke_host_function_args_with_plugin:
 2089|  1.00k|static bool format_invoke_host_function_args_with_plugin(formatter_data_t *fdata) {
 2090|  1.00k|    invoke_contract_args_t invoke_contract_args;
 2091|  1.00k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2091:9): [True: 1.00k, False: 0]
  ------------------
 2092|  1.00k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2093|  1.00k|    } else {
 2094|      0|        invoke_contract_args =
 2095|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2096|      0|    }
 2097|       |
 2098|  1.00k|    const uint8_t *contract_address = invoke_contract_args.address.address;
 2099|       |
 2100|       |    // get data pair
 2101|  1.00k|    if (fdata->plugin_query_data_pair(contract_address,
  ------------------
  |  Branch (2101:9): [True: 0, False: 1.00k]
  ------------------
 2102|  1.00k|                                      parameters_index,
 2103|  1.00k|                                      fdata->caption,
 2104|  1.00k|                                      fdata->caption_len,
 2105|  1.00k|                                      fdata->value,
 2106|  1.00k|                                      fdata->value_len) != STELLAR_PLUGIN_RESULT_OK) {
 2107|      0|        return false;
 2108|      0|    }
 2109|       |
 2110|  1.00k|    parameters_index++;
 2111|  1.00k|    if (parameters_index == plugin_data_pair_count) {
  ------------------
  |  Branch (2111:9): [True: 335, False: 670]
  ------------------
 2112|       |        // if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
 2113|       |        //     FORMATTER_CHECK(push_to_formatter_stack(NULL))
 2114|       |        // } else {
 2115|       |        //     return format_operation_source_prepare(fdata);
 2116|       |        // }
 2117|    335|        return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2118|    670|    } else {
 2119|    670|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args_with_plugin))
  ------------------
  |  |   30|    670|    {                           \
  |  |   31|    670|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 670]
  |  |  ------------------
  |  |   32|    670|    }
  ------------------
 2120|    670|    }
 2121|    670|    return true;
 2122|  1.00k|}
formatter.c:format_transaction_info:
 2380|  7.36k|static bool format_transaction_info(formatter_data_t *fdata) {
 2381|  7.36k|    if (fdata->envelope->network != 0) {
  ------------------
  |  Branch (2381:9): [True: 6.98k, False: 384]
  ------------------
 2382|  6.98k|        FORMATTER_CHECK(push_to_formatter_stack(&format_network))
  ------------------
  |  |   30|  6.98k|    {                           \
  |  |   31|  6.98k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.98k]
  |  |  ------------------
  |  |   32|  6.98k|    }
  ------------------
 2383|  6.98k|    } else {
 2384|    384|        return get_tx_details_formatter(fdata);
 2385|    384|    }
 2386|  6.98k|    return true;
 2387|  7.36k|}
formatter.c:push_to_formatter_stack:
   59|   365k|static bool push_to_formatter_stack(format_function_t formatter) {
   60|   365k|    if (formatter_index >= MAX_FORMATTERS_PER_OPERATION) {
  ------------------
  |  |   47|   365k|#define MAX_FORMATTERS_PER_OPERATION 16
  ------------------
  |  Branch (60:9): [True: 35, False: 365k]
  ------------------
   61|     35|        PRINTF("Formatter stack overflow\n");
   62|     35|        return false;
   63|     35|    }
   64|       |
   65|   365k|    formatter_stack[formatter_index++] = formatter;
   66|       |
   67|   365k|    return true;
   68|   365k|}
formatter.c:format_confirm_operation:
 2262|  48.4k|static bool format_confirm_operation(formatter_data_t *fdata) {
 2263|  48.4k|    if (fdata->envelope->tx_details.tx.operations_count > 1) {
  ------------------
  |  Branch (2263:9): [True: 47.0k, False: 1.45k]
  ------------------
 2264|  47.0k|        size_t length;
 2265|  47.0k|        STRLCPY(fdata->caption, "Operation ", fdata->caption_len);
  ------------------
  |  |   35|  47.0k|    {                                         \
  |  |   36|  47.0k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  47.0k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 47.0k]
  |  |  ------------------
  |  |   38|  47.0k|    }
  ------------------
 2266|  47.0k|        length = strlen(fdata->caption);
 2267|  47.0k|        FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.operation_index + 1,
  ------------------
  |  |   30|  47.0k|    {                           \
  |  |   31|  47.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 47.0k]
  |  |  ------------------
  |  |   32|  47.0k|    }
  ------------------
 2268|  47.0k|                                         fdata->caption + length,
 2269|  47.0k|                                         fdata->caption_len - length))
 2270|  47.0k|        STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  47.0k|    {                                         \
  |  |   42|  47.0k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  47.0k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 47.0k]
  |  |  ------------------
  |  |   44|  47.0k|    }
  ------------------
 2271|  47.0k|        length = strlen(fdata->caption);
 2272|  47.0k|        FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.operations_count,
  ------------------
  |  |   30|  47.0k|    {                           \
  |  |   31|  47.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 47.0k]
  |  |  ------------------
  |  |   32|  47.0k|    }
  ------------------
 2273|  47.0k|                                         fdata->caption + length,
 2274|  47.0k|                                         fdata->caption_len - length))
 2275|       |
 2276|  47.0k|        FORMATTER_CHECK(push_to_formatter_stack(
  ------------------
  |  |   30|  47.0k|    {                           \
  |  |   31|  47.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 47.0k]
  |  |  ------------------
  |  |   32|  47.0k|    }
  ------------------
 2277|  47.0k|            ((format_function_t) PIC(formatters[fdata->envelope->tx_details.tx.op_details.type]))));
 2278|  47.0k|    } else {
 2279|  1.45k|        format_function_t func = PIC(formatters[fdata->envelope->tx_details.tx.op_details.type]);
  ------------------
  |  |    6|  1.45k|#define PIC(x) x
  ------------------
 2280|  1.45k|        FORMATTER_CHECK(func(fdata));
  ------------------
  |  |   30|  1.45k|    {                           \
  |  |   31|  1.45k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 10, False: 1.44k]
  |  |  ------------------
  |  |   32|  1.45k|    }
  ------------------
 2281|  1.44k|    }
 2282|  48.4k|    return true;
 2283|  48.4k|}
formatter.c:format_create_account:
 1134|  30.4k|static bool format_create_account(formatter_data_t *fdata) {
 1135|  30.4k|    (void) fdata;
 1136|  30.4k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  30.4k|    {                                         \
  |  |   36|  30.4k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  30.4k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30.4k]
  |  |  ------------------
  |  |   38|  30.4k|    }
  ------------------
 1137|  30.4k|    STRLCPY(fdata->value, "Create Account", fdata->value_len);
  ------------------
  |  |   35|  30.4k|    {                                         \
  |  |   36|  30.4k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  30.4k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30.4k]
  |  |  ------------------
  |  |   38|  30.4k|    }
  ------------------
 1138|  30.4k|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_account_destination))
  ------------------
  |  |   30|  30.4k|    {                           \
  |  |   31|  30.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30.4k]
  |  |  ------------------
  |  |   32|  30.4k|    }
  ------------------
 1139|  30.4k|    return true;
 1140|  30.4k|}
formatter.c:format_create_account_destination:
 1122|  30.4k|static bool format_create_account_destination(formatter_data_t *fdata) {
 1123|  30.4k|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|  30.4k|    {                                         \
  |  |   36|  30.4k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  30.4k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30.4k]
  |  |  ------------------
  |  |   38|  30.4k|    }
  ------------------
 1124|  30.4k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  30.4k|    {                           \
  |  |   31|  30.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30.4k]
  |  |  ------------------
  |  |   32|  30.4k|    }
  ------------------
 1125|  30.4k|        print_account_id(fdata->envelope->tx_details.tx.op_details.create_account_op.destination,
 1126|  30.4k|                         fdata->value,
 1127|  30.4k|                         fdata->value_len,
 1128|  30.4k|                         0,
 1129|  30.4k|                         0))
 1130|  30.4k|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_account_amount))
  ------------------
  |  |   30|  30.4k|    {                           \
  |  |   31|  30.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30.4k]
  |  |  ------------------
  |  |   32|  30.4k|    }
  ------------------
 1131|  30.4k|    return true;
 1132|  30.4k|}
formatter.c:format_create_account_amount:
 1110|  30.4k|static bool format_create_account_amount(formatter_data_t *fdata) {
 1111|  30.4k|    STRLCPY(fdata->caption, "Starting Balance", fdata->caption_len);
  ------------------
  |  |   35|  30.4k|    {                                         \
  |  |   36|  30.4k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  30.4k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30.4k]
  |  |  ------------------
  |  |   38|  30.4k|    }
  ------------------
 1112|  30.4k|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
 1113|  30.4k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  30.4k|    {                           \
  |  |   31|  30.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30.4k]
  |  |  ------------------
  |  |   32|  30.4k|    }
  ------------------
 1114|  30.4k|        print_amount(fdata->envelope->tx_details.tx.op_details.create_account_op.starting_balance,
 1115|  30.4k|                     &asset,
 1116|  30.4k|                     fdata->envelope->network,
 1117|  30.4k|                     fdata->value,
 1118|  30.4k|                     fdata->value_len))
 1119|  30.4k|    return format_operation_source_prepare(fdata);
 1120|  30.4k|}
formatter.c:format_operation_source_prepare:
  334|  47.4k|static bool format_operation_source_prepare(formatter_data_t *fdata) {
  335|  47.4k|    if (fdata->envelope->tx_details.tx.op_details.source_account_present) {
  ------------------
  |  Branch (335:9): [True: 1.35k, False: 46.1k]
  ------------------
  336|       |        // If the source exists, when the user clicks the next button,
  337|       |        // it will jump to the page showing the source
  338|  1.35k|        FORMATTER_CHECK(push_to_formatter_stack(&format_operation_source))
  ------------------
  |  |   30|  1.35k|    {                           \
  |  |   31|  1.35k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.35k]
  |  |  ------------------
  |  |   32|  1.35k|    }
  ------------------
  339|  46.1k|    } else {
  340|  46.1k|        FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  46.1k|    {                           \
  |  |   31|  46.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 46.1k]
  |  |  ------------------
  |  |   32|  46.1k|    }
  ------------------
  341|  46.1k|    }
  342|  47.4k|    return true;
  343|  47.4k|}
formatter.c:format_operation_source:
  305|  1.35k|static bool format_operation_source(formatter_data_t *fdata) {
  306|  1.35k|    STRLCPY(fdata->caption, "Op Source", fdata->caption_len);
  ------------------
  |  |   35|  1.35k|    {                                         \
  |  |   36|  1.35k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.35k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.35k]
  |  |  ------------------
  |  |   38|  1.35k|    }
  ------------------
  307|  1.35k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (307:9): [True: 1.26k, False: 85]
  ------------------
  308|  1.35k|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (308:9): [True: 1.14k, False: 122]
  ------------------
  309|  1.35k|        fdata->envelope->tx_details.tx.op_details.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (309:9): [True: 986, False: 161]
  ------------------
  310|  1.35k|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (310:9): [True: 622, False: 364]
  ------------------
  311|    986|               fdata->signing_key,
  312|    986|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0 &&
  ------------------
  |  |   18|    986|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  313|  1.35k|        memcmp(fdata->envelope->tx_details.tx.op_details.source_account.ed25519,
  ------------------
  |  Branch (313:9): [True: 381, False: 241]
  ------------------
  314|    622|               fdata->signing_key,
  315|    622|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|    622|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  316|    381|        FORMATTER_CHECK(
  ------------------
  |  |   30|    381|    {                           \
  |  |   31|    381|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 381]
  |  |  ------------------
  |  |   32|    381|    }
  ------------------
  317|    381|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
  318|    381|                                fdata->value,
  319|    381|                                fdata->value_len,
  320|    381|                                6,
  321|    381|                                6))
  322|    973|    } else {
  323|    973|        FORMATTER_CHECK(
  ------------------
  |  |   30|    973|    {                           \
  |  |   31|    973|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 973]
  |  |  ------------------
  |  |   32|    973|    }
  ------------------
  324|    973|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
  325|    973|                                fdata->value,
  326|    973|                                fdata->value_len,
  327|    973|                                0,
  328|    973|                                0))
  329|    973|    }
  330|  1.35k|    FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  1.35k|    {                           \
  |  |   31|  1.35k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.35k]
  |  |  ------------------
  |  |   32|  1.35k|    }
  ------------------
  331|  1.35k|    return true;
  332|  1.35k|}
formatter.c:format_payment:
 1099|    685|static bool format_payment(formatter_data_t *fdata) {
 1100|    685|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|    685|    {                                         \
  |  |   36|    685|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    685|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 685]
  |  |  ------------------
  |  |   38|    685|    }
  ------------------
 1101|    685|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.payment_op.amount,
  ------------------
  |  |   30|    685|    {                           \
  |  |   31|    685|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 685]
  |  |  ------------------
  |  |   32|    685|    }
  ------------------
 1102|    685|                                 &fdata->envelope->tx_details.tx.op_details.payment_op.asset,
 1103|    685|                                 fdata->envelope->network,
 1104|    685|                                 fdata->value,
 1105|    685|                                 fdata->value_len))
 1106|    685|    FORMATTER_CHECK(push_to_formatter_stack(&format_payment_destination))
  ------------------
  |  |   30|    685|    {                           \
  |  |   31|    685|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 685]
  |  |  ------------------
  |  |   32|    685|    }
  ------------------
 1107|    685|    return true;
 1108|    685|}
formatter.c:format_payment_destination:
 1088|    685|static bool format_payment_destination(formatter_data_t *fdata) {
 1089|    685|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    685|    {                                         \
  |  |   36|    685|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    685|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 685]
  |  |  ------------------
  |  |   38|    685|    }
  ------------------
 1090|    685|    FORMATTER_CHECK(
  ------------------
  |  |   30|    685|    {                           \
  |  |   31|    685|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 685]
  |  |  ------------------
  |  |   32|    685|    }
  ------------------
 1091|    685|        print_muxed_account(&fdata->envelope->tx_details.tx.op_details.payment_op.destination,
 1092|    685|                            fdata->value,
 1093|    685|                            fdata->value_len,
 1094|    685|                            0,
 1095|    685|                            0))
 1096|    685|    return format_operation_source_prepare(fdata);
 1097|    685|}
formatter.c:format_path_payment_strict_receive:
 1041|    338|static bool format_path_payment_strict_receive(formatter_data_t *fdata) {
 1042|    338|    STRLCPY(fdata->caption, "Send Max", fdata->caption_len);
  ------------------
  |  |   35|    338|    {                                         \
  |  |   36|    338|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    338|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 338]
  |  |  ------------------
  |  |   38|    338|    }
  ------------------
 1043|    338|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    338|    {                           \
  |  |   31|    338|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 338]
  |  |  ------------------
  |  |   32|    338|    }
  ------------------
 1044|    338|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.send_max,
 1045|    338|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.send_asset,
 1046|    338|        fdata->envelope->network,
 1047|    338|        fdata->value,
 1048|    338|        fdata->value_len))
 1049|    338|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_receive_destination))
  ------------------
  |  |   30|    338|    {                           \
  |  |   31|    338|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 338]
  |  |  ------------------
  |  |   32|    338|    }
  ------------------
 1050|    338|    return true;
 1051|    338|}
formatter.c:format_path_payment_strict_receive_destination:
 1029|    338|static bool format_path_payment_strict_receive_destination(formatter_data_t *fdata) {
 1030|    338|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    338|    {                                         \
  |  |   36|    338|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    338|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 338]
  |  |  ------------------
  |  |   38|    338|    }
  ------------------
 1031|    338|    FORMATTER_CHECK(print_muxed_account(
  ------------------
  |  |   30|    338|    {                           \
  |  |   31|    338|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 338]
  |  |  ------------------
  |  |   32|    338|    }
  ------------------
 1032|    338|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.destination,
 1033|    338|        fdata->value,
 1034|    338|        fdata->value_len,
 1035|    338|        0,
 1036|    338|        0))
 1037|    338|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_receive_receive))
  ------------------
  |  |   30|    338|    {                           \
  |  |   31|    338|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 338]
  |  |  ------------------
  |  |   32|    338|    }
  ------------------
 1038|    338|    return true;
 1039|    338|}
formatter.c:format_path_payment_strict_receive_receive:
 1018|    338|static bool format_path_payment_strict_receive_receive(formatter_data_t *fdata) {
 1019|    338|    STRLCPY(fdata->caption, "Receive", fdata->caption_len);
  ------------------
  |  |   35|    338|    {                                         \
  |  |   36|    338|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    338|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 338]
  |  |  ------------------
  |  |   38|    338|    }
  ------------------
 1020|    338|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    338|    {                           \
  |  |   31|    338|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 338]
  |  |  ------------------
  |  |   32|    338|    }
  ------------------
 1021|    338|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.dest_amount,
 1022|    338|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.dest_asset,
 1023|    338|        fdata->envelope->network,
 1024|    338|        fdata->value,
 1025|    338|        fdata->value_len))
 1026|    338|    return format_operation_source_prepare(fdata);
 1027|    338|}
formatter.c:format_manage_sell_offer:
  897|    307|static bool format_manage_sell_offer(formatter_data_t *fdata) {
  898|    307|    if (!fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.amount) {
  ------------------
  |  Branch (898:9): [True: 66, False: 241]
  ------------------
  899|     66|        STRLCPY(fdata->caption, "Remove Offer", fdata->caption_len);
  ------------------
  |  |   35|     66|    {                                         \
  |  |   36|     66|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     66|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 66]
  |  |  ------------------
  |  |   38|     66|    }
  ------------------
  900|     66|        FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|     66|    {                           \
  |  |   31|     66|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 66]
  |  |  ------------------
  |  |   32|     66|    }
  ------------------
  901|     66|            fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id,
  902|     66|            fdata->value,
  903|     66|            fdata->value_len))
  904|     66|        return format_operation_source_prepare(fdata);
  905|    241|    } else {
  906|    241|        if (fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id) {
  ------------------
  |  Branch (906:13): [True: 174, False: 67]
  ------------------
  907|    174|            STRLCPY(fdata->caption, "Change Offer", fdata->caption_len);
  ------------------
  |  |   35|    174|    {                                         \
  |  |   36|    174|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    174|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 174]
  |  |  ------------------
  |  |   38|    174|    }
  ------------------
  908|    174|            FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|    174|    {                           \
  |  |   31|    174|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 174]
  |  |  ------------------
  |  |   32|    174|    }
  ------------------
  909|    174|                fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id,
  910|    174|                fdata->value,
  911|    174|                fdata->value_len))
  912|    174|        } else {
  913|     67|            STRLCPY(fdata->caption, "Create Offer", fdata->caption_len);
  ------------------
  |  |   35|     67|    {                                         \
  |  |   36|     67|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     67|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 67]
  |  |  ------------------
  |  |   38|     67|    }
  ------------------
  914|     67|        }
  915|    241|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_buy))
  ------------------
  |  |   30|    241|    {                           \
  |  |   31|    241|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 241]
  |  |  ------------------
  |  |   32|    241|    }
  ------------------
  916|    241|    }
  917|    241|    return true;
  918|    307|}
formatter.c:format_manage_sell_offer_buy:
  886|    241|static bool format_manage_sell_offer_buy(formatter_data_t *fdata) {
  887|    241|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|    241|    {                                         \
  |  |   36|    241|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    241|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 241]
  |  |  ------------------
  |  |   38|    241|    }
  ------------------
  888|    241|    FORMATTER_CHECK(
  ------------------
  |  |   30|    241|    {                           \
  |  |   31|    241|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 241]
  |  |  ------------------
  |  |   32|    241|    }
  ------------------
  889|    241|        print_asset(&fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.buying,
  890|    241|                    fdata->envelope->network,
  891|    241|                    fdata->value,
  892|    241|                    fdata->value_len))
  893|    241|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_sell))
  ------------------
  |  |   30|    241|    {                           \
  |  |   31|    241|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 241]
  |  |  ------------------
  |  |   32|    241|    }
  ------------------
  894|    241|    return true;
  895|    241|}
formatter.c:format_manage_sell_offer_sell:
  874|    241|static bool format_manage_sell_offer_sell(formatter_data_t *fdata) {
  875|    241|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|    241|    {                                         \
  |  |   36|    241|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    241|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 241]
  |  |  ------------------
  |  |   38|    241|    }
  ------------------
  876|    241|    FORMATTER_CHECK(
  ------------------
  |  |   30|    241|    {                           \
  |  |   31|    241|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 241]
  |  |  ------------------
  |  |   32|    241|    }
  ------------------
  877|    241|        print_amount(fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.amount,
  878|    241|                     &fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.selling,
  879|    241|                     fdata->envelope->network,
  880|    241|                     fdata->value,
  881|    241|                     fdata->value_len))
  882|    241|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_price))
  ------------------
  |  |   30|    241|    {                           \
  |  |   31|    241|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 241]
  |  |  ------------------
  |  |   32|    241|    }
  ------------------
  883|    241|    return true;
  884|    241|}
formatter.c:format_manage_sell_offer_price:
  862|    241|static bool format_manage_sell_offer_price(formatter_data_t *fdata) {
  863|    241|    manage_sell_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op;
  864|    241|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|    241|    {                                         \
  |  |   36|    241|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    241|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 241]
  |  |  ------------------
  |  |   38|    241|    }
  ------------------
  865|    241|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|    241|    {                           \
  |  |   31|    241|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 241]
  |  |  ------------------
  |  |   32|    241|    }
  ------------------
  866|    241|                                &op->buying,
  867|    241|                                &op->selling,
  868|    241|                                fdata->envelope->network,
  869|    241|                                fdata->value,
  870|    241|                                fdata->value_len))
  871|    241|    return format_operation_source_prepare(fdata);
  872|    241|}
formatter.c:format_create_passive_sell_offer:
 1010|    398|static bool format_create_passive_sell_offer(formatter_data_t *fdata) {
 1011|    398|    (void) fdata;
 1012|    398|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    398|    {                                         \
  |  |   36|    398|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    398|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 398]
  |  |  ------------------
  |  |   38|    398|    }
  ------------------
 1013|    398|    STRLCPY(fdata->value, "Create Passive Sell Offer", fdata->value_len);
  ------------------
  |  |   35|    398|    {                                         \
  |  |   36|    398|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    398|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 398]
  |  |  ------------------
  |  |   38|    398|    }
  ------------------
 1014|    398|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_buy))
  ------------------
  |  |   30|    398|    {                           \
  |  |   31|    398|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 398]
  |  |  ------------------
  |  |   32|    398|    }
  ------------------
 1015|    398|    return true;
 1016|    398|}
formatter.c:format_create_passive_sell_offer_buy:
  999|    398|static bool format_create_passive_sell_offer_buy(formatter_data_t *fdata) {
 1000|    398|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|    398|    {                                         \
  |  |   36|    398|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    398|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 398]
  |  |  ------------------
  |  |   38|    398|    }
  ------------------
 1001|    398|    FORMATTER_CHECK(
  ------------------
  |  |   30|    398|    {                           \
  |  |   31|    398|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 398]
  |  |  ------------------
  |  |   32|    398|    }
  ------------------
 1002|    398|        print_asset(&fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.buying,
 1003|    398|                    fdata->envelope->network,
 1004|    398|                    fdata->value,
 1005|    398|                    fdata->value_len))
 1006|    398|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_sell))
  ------------------
  |  |   30|    398|    {                           \
  |  |   31|    398|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 398]
  |  |  ------------------
  |  |   32|    398|    }
  ------------------
 1007|    398|    return true;
 1008|    398|}
formatter.c:format_create_passive_sell_offer_sell:
  987|    398|static bool format_create_passive_sell_offer_sell(formatter_data_t *fdata) {
  988|    398|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|    398|    {                                         \
  |  |   36|    398|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    398|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 398]
  |  |  ------------------
  |  |   38|    398|    }
  ------------------
  989|    398|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    398|    {                           \
  |  |   31|    398|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 398]
  |  |  ------------------
  |  |   32|    398|    }
  ------------------
  990|    398|        fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.amount,
  991|    398|        &fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.selling,
  992|    398|        fdata->envelope->network,
  993|    398|        fdata->value,
  994|    398|        fdata->value_len))
  995|    398|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_price))
  ------------------
  |  |   30|    398|    {                           \
  |  |   31|    398|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 398]
  |  |  ------------------
  |  |   32|    398|    }
  ------------------
  996|    398|    return true;
  997|    398|}
formatter.c:format_create_passive_sell_offer_price:
  974|    398|static bool format_create_passive_sell_offer_price(formatter_data_t *fdata) {
  975|    398|    create_passive_sell_offer_op_t *op =
  976|    398|        &fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op;
  977|    398|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|    398|    {                                         \
  |  |   36|    398|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    398|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 398]
  |  |  ------------------
  |  |   38|    398|    }
  ------------------
  978|    398|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|    398|    {                           \
  |  |   31|    398|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 398]
  |  |  ------------------
  |  |   32|    398|    }
  ------------------
  979|    398|                                &op->buying,
  980|    398|                                &op->selling,
  981|    398|                                fdata->envelope->network,
  982|    398|                                fdata->value,
  983|    398|                                fdata->value_len))
  984|    398|    return format_operation_source_prepare(fdata);
  985|    398|}
formatter.c:format_set_options:
  763|  2.75k|static bool format_set_options(formatter_data_t *fdata) {
  764|       |    // this operation is a special one among all operations, because all its
  765|       |    // fields are optional.
  766|  2.75k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  2.75k|    {                                         \
  |  |   36|  2.75k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.75k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.75k]
  |  |  ------------------
  |  |   38|  2.75k|    }
  ------------------
  767|  2.75k|    STRLCPY(fdata->value, "Set Options", fdata->value_len);
  ------------------
  |  |   35|  2.75k|    {                                         \
  |  |   36|  2.75k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.75k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.75k]
  |  |  ------------------
  |  |   38|  2.75k|    }
  ------------------
  768|  2.75k|    if (is_empty_set_options_body(fdata)) {
  ------------------
  |  Branch (768:9): [True: 690, False: 2.06k]
  ------------------
  769|    690|        FORMATTER_CHECK(push_to_formatter_stack(format_set_options_empty_body))
  ------------------
  |  |   30|    690|    {                           \
  |  |   31|    690|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 690]
  |  |  ------------------
  |  |   32|    690|    }
  ------------------
  770|  2.06k|    } else {
  771|  2.06k|        format_set_option_inflation_destination_prepare(fdata);
  772|  2.06k|    }
  773|  2.75k|    return true;
  774|  2.75k|}
formatter.c:is_empty_set_options_body:
  750|  2.75k|static bool is_empty_set_options_body(formatter_data_t *fdata) {
  751|  2.75k|    return !(
  752|  2.75k|        fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination_present ||
  ------------------
  |  Branch (752:9): [True: 69, False: 2.68k]
  ------------------
  753|  2.75k|        fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags_present ||
  ------------------
  |  Branch (753:9): [True: 456, False: 2.22k]
  ------------------
  754|  2.75k|        fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags_present ||
  ------------------
  |  Branch (754:9): [True: 73, False: 2.15k]
  ------------------
  755|  2.75k|        fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight_present ||
  ------------------
  |  Branch (755:9): [True: 107, False: 2.04k]
  ------------------
  756|  2.75k|        fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold_present ||
  ------------------
  |  Branch (756:9): [True: 415, False: 1.63k]
  ------------------
  757|  2.75k|        fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold_present ||
  ------------------
  |  Branch (757:9): [True: 336, False: 1.29k]
  ------------------
  758|  2.75k|        fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold_present ||
  ------------------
  |  Branch (758:9): [True: 34, False: 1.26k]
  ------------------
  759|  2.75k|        fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_present ||
  ------------------
  |  Branch (759:9): [True: 430, False: 830]
  ------------------
  760|  2.75k|        fdata->envelope->tx_details.tx.op_details.set_options_op.signer_present);
  ------------------
  |  Branch (760:9): [True: 140, False: 690]
  ------------------
  761|  2.75k|}
formatter.c:format_set_options_empty_body:
  743|    690|static bool format_set_options_empty_body(formatter_data_t *fdata) {
  744|    690|    (void) fdata;
  745|    690|    STRLCPY(fdata->caption, "SET OPTIONS", fdata->caption_len);
  ------------------
  |  |   35|    690|    {                                         \
  |  |   36|    690|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    690|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 690]
  |  |  ------------------
  |  |   38|    690|    }
  ------------------
  746|    690|    STRLCPY(fdata->value, "[BODY IS EMPTY]", fdata->value_len);
  ------------------
  |  |   35|    690|    {                                         \
  |  |   36|    690|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    690|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 690]
  |  |  ------------------
  |  |   38|    690|    }
  ------------------
  747|    690|    return format_operation_source_prepare(fdata);
  748|    690|}
formatter.c:format_set_option_inflation_destination_prepare:
  734|  2.06k|static bool format_set_option_inflation_destination_prepare(formatter_data_t *fdata) {
  735|  2.06k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination_present) {
  ------------------
  |  Branch (735:9): [True: 69, False: 1.99k]
  ------------------
  736|     69|        FORMATTER_CHECK(push_to_formatter_stack(format_set_option_inflation_destination))
  ------------------
  |  |   30|     69|    {                           \
  |  |   31|     69|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   32|     69|    }
  ------------------
  737|  1.99k|    } else {
  738|  1.99k|        format_set_option_clear_flags_prepare(fdata);
  739|  1.99k|    }
  740|  2.06k|    return true;
  741|  2.06k|}
formatter.c:format_set_option_inflation_destination:
  722|     69|static bool format_set_option_inflation_destination(formatter_data_t *fdata) {
  723|     69|    STRLCPY(fdata->caption, "Inflation Dest", fdata->caption_len);
  ------------------
  |  |   35|     69|    {                                         \
  |  |   36|     69|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     69|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   38|     69|    }
  ------------------
  724|     69|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|     69|    {                           \
  |  |   31|     69|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   32|     69|    }
  ------------------
  725|     69|        fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination,
  726|     69|        fdata->value,
  727|     69|        fdata->value_len,
  728|     69|        0,
  729|     69|        0))
  730|     69|    format_set_option_clear_flags_prepare(fdata);
  731|     69|    return true;
  732|     69|}
formatter.c:format_set_option_clear_flags_prepare:
  713|  2.06k|static bool format_set_option_clear_flags_prepare(formatter_data_t *fdata) {
  714|  2.06k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags_present) {
  ------------------
  |  Branch (714:9): [True: 521, False: 1.53k]
  ------------------
  715|    521|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_clear_flags))
  ------------------
  |  |   30|    521|    {                           \
  |  |   31|    521|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 521]
  |  |  ------------------
  |  |   32|    521|    }
  ------------------
  716|  1.53k|    } else {
  717|  1.53k|        format_set_option_set_flags_prepare(fdata);
  718|  1.53k|    }
  719|  2.06k|    return true;
  720|  2.06k|}
formatter.c:format_set_option_clear_flags:
  703|    521|static bool format_set_option_clear_flags(formatter_data_t *fdata) {
  704|    521|    STRLCPY(fdata->caption, "Clear Flags", fdata->caption_len);
  ------------------
  |  |   35|    521|    {                                         \
  |  |   36|    521|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    521|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 521]
  |  |  ------------------
  |  |   38|    521|    }
  ------------------
  705|    521|    FORMATTER_CHECK(
  ------------------
  |  |   30|    521|    {                           \
  |  |   31|    521|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 521]
  |  |  ------------------
  |  |   32|    521|    }
  ------------------
  706|    521|        print_account_flags(fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags,
  707|    521|                            fdata->value,
  708|    521|                            fdata->value_len))
  709|    521|    format_set_option_set_flags_prepare(fdata);
  710|    521|    return true;
  711|    521|}
formatter.c:format_set_option_set_flags_prepare:
  694|  2.06k|static bool format_set_option_set_flags_prepare(formatter_data_t *fdata) {
  695|  2.06k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags_present) {
  ------------------
  |  Branch (695:9): [True: 556, False: 1.50k]
  ------------------
  696|    556|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_set_flags))
  ------------------
  |  |   30|    556|    {                           \
  |  |   31|    556|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 556]
  |  |  ------------------
  |  |   32|    556|    }
  ------------------
  697|  1.50k|    } else {
  698|  1.50k|        format_set_option_master_weight_prepare(fdata);
  699|  1.50k|    }
  700|  2.06k|    return true;
  701|  2.06k|}
formatter.c:format_set_option_set_flags:
  684|    556|static bool format_set_option_set_flags(formatter_data_t *fdata) {
  685|    556|    STRLCPY(fdata->caption, "Set Flags", fdata->caption_len);
  ------------------
  |  |   35|    556|    {                                         \
  |  |   36|    556|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    556|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 556]
  |  |  ------------------
  |  |   38|    556|    }
  ------------------
  686|    556|    FORMATTER_CHECK(
  ------------------
  |  |   30|    556|    {                           \
  |  |   31|    556|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 556]
  |  |  ------------------
  |  |   32|    556|    }
  ------------------
  687|    556|        print_account_flags(fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags,
  688|    556|                            fdata->value,
  689|    556|                            fdata->value_len))
  690|    556|    format_set_option_master_weight_prepare(fdata);
  691|    556|    return true;
  692|    556|}
formatter.c:format_set_option_master_weight_prepare:
  675|  2.06k|static bool format_set_option_master_weight_prepare(formatter_data_t *fdata) {
  676|  2.06k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight_present) {
  ------------------
  |  Branch (676:9): [True: 165, False: 1.89k]
  ------------------
  677|    165|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_master_weight))
  ------------------
  |  |   30|    165|    {                           \
  |  |   31|    165|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 165]
  |  |  ------------------
  |  |   32|    165|    }
  ------------------
  678|  1.89k|    } else {
  679|  1.89k|        format_set_option_low_threshold_prepare(fdata);
  680|  1.89k|    }
  681|  2.06k|    return true;
  682|  2.06k|}
formatter.c:format_set_option_master_weight:
  665|    165|static bool format_set_option_master_weight(formatter_data_t *fdata) {
  666|    165|    STRLCPY(fdata->caption, "Master Weight", fdata->caption_len);
  ------------------
  |  |   35|    165|    {                                         \
  |  |   36|    165|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    165|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 165]
  |  |  ------------------
  |  |   38|    165|    }
  ------------------
  667|    165|    FORMATTER_CHECK(
  ------------------
  |  |   30|    165|    {                           \
  |  |   31|    165|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 165]
  |  |  ------------------
  |  |   32|    165|    }
  ------------------
  668|    165|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight,
  669|    165|                         fdata->value,
  670|    165|                         fdata->value_len))
  671|    165|    format_set_option_low_threshold_prepare(fdata);
  672|    165|    return true;
  673|    165|}
formatter.c:format_set_option_low_threshold_prepare:
  656|  2.06k|static bool format_set_option_low_threshold_prepare(formatter_data_t *fdata) {
  657|  2.06k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold_present) {
  ------------------
  |  Branch (657:9): [True: 469, False: 1.59k]
  ------------------
  658|    469|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_low_threshold))
  ------------------
  |  |   30|    469|    {                           \
  |  |   31|    469|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 469]
  |  |  ------------------
  |  |   32|    469|    }
  ------------------
  659|  1.59k|    } else {
  660|  1.59k|        format_set_option_medium_threshold_prepare(fdata);
  661|  1.59k|    }
  662|  2.06k|    return true;
  663|  2.06k|}
formatter.c:format_set_option_low_threshold:
  646|    469|static bool format_set_option_low_threshold(formatter_data_t *fdata) {
  647|    469|    STRLCPY(fdata->caption, "Low Threshold", fdata->caption_len);
  ------------------
  |  |   35|    469|    {                                         \
  |  |   36|    469|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    469|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 469]
  |  |  ------------------
  |  |   38|    469|    }
  ------------------
  648|    469|    FORMATTER_CHECK(
  ------------------
  |  |   30|    469|    {                           \
  |  |   31|    469|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 469]
  |  |  ------------------
  |  |   32|    469|    }
  ------------------
  649|    469|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold,
  650|    469|                         fdata->value,
  651|    469|                         fdata->value_len))
  652|    469|    format_set_option_medium_threshold_prepare(fdata);
  653|    469|    return true;
  654|    469|}
formatter.c:format_set_option_medium_threshold_prepare:
  637|  2.06k|static bool format_set_option_medium_threshold_prepare(formatter_data_t *fdata) {
  638|  2.06k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold_present) {
  ------------------
  |  Branch (638:9): [True: 383, False: 1.67k]
  ------------------
  639|    383|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_medium_threshold))
  ------------------
  |  |   30|    383|    {                           \
  |  |   31|    383|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 383]
  |  |  ------------------
  |  |   32|    383|    }
  ------------------
  640|  1.67k|    } else {
  641|  1.67k|        format_set_option_high_threshold_prepare(fdata);
  642|  1.67k|    }
  643|  2.06k|    return true;
  644|  2.06k|}
formatter.c:format_set_option_medium_threshold:
  627|    383|static bool format_set_option_medium_threshold(formatter_data_t *fdata) {
  628|    383|    STRLCPY(fdata->caption, "Medium Threshold", fdata->caption_len);
  ------------------
  |  |   35|    383|    {                                         \
  |  |   36|    383|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    383|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 383]
  |  |  ------------------
  |  |   38|    383|    }
  ------------------
  629|    383|    FORMATTER_CHECK(
  ------------------
  |  |   30|    383|    {                           \
  |  |   31|    383|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 383]
  |  |  ------------------
  |  |   32|    383|    }
  ------------------
  630|    383|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold,
  631|    383|                         fdata->value,
  632|    383|                         fdata->value_len))
  633|    383|    format_set_option_high_threshold_prepare(fdata);
  634|    383|    return true;
  635|    383|}
formatter.c:format_set_option_high_threshold_prepare:
  618|  2.06k|static bool format_set_option_high_threshold_prepare(formatter_data_t *fdata) {
  619|  2.06k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold_present) {
  ------------------
  |  Branch (619:9): [True: 75, False: 1.98k]
  ------------------
  620|     75|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_high_threshold))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
  621|  1.98k|    } else {
  622|  1.98k|        format_set_option_home_domain_prepare(fdata);
  623|  1.98k|    }
  624|  2.06k|    return true;
  625|  2.06k|}
formatter.c:format_set_option_high_threshold:
  608|     75|static bool format_set_option_high_threshold(formatter_data_t *fdata) {
  609|     75|    STRLCPY(fdata->caption, "High Threshold", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
  610|     75|    FORMATTER_CHECK(
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
  611|     75|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold,
  612|     75|                         fdata->value,
  613|     75|                         fdata->value_len))
  614|     75|    format_set_option_home_domain_prepare(fdata);
  615|     75|    return true;
  616|     75|}
formatter.c:format_set_option_home_domain_prepare:
  599|  2.06k|static bool format_set_option_home_domain_prepare(formatter_data_t *fdata) {
  600|  2.06k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_present) {
  ------------------
  |  Branch (600:9): [True: 479, False: 1.58k]
  ------------------
  601|    479|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_home_domain))
  ------------------
  |  |   30|    479|    {                           \
  |  |   31|    479|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 479]
  |  |  ------------------
  |  |   32|    479|    }
  ------------------
  602|  1.58k|    } else {
  603|  1.58k|        format_set_option_signer_prepare(fdata);
  604|  1.58k|    }
  605|  2.06k|    return true;
  606|  2.06k|}
formatter.c:format_set_option_home_domain:
  584|    479|static bool format_set_option_home_domain(formatter_data_t *fdata) {
  585|    479|    STRLCPY(fdata->caption, "Home Domain", fdata->caption_len);
  ------------------
  |  |   35|    479|    {                                         \
  |  |   36|    479|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    479|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 479]
  |  |  ------------------
  |  |   38|    479|    }
  ------------------
  586|    479|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_size) {
  ------------------
  |  Branch (586:9): [True: 310, False: 169]
  ------------------
  587|    310|        FORMATTER_CHECK(
  ------------------
  |  |   30|    310|    {                           \
  |  |   31|    310|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 310]
  |  |  ------------------
  |  |   32|    310|    }
  ------------------
  588|    310|            print_string(fdata->value,
  589|    310|                         fdata->value_len,
  590|    310|                         fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain,
  591|    310|                         fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_size))
  592|    310|    } else {
  593|    169|        STRLCPY(fdata->value, "[remove home domain from account]", fdata->value_len);
  ------------------
  |  |   35|    169|    {                                         \
  |  |   36|    169|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    169|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 169]
  |  |  ------------------
  |  |   38|    169|    }
  ------------------
  594|    169|    }
  595|    479|    format_set_option_signer_prepare(fdata);
  596|    479|    return true;
  597|    479|}
formatter.c:format_set_option_signer_prepare:
  575|  2.06k|static bool format_set_option_signer_prepare(formatter_data_t *fdata) {
  576|  2.06k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.signer_present) {
  ------------------
  |  Branch (576:9): [True: 443, False: 1.61k]
  ------------------
  577|    443|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer))
  ------------------
  |  |   30|    443|    {                           \
  |  |   31|    443|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 443]
  |  |  ------------------
  |  |   32|    443|    }
  ------------------
  578|  1.61k|    } else {
  579|  1.61k|        return format_operation_source_prepare(fdata);
  580|  1.61k|    }
  581|    443|    return true;
  582|  2.06k|}
formatter.c:format_set_option_signer:
  544|    443|static bool format_set_option_signer(formatter_data_t *fdata) {
  545|    443|    signer_t *signer = &fdata->envelope->tx_details.tx.op_details.set_options_op.signer;
  546|    443|    if (signer->weight) {
  ------------------
  |  Branch (546:9): [True: 193, False: 250]
  ------------------
  547|    193|        STRLCPY(fdata->caption, "Add Signer", fdata->caption_len);
  ------------------
  |  |   35|    193|    {                                         \
  |  |   36|    193|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    193|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 193]
  |  |  ------------------
  |  |   38|    193|    }
  ------------------
  548|    250|    } else {
  549|    250|        STRLCPY(fdata->caption, "Remove Signer", fdata->caption_len);
  ------------------
  |  |   35|    250|    {                                         \
  |  |   36|    250|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    250|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 250]
  |  |  ------------------
  |  |   38|    250|    }
  ------------------
  550|    250|    }
  551|    443|    switch (signer->key.type) {
  552|    341|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (552:9): [True: 341, False: 102]
  ------------------
  553|    341|            STRLCPY(fdata->value, "Type Public Key", fdata->value_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
  554|    341|            break;
  555|    341|        }
  556|     75|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (556:9): [True: 75, False: 368]
  ------------------
  557|     75|            STRLCPY(fdata->value, "Type Hash(x)", fdata->value_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
  558|     75|            break;
  559|     75|        }
  560|      4|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (560:9): [True: 4, False: 439]
  ------------------
  561|      4|            STRLCPY(fdata->value, "Type Pre-Auth", fdata->value_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  562|      4|            break;
  563|      4|        }
  564|     23|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (564:9): [True: 23, False: 420]
  ------------------
  565|     23|            STRLCPY(fdata->value, "Type Ed25519 Signed Payload", fdata->value_len);
  ------------------
  |  |   35|     23|    {                                         \
  |  |   36|     23|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     23|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 23]
  |  |  ------------------
  |  |   38|     23|    }
  ------------------
  566|     23|            break;
  567|     23|        }
  568|      0|        default:
  ------------------
  |  Branch (568:9): [True: 0, False: 443]
  ------------------
  569|      0|            return false;
  570|    443|    }
  571|    443|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer_detail))
  ------------------
  |  |   30|    443|    {                           \
  |  |   31|    443|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 443]
  |  |  ------------------
  |  |   32|    443|    }
  ------------------
  572|    443|    return true;
  573|    443|}
formatter.c:format_set_option_signer_detail:
  530|    443|static bool format_set_option_signer_detail(formatter_data_t *fdata) {
  531|    443|    STRLCPY(fdata->caption, "Signer Key", fdata->caption_len);
  ------------------
  |  |   35|    443|    {                                         \
  |  |   36|    443|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    443|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 443]
  |  |  ------------------
  |  |   38|    443|    }
  ------------------
  532|    443|    signer_key_t *key = &fdata->envelope->tx_details.tx.op_details.set_options_op.signer.key;
  533|       |
  534|    443|    FORMATTER_CHECK(print_signer_key_detail(key, fdata->value, fdata->value_len))
  ------------------
  |  |   30|    443|    {                           \
  |  |   31|    443|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 443]
  |  |  ------------------
  |  |   32|    443|    }
  ------------------
  535|       |
  536|    443|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.signer.weight != 0) {
  ------------------
  |  Branch (536:9): [True: 193, False: 250]
  ------------------
  537|    193|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer_weight))
  ------------------
  |  |   30|    193|    {                           \
  |  |   31|    193|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 193]
  |  |  ------------------
  |  |   32|    193|    }
  ------------------
  538|    250|    } else {
  539|    250|        return format_operation_source_prepare(fdata);
  540|    250|    }
  541|    193|    return true;
  542|    443|}
formatter.c:print_signer_key_detail:
  502|  1.62k|static bool print_signer_key_detail(signer_key_t *key, char *value, size_t value_len) {
  503|  1.62k|    switch (key->type) {
  504|    794|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (504:9): [True: 794, False: 833]
  ------------------
  505|    794|            FORMATTER_CHECK(print_account_id(key->ed25519, value, value_len, 0, 0))
  ------------------
  |  |   30|    794|    {                           \
  |  |   31|    794|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 794]
  |  |  ------------------
  |  |   32|    794|    }
  ------------------
  506|    794|            break;
  507|    794|        }
  508|    794|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (508:9): [True: 199, False: 1.42k]
  ------------------
  509|    199|            FORMATTER_CHECK(print_hash_x_key(key->hash_x, value, value_len, 0, 0))
  ------------------
  |  |   30|    199|    {                           \
  |  |   31|    199|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   32|    199|    }
  ------------------
  510|    199|            break;
  511|    199|        }
  512|    267|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (512:9): [True: 267, False: 1.36k]
  ------------------
  513|    267|            FORMATTER_CHECK(print_pre_auth_x_key(key->pre_auth_tx, value, value_len, 0, 0))
  ------------------
  |  |   30|    267|    {                           \
  |  |   31|    267|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 267]
  |  |  ------------------
  |  |   32|    267|    }
  ------------------
  514|    267|            break;
  515|    267|        }
  516|    367|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (516:9): [True: 367, False: 1.26k]
  ------------------
  517|    367|            FORMATTER_CHECK(print_ed25519_signed_payload(&key->ed25519_signed_payload,
  ------------------
  |  |   30|    367|    {                           \
  |  |   31|    367|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 367]
  |  |  ------------------
  |  |   32|    367|    }
  ------------------
  518|    367|                                                         value,
  519|    367|                                                         value_len,
  520|    367|                                                         12,
  521|    367|                                                         12))
  522|    367|            break;
  523|    367|        }
  524|    367|        default:
  ------------------
  |  Branch (524:9): [True: 0, False: 1.62k]
  ------------------
  525|      0|            return false;
  526|  1.62k|    }
  527|  1.62k|    return true;
  528|  1.62k|}
formatter.c:format_set_option_signer_weight:
  493|    193|static bool format_set_option_signer_weight(formatter_data_t *fdata) {
  494|    193|    STRLCPY(fdata->caption, "Weight", fdata->caption_len);
  ------------------
  |  |   35|    193|    {                                         \
  |  |   36|    193|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    193|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 193]
  |  |  ------------------
  |  |   38|    193|    }
  ------------------
  495|    193|    FORMATTER_CHECK(
  ------------------
  |  |   30|    193|    {                           \
  |  |   31|    193|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 193]
  |  |  ------------------
  |  |   32|    193|    }
  ------------------
  496|    193|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.signer.weight,
  497|    193|                         fdata->value,
  498|    193|                         fdata->value_len))
  499|    193|    return format_operation_source_prepare(fdata);
  500|    193|}
formatter.c:format_change_trust:
  829|    888|static bool format_change_trust(formatter_data_t *fdata) {
  830|    888|    if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit) {
  ------------------
  |  Branch (830:9): [True: 555, False: 333]
  ------------------
  831|    555|        STRLCPY(fdata->caption, "Change Trust", fdata->caption_len);
  ------------------
  |  |   35|    555|    {                                         \
  |  |   36|    555|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    555|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 555]
  |  |  ------------------
  |  |   38|    555|    }
  ------------------
  832|    555|    } else {
  833|    333|        STRLCPY(fdata->caption, "Remove Trust", fdata->caption_len);
  ------------------
  |  |   35|    333|    {                                         \
  |  |   36|    333|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    333|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 333]
  |  |  ------------------
  |  |   38|    333|    }
  ------------------
  834|    333|    }
  835|    888|    uint8_t asset_type = fdata->envelope->tx_details.tx.op_details.change_trust_op.line.type;
  836|    888|    switch (asset_type) {
  837|    246|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (837:9): [True: 246, False: 642]
  ------------------
  838|    410|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (838:9): [True: 164, False: 724]
  ------------------
  839|    410|            FORMATTER_CHECK(print_asset(
  ------------------
  |  |   30|    410|    {                           \
  |  |   31|    410|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 410]
  |  |  ------------------
  |  |   32|    410|    }
  ------------------
  840|    410|                (asset_t *) &fdata->envelope->tx_details.tx.op_details.change_trust_op.line,
  841|    410|                fdata->envelope->network,
  842|    410|                fdata->value,
  843|    410|                fdata->value_len))
  844|    410|            if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit &&
  ------------------
  |  Branch (844:17): [True: 276, False: 134]
  ------------------
  845|    410|                fdata->envelope->tx_details.tx.op_details.change_trust_op.limit != INT64_MAX) {
  ------------------
  |  Branch (845:17): [True: 272, False: 4]
  ------------------
  846|    272|                FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_limit))
  ------------------
  |  |   30|    272|    {                           \
  |  |   31|    272|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 272]
  |  |  ------------------
  |  |   32|    272|    }
  ------------------
  847|    272|            } else {
  848|    138|                return format_operation_source_prepare(fdata);
  849|    138|            }
  850|    272|            break;
  851|    305|        case ASSET_TYPE_POOL_SHARE:
  ------------------
  |  Branch (851:9): [True: 305, False: 583]
  ------------------
  852|    305|            STRLCPY(fdata->value, "Liquidity Pool Asset", fdata->value_len);
  ------------------
  |  |   35|    305|    {                                         \
  |  |   36|    305|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    305|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 305]
  |  |  ------------------
  |  |   38|    305|    }
  ------------------
  853|    305|            FORMATTER_CHECK(
  ------------------
  |  |   30|    305|    {                           \
  |  |   31|    305|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 305]
  |  |  ------------------
  |  |   32|    305|    }
  ------------------
  854|    305|                push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_asset_a))
  855|    305|            break;
  856|    305|        default:
  ------------------
  |  Branch (856:9): [True: 173, False: 715]
  ------------------
  857|    173|            return false;
  858|    888|    }
  859|    577|    return true;
  860|    888|}
formatter.c:format_change_trust_limit:
  776|    438|static bool format_change_trust_limit(formatter_data_t *fdata) {
  777|    438|    STRLCPY(fdata->caption, "Trust Limit", fdata->caption_len);
  ------------------
  |  |   35|    438|    {                                         \
  |  |   36|    438|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    438|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 438]
  |  |  ------------------
  |  |   38|    438|    }
  ------------------
  778|    438|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.change_trust_op.limit,
  ------------------
  |  |   30|    438|    {                           \
  |  |   31|    438|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 438]
  |  |  ------------------
  |  |   32|    438|    }
  ------------------
  779|    438|                                 NULL,
  780|    438|                                 fdata->envelope->network,
  781|    438|                                 fdata->value,
  782|    438|                                 fdata->value_len))
  783|    438|    return format_operation_source_prepare(fdata);
  784|    438|}
formatter.c:format_change_trust_detail_liquidity_pool_asset_a:
  818|    305|static bool format_change_trust_detail_liquidity_pool_asset_a(formatter_data_t *fdata) {
  819|    305|    STRLCPY(fdata->caption, "Asset A", fdata->caption_len);
  ------------------
  |  |   35|    305|    {                                         \
  |  |   36|    305|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    305|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 305]
  |  |  ------------------
  |  |   38|    305|    }
  ------------------
  820|    305|    FORMATTER_CHECK(print_asset(&fdata->envelope->tx_details.tx.op_details.change_trust_op.line
  ------------------
  |  |   30|    305|    {                           \
  |  |   31|    305|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 305]
  |  |  ------------------
  |  |   32|    305|    }
  ------------------
  821|    305|                                     .liquidity_pool.constant_product.asset_a,
  822|    305|                                fdata->envelope->network,
  823|    305|                                fdata->value,
  824|    305|                                fdata->value_len))
  825|    305|    FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_asset_b))
  ------------------
  |  |   30|    305|    {                           \
  |  |   31|    305|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 305]
  |  |  ------------------
  |  |   32|    305|    }
  ------------------
  826|    305|    return true;
  827|    305|}
formatter.c:format_change_trust_detail_liquidity_pool_asset_b:
  807|    305|static bool format_change_trust_detail_liquidity_pool_asset_b(formatter_data_t *fdata) {
  808|    305|    STRLCPY(fdata->caption, "Asset B", fdata->caption_len);
  ------------------
  |  |   35|    305|    {                                         \
  |  |   36|    305|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    305|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 305]
  |  |  ------------------
  |  |   38|    305|    }
  ------------------
  809|    305|    FORMATTER_CHECK(print_asset(&fdata->envelope->tx_details.tx.op_details.change_trust_op.line
  ------------------
  |  |   30|    305|    {                           \
  |  |   31|    305|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 305]
  |  |  ------------------
  |  |   32|    305|    }
  ------------------
  810|    305|                                     .liquidity_pool.constant_product.asset_b,
  811|    305|                                fdata->envelope->network,
  812|    305|                                fdata->value,
  813|    305|                                fdata->value_len))
  814|    305|    FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_fee))
  ------------------
  |  |   30|    305|    {                           \
  |  |   31|    305|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 305]
  |  |  ------------------
  |  |   32|    305|    }
  ------------------
  815|    305|    return true;
  816|    305|}
formatter.c:format_change_trust_detail_liquidity_pool_fee:
  786|    305|static bool format_change_trust_detail_liquidity_pool_fee(formatter_data_t *fdata) {
  787|    305|    STRLCPY(fdata->caption, "Pool Fee Rate", fdata->caption_len);
  ------------------
  |  |   35|    305|    {                                         \
  |  |   36|    305|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    305|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 305]
  |  |  ------------------
  |  |   38|    305|    }
  ------------------
  788|       |
  789|    305|    uint8_t fee[4] = {0};
  790|  1.52k|    for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (790:21): [True: 1.22k, False: 305]
  ------------------
  791|  1.22k|        fee[i] = fdata->envelope->tx_details.tx.op_details.change_trust_op.line.liquidity_pool
  792|  1.22k|                     .constant_product.fee >>
  793|  1.22k|                 (8 * (3 - i));
  794|  1.22k|    }
  795|    305|    FORMATTER_CHECK(print_int32(fee, 2, fdata->value, fdata->value_len, false))
  ------------------
  |  |   30|    305|    {                           \
  |  |   31|    305|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 305]
  |  |  ------------------
  |  |   32|    305|    }
  ------------------
  796|       |
  797|    305|    STRLCAT(fdata->value, "%", fdata->value_len);
  ------------------
  |  |   41|    305|    {                                         \
  |  |   42|    305|        size_t len = strlcat(dst, src, size); \
  |  |   43|    305|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 305]
  |  |  ------------------
  |  |   44|    305|    }
  ------------------
  798|    305|    if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit &&
  ------------------
  |  Branch (798:9): [True: 174, False: 131]
  ------------------
  799|    305|        fdata->envelope->tx_details.tx.op_details.change_trust_op.limit != INT64_MAX) {
  ------------------
  |  Branch (799:9): [True: 166, False: 8]
  ------------------
  800|    166|        FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_limit))
  ------------------
  |  |   30|    166|    {                           \
  |  |   31|    166|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 166]
  |  |  ------------------
  |  |   32|    166|    }
  ------------------
  801|    166|    } else {
  802|    139|        return format_operation_source_prepare(fdata);
  803|    139|    }
  804|    166|    return true;
  805|    305|}
formatter.c:format_allow_trust:
  485|    293|static bool format_allow_trust(formatter_data_t *fdata) {
  486|    293|    (void) fdata;
  487|    293|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    293|    {                                         \
  |  |   36|    293|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    293|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 293]
  |  |  ------------------
  |  |   38|    293|    }
  ------------------
  488|    293|    STRLCPY(fdata->value, "Allow Trust", fdata->value_len);
  ------------------
  |  |   35|    293|    {                                         \
  |  |   36|    293|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    293|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 293]
  |  |  ------------------
  |  |   38|    293|    }
  ------------------
  489|    293|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_trustor))
  ------------------
  |  |   30|    293|    {                           \
  |  |   31|    293|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 293]
  |  |  ------------------
  |  |   32|    293|    }
  ------------------
  490|    293|    return true;
  491|    293|}
formatter.c:format_allow_trust_trustor:
  473|    293|static bool format_allow_trust_trustor(formatter_data_t *fdata) {
  474|    293|    STRLCPY(fdata->caption, "Trustor", fdata->caption_len);
  ------------------
  |  |   35|    293|    {                                         \
  |  |   36|    293|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    293|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 293]
  |  |  ------------------
  |  |   38|    293|    }
  ------------------
  475|    293|    FORMATTER_CHECK(
  ------------------
  |  |   30|    293|    {                           \
  |  |   31|    293|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 293]
  |  |  ------------------
  |  |   32|    293|    }
  ------------------
  476|    293|        print_account_id(fdata->envelope->tx_details.tx.op_details.allow_trust_op.trustor,
  477|    293|                         fdata->value,
  478|    293|                         fdata->value_len,
  479|    293|                         0,
  480|    293|                         0))
  481|    293|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_asset_code))
  ------------------
  |  |   30|    293|    {                           \
  |  |   31|    293|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 293]
  |  |  ------------------
  |  |   32|    293|    }
  ------------------
  482|    293|    return true;
  483|    293|}
formatter.c:format_allow_trust_asset_code:
  446|    293|static bool format_allow_trust_asset_code(formatter_data_t *fdata) {
  447|    293|    STRLCPY(fdata->caption, "Asset Code", fdata->caption_len);
  ------------------
  |  |   35|    293|    {                                         \
  |  |   36|    293|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    293|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 293]
  |  |  ------------------
  |  |   38|    293|    }
  ------------------
  448|    293|    switch (fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_type) {
  449|    198|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (449:9): [True: 198, False: 95]
  ------------------
  450|    198|            FORMATTER_CHECK(
  ------------------
  |  |   30|    198|    {                           \
  |  |   31|    198|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 198]
  |  |  ------------------
  |  |   32|    198|    }
  ------------------
  451|    198|                print_string(fdata->value,
  452|    198|                             fdata->value_len,
  453|    198|                             fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_code,
  454|    198|                             4))
  455|       |
  456|    198|            break;
  457|    198|        }
  458|    198|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (458:9): [True: 95, False: 198]
  ------------------
  459|     95|            FORMATTER_CHECK(
  ------------------
  |  |   30|     95|    {                           \
  |  |   31|     95|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 95]
  |  |  ------------------
  |  |   32|     95|    }
  ------------------
  460|     95|                print_string(fdata->value,
  461|     95|                             fdata->value_len,
  462|     95|                             fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_code,
  463|     95|                             12))
  464|     95|            break;
  465|     95|        }
  466|     95|        default:
  ------------------
  |  Branch (466:9): [True: 0, False: 293]
  ------------------
  467|      0|            return false;  // unknown asset type
  468|    293|    }
  469|    293|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_authorize))
  ------------------
  |  |   30|    293|    {                           \
  |  |   31|    293|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 293]
  |  |  ------------------
  |  |   32|    293|    }
  ------------------
  470|    293|    return true;
  471|    293|}
formatter.c:format_allow_trust_authorize:
  437|    293|static bool format_allow_trust_authorize(formatter_data_t *fdata) {
  438|    293|    STRLCPY(fdata->caption, "Authorize Flag", fdata->caption_len);
  ------------------
  |  |   35|    293|    {                                         \
  |  |   36|    293|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    293|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 293]
  |  |  ------------------
  |  |   38|    293|    }
  ------------------
  439|    293|    FORMATTER_CHECK(
  ------------------
  |  |   30|    293|    {                           \
  |  |   31|    293|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 293]
  |  |  ------------------
  |  |   32|    293|    }
  ------------------
  440|    293|        print_allow_trust_flags(fdata->envelope->tx_details.tx.op_details.allow_trust_op.authorize,
  441|    293|                                fdata->value,
  442|    293|                                fdata->value_len))
  443|    293|    return format_operation_source_prepare(fdata);
  444|    293|}
formatter.c:format_account_merge:
  387|    473|static bool format_account_merge(formatter_data_t *fdata) {
  388|    473|    (void) fdata;
  389|    473|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    473|    {                                         \
  |  |   36|    473|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    473|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 473]
  |  |  ------------------
  |  |   38|    473|    }
  ------------------
  390|    473|    STRLCPY(fdata->value, "Account Merge", fdata->value_len);
  ------------------
  |  |   35|    473|    {                                         \
  |  |   36|    473|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    473|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 473]
  |  |  ------------------
  |  |   38|    473|    }
  ------------------
  391|    473|    FORMATTER_CHECK(push_to_formatter_stack(&format_account_merge_detail))
  ------------------
  |  |   30|    473|    {                           \
  |  |   31|    473|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 473]
  |  |  ------------------
  |  |   32|    473|    }
  ------------------
  392|    473|    return true;
  393|    473|}
formatter.c:format_account_merge_detail:
  380|    473|static bool format_account_merge_detail(formatter_data_t *fdata) {
  381|    473|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|    473|    {                                         \
  |  |   36|    473|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    473|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 473]
  |  |  ------------------
  |  |   38|    473|    }
  ------------------
  382|    473|    STRLCPY(fdata->value, "All Funds", fdata->value_len);
  ------------------
  |  |   35|    473|    {                                         \
  |  |   36|    473|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    473|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 473]
  |  |  ------------------
  |  |   38|    473|    }
  ------------------
  383|    473|    FORMATTER_CHECK(push_to_formatter_stack(&format_account_merge_destination))
  ------------------
  |  |   30|    473|    {                           \
  |  |   31|    473|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 473]
  |  |  ------------------
  |  |   32|    473|    }
  ------------------
  384|    473|    return true;
  385|    473|}
formatter.c:format_account_merge_destination:
  369|    473|static bool format_account_merge_destination(formatter_data_t *fdata) {
  370|    473|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    473|    {                                         \
  |  |   36|    473|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    473|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 473]
  |  |  ------------------
  |  |   38|    473|    }
  ------------------
  371|    473|    FORMATTER_CHECK(
  ------------------
  |  |   30|    473|    {                           \
  |  |   31|    473|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 473]
  |  |  ------------------
  |  |   32|    473|    }
  ------------------
  372|    473|        print_muxed_account(&fdata->envelope->tx_details.tx.op_details.account_merge_op.destination,
  373|    473|                            fdata->value,
  374|    473|                            fdata->value_len,
  375|    473|                            0,
  376|    473|                            0))
  377|    473|    return format_operation_source_prepare(fdata);
  378|    473|}
formatter.c:format_inflation:
  362|  1.00k|static bool format_inflation(formatter_data_t *fdata) {
  363|  1.00k|    (void) fdata;
  364|  1.00k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  1.00k|    {                                         \
  |  |   36|  1.00k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.00k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.00k]
  |  |  ------------------
  |  |   38|  1.00k|    }
  ------------------
  365|  1.00k|    STRLCPY(fdata->value, "Inflation", fdata->value_len);
  ------------------
  |  |   35|  1.00k|    {                                         \
  |  |   36|  1.00k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.00k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.00k]
  |  |  ------------------
  |  |   38|  1.00k|    }
  ------------------
  366|  1.00k|    return format_operation_source_prepare(fdata);
  367|  1.00k|}
formatter.c:format_manage_data:
  420|  1.06k|static bool format_manage_data(formatter_data_t *fdata) {
  421|  1.06k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.06k|    {                           \
  |  |   31|  1.06k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.06k]
  |  |  ------------------
  |  |   32|  1.06k|    }
  ------------------
  422|  1.06k|        print_string(fdata->value,
  423|  1.06k|                     fdata->value_len,
  424|  1.06k|                     fdata->envelope->tx_details.tx.op_details.manage_data_op.data_name,
  425|  1.06k|                     fdata->envelope->tx_details.tx.op_details.manage_data_op.data_name_size))
  426|       |
  427|  1.06k|    if (fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size) {
  ------------------
  |  Branch (427:9): [True: 43, False: 1.02k]
  ------------------
  428|     43|        STRLCPY(fdata->caption, "Set Data", fdata->caption_len);
  ------------------
  |  |   35|     43|    {                                         \
  |  |   36|     43|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     43|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   38|     43|    }
  ------------------
  429|     43|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_data_value))
  ------------------
  |  |   30|     43|    {                           \
  |  |   31|     43|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   32|     43|    }
  ------------------
  430|  1.02k|    } else {
  431|  1.02k|        STRLCPY(fdata->caption, "Remove Data", fdata->caption_len);
  ------------------
  |  |   35|  1.02k|    {                                         \
  |  |   36|  1.02k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.02k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.02k]
  |  |  ------------------
  |  |   38|  1.02k|    }
  ------------------
  432|  1.02k|        return format_operation_source_prepare(fdata);
  433|  1.02k|    }
  434|     43|    return true;
  435|  1.06k|}
formatter.c:format_manage_data_value:
  395|     43|static bool format_manage_data_value(formatter_data_t *fdata) {
  396|     43|    STRLCPY(fdata->caption, "Data Value", fdata->caption_len);
  ------------------
  |  |   35|     43|    {                                         \
  |  |   36|     43|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     43|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   38|     43|    }
  ------------------
  397|     43|    if (is_printable_binary(
  ------------------
  |  Branch (397:9): [True: 12, False: 31]
  ------------------
  398|     43|            fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  399|     43|            fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size)) {
  400|     12|        if (fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size >=
  ------------------
  |  Branch (400:13): [True: 0, False: 12]
  ------------------
  401|     12|            fdata->value_len) {
  402|      0|            return false;
  403|      0|        }
  404|     12|        FORMATTER_CHECK(
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  405|     12|            print_string(fdata->value,
  406|     12|                         fdata->value_len,
  407|     12|                         fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  408|     12|                         fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size))
  409|     31|    } else {
  410|     31|        STRLCPY(fdata->value, "Base64: ", fdata->value_len)
  ------------------
  |  |   35|     31|    {                                         \
  |  |   36|     31|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     31|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   38|     31|    }
  ------------------
  411|     31|        FORMATTER_CHECK(
  ------------------
  |  |   30|     31|    {                           \
  |  |   31|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   32|     31|    }
  ------------------
  412|     31|            base64_encode(fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  413|     31|                          fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size,
  414|     31|                          fdata->value + strlen(fdata->value),
  415|     31|                          fdata->value_len - strlen(fdata->value)))
  416|     31|    }
  417|     43|    return format_operation_source_prepare(fdata);
  418|     43|}
formatter.c:format_bump_sequence:
  354|    282|static bool format_bump_sequence(formatter_data_t *fdata) {
  355|    282|    (void) fdata;
  356|    282|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    282|    {                                         \
  |  |   36|    282|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    282|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   38|    282|    }
  ------------------
  357|    282|    STRLCPY(fdata->value, "Bump Sequence", fdata->value_len);
  ------------------
  |  |   35|    282|    {                                         \
  |  |   36|    282|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    282|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   38|    282|    }
  ------------------
  358|    282|    FORMATTER_CHECK(push_to_formatter_stack(&format_bump_sequence_bump_to))
  ------------------
  |  |   30|    282|    {                           \
  |  |   31|    282|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   32|    282|    }
  ------------------
  359|    282|    return true;
  360|    282|}
formatter.c:format_bump_sequence_bump_to:
  345|    282|static bool format_bump_sequence_bump_to(formatter_data_t *fdata) {
  346|    282|    STRLCPY(fdata->caption, "Bump To", fdata->caption_len);
  ------------------
  |  |   35|    282|    {                                         \
  |  |   36|    282|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    282|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   38|    282|    }
  ------------------
  347|    282|    FORMATTER_CHECK(
  ------------------
  |  |   30|    282|    {                           \
  |  |   31|    282|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   32|    282|    }
  ------------------
  348|    282|        print_int64_num(fdata->envelope->tx_details.tx.op_details.bump_sequence_op.bump_to,
  349|    282|                        fdata->value,
  350|    282|                        fdata->value_len))
  351|    282|    return format_operation_source_prepare(fdata);
  352|    282|}
formatter.c:format_manage_buy_offer:
  955|    220|static bool format_manage_buy_offer(formatter_data_t *fdata) {
  956|    220|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  957|       |
  958|    220|    if (op->buy_amount == 0) {
  ------------------
  |  Branch (958:9): [True: 114, False: 106]
  ------------------
  959|    114|        STRLCPY(fdata->caption, "Remove Offer", fdata->caption_len);
  ------------------
  |  |   35|    114|    {                                         \
  |  |   36|    114|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    114|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 114]
  |  |  ------------------
  |  |   38|    114|    }
  ------------------
  960|    114|        FORMATTER_CHECK(print_uint64_num(op->offer_id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|    114|    {                           \
  |  |   31|    114|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 114]
  |  |  ------------------
  |  |   32|    114|    }
  ------------------
  961|    114|        return format_operation_source_prepare(fdata);
  962|    114|    } else {
  963|    106|        if (op->offer_id) {
  ------------------
  |  Branch (963:13): [True: 56, False: 50]
  ------------------
  964|     56|            STRLCPY(fdata->caption, "Change Offer", fdata->caption_len);
  ------------------
  |  |   35|     56|    {                                         \
  |  |   36|     56|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     56|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 56]
  |  |  ------------------
  |  |   38|     56|    }
  ------------------
  965|     56|            FORMATTER_CHECK(print_uint64_num(op->offer_id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     56|    {                           \
  |  |   31|     56|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 56]
  |  |  ------------------
  |  |   32|     56|    }
  ------------------
  966|     56|        } else {
  967|     50|            STRLCPY(fdata->caption, "Create Offer", fdata->caption_len);
  ------------------
  |  |   35|     50|    {                                         \
  |  |   36|     50|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     50|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   38|     50|    }
  ------------------
  968|     50|        }
  969|    106|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_sell))
  ------------------
  |  |   30|    106|    {                           \
  |  |   31|    106|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 106]
  |  |  ------------------
  |  |   32|    106|    }
  ------------------
  970|    106|    }
  971|    106|    return true;
  972|    220|}
formatter.c:format_manage_buy_offer_sell:
  945|    106|static bool format_manage_buy_offer_sell(formatter_data_t *fdata) {
  946|    106|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  947|       |
  948|    106|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|    106|    {                                         \
  |  |   36|    106|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    106|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 106]
  |  |  ------------------
  |  |   38|    106|    }
  ------------------
  949|    106|    FORMATTER_CHECK(
  ------------------
  |  |   30|    106|    {                           \
  |  |   31|    106|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 106]
  |  |  ------------------
  |  |   32|    106|    }
  ------------------
  950|    106|        print_asset(&op->selling, fdata->envelope->network, fdata->value, fdata->value_len))
  951|    106|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_buy))
  ------------------
  |  |   30|    106|    {                           \
  |  |   31|    106|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 106]
  |  |  ------------------
  |  |   32|    106|    }
  ------------------
  952|    106|    return true;
  953|    106|}
formatter.c:format_manage_buy_offer_buy:
  932|    106|static bool format_manage_buy_offer_buy(formatter_data_t *fdata) {
  933|    106|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  934|       |
  935|    106|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|    106|    {                                         \
  |  |   36|    106|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    106|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 106]
  |  |  ------------------
  |  |   38|    106|    }
  ------------------
  936|    106|    FORMATTER_CHECK(print_amount(op->buy_amount,
  ------------------
  |  |   30|    106|    {                           \
  |  |   31|    106|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 106]
  |  |  ------------------
  |  |   32|    106|    }
  ------------------
  937|    106|                                 &op->buying,
  938|    106|                                 fdata->envelope->network,
  939|    106|                                 fdata->value,
  940|    106|                                 fdata->value_len))
  941|    106|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_price))
  ------------------
  |  |   30|    106|    {                           \
  |  |   31|    106|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 106]
  |  |  ------------------
  |  |   32|    106|    }
  ------------------
  942|    106|    return true;
  943|    106|}
formatter.c:format_manage_buy_offer_price:
  920|    106|static bool format_manage_buy_offer_price(formatter_data_t *fdata) {
  921|    106|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  922|    106|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|    106|    {                                         \
  |  |   36|    106|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    106|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 106]
  |  |  ------------------
  |  |   38|    106|    }
  ------------------
  923|    106|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|    106|    {                           \
  |  |   31|    106|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 106]
  |  |  ------------------
  |  |   32|    106|    }
  ------------------
  924|    106|                                &op->selling,
  925|    106|                                &op->buying,
  926|    106|                                fdata->envelope->network,
  927|    106|                                fdata->value,
  928|    106|                                fdata->value_len))
  929|    106|    return format_operation_source_prepare(fdata);
  930|    106|}
formatter.c:format_path_payment_strict_send:
 1076|    187|static bool format_path_payment_strict_send(formatter_data_t *fdata) {
 1077|    187|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|    187|    {                                         \
  |  |   36|    187|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    187|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   38|    187|    }
  ------------------
 1078|    187|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    187|    {                           \
  |  |   31|    187|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   32|    187|    }
  ------------------
 1079|    187|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.send_amount,
 1080|    187|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.send_asset,
 1081|    187|        fdata->envelope->network,
 1082|    187|        fdata->value,
 1083|    187|        fdata->value_len))
 1084|    187|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_send_destination))
  ------------------
  |  |   30|    187|    {                           \
  |  |   31|    187|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   32|    187|    }
  ------------------
 1085|    187|    return true;
 1086|    187|}
formatter.c:format_path_payment_strict_send_destination:
 1064|    187|static bool format_path_payment_strict_send_destination(formatter_data_t *fdata) {
 1065|    187|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    187|    {                                         \
  |  |   36|    187|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    187|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   38|    187|    }
  ------------------
 1066|    187|    FORMATTER_CHECK(print_muxed_account(
  ------------------
  |  |   30|    187|    {                           \
  |  |   31|    187|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   32|    187|    }
  ------------------
 1067|    187|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.destination,
 1068|    187|        fdata->value,
 1069|    187|        fdata->value_len,
 1070|    187|        0,
 1071|    187|        0))
 1072|    187|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_send_receive))
  ------------------
  |  |   30|    187|    {                           \
  |  |   31|    187|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   32|    187|    }
  ------------------
 1073|    187|    return true;
 1074|    187|}
formatter.c:format_path_payment_strict_send_receive:
 1053|    187|static bool format_path_payment_strict_send_receive(formatter_data_t *fdata) {
 1054|    187|    STRLCPY(fdata->caption, "Receive Min", fdata->caption_len);
  ------------------
  |  |   35|    187|    {                                         \
  |  |   36|    187|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    187|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   38|    187|    }
  ------------------
 1055|    187|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    187|    {                           \
  |  |   31|    187|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   32|    187|    }
  ------------------
 1056|    187|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.dest_min,
 1057|    187|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.dest_asset,
 1058|    187|        fdata->envelope->network,
 1059|    187|        fdata->value,
 1060|    187|        fdata->value_len))
 1061|    187|    return format_operation_source_prepare(fdata);
 1062|    187|}
formatter.c:format_create_claimable_balance:
 1165|    515|static bool format_create_claimable_balance(formatter_data_t *fdata) {
 1166|    515|    (void) fdata;
 1167|    515|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    515|    {                                         \
  |  |   36|    515|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    515|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 515]
  |  |  ------------------
  |  |   38|    515|    }
  ------------------
 1168|    515|    STRLCPY(fdata->value, "Create Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|    515|    {                                         \
  |  |   36|    515|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    515|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 515]
  |  |  ------------------
  |  |   38|    515|    }
  ------------------
 1169|    515|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_claimable_balance_balance))
  ------------------
  |  |   30|    515|    {                           \
  |  |   31|    515|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 515]
  |  |  ------------------
  |  |   32|    515|    }
  ------------------
 1170|    515|    return true;
 1171|    515|}
formatter.c:format_create_claimable_balance_balance:
 1153|    515|static bool format_create_claimable_balance_balance(formatter_data_t *fdata) {
 1154|    515|    STRLCPY(fdata->caption, "Balance", fdata->caption_len);
  ------------------
  |  |   35|    515|    {                                         \
  |  |   36|    515|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    515|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 515]
  |  |  ------------------
  |  |   38|    515|    }
  ------------------
 1155|    515|    FORMATTER_CHECK(
  ------------------
  |  |   30|    515|    {                           \
  |  |   31|    515|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 515]
  |  |  ------------------
  |  |   32|    515|    }
  ------------------
 1156|    515|        print_amount(fdata->envelope->tx_details.tx.op_details.create_claimable_balance_op.amount,
 1157|    515|                     &fdata->envelope->tx_details.tx.op_details.create_claimable_balance_op.asset,
 1158|    515|                     fdata->envelope->network,
 1159|    515|                     fdata->value,
 1160|    515|                     fdata->value_len))
 1161|    515|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_claimable_balance_warning))
  ------------------
  |  |   30|    515|    {                           \
  |  |   31|    515|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 515]
  |  |  ------------------
  |  |   32|    515|    }
  ------------------
 1162|    515|    return true;
 1163|    515|}
formatter.c:format_create_claimable_balance_warning:
 1142|    515|static bool format_create_claimable_balance_warning(formatter_data_t *fdata) {
 1143|    515|    (void) fdata;
 1144|       |    // The claimant can be very complicated. I haven't figured out how to
 1145|       |    // display it for the time being, so let's display an WARNING here first.
 1146|    515|    STRLCPY(fdata->caption, "WARNING", fdata->caption_len);
  ------------------
  |  |   35|    515|    {                                         \
  |  |   36|    515|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    515|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 515]
  |  |  ------------------
  |  |   38|    515|    }
  ------------------
 1147|    515|    STRLCPY(fdata->value,
  ------------------
  |  |   35|    515|    {                                         \
  |  |   36|    515|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    515|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 515]
  |  |  ------------------
  |  |   38|    515|    }
  ------------------
 1148|    515|            "Currently does not support displaying claimant details",
 1149|    515|            fdata->value_len);
 1150|    515|    return format_operation_source_prepare(fdata);
 1151|    515|}
formatter.c:format_claim_claimable_balance:
 1184|    218|static bool format_claim_claimable_balance(formatter_data_t *fdata) {
 1185|    218|    (void) fdata;
 1186|    218|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    218|    {                                         \
  |  |   36|    218|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    218|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 218]
  |  |  ------------------
  |  |   38|    218|    }
  ------------------
 1187|    218|    STRLCPY(fdata->value, "Claim Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|    218|    {                                         \
  |  |   36|    218|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    218|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 218]
  |  |  ------------------
  |  |   38|    218|    }
  ------------------
 1188|    218|    FORMATTER_CHECK(push_to_formatter_stack(&format_claim_claimable_balance_balance_id))
  ------------------
  |  |   30|    218|    {                           \
  |  |   31|    218|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 218]
  |  |  ------------------
  |  |   32|    218|    }
  ------------------
 1189|    218|    return true;
 1190|    218|}
formatter.c:format_claim_claimable_balance_balance_id:
 1173|    218|static bool format_claim_claimable_balance_balance_id(formatter_data_t *fdata) {
 1174|    218|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|    218|    {                                         \
  |  |   36|    218|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    218|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 218]
  |  |  ------------------
  |  |   38|    218|    }
  ------------------
 1175|    218|    FORMATTER_CHECK(print_claimable_balance_id(
  ------------------
  |  |   30|    218|    {                           \
  |  |   31|    218|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 218]
  |  |  ------------------
  |  |   32|    218|    }
  ------------------
 1176|    218|        &fdata->envelope->tx_details.tx.op_details.claim_claimable_balance_op.balance_id,
 1177|    218|        fdata->value,
 1178|    218|        fdata->value_len,
 1179|    218|        12,
 1180|    218|        12))
 1181|    218|    return format_operation_source_prepare(fdata);
 1182|    218|}
formatter.c:format_begin_sponsoring_future_reserves:
 1203|    707|static bool format_begin_sponsoring_future_reserves(formatter_data_t *fdata) {
 1204|    707|    (void) fdata;
 1205|    707|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    707|    {                                         \
  |  |   36|    707|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    707|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 707]
  |  |  ------------------
  |  |   38|    707|    }
  ------------------
 1206|    707|    STRLCPY(fdata->value, "Begin Sponsoring Future Reserves", fdata->value_len);
  ------------------
  |  |   35|    707|    {                                         \
  |  |   36|    707|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    707|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 707]
  |  |  ------------------
  |  |   38|    707|    }
  ------------------
 1207|    707|    FORMATTER_CHECK(push_to_formatter_stack(&format_claim_claimable_balance_sponsored_id))
  ------------------
  |  |   30|    707|    {                           \
  |  |   31|    707|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 707]
  |  |  ------------------
  |  |   32|    707|    }
  ------------------
 1208|    707|    return true;
 1209|    707|}
formatter.c:format_claim_claimable_balance_sponsored_id:
 1192|    707|static bool format_claim_claimable_balance_sponsored_id(formatter_data_t *fdata) {
 1193|    707|    STRLCPY(fdata->caption, "Sponsored ID", fdata->caption_len);
  ------------------
  |  |   35|    707|    {                                         \
  |  |   36|    707|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    707|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 707]
  |  |  ------------------
  |  |   38|    707|    }
  ------------------
 1194|    707|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|    707|    {                           \
  |  |   31|    707|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 707]
  |  |  ------------------
  |  |   32|    707|    }
  ------------------
 1195|    707|        fdata->envelope->tx_details.tx.op_details.begin_sponsoring_future_reserves_op.sponsored_id,
 1196|    707|        fdata->value,
 1197|    707|        fdata->value_len,
 1198|    707|        0,
 1199|    707|        0))
 1200|    707|    return format_operation_source_prepare(fdata);
 1201|    707|}
formatter.c:format_end_sponsoring_future_reserves:
 1211|    297|static bool format_end_sponsoring_future_reserves(formatter_data_t *fdata) {
 1212|    297|    (void) fdata;
 1213|    297|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    297|    {                                         \
  |  |   36|    297|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    297|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 297]
  |  |  ------------------
  |  |   38|    297|    }
  ------------------
 1214|    297|    STRLCPY(fdata->value, "End Sponsoring Future Reserves", fdata->value_len);
  ------------------
  |  |   35|    297|    {                                         \
  |  |   36|    297|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    297|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 297]
  |  |  ------------------
  |  |   38|    297|    }
  ------------------
 1215|    297|    return format_operation_source_prepare(fdata);
 1216|    297|}
formatter.c:format_revoke_sponsorship:
 1383|  3.05k|static bool format_revoke_sponsorship(formatter_data_t *fdata) {
 1384|  3.05k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  3.05k|    {                                         \
  |  |   36|  3.05k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  3.05k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3.05k]
  |  |  ------------------
  |  |   38|  3.05k|    }
  ------------------
 1385|  3.05k|    if (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.type ==
  ------------------
  |  Branch (1385:9): [True: 1.18k, False: 1.86k]
  ------------------
 1386|  3.05k|        REVOKE_SPONSORSHIP_SIGNER) {
 1387|  1.18k|        STRLCPY(fdata->value, "Revoke Sponsorship (SIGNER_KEY)", fdata->value_len);
  ------------------
  |  |   35|  1.18k|    {                                         \
  |  |   36|  1.18k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.18k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.18k]
  |  |  ------------------
  |  |   38|  1.18k|    }
  ------------------
 1388|  1.18k|        FORMATTER_CHECK(
  ------------------
  |  |   30|  1.18k|    {                           \
  |  |   31|  1.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.18k]
  |  |  ------------------
  |  |   32|  1.18k|    }
  ------------------
 1389|  1.18k|            push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_account))
 1390|  1.86k|    } else {
 1391|  1.86k|        switch (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.type) {
 1392|    281|            case ACCOUNT:
  ------------------
  |  Branch (1392:13): [True: 281, False: 1.58k]
  ------------------
 1393|    281|                STRLCPY(fdata->value, "Revoke Sponsorship (ACCOUNT)", fdata->value_len);
  ------------------
  |  |   35|    281|    {                                         \
  |  |   36|    281|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    281|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 281]
  |  |  ------------------
  |  |   38|    281|    }
  ------------------
 1394|    281|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_account))
  ------------------
  |  |   30|    281|    {                           \
  |  |   31|    281|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 281]
  |  |  ------------------
  |  |   32|    281|    }
  ------------------
 1395|    281|                break;
 1396|    281|            case OFFER:
  ------------------
  |  Branch (1396:13): [True: 124, False: 1.74k]
  ------------------
 1397|    124|                STRLCPY(fdata->value, "Revoke Sponsorship (OFFER)", fdata->value_len);
  ------------------
  |  |   35|    124|    {                                         \
  |  |   36|    124|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    124|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   38|    124|    }
  ------------------
 1398|    124|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_offer_seller_id))
  ------------------
  |  |   30|    124|    {                           \
  |  |   31|    124|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   32|    124|    }
  ------------------
 1399|    124|                break;
 1400|    407|            case TRUSTLINE:
  ------------------
  |  Branch (1400:13): [True: 407, False: 1.46k]
  ------------------
 1401|    407|                STRLCPY(fdata->value, "Revoke Sponsorship (TRUSTLINE)", fdata->value_len);
  ------------------
  |  |   35|    407|    {                                         \
  |  |   36|    407|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    407|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 407]
  |  |  ------------------
  |  |   38|    407|    }
  ------------------
 1402|    407|                FORMATTER_CHECK(
  ------------------
  |  |   30|    407|    {                           \
  |  |   31|    407|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 407]
  |  |  ------------------
  |  |   32|    407|    }
  ------------------
 1403|    407|                    push_to_formatter_stack(&format_revoke_sponsorship_trust_line_account))
 1404|    407|                break;
 1405|    407|            case DATA:
  ------------------
  |  Branch (1405:13): [True: 211, False: 1.65k]
  ------------------
 1406|    211|                STRLCPY(fdata->value, "Revoke Sponsorship (DATA)", fdata->value_len);
  ------------------
  |  |   35|    211|    {                                         \
  |  |   36|    211|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    211|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 211]
  |  |  ------------------
  |  |   38|    211|    }
  ------------------
 1407|    211|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_data_account))
  ------------------
  |  |   30|    211|    {                           \
  |  |   31|    211|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 211]
  |  |  ------------------
  |  |   32|    211|    }
  ------------------
 1408|    211|                break;
 1409|    211|            case CLAIMABLE_BALANCE:
  ------------------
  |  Branch (1409:13): [True: 129, False: 1.74k]
  ------------------
 1410|    129|                STRLCPY(fdata->value, "Revoke Sponsorship (CLAIMABLE_BALANCE)", fdata->value_len);
  ------------------
  |  |   35|    129|    {                                         \
  |  |   36|    129|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    129|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 129]
  |  |  ------------------
  |  |   38|    129|    }
  ------------------
 1411|    129|                FORMATTER_CHECK(
  ------------------
  |  |   30|    129|    {                           \
  |  |   31|    129|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 129]
  |  |  ------------------
  |  |   32|    129|    }
  ------------------
 1412|    129|                    push_to_formatter_stack(&format_revoke_sponsorship_claimable_balance))
 1413|    129|                break;
 1414|    717|            case LIQUIDITY_POOL:
  ------------------
  |  Branch (1414:13): [True: 717, False: 1.15k]
  ------------------
 1415|    717|                STRLCPY(fdata->value, "Revoke Sponsorship (LIQUIDITY_POOL)", fdata->value_len);
  ------------------
  |  |   35|    717|    {                                         \
  |  |   36|    717|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    717|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 717]
  |  |  ------------------
  |  |   38|    717|    }
  ------------------
 1416|    717|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_liquidity_pool))
  ------------------
  |  |   30|    717|    {                           \
  |  |   31|    717|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 717]
  |  |  ------------------
  |  |   32|    717|    }
  ------------------
 1417|    717|                break;
 1418|    717|            default:
  ------------------
  |  Branch (1418:13): [True: 0, False: 1.86k]
  ------------------
 1419|      0|                return false;
 1420|  1.86k|        }
 1421|  1.86k|    }
 1422|  3.05k|    return true;
 1423|  3.05k|}
formatter.c:format_revoke_sponsorship_claimable_signer_account:
 1370|  1.18k|static bool format_revoke_sponsorship_claimable_signer_account(formatter_data_t *fdata) {
 1371|  1.18k|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|  1.18k|    {                                         \
  |  |   36|  1.18k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.18k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.18k]
  |  |  ------------------
  |  |   38|  1.18k|    }
  ------------------
 1372|  1.18k|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|  1.18k|    {                           \
  |  |   31|  1.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.18k]
  |  |  ------------------
  |  |   32|  1.18k|    }
  ------------------
 1373|  1.18k|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.account_id,
 1374|  1.18k|        fdata->value,
 1375|  1.18k|        fdata->value_len,
 1376|  1.18k|        0,
 1377|  1.18k|        0))
 1378|  1.18k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.18k|    {                           \
  |  |   31|  1.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.18k]
  |  |  ------------------
  |  |   32|  1.18k|    }
  ------------------
 1379|  1.18k|        push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_signer_key_type))
 1380|  1.18k|    return true;
 1381|  1.18k|}
formatter.c:format_revoke_sponsorship_claimable_signer_signer_key_type:
 1341|  1.18k|static bool format_revoke_sponsorship_claimable_signer_signer_key_type(formatter_data_t *fdata) {
 1342|  1.18k|    STRLCPY(fdata->caption, "Signer Key Type", fdata->caption_len);
  ------------------
  |  |   35|  1.18k|    {                                         \
  |  |   36|  1.18k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.18k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.18k]
  |  |  ------------------
  |  |   38|  1.18k|    }
  ------------------
 1343|  1.18k|    switch (
 1344|  1.18k|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.signer_key.type) {
 1345|    453|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (1345:9): [True: 453, False: 731]
  ------------------
 1346|    453|            STRLCPY(fdata->value, "Public Key", fdata->value_len);
  ------------------
  |  |   35|    453|    {                                         \
  |  |   36|    453|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    453|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 453]
  |  |  ------------------
  |  |   38|    453|    }
  ------------------
 1347|    453|            break;
 1348|    453|        }
 1349|    124|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (1349:9): [True: 124, False: 1.06k]
  ------------------
 1350|    124|            STRLCPY(fdata->value, "Hash(x)", fdata->value_len);
  ------------------
  |  |   35|    124|    {                                         \
  |  |   36|    124|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    124|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   38|    124|    }
  ------------------
 1351|    124|            break;
 1352|    124|        }
 1353|    263|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (1353:9): [True: 263, False: 921]
  ------------------
 1354|    263|            STRLCPY(fdata->value, "Pre-Auth", fdata->value_len);
  ------------------
  |  |   35|    263|    {                                         \
  |  |   36|    263|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    263|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 263]
  |  |  ------------------
  |  |   38|    263|    }
  ------------------
 1355|    263|            break;
 1356|    263|        }
 1357|    344|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (1357:9): [True: 344, False: 840]
  ------------------
 1358|    344|            STRLCPY(fdata->value, "Ed25519 Signed Payload", fdata->value_len);
  ------------------
  |  |   35|    344|    {                                         \
  |  |   36|    344|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    344|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 344]
  |  |  ------------------
  |  |   38|    344|    }
  ------------------
 1359|    344|            break;
 1360|    344|        }
 1361|      0|        default:
  ------------------
  |  Branch (1361:9): [True: 0, False: 1.18k]
  ------------------
 1362|      0|            return false;
 1363|  1.18k|    }
 1364|       |
 1365|  1.18k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.18k|    {                           \
  |  |   31|  1.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.18k]
  |  |  ------------------
  |  |   32|  1.18k|    }
  ------------------
 1366|  1.18k|        push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_signer_key_detail))
 1367|  1.18k|    return true;
 1368|  1.18k|}
formatter.c:format_revoke_sponsorship_claimable_signer_signer_key_detail:
 1332|  1.18k|static bool format_revoke_sponsorship_claimable_signer_signer_key_detail(formatter_data_t *fdata) {
 1333|  1.18k|    STRLCPY(fdata->caption, "Signer Key", fdata->caption_len);
  ------------------
  |  |   35|  1.18k|    {                                         \
  |  |   36|  1.18k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.18k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.18k]
  |  |  ------------------
  |  |   38|  1.18k|    }
  ------------------
 1334|  1.18k|    signer_key_t *key =
 1335|  1.18k|        &fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.signer_key;
 1336|       |
 1337|  1.18k|    FORMATTER_CHECK(print_signer_key_detail(key, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  1.18k|    {                           \
  |  |   31|  1.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.18k]
  |  |  ------------------
  |  |   32|  1.18k|    }
  ------------------
 1338|  1.18k|    return format_operation_source_prepare(fdata);
 1339|  1.18k|}
formatter.c:format_revoke_sponsorship_account:
 1218|    281|static bool format_revoke_sponsorship_account(formatter_data_t *fdata) {
 1219|    281|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    281|    {                                         \
  |  |   36|    281|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    281|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 281]
  |  |  ------------------
  |  |   38|    281|    }
  ------------------
 1220|    281|    FORMATTER_CHECK(print_account_id(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|    281|    {                           \
  |  |   31|    281|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 281]
  |  |  ------------------
  |  |   32|    281|    }
  ------------------
 1221|    281|                                         .ledger_key.account.account_id,
 1222|    281|                                     fdata->value,
 1223|    281|                                     fdata->value_len,
 1224|    281|                                     0,
 1225|    281|                                     0))
 1226|    281|    return format_operation_source_prepare(fdata);
 1227|    281|}
formatter.c:format_revoke_sponsorship_offer_seller_id:
 1273|    124|static bool format_revoke_sponsorship_offer_seller_id(formatter_data_t *fdata) {
 1274|    124|    STRLCPY(fdata->caption, "Seller ID", fdata->caption_len);
  ------------------
  |  |   35|    124|    {                                         \
  |  |   36|    124|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    124|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   38|    124|    }
  ------------------
 1275|    124|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|    124|    {                           \
  |  |   31|    124|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   32|    124|    }
  ------------------
 1276|    124|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.offer.seller_id,
 1277|    124|        fdata->value,
 1278|    124|        fdata->value_len,
 1279|    124|        0,
 1280|    124|        0))
 1281|    124|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_offer_offer_id))
  ------------------
  |  |   30|    124|    {                           \
  |  |   31|    124|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   32|    124|    }
  ------------------
 1282|    124|    return true;
 1283|    124|}
formatter.c:format_revoke_sponsorship_offer_offer_id:
 1263|    124|static bool format_revoke_sponsorship_offer_offer_id(formatter_data_t *fdata) {
 1264|    124|    STRLCPY(fdata->caption, "Offer ID", fdata->caption_len);
  ------------------
  |  |   35|    124|    {                                         \
  |  |   36|    124|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    124|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   38|    124|    }
  ------------------
 1265|    124|    FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|    124|    {                           \
  |  |   31|    124|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   32|    124|    }
  ------------------
 1266|    124|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.offer.offer_id,
 1267|    124|        fdata->value,
 1268|    124|        fdata->value_len))
 1269|       |
 1270|    124|    return format_operation_source_prepare(fdata);
 1271|    124|}
formatter.c:format_revoke_sponsorship_trust_line_account:
 1251|    407|static bool format_revoke_sponsorship_trust_line_account(formatter_data_t *fdata) {
 1252|    407|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    407|    {                                         \
  |  |   36|    407|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    407|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 407]
  |  |  ------------------
  |  |   38|    407|    }
  ------------------
 1253|    407|    FORMATTER_CHECK(print_account_id(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|    407|    {                           \
  |  |   31|    407|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 407]
  |  |  ------------------
  |  |   32|    407|    }
  ------------------
 1254|    407|                                         .ledger_key.trust_line.account_id,
 1255|    407|                                     fdata->value,
 1256|    407|                                     fdata->value_len,
 1257|    407|                                     0,
 1258|    407|                                     0))
 1259|    407|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_trust_line_asset))
  ------------------
  |  |   30|    407|    {                           \
  |  |   31|    407|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 407]
  |  |  ------------------
  |  |   32|    407|    }
  ------------------
 1260|    407|    return true;
 1261|    407|}
formatter.c:format_revoke_sponsorship_trust_line_asset:
 1229|    407|static bool format_revoke_sponsorship_trust_line_asset(formatter_data_t *fdata) {
 1230|    407|    if (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.trust_line.asset
  ------------------
  |  Branch (1230:9): [True: 91, False: 316]
  ------------------
 1231|    407|            .type == ASSET_TYPE_POOL_SHARE) {
 1232|     91|        STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     91|    {                                         \
  |  |   36|     91|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     91|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 91]
  |  |  ------------------
  |  |   38|     91|    }
  ------------------
 1233|     91|        FORMATTER_CHECK(print_binary(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|     91|    {                           \
  |  |   31|     91|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 91]
  |  |  ------------------
  |  |   32|     91|    }
  ------------------
 1234|     91|                                         .ledger_key.trust_line.asset.liquidity_pool_id,
 1235|     91|                                     LIQUIDITY_POOL_ID_SIZE,
 1236|     91|                                     fdata->value,
 1237|     91|                                     fdata->value_len,
 1238|     91|                                     0,
 1239|     91|                                     0))
 1240|    316|    } else {
 1241|    316|        STRLCPY(fdata->caption, "Asset", fdata->caption_len);
  ------------------
  |  |   35|    316|    {                                         \
  |  |   36|    316|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    316|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 316]
  |  |  ------------------
  |  |   38|    316|    }
  ------------------
 1242|    316|        FORMATTER_CHECK(print_asset((asset_t *) &fdata->envelope->tx_details.tx.op_details
  ------------------
  |  |   30|    316|    {                           \
  |  |   31|    316|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 316]
  |  |  ------------------
  |  |   32|    316|    }
  ------------------
 1243|    316|                                        .revoke_sponsorship_op.ledger_key.trust_line.asset,
 1244|    316|                                    fdata->envelope->network,
 1245|    316|                                    fdata->value,
 1246|    316|                                    fdata->value_len))
 1247|    316|    }
 1248|    407|    return format_operation_source_prepare(fdata);
 1249|    407|}
formatter.c:format_revoke_sponsorship_data_account:
 1296|    211|static bool format_revoke_sponsorship_data_account(formatter_data_t *fdata) {
 1297|    211|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    211|    {                                         \
  |  |   36|    211|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    211|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 211]
  |  |  ------------------
  |  |   38|    211|    }
  ------------------
 1298|    211|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|    211|    {                           \
  |  |   31|    211|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 211]
  |  |  ------------------
  |  |   32|    211|    }
  ------------------
 1299|    211|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data.account_id,
 1300|    211|        fdata->value,
 1301|    211|        fdata->value_len,
 1302|    211|        0,
 1303|    211|        0))
 1304|    211|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_data_data_name))
  ------------------
  |  |   30|    211|    {                           \
  |  |   31|    211|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 211]
  |  |  ------------------
  |  |   32|    211|    }
  ------------------
 1305|    211|    return true;
 1306|    211|}
formatter.c:format_revoke_sponsorship_data_data_name:
 1285|    211|static bool format_revoke_sponsorship_data_data_name(formatter_data_t *fdata) {
 1286|    211|    STRLCPY(fdata->caption, "Data Name", fdata->caption_len);
  ------------------
  |  |   35|    211|    {                                         \
  |  |   36|    211|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    211|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 211]
  |  |  ------------------
  |  |   38|    211|    }
  ------------------
 1287|    211|    FORMATTER_CHECK(print_string(
  ------------------
  |  |   30|    211|    {                           \
  |  |   31|    211|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 211]
  |  |  ------------------
  |  |   32|    211|    }
  ------------------
 1288|    211|        fdata->value,
 1289|    211|        fdata->value_len,
 1290|    211|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data.data_name,
 1291|    211|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data
 1292|    211|            .data_name_size))
 1293|    211|    return format_operation_source_prepare(fdata);
 1294|    211|}
formatter.c:format_revoke_sponsorship_claimable_balance:
 1308|    129|static bool format_revoke_sponsorship_claimable_balance(formatter_data_t *fdata) {
 1309|    129|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|    129|    {                                         \
  |  |   36|    129|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    129|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 129]
  |  |  ------------------
  |  |   38|    129|    }
  ------------------
 1310|    129|    FORMATTER_CHECK(
  ------------------
  |  |   30|    129|    {                           \
  |  |   31|    129|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 129]
  |  |  ------------------
  |  |   32|    129|    }
  ------------------
 1311|    129|        print_claimable_balance_id(&fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
 1312|    129|                                        .ledger_key.claimable_balance.balance_id,
 1313|    129|                                   fdata->value,
 1314|    129|                                   fdata->value_len,
 1315|    129|                                   0,
 1316|    129|                                   0))
 1317|    129|    return format_operation_source_prepare(fdata);
 1318|    129|}
formatter.c:format_revoke_sponsorship_liquidity_pool:
 1320|    717|static bool format_revoke_sponsorship_liquidity_pool(formatter_data_t *fdata) {
 1321|    717|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|    717|    {                                         \
  |  |   36|    717|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    717|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 717]
  |  |  ------------------
  |  |   38|    717|    }
  ------------------
 1322|    717|    FORMATTER_CHECK(print_binary(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|    717|    {                           \
  |  |   31|    717|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 717]
  |  |  ------------------
  |  |   32|    717|    }
  ------------------
 1323|    717|                                     .ledger_key.liquidity_pool.liquidity_pool_id,
 1324|    717|                                 LIQUIDITY_POOL_ID_SIZE,
 1325|    717|                                 fdata->value,
 1326|    717|                                 fdata->value_len,
 1327|    717|                                 0,
 1328|    717|                                 0))
 1329|    717|    return format_operation_source_prepare(fdata);
 1330|    717|}
formatter.c:format_clawback:
 1446|     99|static bool format_clawback(formatter_data_t *fdata) {
 1447|     99|    (void) fdata;
 1448|     99|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     99|    {                                         \
  |  |   36|     99|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     99|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 99]
  |  |  ------------------
  |  |   38|     99|    }
  ------------------
 1449|     99|    STRLCPY(fdata->value, "Clawback", fdata->value_len);
  ------------------
  |  |   35|     99|    {                                         \
  |  |   36|     99|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     99|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 99]
  |  |  ------------------
  |  |   38|     99|    }
  ------------------
 1450|     99|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_amount))
  ------------------
  |  |   30|     99|    {                           \
  |  |   31|     99|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 99]
  |  |  ------------------
  |  |   32|     99|    }
  ------------------
 1451|     99|    return true;
 1452|     99|}
formatter.c:format_clawback_amount:
 1435|     99|static bool format_clawback_amount(formatter_data_t *fdata) {
 1436|     99|    STRLCPY(fdata->caption, "Clawback Balance", fdata->caption_len);
  ------------------
  |  |   35|     99|    {                                         \
  |  |   36|     99|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     99|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 99]
  |  |  ------------------
  |  |   38|     99|    }
  ------------------
 1437|     99|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.clawback_op.amount,
  ------------------
  |  |   30|     99|    {                           \
  |  |   31|     99|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 99]
  |  |  ------------------
  |  |   32|     99|    }
  ------------------
 1438|     99|                                 &fdata->envelope->tx_details.tx.op_details.clawback_op.asset,
 1439|     99|                                 fdata->envelope->network,
 1440|     99|                                 fdata->value,
 1441|     99|                                 fdata->value_len))
 1442|     99|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_from))
  ------------------
  |  |   30|     99|    {                           \
  |  |   31|     99|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 99]
  |  |  ------------------
  |  |   32|     99|    }
  ------------------
 1443|     99|    return true;
 1444|     99|}
formatter.c:format_clawback_from:
 1425|     99|static bool format_clawback_from(formatter_data_t *fdata) {
 1426|     99|    STRLCPY(fdata->caption, "From", fdata->caption_len);
  ------------------
  |  |   35|     99|    {                                         \
  |  |   36|     99|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     99|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 99]
  |  |  ------------------
  |  |   38|     99|    }
  ------------------
 1427|     99|    FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.op_details.clawback_op.from,
  ------------------
  |  |   30|     99|    {                           \
  |  |   31|     99|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 99]
  |  |  ------------------
  |  |   32|     99|    }
  ------------------
 1428|     99|                                        fdata->value,
 1429|     99|                                        fdata->value_len,
 1430|     99|                                        0,
 1431|     99|                                        0))
 1432|     99|    return format_operation_source_prepare(fdata);
 1433|     99|}
formatter.c:format_clawback_claimable_balance:
 1465|    178|static bool format_clawback_claimable_balance(formatter_data_t *fdata) {
 1466|    178|    (void) fdata;
 1467|    178|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    178|    {                                         \
  |  |   36|    178|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    178|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 178]
  |  |  ------------------
  |  |   38|    178|    }
  ------------------
 1468|    178|    STRLCPY(fdata->value, "Clawback Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|    178|    {                                         \
  |  |   36|    178|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    178|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 178]
  |  |  ------------------
  |  |   38|    178|    }
  ------------------
 1469|    178|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_claimable_balance_balance_id))
  ------------------
  |  |   30|    178|    {                           \
  |  |   31|    178|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 178]
  |  |  ------------------
  |  |   32|    178|    }
  ------------------
 1470|    178|    return true;
 1471|    178|}
formatter.c:format_clawback_claimable_balance_balance_id:
 1454|    178|static bool format_clawback_claimable_balance_balance_id(formatter_data_t *fdata) {
 1455|    178|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|    178|    {                                         \
  |  |   36|    178|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    178|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 178]
  |  |  ------------------
  |  |   38|    178|    }
  ------------------
 1456|    178|    FORMATTER_CHECK(print_claimable_balance_id(
  ------------------
  |  |   30|    178|    {                           \
  |  |   31|    178|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 178]
  |  |  ------------------
  |  |   32|    178|    }
  ------------------
 1457|    178|        &fdata->envelope->tx_details.tx.op_details.clawback_claimable_balance_op.balance_id,
 1458|    178|        fdata->value,
 1459|    178|        fdata->value_len,
 1460|    178|        0,
 1461|    178|        0))
 1462|    178|    return format_operation_source_prepare(fdata);
 1463|    178|}
formatter.c:format_set_trust_line_flags:
 1523|  1.69k|static bool format_set_trust_line_flags(formatter_data_t *fdata) {
 1524|  1.69k|    (void) fdata;
 1525|  1.69k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  1.69k|    {                                         \
  |  |   36|  1.69k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.69k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.69k]
  |  |  ------------------
  |  |   38|  1.69k|    }
  ------------------
 1526|  1.69k|    STRLCPY(fdata->value, "Set Trust Line Flags", fdata->value_len);
  ------------------
  |  |   35|  1.69k|    {                                         \
  |  |   36|  1.69k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.69k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.69k]
  |  |  ------------------
  |  |   38|  1.69k|    }
  ------------------
 1527|  1.69k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_trustor))
  ------------------
  |  |   30|  1.69k|    {                           \
  |  |   31|  1.69k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.69k]
  |  |  ------------------
  |  |   32|  1.69k|    }
  ------------------
 1528|  1.69k|    return true;
 1529|  1.69k|}
formatter.c:format_set_trust_line_trustor:
 1511|  1.69k|static bool format_set_trust_line_trustor(formatter_data_t *fdata) {
 1512|  1.69k|    STRLCPY(fdata->caption, "Trustor", fdata->caption_len);
  ------------------
  |  |   35|  1.69k|    {                                         \
  |  |   36|  1.69k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.69k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.69k]
  |  |  ------------------
  |  |   38|  1.69k|    }
  ------------------
 1513|  1.69k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.69k|    {                           \
  |  |   31|  1.69k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.69k]
  |  |  ------------------
  |  |   32|  1.69k|    }
  ------------------
 1514|  1.69k|        print_account_id(fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.trustor,
 1515|  1.69k|                         fdata->value,
 1516|  1.69k|                         fdata->value_len,
 1517|  1.69k|                         0,
 1518|  1.69k|                         0))
 1519|  1.69k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_asset))
  ------------------
  |  |   30|  1.69k|    {                           \
  |  |   31|  1.69k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.69k]
  |  |  ------------------
  |  |   32|  1.69k|    }
  ------------------
 1520|  1.69k|    return true;
 1521|  1.69k|}
formatter.c:format_set_trust_line_asset:
 1500|  1.69k|static bool format_set_trust_line_asset(formatter_data_t *fdata) {
 1501|  1.69k|    STRLCPY(fdata->caption, "Asset", fdata->caption_len);
  ------------------
  |  |   35|  1.69k|    {                                         \
  |  |   36|  1.69k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.69k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.69k]
  |  |  ------------------
  |  |   38|  1.69k|    }
  ------------------
 1502|  1.69k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.69k|    {                           \
  |  |   31|  1.69k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.69k]
  |  |  ------------------
  |  |   32|  1.69k|    }
  ------------------
 1503|  1.69k|        print_asset(&fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.asset,
 1504|  1.69k|                    fdata->envelope->network,
 1505|  1.69k|                    fdata->value,
 1506|  1.69k|                    fdata->value_len))
 1507|  1.69k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_clear_flags))
  ------------------
  |  |   30|  1.69k|    {                           \
  |  |   31|  1.69k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.69k]
  |  |  ------------------
  |  |   32|  1.69k|    }
  ------------------
 1508|  1.69k|    return true;
 1509|  1.69k|}
formatter.c:format_set_trust_line_clear_flags:
 1486|  1.69k|static bool format_set_trust_line_clear_flags(formatter_data_t *fdata) {
 1487|  1.69k|    STRLCPY(fdata->caption, "Clear Flags", fdata->caption_len);
  ------------------
  |  |   35|  1.69k|    {                                         \
  |  |   36|  1.69k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.69k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.69k]
  |  |  ------------------
  |  |   38|  1.69k|    }
  ------------------
 1488|  1.69k|    if (fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.clear_flags) {
  ------------------
  |  Branch (1488:9): [True: 799, False: 894]
  ------------------
 1489|    799|        FORMATTER_CHECK(print_trust_line_flags(
  ------------------
  |  |   30|    799|    {                           \
  |  |   31|    799|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 799]
  |  |  ------------------
  |  |   32|    799|    }
  ------------------
 1490|    799|            fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.clear_flags,
 1491|    799|            fdata->value,
 1492|    799|            fdata->value_len))
 1493|    894|    } else {
 1494|    894|        STRLCPY(fdata->value, "[none]", fdata->value_len);
  ------------------
  |  |   35|    894|    {                                         \
  |  |   36|    894|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    894|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 894]
  |  |  ------------------
  |  |   38|    894|    }
  ------------------
 1495|    894|    }
 1496|  1.69k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_set_flags))
  ------------------
  |  |   30|  1.69k|    {                           \
  |  |   31|  1.69k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.69k]
  |  |  ------------------
  |  |   32|  1.69k|    }
  ------------------
 1497|  1.69k|    return true;
 1498|  1.69k|}
formatter.c:format_set_trust_line_set_flags:
 1473|  1.69k|static bool format_set_trust_line_set_flags(formatter_data_t *fdata) {
 1474|  1.69k|    STRLCPY(fdata->caption, "Set Flags", fdata->caption_len);
  ------------------
  |  |   35|  1.69k|    {                                         \
  |  |   36|  1.69k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.69k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.69k]
  |  |  ------------------
  |  |   38|  1.69k|    }
  ------------------
 1475|  1.69k|    if (fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.set_flags) {
  ------------------
  |  Branch (1475:9): [True: 794, False: 899]
  ------------------
 1476|    794|        FORMATTER_CHECK(print_trust_line_flags(
  ------------------
  |  |   30|    794|    {                           \
  |  |   31|    794|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 794]
  |  |  ------------------
  |  |   32|    794|    }
  ------------------
 1477|    794|            fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.set_flags,
 1478|    794|            fdata->value,
 1479|    794|            fdata->value_len))
 1480|    899|    } else {
 1481|    899|        STRLCPY(fdata->value, "[none]", fdata->value_len);
  ------------------
  |  |   35|    899|    {                                         \
  |  |   36|    899|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    899|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 899]
  |  |  ------------------
  |  |   38|    899|    }
  ------------------
 1482|    899|    }
 1483|  1.69k|    return format_operation_source_prepare(fdata);
 1484|  1.69k|}
formatter.c:format_liquidity_pool_deposit:
 1595|     75|static bool format_liquidity_pool_deposit(formatter_data_t *fdata) {
 1596|     75|    (void) fdata;
 1597|     75|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1598|     75|    STRLCPY(fdata->value, "Liquidity Pool Deposit", fdata->value_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1599|     75|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_liquidity_pool_id))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1600|     75|    return true;
 1601|     75|}
formatter.c:format_liquidity_pool_deposit_liquidity_pool_id:
 1582|     75|static bool format_liquidity_pool_deposit_liquidity_pool_id(formatter_data_t *fdata) {
 1583|     75|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1584|     75|    FORMATTER_CHECK(print_binary(
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1585|     75|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.liquidity_pool_id,
 1586|     75|        LIQUIDITY_POOL_ID_SIZE,
 1587|     75|        fdata->value,
 1588|     75|        fdata->value_len,
 1589|     75|        0,
 1590|     75|        0))
 1591|     75|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_amount_a))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1592|     75|    return true;
 1593|     75|}
formatter.c:format_liquidity_pool_deposit_max_amount_a:
 1570|     75|static bool format_liquidity_pool_deposit_max_amount_a(formatter_data_t *fdata) {
 1571|     75|    STRLCPY(fdata->caption, "Max Amount A", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1572|     75|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1573|     75|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.max_amount_a,
 1574|     75|        NULL,
 1575|     75|        fdata->envelope->network,
 1576|     75|        fdata->value,
 1577|     75|        fdata->value_len))
 1578|     75|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_amount_b))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1579|     75|    return true;
 1580|     75|}
formatter.c:format_liquidity_pool_deposit_max_amount_b:
 1558|     75|static bool format_liquidity_pool_deposit_max_amount_b(formatter_data_t *fdata) {
 1559|     75|    STRLCPY(fdata->caption, "Max Amount B", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1560|     75|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1561|     75|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.max_amount_b,
 1562|     75|        NULL,
 1563|     75|        fdata->envelope->network,
 1564|     75|        fdata->value,
 1565|     75|        fdata->value_len))
 1566|     75|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_min_price))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1567|     75|    return true;
 1568|     75|}
formatter.c:format_liquidity_pool_deposit_min_price:
 1544|     75|static bool format_liquidity_pool_deposit_min_price(formatter_data_t *fdata) {
 1545|     75|    liquidity_pool_deposit_op_t *op =
 1546|     75|        &fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op;
 1547|     75|    STRLCPY(fdata->caption, "Min Price", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1548|     75|    FORMATTER_CHECK(print_price(&op->min_price,
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1549|     75|                                NULL,
 1550|     75|                                NULL,
 1551|     75|                                fdata->envelope->network,
 1552|     75|                                fdata->value,
 1553|     75|                                fdata->value_len))
 1554|     75|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_price))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1555|     75|    return true;
 1556|     75|}
formatter.c:format_liquidity_pool_deposit_max_price:
 1531|     75|static bool format_liquidity_pool_deposit_max_price(formatter_data_t *fdata) {
 1532|     75|    liquidity_pool_deposit_op_t *op =
 1533|     75|        &fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op;
 1534|     75|    STRLCPY(fdata->caption, "Max Price", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1535|     75|    FORMATTER_CHECK(print_price(&op->max_price,
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1536|     75|                                NULL,
 1537|     75|                                NULL,
 1538|     75|                                fdata->envelope->network,
 1539|     75|                                fdata->value,
 1540|     75|                                fdata->value_len))
 1541|     75|    return format_operation_source_prepare(fdata);
 1542|     75|}
formatter.c:format_liquidity_pool_withdraw:
 1651|    341|static bool format_liquidity_pool_withdraw(formatter_data_t *fdata) {
 1652|    341|    (void) fdata;
 1653|    341|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1654|    341|    STRLCPY(fdata->value, "Liquidity Pool Withdraw", fdata->value_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1655|    341|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_liquidity_pool_id))
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1656|    341|    return true;
 1657|    341|}
formatter.c:format_liquidity_pool_withdraw_liquidity_pool_id:
 1638|    341|static bool format_liquidity_pool_withdraw_liquidity_pool_id(formatter_data_t *fdata) {
 1639|    341|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1640|    341|    FORMATTER_CHECK(print_binary(
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1641|    341|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.liquidity_pool_id,
 1642|    341|        LIQUIDITY_POOL_ID_SIZE,
 1643|    341|        fdata->value,
 1644|    341|        fdata->value_len,
 1645|    341|        0,
 1646|    341|        0))
 1647|    341|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_amount))
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1648|    341|    return true;
 1649|    341|}
formatter.c:format_liquidity_pool_withdraw_amount:
 1626|    341|static bool format_liquidity_pool_withdraw_amount(formatter_data_t *fdata) {
 1627|    341|    STRLCPY(fdata->caption, "Amount", fdata->caption_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1628|    341|    FORMATTER_CHECK(
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1629|    341|        print_amount(fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.amount,
 1630|    341|                     NULL,
 1631|    341|                     fdata->envelope->network,
 1632|    341|                     fdata->value,
 1633|    341|                     fdata->value_len))
 1634|    341|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_min_amount_a))
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1635|    341|    return true;
 1636|    341|}
formatter.c:format_liquidity_pool_withdraw_min_amount_a:
 1614|    341|static bool format_liquidity_pool_withdraw_min_amount_a(formatter_data_t *fdata) {
 1615|    341|    STRLCPY(fdata->caption, "Min Amount A", fdata->caption_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1616|    341|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1617|    341|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.min_amount_a,
 1618|    341|        NULL,
 1619|    341|        fdata->envelope->network,
 1620|    341|        fdata->value,
 1621|    341|        fdata->value_len))
 1622|    341|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_min_amount_b))
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1623|    341|    return true;
 1624|    341|}
formatter.c:format_liquidity_pool_withdraw_min_amount_b:
 1603|    341|static bool format_liquidity_pool_withdraw_min_amount_b(formatter_data_t *fdata) {
 1604|    341|    STRLCPY(fdata->caption, "Min Amount B", fdata->caption_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1605|    341|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1606|    341|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.min_amount_b,
 1607|    341|        NULL,
 1608|    341|        fdata->envelope->network,
 1609|    341|        fdata->value,
 1610|    341|        fdata->value_len))
 1611|    341|    return format_operation_source_prepare(fdata);
 1612|    341|}
formatter.c:format_invoke_host_function:
 2170|  1.27k|static bool format_invoke_host_function(formatter_data_t *fdata) {
 2171|       |    // avoid the host function op be overwritten by the sub-invocation
 2172|  1.27k|    if (fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocations_count) {
  ------------------
  |  Branch (2172:9): [True: 173, False: 1.10k]
  ------------------
 2173|    173|        if (!parse_transaction_operation(fdata->raw_data,
  ------------------
  |  Branch (2173:13): [True: 0, False: 173]
  ------------------
 2174|    173|                                         fdata->raw_data_len,
 2175|    173|                                         fdata->envelope,
 2176|    173|                                         fdata->envelope->tx_details.tx.operation_index)) {
 2177|      0|            return false;
 2178|    173|        };
 2179|    173|    }
 2180|  1.27k|    switch (fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.host_function_type) {
 2181|    856|        case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:
  ------------------
  |  Branch (2181:9): [True: 856, False: 419]
  ------------------
 2182|    856|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    856|    {                                         \
  |  |   36|    856|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    856|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 856]
  |  |  ------------------
  |  |   38|    856|    }
  ------------------
 2183|    856|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|    856|    {                                         \
  |  |   36|    856|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    856|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 856]
  |  |  ------------------
  |  |   38|    856|    }
  ------------------
 2184|    856|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_contract_id));
  ------------------
  |  |   30|    856|    {                           \
  |  |   31|    856|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 856]
  |  |  ------------------
  |  |   32|    856|    }
  ------------------
 2185|    856|            break;
 2186|    235|        case HOST_FUNCTION_TYPE_CREATE_CONTRACT:
  ------------------
  |  Branch (2186:9): [True: 235, False: 1.04k]
  ------------------
 2187|    235|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    235|    {                                         \
  |  |   36|    235|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    235|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 235]
  |  |  ------------------
  |  |   38|    235|    }
  ------------------
 2188|    235|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|    235|    {                                         \
  |  |   36|    235|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    235|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 235]
  |  |  ------------------
  |  |   38|    235|    }
  ------------------
 2189|       |            // we dont need to care the sub-invocation here
 2190|    235|            return format_operation_source_prepare(fdata);
 2191|      0|            break;
 2192|    184|        case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM:
  ------------------
  |  Branch (2192:9): [True: 184, False: 1.09k]
  ------------------
 2193|    184|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    184|    {                                         \
  |  |   36|    184|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    184|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 184]
  |  |  ------------------
  |  |   38|    184|    }
  ------------------
 2194|    184|            STRLCPY(fdata->value, "Upload Smart Contract Wasm", fdata->value_len);
  ------------------
  |  |   35|    184|    {                                         \
  |  |   36|    184|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    184|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 184]
  |  |  ------------------
  |  |   38|    184|    }
  ------------------
 2195|    184|            return format_operation_source_prepare(fdata);
 2196|      0|            break;
 2197|      0|        default:
  ------------------
  |  Branch (2197:9): [True: 0, False: 1.27k]
  ------------------
 2198|      0|            return false;
 2199|  1.27k|    }
 2200|    856|    return true;
 2201|  1.27k|}
formatter.c:format_extend_footprint_ttl:
 2222|    183|static bool format_extend_footprint_ttl(formatter_data_t *fdata) {
 2223|    183|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    183|    {                                         \
  |  |   36|    183|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    183|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 183]
  |  |  ------------------
  |  |   38|    183|    }
  ------------------
 2224|    183|    STRLCPY(fdata->value, "Extend Footprint TTL", fdata->value_len);
  ------------------
  |  |   35|    183|    {                                         \
  |  |   36|    183|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    183|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 183]
  |  |  ------------------
  |  |   38|    183|    }
  ------------------
 2225|    183|    return format_operation_source_prepare(fdata);
 2226|    183|}
formatter.c:format_restore_footprint:
 2228|    498|static bool format_restore_footprint(formatter_data_t *fdata) {
 2229|    498|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    498|    {                                         \
  |  |   36|    498|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    498|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 498]
  |  |  ------------------
  |  |   38|    498|    }
  ------------------
 2230|    498|    STRLCPY(fdata->value, "Restore Footprint", fdata->value_len);
  ------------------
  |  |   35|    498|    {                                         \
  |  |   36|    498|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    498|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 498]
  |  |  ------------------
  |  |   38|    498|    }
  ------------------
 2231|    498|    return format_operation_source_prepare(fdata);
 2232|    498|}

parse_bool:
   48|  4.56M|bool parse_bool(buffer_t *buffer, bool *b) {
   49|  4.56M|    uint32_t val;
   50|       |
   51|  4.56M|    if (!parse_uint32(buffer, &val)) {
  ------------------
  |  Branch (51:9): [True: 356, False: 4.56M]
  ------------------
   52|    356|        return false;
   53|    356|    }
   54|  4.56M|    if (val != 0 && val != 1) {
  ------------------
  |  Branch (54:9): [True: 4.03M, False: 527k]
  |  Branch (54:21): [True: 2.31k, False: 4.03M]
  ------------------
   55|  2.31k|        return false;
   56|  2.31k|    }
   57|  4.56M|    *b = val == 1 ? true : false;
  ------------------
  |  Branch (57:10): [True: 4.03M, False: 527k]
  ------------------
   58|  4.56M|    return true;
   59|  4.56M|}
parse_uint64:
   61|  30.4k|bool parse_uint64(buffer_t *buffer, uint64_t *n) {
   62|  30.4k|    return buffer_read_u64(buffer, n, BE);
   63|  30.4k|}
parse_int64:
   65|   295k|bool parse_int64(buffer_t *buffer, int64_t *n) {
   66|   295k|    if (!buffer_can_read(buffer, 8)) {
  ------------------
  |  Branch (66:9): [True: 146, False: 295k]
  ------------------
   67|    146|        *n = 0;
   68|    146|        return false;
   69|    146|    }
   70|   295k|    *n = read_i64_be(buffer->ptr, buffer->offset);
   71|   295k|    return buffer_seek_cur(buffer, 8);
   72|   295k|}
parse_uint32:
   74|  63.3M|bool parse_uint32(buffer_t *buffer, uint32_t *n) {
   75|  63.3M|    return buffer_read_u32(buffer, n, BE);
   76|  63.3M|}
parse_int32:
   78|  15.9k|bool parse_int32(buffer_t *buffer, int32_t *n) {
   79|  15.9k|    if (!buffer_can_read(buffer, 4)) {
  ------------------
  |  Branch (79:9): [True: 39, False: 15.8k]
  ------------------
   80|     39|        *n = 0;
   81|     39|        return false;
   82|     39|    }
   83|  15.8k|    *n = read_i32_be(buffer->ptr, buffer->offset);
   84|  15.8k|    return buffer_seek_cur(buffer, 4);
   85|  15.9k|}
parse_scv_symbol:
  152|    403|bool parse_scv_symbol(buffer_t *buffer, scv_symbol_t *symbol) {
  153|    403|    PARSER_CHECK(
  ------------------
  |  |   15|    403|    {                           \
  |  |   16|    403|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 393]
  |  |  ------------------
  |  |   17|    403|    }
  ------------------
  154|    403|        parse_binary_string_ptr(buffer, &symbol->symbol, &symbol->size, SCV_SYMBOL_MAX_SIZE))
  155|    393|    return true;
  156|    403|}
parse_scv_string:
  158|    789|bool parse_scv_string(buffer_t *buffer, scv_string_t *string) {
  159|    789|    PARSER_CHECK(parse_binary_string_ptr(buffer, &string->string, &string->size, 0))
  ------------------
  |  |   15|    789|    {                           \
  |  |   16|    789|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 784]
  |  |  ------------------
  |  |   17|    789|    }
  ------------------
  160|    784|    return true;
  161|    789|}
parse_sc_address:
  684|  67.7k|bool parse_sc_address(buffer_t *buffer, sc_address_t *sc_address) {
  685|  67.7k|    PARSER_CHECK(parse_uint32(buffer, &sc_address->type))
  ------------------
  |  |   15|  67.7k|    {                           \
  |  |   16|  67.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 66, False: 67.6k]
  |  |  ------------------
  |  |   17|  67.7k|    }
  ------------------
  686|  67.6k|    switch (sc_address->type) {
  687|  54.1k|        case SC_ADDRESS_TYPE_ACCOUNT:
  ------------------
  |  Branch (687:9): [True: 54.1k, False: 13.5k]
  ------------------
  688|  54.1k|            PARSER_CHECK(parse_account_id(buffer, &sc_address->address))
  ------------------
  |  |   15|  54.1k|    {                           \
  |  |   16|  54.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.23k, False: 52.8k]
  |  |  ------------------
  |  |   17|  54.1k|    }
  ------------------
  689|  52.8k|            return true;
  690|  12.9k|        case SC_ADDRESS_TYPE_CONTRACT:
  ------------------
  |  Branch (690:9): [True: 12.9k, False: 54.7k]
  ------------------
  691|  12.9k|            PARSER_CHECK(buffer_read_bytes(buffer, &sc_address->address, RAW_CONTRACT_KEY_SIZE))
  ------------------
  |  |   15|  12.9k|    {                           \
  |  |   16|  12.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 58, False: 12.8k]
  |  |  ------------------
  |  |   17|  12.9k|    }
  ------------------
  692|  12.8k|            return true;
  693|    651|        default:
  ------------------
  |  Branch (693:9): [True: 651, False: 67.0k]
  ------------------
  694|    651|            return false;
  695|  67.6k|    }
  696|  67.6k|}
read_scval_advance:
  733|  53.3M|bool read_scval_advance(buffer_t *buffer) {
  734|  53.3M|    uint32_t sc_type;
  735|  53.3M|    PARSER_CHECK(parse_uint32(buffer, &sc_type))
  ------------------
  |  |   15|  53.3M|    {                           \
  |  |   16|  53.3M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.09k, False: 53.3M]
  |  |  ------------------
  |  |   17|  53.3M|    }
  ------------------
  736|       |
  737|  53.3M|    switch (sc_type) {
  738|  44.1M|        case SCV_BOOL:
  ------------------
  |  Branch (738:9): [True: 44.1M, False: 9.16M]
  ------------------
  739|  44.1M|            PARSER_CHECK(buffer_advance(buffer, 4))
  ------------------
  |  |   15|  44.1M|    {                           \
  |  |   16|  44.1M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 235, False: 44.1M]
  |  |  ------------------
  |  |   17|  44.1M|    }
  ------------------
  740|  44.1M|            break;
  741|  44.1M|        case SCV_VOID:
  ------------------
  |  Branch (741:9): [True: 7.85k, False: 53.3M]
  ------------------
  742|  7.85k|            break;  // void
  743|    167|        case SCV_ERROR:
  ------------------
  |  Branch (743:9): [True: 167, False: 53.3M]
  ------------------
  744|    167|            return false;  // not implemented
  745|   721k|        case SCV_U32:
  ------------------
  |  Branch (745:9): [True: 721k, False: 52.6M]
  ------------------
  746|   730k|        case SCV_I32:
  ------------------
  |  Branch (746:9): [True: 8.42k, False: 53.3M]
  ------------------
  747|   730k|            PARSER_CHECK(buffer_advance(buffer, 4))
  ------------------
  |  |   15|   730k|    {                           \
  |  |   16|   730k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 22, False: 730k]
  |  |  ------------------
  |  |   17|   730k|    }
  ------------------
  748|   730k|            break;
  749|   730k|        case SCV_U64:
  ------------------
  |  Branch (749:9): [True: 1.29k, False: 53.3M]
  ------------------
  750|  2.63k|        case SCV_I64:
  ------------------
  |  Branch (750:9): [True: 1.34k, False: 53.3M]
  ------------------
  751|  3.37M|        case SCV_TIMEPOINT:
  ------------------
  |  Branch (751:9): [True: 3.37M, False: 49.9M]
  ------------------
  752|  3.37M|        case SCV_DURATION:
  ------------------
  |  Branch (752:9): [True: 2.00k, False: 53.3M]
  ------------------
  753|  3.37M|            PARSER_CHECK(buffer_advance(buffer, 8))
  ------------------
  |  |   15|  3.37M|    {                           \
  |  |   16|  3.37M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 41, False: 3.37M]
  |  |  ------------------
  |  |   17|  3.37M|    }
  ------------------
  754|  3.37M|            break;
  755|  3.37M|        case SCV_U128:
  ------------------
  |  Branch (755:9): [True: 999k, False: 52.3M]
  ------------------
  756|  1.00M|        case SCV_I128:
  ------------------
  |  Branch (756:9): [True: 9.57k, False: 53.3M]
  ------------------
  757|  1.00M|            PARSER_CHECK(buffer_advance(buffer, 16))
  ------------------
  |  |   15|  1.00M|    {                           \
  |  |   16|  1.00M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 48, False: 1.00M]
  |  |  ------------------
  |  |   17|  1.00M|    }
  ------------------
  758|  1.00M|            break;
  759|  1.00M|        case SCV_U256:
  ------------------
  |  Branch (759:9): [True: 1.44k, False: 53.3M]
  ------------------
  760|  4.22k|        case SCV_I256:
  ------------------
  |  Branch (760:9): [True: 2.78k, False: 53.3M]
  ------------------
  761|  4.22k|            PARSER_CHECK(buffer_advance(buffer, 32))
  ------------------
  |  |   15|  4.22k|    {                           \
  |  |   16|  4.22k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 67, False: 4.15k]
  |  |  ------------------
  |  |   17|  4.22k|    }
  ------------------
  762|  4.15k|            break;
  763|  4.15k|        case SCV_BYTES:
  ------------------
  |  Branch (763:9): [True: 1.94k, False: 53.3M]
  ------------------
  764|  6.23k|        case SCV_STRING:
  ------------------
  |  Branch (764:9): [True: 4.29k, False: 53.3M]
  ------------------
  765|  8.54k|        case SCV_SYMBOL: {
  ------------------
  |  Branch (765:9): [True: 2.31k, False: 53.3M]
  ------------------
  766|  8.54k|            size_t data_size = 0;
  767|  8.54k|            PARSER_CHECK(parse_uint32(buffer, &data_size))
  ------------------
  |  |   15|  8.54k|    {                           \
  |  |   16|  8.54k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 17, False: 8.53k]
  |  |  ------------------
  |  |   17|  8.54k|    }
  ------------------
  768|  8.53k|            PARSER_CHECK(num_bytes(data_size, &data_size))
  ------------------
  |  |   15|  8.53k|    {                           \
  |  |   16|  8.53k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 8.53k]
  |  |  ------------------
  |  |   17|  8.53k|    }
  ------------------
  769|  8.53k|            PARSER_CHECK(buffer_advance(buffer, data_size))
  ------------------
  |  |   15|  8.53k|    {                           \
  |  |   16|  8.53k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 161, False: 8.37k]
  |  |  ------------------
  |  |   17|  8.53k|    }
  ------------------
  770|  8.37k|            break;
  771|  8.53k|        }
  772|  11.6k|        case SCV_VEC: {
  ------------------
  |  Branch (772:9): [True: 11.6k, False: 53.3M]
  ------------------
  773|  11.6k|            bool vec_exists;
  774|  11.6k|            PARSER_CHECK(parse_bool(buffer, &vec_exists))
  ------------------
  |  |   15|  11.6k|    {                           \
  |  |   16|  11.6k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 313, False: 11.3k]
  |  |  ------------------
  |  |   17|  11.6k|    }
  ------------------
  775|  11.3k|            if (vec_exists) {
  ------------------
  |  Branch (775:17): [True: 10.7k, False: 612]
  ------------------
  776|  10.7k|                PARSER_CHECK(read_scval_vec_advance(buffer));
  ------------------
  |  |   15|  10.7k|    {                           \
  |  |   16|  10.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10.2k, False: 530]
  |  |  ------------------
  |  |   17|  10.7k|    }
  ------------------
  777|    530|            }
  778|  1.14k|            break;
  779|  11.3k|        }
  780|  3.99M|        case SCV_MAP: {
  ------------------
  |  Branch (780:9): [True: 3.99M, False: 49.3M]
  ------------------
  781|  3.99M|            bool map_exists;
  782|  3.99M|            PARSER_CHECK(parse_bool(buffer, &map_exists))
  ------------------
  |  |   15|  3.99M|    {                           \
  |  |   16|  3.99M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 426, False: 3.99M]
  |  |  ------------------
  |  |   17|  3.99M|    }
  ------------------
  783|  3.99M|            if (map_exists) {
  ------------------
  |  Branch (783:17): [True: 3.99M, False: 1.74k]
  ------------------
  784|  3.99M|                PARSER_CHECK(read_scval_map_advance(buffer));
  ------------------
  |  |   15|  3.99M|    {                           \
  |  |   16|  3.99M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3.92M, False: 72.3k]
  |  |  ------------------
  |  |   17|  3.99M|    }
  ------------------
  785|  72.3k|            }
  786|  74.1k|            break;
  787|  3.99M|        }
  788|  74.1k|        case SCV_ADDRESS: {
  ------------------
  |  Branch (788:9): [True: 6.50k, False: 53.3M]
  ------------------
  789|  6.50k|            sc_address_t sc_address;
  790|  6.50k|            PARSER_CHECK(parse_sc_address(buffer, &sc_address));
  ------------------
  |  |   15|  6.50k|    {                           \
  |  |   16|  6.50k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 369, False: 6.13k]
  |  |  ------------------
  |  |   17|  6.50k|    }
  ------------------
  791|  6.13k|            break;
  792|  6.50k|        }
  793|  6.59k|        case SCV_CONTRACT_INSTANCE: {
  ------------------
  |  Branch (793:9): [True: 6.59k, False: 53.3M]
  ------------------
  794|  6.59k|            PARSER_CHECK(read_contract_executable_advance(buffer))
  ------------------
  |  |   15|  6.59k|    {                           \
  |  |   16|  6.59k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 213, False: 6.38k]
  |  |  ------------------
  |  |   17|  6.59k|    }
  ------------------
  795|  6.38k|            bool map_exists;
  796|  6.38k|            PARSER_CHECK(parse_bool(buffer, &map_exists))
  ------------------
  |  |   15|  6.38k|    {                           \
  |  |   16|  6.38k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 349, False: 6.03k]
  |  |  ------------------
  |  |   17|  6.38k|    }
  ------------------
  797|  6.03k|            if (map_exists) {
  ------------------
  |  Branch (797:17): [True: 5.30k, False: 727]
  ------------------
  798|  5.30k|                PARSER_CHECK(read_scval_map_advance(buffer));
  ------------------
  |  |   15|  5.30k|    {                           \
  |  |   16|  5.30k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 687, False: 4.61k]
  |  |  ------------------
  |  |   17|  5.30k|    }
  ------------------
  799|  4.61k|            }
  800|  5.34k|            break;
  801|  6.03k|        }
  802|  5.34k|        case SCV_LEDGER_KEY_CONTRACT_INSTANCE:
  ------------------
  |  Branch (802:9): [True: 1.17k, False: 53.3M]
  ------------------
  803|  1.17k|            break;  // void
  804|  1.24k|        case SCV_LEDGER_KEY_NONCE:
  ------------------
  |  Branch (804:9): [True: 1.24k, False: 53.3M]
  ------------------
  805|  1.24k|            PARSER_CHECK(buffer_advance(buffer, 8))
  ------------------
  |  |   15|  1.24k|    {                           \
  |  |   16|  1.24k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 1.23k]
  |  |  ------------------
  |  |   17|  1.24k|    }
  ------------------
  806|  1.23k|            break;
  807|  7.58k|        default:
  ------------------
  |  Branch (807:9): [True: 7.58k, False: 53.3M]
  ------------------
  808|  7.58k|            return false;
  809|  53.3M|    }
  810|  49.3M|    return true;
  811|  53.3M|}
parse_transaction_envelope:
 1307|  25.4k|bool parse_transaction_envelope(const uint8_t *data, size_t data_len, envelope_t *envelope) {
 1308|  25.4k|    PRINTF("parse_transaction_envelope\n");
 1309|  25.4k|    buffer_t buffer = {
 1310|  25.4k|        .ptr = data,
 1311|  25.4k|        .size = data_len,
 1312|  25.4k|        .offset = 0,
 1313|  25.4k|    };
 1314|       |
 1315|  25.4k|    explicit_bzero(&envelope->tx_details, sizeof(tx_details_t));
 1316|  25.4k|    uint32_t envelope_type;
 1317|  25.4k|    PARSER_CHECK(parse_network(&buffer, &envelope->network))
  ------------------
  |  |   15|  25.4k|    {                           \
  |  |   16|  25.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 25.4k]
  |  |  ------------------
  |  |   17|  25.4k|    }
  ------------------
 1318|  25.4k|    PARSER_CHECK(parse_uint32(&buffer, &envelope_type))
  ------------------
  |  |   15|  25.4k|    {                           \
  |  |   16|  25.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 25.4k]
  |  |  ------------------
  |  |   17|  25.4k|    }
  ------------------
 1319|  25.4k|    envelope->type = envelope_type;
 1320|  25.4k|    switch (envelope_type) {
 1321|  10.4k|        case ENVELOPE_TYPE_TX:
  ------------------
  |  Branch (1321:9): [True: 10.4k, False: 15.0k]
  ------------------
 1322|  10.4k|            PARSER_CHECK(parse_transaction_details(&buffer, &envelope->tx_details.tx))
  ------------------
  |  |   15|  10.4k|    {                           \
  |  |   16|  10.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 608, False: 9.80k]
  |  |  ------------------
  |  |   17|  10.4k|    }
  ------------------
 1323|  9.80k|            break;
 1324|  9.80k|        case ENVELOPE_TYPE_TX_FEE_BUMP:
  ------------------
  |  Branch (1324:9): [True: 127, False: 25.3k]
  ------------------
 1325|    127|            PARSER_CHECK(
  ------------------
  |  |   15|    127|    {                           \
  |  |   16|    127|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 107]
  |  |  ------------------
  |  |   17|    127|    }
  ------------------
 1326|    127|                parse_fee_bump_transaction_details(&buffer, &envelope->tx_details.fee_bump_tx))
 1327|    107|            uint32_t inner_envelope_type;
 1328|    107|            PARSER_CHECK(parse_uint32(&buffer, &inner_envelope_type))
  ------------------
  |  |   15|    107|    {                           \
  |  |   16|    107|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 104]
  |  |  ------------------
  |  |   17|    107|    }
  ------------------
 1329|    104|            if (inner_envelope_type != ENVELOPE_TYPE_TX) {
  ------------------
  |  Branch (1329:17): [True: 3, False: 101]
  ------------------
 1330|      3|                return false;
 1331|      3|            }
 1332|    101|            PARSER_CHECK(parse_transaction_details(&buffer, &envelope->tx_details.tx))
  ------------------
  |  |   15|    101|    {                           \
  |  |   16|    101|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 93]
  |  |  ------------------
  |  |   17|    101|    }
  ------------------
 1333|     93|            break;
 1334|  14.9k|        default:
  ------------------
  |  Branch (1334:9): [True: 14.9k, False: 10.5k]
  ------------------
 1335|  14.9k|            return false;
 1336|  25.4k|    }
 1337|       |
 1338|  9.89k|    envelope->tx_details.tx.operation_position = buffer.offset;
 1339|       |
 1340|       |    // check all operations are valid
 1341|  9.89k|    PARSER_CHECK(check_operations(&buffer, envelope->tx_details.tx.operations_count));
  ------------------
  |  |   15|  9.89k|    {                           \
  |  |   16|  9.89k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.53k, False: 7.36k]
  |  |  ------------------
  |  |   17|  9.89k|    }
  ------------------
 1342|  7.36k|    return true;
 1343|  9.89k|}
parse_transaction_operation:
 1348|  48.6k|                                 uint8_t operation_index) {
 1349|  48.6k|    buffer_t buffer = {
 1350|  48.6k|        .ptr = data,
 1351|  48.6k|        .size = data_len,
 1352|  48.6k|        .offset = envelope->tx_details.tx.operation_position,
 1353|  48.6k|    };
 1354|   364k|    for (uint8_t i = 0; i <= operation_index; i++) {
  ------------------
  |  Branch (1354:25): [True: 316k, False: 48.6k]
  ------------------
 1355|   316k|        PARSER_CHECK(parse_operation(&buffer, &envelope->tx_details.tx.op_details));
  ------------------
  |  |   15|   316k|    {                           \
  |  |   16|   316k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 316k]
  |  |  ------------------
  |  |   17|   316k|    }
  ------------------
 1356|   316k|    }
 1357|  48.6k|    envelope->tx_details.tx.operation_index = operation_index;
 1358|  48.6k|    return true;
 1359|  48.6k|}
parse_auth_function:
 1361|  33.4k|bool parse_auth_function(buffer_t *buffer, uint32_t *type, invoke_contract_args_t *args) {
 1362|       |    // function
 1363|  33.4k|    PARSER_CHECK(parse_uint32(buffer, type))
  ------------------
  |  |   15|  33.4k|    {                           \
  |  |   16|  33.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 33.4k]
  |  |  ------------------
  |  |   17|  33.4k|    }
  ------------------
 1364|  33.4k|    switch (*type) {
 1365|  31.5k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN: {
  ------------------
  |  Branch (1365:9): [True: 31.5k, False: 1.95k]
  ------------------
 1366|       |            // contractFn
 1367|  31.5k|            PARSER_CHECK(parse_invoke_contract_args(buffer, args))
  ------------------
  |  |   15|  31.5k|    {                           \
  |  |   16|  31.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14.5k, False: 16.9k]
  |  |  ------------------
  |  |   17|  31.5k|    }
  ------------------
 1368|  16.9k|            break;
 1369|  31.5k|        }
 1370|  16.9k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1370:9): [True: 524, False: 32.9k]
  ------------------
 1371|       |            // createContractHostFn
 1372|    524|            PARSER_CHECK(read_create_contract_args_advance(buffer))
  ------------------
  |  |   15|    524|    {                           \
  |  |   16|    524|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 47, False: 477]
  |  |  ------------------
  |  |   17|    524|    }
  ------------------
 1373|    477|            break;
 1374|  1.43k|        default:
  ------------------
  |  Branch (1374:9): [True: 1.43k, False: 32.0k]
  ------------------
 1375|  1.43k|            return false;
 1376|  33.4k|    }
 1377|  17.4k|    return true;
 1378|  33.4k|}
parse_soroban_authorization_envelope:
 1382|  30.0k|                                          envelope_t *envelope) {
 1383|  30.0k|    PRINTF("parse_soroban_authorization_envelope\n");
 1384|  30.0k|    buffer_t buffer = {
 1385|  30.0k|        .ptr = data,
 1386|  30.0k|        .size = data_len,
 1387|  30.0k|        .offset = 0,
 1388|  30.0k|    };
 1389|       |
 1390|  30.0k|    explicit_bzero(&envelope->soroban_authorization, sizeof(soroban_authorization_t));
 1391|       |
 1392|  30.0k|    uint32_t envelope_type;
 1393|  30.0k|    PARSER_CHECK(parse_uint32(&buffer, &envelope_type))
  ------------------
  |  |   15|  30.0k|    {                           \
  |  |   16|  30.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 30.0k]
  |  |  ------------------
  |  |   17|  30.0k|    }
  ------------------
 1394|  30.0k|    if (envelope_type != ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1394:9): [True: 3.78k, False: 26.2k]
  ------------------
 1395|  3.78k|        return false;
 1396|  3.78k|    }
 1397|  26.2k|    envelope->type = envelope_type;
 1398|       |
 1399|  26.2k|    PARSER_CHECK(parse_network(&buffer, &envelope->network))
  ------------------
  |  |   15|  26.2k|    {                           \
  |  |   16|  26.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 26.2k]
  |  |  ------------------
  |  |   17|  26.2k|    }
  ------------------
 1400|  26.2k|    PARSER_CHECK(parse_uint64(&buffer, &envelope->soroban_authorization.nonce))
  ------------------
  |  |   15|  26.2k|    {                           \
  |  |   16|  26.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 26.2k]
  |  |  ------------------
  |  |   17|  26.2k|    }
  ------------------
 1401|  26.2k|    PARSER_CHECK(
  ------------------
  |  |   15|  26.2k|    {                           \
  |  |   16|  26.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 26.2k]
  |  |  ------------------
  |  |   17|  26.2k|    }
  ------------------
 1402|  26.2k|        parse_uint32(&buffer, &envelope->soroban_authorization.signature_expiration_ledger))
 1403|       |
 1404|       |    // function
 1405|  26.2k|    PARSER_CHECK(parse_auth_function(&buffer,
  ------------------
  |  |   15|  26.2k|    {                           \
  |  |   16|  26.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 16.0k, False: 10.1k]
  |  |  ------------------
  |  |   17|  26.2k|    }
  ------------------
 1406|  26.2k|                                     &envelope->soroban_authorization.auth_function_type,
 1407|  26.2k|                                     &envelope->soroban_authorization.invoke_contract_args))
 1408|       |    // subInvocations
 1409|  10.1k|    uint32_t len;
 1410|  10.1k|    uint8_t sub_invocations_count = 0;
 1411|  10.1k|    PARSER_CHECK(parse_uint32(&buffer, &len))
  ------------------
  |  |   15|  10.1k|    {                           \
  |  |   16|  10.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 55, False: 10.1k]
  |  |  ------------------
  |  |   17|  10.1k|    }
  ------------------
 1412|  17.6k|    for (uint32_t i = 0; i < len; i++) {
  ------------------
  |  Branch (1412:26): [True: 8.47k, False: 9.16k]
  ------------------
 1413|  8.47k|        PARSER_CHECK(read_soroban_authorized_invocation_advance(
  ------------------
  |  |   15|  8.47k|    {                           \
  |  |   16|  8.47k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 962, False: 7.50k]
  |  |  ------------------
  |  |   17|  8.47k|    }
  ------------------
 1414|  8.47k|            &buffer,
 1415|  8.47k|            &sub_invocations_count,
 1416|  8.47k|            envelope->soroban_authorization.sub_invocation_positions));
 1417|  7.50k|    }
 1418|  9.16k|    envelope->soroban_authorization.sub_invocations_count = sub_invocations_count;
 1419|  9.16k|    PRINTF("sub_invocations_count=%d\n", sub_invocations_count);
 1420|       |    // for (uint8_t i = 0; i < 16; i++) {
 1421|       |    //     PRINTF("sub_invocation_positions[%d]=%d\n",
 1422|       |    //            i,
 1423|       |    //            envelope->soroban_authorization.sub_invocation_positions[i]);
 1424|       |    // }
 1425|  9.16k|    return true;
 1426|  10.1k|}
parser.c:read_i64_be:
   32|   295k|static int64_t read_i64_be(const uint8_t *ptr, size_t offset) {
   33|   295k|    uint64_t result = 0;
   34|  2.65M|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (34:21): [True: 2.36M, False: 295k]
  ------------------
   35|  2.36M|        result = (result << 8) | ptr[offset + i];
   36|  2.36M|    }
   37|   295k|    return (int64_t) result;
   38|   295k|}
parser.c:read_i32_be:
   40|  15.8k|static int32_t read_i32_be(const uint8_t *ptr, size_t offset) {
   41|  15.8k|    uint32_t result = 0;
   42|  79.4k|    for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (42:21): [True: 63.5k, False: 15.8k]
  ------------------
   43|  63.5k|        result = (result << 8) | ptr[offset + i];
   44|  63.5k|    }
   45|  15.8k|    return (int32_t) result;
   46|  15.8k|}
parser.c:parse_binary_string_ptr:
  114|  78.2k|                                    size_t max_length) {
  115|       |    /* max_length does not include terminal null character */
  116|  78.2k|    uint32_t size;
  117|       |
  118|  78.2k|    PARSER_CHECK(parse_uint32(buffer, &size))
  ------------------
  |  |   15|  78.2k|    {                           \
  |  |   16|  78.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 46, False: 78.2k]
  |  |  ------------------
  |  |   17|  78.2k|    }
  ------------------
  119|  78.2k|    if (max_length != 0 && size > max_length) {
  ------------------
  |  Branch (119:9): [True: 77.4k, False: 789]
  |  Branch (119:28): [True: 74, False: 77.3k]
  ------------------
  120|     74|        return false;
  121|     74|    }
  122|       |
  123|  78.1k|    size_t data_size = 0;
  124|  78.1k|    PARSER_CHECK(num_bytes(size, &data_size))
  ------------------
  |  |   15|  78.1k|    {                           \
  |  |   16|  78.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 78.1k]
  |  |  ------------------
  |  |   17|  78.1k|    }
  ------------------
  125|  78.1k|    PARSER_CHECK(buffer_read_bytes(buffer, string, data_size))
  ------------------
  |  |   15|  78.1k|    {                           \
  |  |   16|  78.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 78, False: 78.0k]
  |  |  ------------------
  |  |   17|  78.1k|    }
  ------------------
  126|       |    PARSER_CHECK(check_padding(*string, size, data_size))  // security check
  ------------------
  |  |   15|  78.0k|    {                           \
  |  |   16|  78.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.73k, False: 76.3k]
  |  |  ------------------
  |  |   17|  78.0k|    }
  ------------------
  127|  76.3k|    if (out_len) {
  ------------------
  |  Branch (127:9): [True: 76.3k, False: 0]
  ------------------
  128|  76.3k|        *out_len = size;
  129|  76.3k|    }
  130|  76.3k|    return true;
  131|  78.0k|}
parser.c:check_padding:
  101|  78.0k|static bool check_padding(const uint8_t *buffer, size_t offset, size_t length) {
  102|  78.0k|    size_t i;
  103|   100k|    for (i = 0; i < length - offset; i++) {
  ------------------
  |  Branch (103:17): [True: 24.5k, False: 76.3k]
  ------------------
  104|  24.5k|        if (buffer[offset + i] != 0x00) {
  ------------------
  |  Branch (104:13): [True: 1.73k, False: 22.8k]
  ------------------
  105|  1.73k|            return false;
  106|  1.73k|        }
  107|  24.5k|    }
  108|  76.3k|    return true;
  109|  78.0k|}
parser.c:parse_account_id:
  194|   345k|static bool parse_account_id(buffer_t *buffer, const uint8_t **account_id) {
  195|   345k|    uint32_t account_type;
  196|       |
  197|   345k|    PARSER_CHECK(parse_uint32(buffer, &account_type))
  ------------------
  |  |   15|   345k|    {                           \
  |  |   16|   345k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 124, False: 345k]
  |  |  ------------------
  |  |   17|   345k|    }
  ------------------
  198|   345k|    if (account_type != PUBLIC_KEY_TYPE_ED25519) {
  ------------------
  |  |   50|   345k|#define PUBLIC_KEY_TYPE_ED25519 0
  ------------------
  |  Branch (198:9): [True: 1.19k, False: 344k]
  ------------------
  199|  1.19k|        return false;
  200|  1.19k|    }
  201|   344k|    PARSER_CHECK(buffer_read_bytes(buffer, account_id, RAW_ED25519_PUBLIC_KEY_SIZE))
  ------------------
  |  |   15|   344k|    {                           \
  |  |   16|   344k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 152, False: 343k]
  |  |  ------------------
  |  |   17|   344k|    }
  ------------------
  202|   343k|    return true;
  203|   344k|}
parser.c:buffer_read_bytes:
   25|   549k|static bool buffer_read_bytes(buffer_t *buffer, const uint8_t **data, size_t size) {
   26|   549k|    PARSER_CHECK(buffer_can_read(buffer, size))
  ------------------
  |  |   15|   549k|    {                           \
  |  |   16|   549k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 499, False: 548k]
  |  |  ------------------
  |  |   17|   549k|    }
  ------------------
   27|   548k|    *data = buffer->ptr + buffer->offset;
   28|   548k|    PARSER_CHECK(buffer_advance(buffer, size))
  ------------------
  |  |   15|   548k|    {                           \
  |  |   16|   548k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 548k]
  |  |  ------------------
  |  |   17|   548k|    }
  ------------------
   29|   548k|    return true;
   30|   548k|}
parser.c:buffer_advance:
   21|  49.8M|static bool buffer_advance(buffer_t *buffer, size_t num_bytes) {
   22|  49.8M|    return buffer_seek_cur(buffer, num_bytes);
   23|  49.8M|}
parser.c:num_bytes:
   87|  90.0k|static bool num_bytes(size_t size, size_t *out_size) {
   88|  90.0k|    size_t remainder = size % 4;
   89|  90.0k|    if (remainder == 0) {
  ------------------
  |  Branch (89:9): [True: 74.8k, False: 15.2k]
  ------------------
   90|  74.8k|        *out_size = size;
   91|  74.8k|        return true;
   92|  74.8k|    }
   93|  15.2k|    if (size > SIZE_MAX - 4) {
  ------------------
  |  Branch (93:9): [True: 0, False: 15.2k]
  ------------------
   94|       |        // size + 4 would overflow
   95|      0|        return false;
   96|      0|    }
   97|  15.2k|    *out_size = size + 4 - remainder;
   98|  15.2k|    return true;
   99|  15.2k|}
parser.c:read_scval_vec_advance:
  698|  10.7k|static bool read_scval_vec_advance(buffer_t *buffer) {
  699|  10.7k|    uint32_t vec_len;
  700|  10.7k|    PARSER_CHECK(parse_uint32(buffer, &vec_len))
  ------------------
  |  |   15|  10.7k|    {                           \
  |  |   16|  10.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 10.7k]
  |  |  ------------------
  |  |   17|  10.7k|    }
  ------------------
  701|  46.8k|    for (uint32_t i = 0; i < vec_len; i++) {
  ------------------
  |  Branch (701:26): [True: 46.3k, False: 530]
  ------------------
  702|  46.3k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  46.3k|    {                           \
  |  |   16|  46.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10.2k, False: 36.1k]
  |  |  ------------------
  |  |   17|  46.3k|    }
  ------------------
  703|  46.3k|    }
  704|    530|    return true;
  705|  10.7k|}
parser.c:read_scval_map_advance:
  707|  4.00M|static bool read_scval_map_advance(buffer_t *buffer) {
  708|  4.00M|    uint32_t map_len;
  709|  4.00M|    PARSER_CHECK(parse_uint32(buffer, &map_len))
  ------------------
  |  |   15|  4.00M|    {                           \
  |  |   16|  4.00M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 53, False: 4.00M]
  |  |  ------------------
  |  |   17|  4.00M|    }
  ------------------
  710|  28.0M|    for (uint32_t i = 0; i < map_len; i++) {
  ------------------
  |  Branch (710:26): [True: 27.9M, False: 76.9k]
  ------------------
  711|  27.9M|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  27.9M|    {                           \
  |  |   16|  27.9M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.85M, False: 25.1M]
  |  |  ------------------
  |  |   17|  27.9M|    }
  ------------------
  712|  25.1M|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  25.1M|    {                           \
  |  |   16|  25.1M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.07M, False: 24.0M]
  |  |  ------------------
  |  |   17|  25.1M|    }
  ------------------
  713|  25.1M|    }
  714|  76.9k|    return true;
  715|  4.00M|}
parser.c:read_contract_executable_advance:
  717|  9.99k|static bool read_contract_executable_advance(buffer_t *buffer) {
  718|  9.99k|    uint32_t type;
  719|  9.99k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  9.99k|    {                           \
  |  |   16|  9.99k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 39, False: 9.95k]
  |  |  ------------------
  |  |   17|  9.99k|    }
  ------------------
  720|  9.95k|    switch (type) {
  721|  4.17k|        case CONTRACT_EXECUTABLE_WASM:
  ------------------
  |  |  491|  4.17k|#define CONTRACT_EXECUTABLE_WASM          0
  ------------------
  |  Branch (721:9): [True: 4.17k, False: 5.78k]
  ------------------
  722|       |            PARSER_CHECK(buffer_advance(buffer, HASH_SIZE))  // code
  ------------------
  |  |   15|  4.17k|    {                           \
  |  |   16|  4.17k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 67, False: 4.10k]
  |  |  ------------------
  |  |   17|  4.17k|    }
  ------------------
  723|  4.10k|            break;
  724|  5.59k|        case CONTRACT_EXECUTABLE_STELLAR_ASSET:
  ------------------
  |  |  492|  5.59k|#define CONTRACT_EXECUTABLE_STELLAR_ASSET 1
  ------------------
  |  Branch (724:9): [True: 5.59k, False: 4.36k]
  ------------------
  725|       |            // void
  726|  5.59k|            break;
  727|    191|        default:
  ------------------
  |  Branch (727:9): [True: 191, False: 9.76k]
  ------------------
  728|    191|            return false;
  729|  9.95k|    }
  730|  9.69k|    return true;
  731|  9.95k|}
parser.c:parse_network:
 1293|  51.7k|static bool parse_network(buffer_t *buffer, uint8_t *network) {
 1294|  51.7k|    const uint8_t *network_id;
 1295|  51.7k|    PARSER_CHECK(buffer_read_bytes(buffer, &network_id, HASH_SIZE))
  ------------------
  |  |   15|  51.7k|    {                           \
  |  |   16|  51.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 51.7k]
  |  |  ------------------
  |  |   17|  51.7k|    }
  ------------------
 1296|       |
 1297|  51.7k|    if (memcmp(network_id, NETWORK_ID_PUBLIC_HASH, HASH_SIZE) == 0) {
  ------------------
  |  |   46|  51.7k|#define HASH_SIZE                 32
  ------------------
  |  Branch (1297:9): [True: 1.14k, False: 50.5k]
  ------------------
 1298|  1.14k|        *network = NETWORK_TYPE_PUBLIC;
  ------------------
  |  |   57|  1.14k|#define NETWORK_TYPE_PUBLIC  0
  ------------------
 1299|  50.5k|    } else if (memcmp(network_id, NETWORK_ID_TEST_HASH, HASH_SIZE) == 0) {
  ------------------
  |  |   46|  50.5k|#define HASH_SIZE                 32
  ------------------
  |  Branch (1299:16): [True: 542, False: 50.0k]
  ------------------
 1300|    542|        *network = NETWORK_TYPE_TEST;
  ------------------
  |  |   58|    542|#define NETWORK_TYPE_TEST    1
  ------------------
 1301|  50.0k|    } else {
 1302|  50.0k|        *network = NETWORK_TYPE_UNKNOWN;
  ------------------
  |  |   59|  50.0k|#define NETWORK_TYPE_UNKNOWN 2
  ------------------
 1303|  50.0k|    }
 1304|  51.7k|    return true;
 1305|  51.7k|}
parser.c:parse_transaction_details:
 1242|  10.5k|static bool parse_transaction_details(buffer_t *buffer, transaction_details_t *transaction) {
 1243|       |    // account used to run the (inner)transaction
 1244|  10.5k|    PARSER_CHECK(parse_transaction_source(buffer, &transaction->source_account))
  ------------------
  |  |   15|  10.5k|    {                           \
  |  |   16|  10.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 129, False: 10.3k]
  |  |  ------------------
  |  |   17|  10.5k|    }
  ------------------
 1245|       |
 1246|       |    // the fee the source_account will pay
 1247|  10.3k|    PARSER_CHECK(parse_transaction_fee(buffer, &transaction->fee))
  ------------------
  |  |   15|  10.3k|    {                           \
  |  |   16|  10.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 10.3k]
  |  |  ------------------
  |  |   17|  10.3k|    }
  ------------------
 1248|       |
 1249|       |    // sequence number to consume in the account
 1250|  10.3k|    PARSER_CHECK(parse_transaction_sequence(buffer, &transaction->sequence_number))
  ------------------
  |  |   15|  10.3k|    {                           \
  |  |   16|  10.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 10.3k]
  |  |  ------------------
  |  |   17|  10.3k|    }
  ------------------
 1251|       |
 1252|       |    // validity conditions
 1253|  10.3k|    PARSER_CHECK(parse_transaction_preconditions(buffer, &transaction->cond))
  ------------------
  |  |   15|  10.3k|    {                           \
  |  |   16|  10.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 163, False: 10.2k]
  |  |  ------------------
  |  |   17|  10.3k|    }
  ------------------
 1254|       |
 1255|  10.2k|    PARSER_CHECK(parse_transaction_memo(buffer, &transaction->memo))
  ------------------
  |  |   15|  10.2k|    {                           \
  |  |   16|  10.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 296, False: 9.92k]
  |  |  ------------------
  |  |   17|  10.2k|    }
  ------------------
 1256|  9.92k|    PARSER_CHECK(parse_transaction_operation_len(buffer, &transaction->operations_count))
  ------------------
  |  |   15|  9.92k|    {                           \
  |  |   16|  9.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 22, False: 9.89k]
  |  |  ------------------
  |  |   17|  9.92k|    }
  ------------------
 1257|       |
 1258|       |    // check ops is valid
 1259|       |    // size_t offset = buffer->offset;
 1260|       |    // PARSER_CHECK(check_operations(buffer, transaction->operations_count))
 1261|       |    // buffer->offset = offset;
 1262|       |
 1263|  9.89k|    return true;
 1264|  9.92k|}
parser.c:parse_transaction_source:
 1203|  10.5k|static bool parse_transaction_source(buffer_t *buffer, muxed_account_t *source) {
 1204|  10.5k|    return parse_muxed_account(buffer, source);
 1205|  10.5k|}
parser.c:parse_muxed_account:
  205|  32.3k|static bool parse_muxed_account(buffer_t *buffer, muxed_account_t *muxed_account) {
  206|  32.3k|    PARSER_CHECK(parse_uint32(buffer, &muxed_account->type))
  ------------------
  |  |   15|  32.3k|    {                           \
  |  |   16|  32.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 28, False: 32.2k]
  |  |  ------------------
  |  |   17|  32.3k|    }
  ------------------
  207|       |
  208|  32.2k|    switch (muxed_account->type) {
  209|  29.4k|        case KEY_TYPE_ED25519:
  ------------------
  |  Branch (209:9): [True: 29.4k, False: 2.82k]
  ------------------
  210|  29.4k|            PARSER_CHECK(
  ------------------
  |  |   15|  29.4k|    {                           \
  |  |   16|  29.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 18, False: 29.4k]
  |  |  ------------------
  |  |   17|  29.4k|    }
  ------------------
  211|  29.4k|                buffer_read_bytes(buffer, &muxed_account->ed25519, RAW_ED25519_PUBLIC_KEY_SIZE))
  212|  29.4k|            return true;
  213|  2.70k|        case KEY_TYPE_MUXED_ED25519:
  ------------------
  |  Branch (213:9): [True: 2.70k, False: 29.5k]
  ------------------
  214|  2.70k|            PARSER_CHECK(parse_uint64(buffer, &muxed_account->med25519.id))
  ------------------
  |  |   15|  2.70k|    {                           \
  |  |   16|  2.70k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 2.69k]
  |  |  ------------------
  |  |   17|  2.70k|    }
  ------------------
  215|  2.69k|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|  2.69k|    {                           \
  |  |   16|  2.69k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 2.68k]
  |  |  ------------------
  |  |   17|  2.69k|    }
  ------------------
  216|  2.69k|                                           &muxed_account->med25519.ed25519,
  217|  2.69k|                                           RAW_ED25519_PUBLIC_KEY_SIZE))
  218|  2.68k|            return true;
  219|    119|        default:
  ------------------
  |  Branch (219:9): [True: 119, False: 32.1k]
  ------------------
  220|    119|            return false;
  221|  32.2k|    }
  222|  32.2k|}
parser.c:parse_transaction_fee:
 1207|  10.3k|static bool parse_transaction_fee(buffer_t *buffer, uint32_t *fee) {
 1208|  10.3k|    return parse_uint32(buffer, fee);
 1209|  10.3k|}
parser.c:parse_transaction_sequence:
 1211|  10.3k|static bool parse_transaction_sequence(buffer_t *buffer, sequence_number_t *sequence_number) {
 1212|  10.3k|    return parse_int64(buffer, sequence_number);
 1213|  10.3k|}
parser.c:parse_transaction_preconditions:
 1215|  10.3k|static bool parse_transaction_preconditions(buffer_t *buffer, preconditions_t *preconditions) {
 1216|  10.3k|    return parse_preconditions(buffer, preconditions);
 1217|  10.3k|}
parser.c:parse_preconditions:
  249|  10.3k|static bool parse_preconditions(buffer_t *buffer, preconditions_t *cond) {
  250|  10.3k|    uint32_t precondition_type;
  251|  10.3k|    PARSER_CHECK(parse_uint32(buffer, &precondition_type))
  ------------------
  |  |   15|  10.3k|    {                           \
  |  |   16|  10.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 10.3k]
  |  |  ------------------
  |  |   17|  10.3k|    }
  ------------------
  252|  10.3k|    switch (precondition_type) {
  253|  9.52k|        case PRECOND_NONE:
  ------------------
  |  Branch (253:9): [True: 9.52k, False: 851]
  ------------------
  254|  9.52k|            cond->time_bounds_present = false;
  255|  9.52k|            cond->min_seq_num_present = false;
  256|  9.52k|            cond->ledger_bounds_present = false;
  257|  9.52k|            cond->min_seq_ledger_gap = 0;
  258|  9.52k|            cond->min_seq_age = 0;
  259|  9.52k|            return true;
  260|    589|        case PRECOND_TIME:
  ------------------
  |  Branch (260:9): [True: 589, False: 9.78k]
  ------------------
  261|    589|            cond->time_bounds_present = true;
  262|    589|            PARSER_CHECK(parse_time_bounds(buffer, &cond->time_bounds))
  ------------------
  |  |   15|    589|    {                           \
  |  |   16|    589|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 579]
  |  |  ------------------
  |  |   17|    589|    }
  ------------------
  263|    579|            cond->min_seq_num_present = false;
  264|    579|            cond->ledger_bounds_present = false;
  265|    579|            cond->min_seq_ledger_gap = 0;
  266|    579|            cond->min_seq_age = 0;
  267|    579|            return true;
  268|    252|        case PRECOND_V2:
  ------------------
  |  Branch (268:9): [True: 252, False: 10.1k]
  ------------------
  269|    252|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|    252|    {                           \
  |  |   16|    252|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 246]
  |  |  ------------------
  |  |   17|    252|    }
  ------------------
  270|    252|                                             (xdr_type_reader) parse_time_bounds,
  271|    252|                                             &cond->time_bounds,
  272|    252|                                             &cond->time_bounds_present))
  273|    246|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|    246|    {                           \
  |  |   16|    246|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 231]
  |  |  ------------------
  |  |   17|    246|    }
  ------------------
  274|    246|                                             (xdr_type_reader) parse_ledger_bounds,
  275|    246|                                             &cond->ledger_bounds,
  276|    246|                                             &cond->ledger_bounds_present))
  277|    231|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|    231|    {                           \
  |  |   16|    231|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 222]
  |  |  ------------------
  |  |   17|    231|    }
  ------------------
  278|    231|                                             (xdr_type_reader) parse_int64,
  279|    231|                                             &cond->min_seq_num,
  280|    231|                                             &cond->min_seq_num_present))
  281|    222|            PARSER_CHECK(parse_int64(buffer, &cond->min_seq_age))
  ------------------
  |  |   15|    222|    {                           \
  |  |   16|    222|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 219]
  |  |  ------------------
  |  |   17|    222|    }
  ------------------
  282|    219|            PARSER_CHECK(parse_uint32(buffer, &cond->min_seq_ledger_gap))
  ------------------
  |  |   15|    219|    {                           \
  |  |   16|    219|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 215]
  |  |  ------------------
  |  |   17|    219|    }
  ------------------
  283|    215|            PARSER_CHECK(parse_extra_signers(buffer))
  ------------------
  |  |   15|    215|    {                           \
  |  |   16|    215|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 102, False: 113]
  |  |  ------------------
  |  |   17|    215|    }
  ------------------
  284|    113|            return true;
  285|     10|        default:
  ------------------
  |  Branch (285:9): [True: 10, False: 10.3k]
  ------------------
  286|     10|            return false;
  287|  10.3k|    }
  288|  10.3k|}
parser.c:parse_time_bounds:
  224|    600|static bool parse_time_bounds(buffer_t *buffer, time_bounds_t *bounds) {
  225|    600|    PARSER_CHECK(parse_uint64(buffer, &bounds->min_time))
  ------------------
  |  |   15|    600|    {                           \
  |  |   16|    600|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 594]
  |  |  ------------------
  |  |   17|    600|    }
  ------------------
  226|    594|    PARSER_CHECK(parse_uint64(buffer, &bounds->max_time))
  ------------------
  |  |   15|    594|    {                           \
  |  |   16|    594|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 590]
  |  |  ------------------
  |  |   17|    594|    }
  ------------------
  227|    590|    return true;
  228|    594|}
parser.c:parse_optional_type:
  135|   525k|static bool parse_optional_type(buffer_t *buffer, xdr_type_reader reader, void *dst, bool *opted) {
  136|   525k|    bool is_present;
  137|       |
  138|   525k|    PARSER_CHECK(parse_bool(buffer, &is_present))
  ------------------
  |  |   15|   525k|    {                           \
  |  |   16|   525k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 398, False: 525k]
  |  |  ------------------
  |  |   17|   525k|    }
  ------------------
  139|   525k|    if (is_present) {
  ------------------
  |  Branch (139:9): [True: 18.4k, False: 506k]
  ------------------
  140|  18.4k|        if (opted) {
  ------------------
  |  Branch (140:13): [True: 18.4k, False: 0]
  ------------------
  141|  18.4k|            *opted = true;
  142|  18.4k|        }
  143|  18.4k|        return reader(buffer, dst);
  144|   506k|    } else {
  145|   506k|        if (opted) {
  ------------------
  |  Branch (145:13): [True: 506k, False: 0]
  ------------------
  146|   506k|            *opted = false;
  147|   506k|        }
  148|   506k|        return true;
  149|   506k|    }
  150|   525k|}
parser.c:parse_ledger_bounds:
  230|    112|static bool parse_ledger_bounds(buffer_t *buffer, ledger_bounds_t *ledger_bounds) {
  231|    112|    PARSER_CHECK(parse_uint32(buffer, &ledger_bounds->min_ledger))
  ------------------
  |  |   15|    112|    {                           \
  |  |   16|    112|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 107]
  |  |  ------------------
  |  |   17|    112|    }
  ------------------
  232|    107|    PARSER_CHECK(parse_uint32(buffer, &ledger_bounds->max_ledger))
  ------------------
  |  |   15|    107|    {                           \
  |  |   16|    107|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 104]
  |  |  ------------------
  |  |   17|    107|    }
  ------------------
  233|    104|    return true;
  234|    107|}
parser.c:parse_extra_signers:
  236|    215|static bool parse_extra_signers(buffer_t *buffer) {
  237|    215|    uint32_t length;
  238|    215|    PARSER_CHECK(parse_uint32(buffer, &length))
  ------------------
  |  |   15|    215|    {                           \
  |  |   16|    215|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 213]
  |  |  ------------------
  |  |   17|    215|    }
  ------------------
  239|    213|    if (length > 2) {  // maximum length is 2
  ------------------
  |  Branch (239:9): [True: 6, False: 207]
  ------------------
  240|      6|        return false;
  241|      6|    }
  242|    207|    signer_key_t signer_key;
  243|    350|    for (uint32_t i = 0; i < length; i++) {
  ------------------
  |  Branch (243:26): [True: 237, False: 113]
  ------------------
  244|    237|        PARSER_CHECK(parse_signer_key(buffer, &signer_key))
  ------------------
  |  |   15|    237|    {                           \
  |  |   16|    237|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 94, False: 143]
  |  |  ------------------
  |  |   17|    237|    }
  ------------------
  245|    237|    }
  246|    113|    return true;
  247|    207|}
parser.c:parse_signer_key:
  163|  9.05k|static bool parse_signer_key(buffer_t *buffer, signer_key_t *key) {
  164|  9.05k|    PARSER_CHECK(parse_uint32(buffer, &key->type))
  ------------------
  |  |   15|  9.05k|    {                           \
  |  |   16|  9.05k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 28, False: 9.02k]
  |  |  ------------------
  |  |   17|  9.05k|    }
  ------------------
  165|  9.02k|    switch (key->type) {
  166|  4.30k|        case SIGNER_KEY_TYPE_ED25519:
  ------------------
  |  Branch (166:9): [True: 4.30k, False: 4.71k]
  ------------------
  167|  4.30k|            PARSER_CHECK(buffer_read_bytes(buffer, &key->ed25519, RAW_ED25519_PUBLIC_KEY_SIZE))
  ------------------
  |  |   15|  4.30k|    {                           \
  |  |   16|  4.30k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 4.29k]
  |  |  ------------------
  |  |   17|  4.30k|    }
  ------------------
  168|  4.29k|            return true;
  169|  1.90k|        case SIGNER_KEY_TYPE_PRE_AUTH_TX:
  ------------------
  |  Branch (169:9): [True: 1.90k, False: 7.11k]
  ------------------
  170|  1.90k|            PARSER_CHECK(buffer_read_bytes(buffer, &key->pre_auth_tx, RAW_PRE_AUTH_TX_KEY_SIZE))
  ------------------
  |  |   15|  1.90k|    {                           \
  |  |   16|  1.90k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 1.90k]
  |  |  ------------------
  |  |   17|  1.90k|    }
  ------------------
  171|  1.90k|            return true;
  172|    906|        case SIGNER_KEY_TYPE_HASH_X:
  ------------------
  |  Branch (172:9): [True: 906, False: 8.12k]
  ------------------
  173|    906|            PARSER_CHECK(buffer_read_bytes(buffer, &key->hash_x, RAW_HASH_X_KEY_SIZE))
  ------------------
  |  |   15|    906|    {                           \
  |  |   16|    906|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 900]
  |  |  ------------------
  |  |   17|    906|    }
  ------------------
  174|    900|            return true;
  175|  1.88k|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:
  ------------------
  |  Branch (175:9): [True: 1.88k, False: 7.14k]
  ------------------
  176|  1.88k|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|  1.88k|    {                           \
  |  |   16|  1.88k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 1.87k]
  |  |  ------------------
  |  |   17|  1.88k|    }
  ------------------
  177|  1.88k|                                           &key->ed25519_signed_payload.ed25519,
  178|  1.88k|                                           RAW_ED25519_PUBLIC_KEY_SIZE))
  179|  1.87k|            PARSER_CHECK(parse_uint32(buffer, &key->ed25519_signed_payload.payload_len))
  ------------------
  |  |   15|  1.87k|    {                           \
  |  |   16|  1.87k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.86k]
  |  |  ------------------
  |  |   17|  1.87k|    }
  ------------------
  180|       |            // valid length [1, 64]
  181|  1.86k|            if (key->ed25519_signed_payload.payload_len == 0 ||
  ------------------
  |  Branch (181:17): [True: 9, False: 1.85k]
  ------------------
  182|  1.86k|                key->ed25519_signed_payload.payload_len > 64) {
  ------------------
  |  Branch (182:17): [True: 8, False: 1.85k]
  ------------------
  183|     17|                return false;
  184|     17|            }
  185|  1.85k|            size_t data_size = 0;
  186|  1.85k|            PARSER_CHECK(num_bytes(key->ed25519_signed_payload.payload_len, &data_size))
  ------------------
  |  |   15|  1.85k|    {                           \
  |  |   16|  1.85k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 1.85k]
  |  |  ------------------
  |  |   17|  1.85k|    }
  ------------------
  187|  1.85k|            PARSER_CHECK(buffer_read_bytes(buffer, &key->ed25519_signed_payload.payload, data_size))
  ------------------
  |  |   15|  1.85k|    {                           \
  |  |   16|  1.85k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 1.83k]
  |  |  ------------------
  |  |   17|  1.85k|    }
  ------------------
  188|  1.83k|            return true;
  189|     21|        default:
  ------------------
  |  Branch (189:9): [True: 21, False: 9.00k]
  ------------------
  190|     21|            return false;
  191|  9.02k|    }
  192|  9.02k|}
parser.c:parse_transaction_memo:
 1219|  10.2k|static bool parse_transaction_memo(buffer_t *buffer, memo_t *memo) {
 1220|  10.2k|    return parse_memo(buffer, memo);
 1221|  10.2k|}
parser.c:parse_memo:
  290|  10.2k|static bool parse_memo(buffer_t *buffer, memo_t *memo) {
  291|  10.2k|    PARSER_CHECK(parse_uint32(buffer, &memo->type))
  ------------------
  |  |   15|  10.2k|    {                           \
  |  |   16|  10.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 35, False: 10.1k]
  |  |  ------------------
  |  |   17|  10.2k|    }
  ------------------
  292|  10.1k|    switch (memo->type) {
  293|  9.34k|        case MEMO_NONE:
  ------------------
  |  Branch (293:9): [True: 9.34k, False: 836]
  ------------------
  294|  9.34k|            return true;
  295|     36|        case MEMO_ID:
  ------------------
  |  Branch (295:9): [True: 36, False: 10.1k]
  ------------------
  296|     36|            return parse_uint64(buffer, &memo->id);
  297|    554|        case MEMO_TEXT: {
  ------------------
  |  Branch (297:9): [True: 554, False: 9.62k]
  ------------------
  298|    554|            PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|    554|    {                           \
  |  |   16|    554|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 530]
  |  |  ------------------
  |  |   17|    554|    }
  ------------------
  299|    554|                                                 &memo->text.text,
  300|    554|                                                 &memo->text.text_size,
  301|    554|                                                 MEMO_TEXT_MAX_SIZE))
  302|    530|            return true;
  303|    554|        }
  304|     10|        case MEMO_HASH:
  ------------------
  |  Branch (304:9): [True: 10, False: 10.1k]
  ------------------
  305|     10|            return buffer_read_bytes(buffer, &memo->hash, HASH_SIZE);
  ------------------
  |  |   46|     10|#define HASH_SIZE                 32
  ------------------
  306|     13|        case MEMO_RETURN:
  ------------------
  |  Branch (306:9): [True: 13, False: 10.1k]
  ------------------
  307|     13|            return buffer_read_bytes(buffer, &memo->return_hash, HASH_SIZE);
  ------------------
  |  |   46|     13|#define HASH_SIZE                 32
  ------------------
  308|    223|        default:
  ------------------
  |  Branch (308:9): [True: 223, False: 9.95k]
  ------------------
  309|    223|            return false;  // unknown memo type
  310|  10.1k|    }
  311|  10.1k|}
parser.c:parse_transaction_operation_len:
 1223|  9.92k|static bool parse_transaction_operation_len(buffer_t *buffer, uint8_t *operations_count) {
 1224|  9.92k|    uint32_t len;
 1225|  9.92k|    PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  9.92k|    {                           \
  |  |   16|  9.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 9.90k]
  |  |  ------------------
  |  |   17|  9.92k|    }
  ------------------
 1226|  9.90k|    if (len > MAX_OPS) {
  ------------------
  |  |   39|  9.90k|#define MAX_OPS 35
  ------------------
  |  Branch (1226:9): [True: 10, False: 9.89k]
  ------------------
 1227|     10|        return false;
 1228|     10|    }
 1229|  9.89k|    *operations_count = len;
 1230|  9.89k|    return true;
 1231|  9.90k|}
parser.c:parse_fee_bump_transaction_details:
 1276|    127|    fee_bump_transaction_details_t *fee_bump_transaction) {
 1277|    127|    PARSER_CHECK(parse_fee_bump_transaction_fee_source(buffer, &fee_bump_transaction->fee_source))
  ------------------
  |  |   15|    127|    {                           \
  |  |   16|    127|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 112]
  |  |  ------------------
  |  |   17|    127|    }
  ------------------
 1278|    112|    PARSER_CHECK(parse_fee_bump_transaction_fee(buffer, &fee_bump_transaction->fee))
  ------------------
  |  |   15|    112|    {                           \
  |  |   16|    112|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 107]
  |  |  ------------------
  |  |   17|    112|    }
  ------------------
 1279|    107|    return true;
 1280|    112|}
parser.c:parse_fee_bump_transaction_fee_source:
 1266|    127|static bool parse_fee_bump_transaction_fee_source(buffer_t *buffer, muxed_account_t *fee_source) {
 1267|    127|    return parse_muxed_account(buffer, fee_source);
 1268|    127|}
parser.c:parse_fee_bump_transaction_fee:
 1270|    112|static bool parse_fee_bump_transaction_fee(buffer_t *buffer, int64_t *fee) {
 1271|    112|    return parse_int64(buffer, fee);
 1272|    112|}
parser.c:check_operations:
 1233|  9.89k|static bool check_operations(buffer_t *buffer, uint8_t op_count) {
 1234|  9.89k|    PRINTF("check_operations: op_count=%d, offset=%d\n", op_count, buffer->offset);
 1235|  9.89k|    operation_t op;
 1236|  61.3k|    for (uint8_t i = 0; i < op_count; i++) {
  ------------------
  |  Branch (1236:25): [True: 53.9k, False: 7.36k]
  ------------------
 1237|  53.9k|        PARSER_CHECK(parse_operation(buffer, &op))
  ------------------
  |  |   15|  53.9k|    {                           \
  |  |   16|  53.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.53k, False: 51.4k]
  |  |  ------------------
  |  |   17|  53.9k|    }
  ------------------
 1238|  53.9k|    }
 1239|  7.36k|    return true;
 1240|  9.89k|}
parser.c:parse_operation:
 1101|   370k|static bool parse_operation(buffer_t *buffer, operation_t *operation) {
 1102|   370k|    PRINTF("parse_operation: offset=%d\n", buffer->offset);
 1103|   370k|    explicit_bzero(operation, sizeof(operation_t));
 1104|       |
 1105|   370k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|   370k|    {                           \
  |  |   16|   370k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 321, False: 369k]
  |  |  ------------------
  |  |   17|   370k|    }
  ------------------
 1106|   370k|                                     (xdr_type_reader) parse_muxed_account,
 1107|   370k|                                     &operation->source_account,
 1108|   370k|                                     &operation->source_account_present))
 1109|   369k|    PRINTF("operation->source_account_present: %d\n", operation->source_account_present);
 1110|       |
 1111|   369k|    PARSER_CHECK(parse_uint32(buffer, &operation->type))
  ------------------
  |  |   15|   369k|    {                           \
  |  |   16|   369k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 32, False: 369k]
  |  |  ------------------
  |  |   17|   369k|    }
  ------------------
 1112|   369k|    PRINTF("sizeof operation->type: %d\n", sizeof(operation->type));
 1113|       |
 1114|   369k|    switch (operation->type) {
 1115|   247k|        case OPERATION_TYPE_CREATE_ACCOUNT: {
  ------------------
  |  Branch (1115:9): [True: 247k, False: 121k]
  ------------------
 1116|   247k|            return parse_create_account(buffer, &operation->create_account_op);
 1117|      0|        }
 1118|  4.76k|        case OPERATION_TYPE_PAYMENT: {
  ------------------
  |  Branch (1118:9): [True: 4.76k, False: 365k]
  ------------------
 1119|  4.76k|            return parse_payment(buffer, &operation->payment_op);
 1120|      0|        }
 1121|  1.98k|        case OPERATION_TYPE_PATH_PAYMENT_STRICT_RECEIVE: {
  ------------------
  |  Branch (1121:9): [True: 1.98k, False: 367k]
  ------------------
 1122|  1.98k|            return parse_path_payment_strict_receive(buffer,
 1123|  1.98k|                                                     &operation->path_payment_strict_receive_op);
 1124|      0|        }
 1125|  3.51k|        case OPERATION_TYPE_CREATE_PASSIVE_SELL_OFFER: {
  ------------------
  |  Branch (1125:9): [True: 3.51k, False: 366k]
  ------------------
 1126|  3.51k|            return parse_create_passive_sell_offer(buffer,
 1127|  3.51k|                                                   &operation->create_passive_sell_offer_op);
 1128|      0|        }
 1129|  1.54k|        case OPERATION_TYPE_MANAGE_SELL_OFFER: {
  ------------------
  |  Branch (1129:9): [True: 1.54k, False: 368k]
  ------------------
 1130|  1.54k|            return parse_manage_sell_offer(buffer, &operation->manage_sell_offer_op);
 1131|      0|        }
 1132|  19.3k|        case OPERATION_TYPE_SET_OPTIONS: {
  ------------------
  |  Branch (1132:9): [True: 19.3k, False: 350k]
  ------------------
 1133|  19.3k|            return parse_set_options(buffer, &operation->set_options_op);
 1134|      0|        }
 1135|  3.12k|        case OPERATION_TYPE_CHANGE_TRUST: {
  ------------------
  |  Branch (1135:9): [True: 3.12k, False: 366k]
  ------------------
 1136|  3.12k|            return parse_change_trust(buffer, &operation->change_trust_op);
 1137|      0|        }
 1138|  1.13k|        case OPERATION_TYPE_ALLOW_TRUST: {
  ------------------
  |  Branch (1138:9): [True: 1.13k, False: 368k]
  ------------------
 1139|  1.13k|            return parse_allow_trust(buffer, &operation->allow_trust_op);
 1140|      0|        }
 1141|  4.88k|        case OPERATION_TYPE_ACCOUNT_MERGE: {
  ------------------
  |  Branch (1141:9): [True: 4.88k, False: 364k]
  ------------------
 1142|  4.88k|            return parse_account_merge(buffer, &operation->account_merge_op);
 1143|      0|        }
 1144|  3.71k|        case OPERATION_TYPE_INFLATION: {
  ------------------
  |  Branch (1144:9): [True: 3.71k, False: 366k]
  ------------------
 1145|  3.71k|            return true;
 1146|      0|        }
 1147|  10.1k|        case OPERATION_TYPE_MANAGE_DATA: {
  ------------------
  |  Branch (1147:9): [True: 10.1k, False: 359k]
  ------------------
 1148|  10.1k|            return parse_manage_data(buffer, &operation->manage_data_op);
 1149|      0|        }
 1150|  1.77k|        case OPERATION_TYPE_BUMP_SEQUENCE: {
  ------------------
  |  Branch (1150:9): [True: 1.77k, False: 368k]
  ------------------
 1151|  1.77k|            return parse_bump_sequence(buffer, &operation->bump_sequence_op);
 1152|      0|        }
 1153|  1.94k|        case OPERATION_TYPE_MANAGE_BUY_OFFER: {
  ------------------
  |  Branch (1153:9): [True: 1.94k, False: 367k]
  ------------------
 1154|  1.94k|            return parse_manage_buy_offer(buffer, &operation->manage_buy_offer_op);
 1155|      0|        }
 1156|  1.63k|        case OPERATION_TYPE_PATH_PAYMENT_STRICT_SEND: {
  ------------------
  |  Branch (1156:9): [True: 1.63k, False: 368k]
  ------------------
 1157|  1.63k|            return parse_path_payment_strict_send(buffer, &operation->path_payment_strict_send_op);
 1158|      0|        }
 1159|  2.28k|        case OPERATION_TYPE_CREATE_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1159:9): [True: 2.28k, False: 367k]
  ------------------
 1160|  2.28k|            return parse_create_claimable_balance(buffer, &operation->create_claimable_balance_op);
 1161|      0|        }
 1162|  2.08k|        case OPERATION_TYPE_CLAIM_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1162:9): [True: 2.08k, False: 367k]
  ------------------
 1163|  2.08k|            return parse_claim_claimable_balance(buffer, &operation->claim_claimable_balance_op);
 1164|      0|        }
 1165|  6.82k|        case OPERATION_TYPE_BEGIN_SPONSORING_FUTURE_RESERVES: {
  ------------------
  |  Branch (1165:9): [True: 6.82k, False: 362k]
  ------------------
 1166|  6.82k|            return parse_begin_sponsoring_future_reserves(
 1167|  6.82k|                buffer,
 1168|  6.82k|                &operation->begin_sponsoring_future_reserves_op);
 1169|      0|        }
 1170|  1.78k|        case OPERATION_TYPE_END_SPONSORING_FUTURE_RESERVES: {
  ------------------
  |  Branch (1170:9): [True: 1.78k, False: 368k]
  ------------------
 1171|  1.78k|            return true;
 1172|      0|        }
 1173|  22.7k|        case OPERATION_TYPE_REVOKE_SPONSORSHIP: {
  ------------------
  |  Branch (1173:9): [True: 22.7k, False: 347k]
  ------------------
 1174|  22.7k|            return parse_revoke_sponsorship(buffer, &operation->revoke_sponsorship_op);
 1175|      0|        }
 1176|    583|        case OPERATION_TYPE_CLAWBACK: {
  ------------------
  |  Branch (1176:9): [True: 583, False: 369k]
  ------------------
 1177|    583|            return parse_clawback(buffer, &operation->clawback_op);
 1178|      0|        }
 1179|  1.01k|        case OPERATION_TYPE_CLAWBACK_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1179:9): [True: 1.01k, False: 368k]
  ------------------
 1180|  1.01k|            return parse_clawback_claimable_balance(buffer,
 1181|  1.01k|                                                    &operation->clawback_claimable_balance_op);
 1182|      0|        }
 1183|  10.1k|        case OPERATION_TYPE_SET_TRUST_LINE_FLAGS: {
  ------------------
  |  Branch (1183:9): [True: 10.1k, False: 359k]
  ------------------
 1184|  10.1k|            return parse_set_trust_line_flags(buffer, &operation->set_trust_line_flags_op);
 1185|      0|        }
 1186|    263|        case OPERATION_TYPE_LIQUIDITY_POOL_DEPOSIT:
  ------------------
  |  Branch (1186:9): [True: 263, False: 369k]
  ------------------
 1187|    263|            return parse_liquidity_pool_deposit(buffer, &operation->liquidity_pool_deposit_op);
 1188|  1.88k|        case OPERATION_TYPE_LIQUIDITY_POOL_WITHDRAW:
  ------------------
  |  Branch (1188:9): [True: 1.88k, False: 367k]
  ------------------
 1189|  1.88k|            return parse_liquidity_pool_withdraw(buffer, &operation->liquidity_pool_withdraw_op);
 1190|  7.73k|        case OPERATION_INVOKE_HOST_FUNCTION: {
  ------------------
  |  Branch (1190:9): [True: 7.73k, False: 362k]
  ------------------
 1191|  7.73k|            return parse_invoke_host_function(buffer, &operation->invoke_host_function_op);
 1192|      0|        }
 1193|  1.02k|        case OPERATION_EXTEND_FOOTPRINT_TTL:
  ------------------
  |  Branch (1193:9): [True: 1.02k, False: 368k]
  ------------------
 1194|  1.02k|            return parse_extend_footprint_ttl(buffer, &operation->extend_footprint_ttl_op);
 1195|  3.98k|        case OPERATION_RESTORE_FOOTPRINT:
  ------------------
  |  Branch (1195:9): [True: 3.98k, False: 365k]
  ------------------
 1196|  3.98k|            return parse_restore_footprint(buffer, &operation->restore_footprint_op);
 1197|     21|        default:
  ------------------
  |  Branch (1197:9): [True: 21, False: 369k]
  ------------------
 1198|     21|            return false;
 1199|   369k|    }
 1200|      0|    return false;
 1201|   369k|}
parser.c:parse_create_account:
  401|   247k|static bool parse_create_account(buffer_t *buffer, create_account_op_t *create_account_op) {
  402|   247k|    PARSER_CHECK(parse_account_id(buffer, &create_account_op->destination))
  ------------------
  |  |   15|   247k|    {                           \
  |  |   16|   247k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 93, False: 247k]
  |  |  ------------------
  |  |   17|   247k|    }
  ------------------
  403|   247k|    PARSER_CHECK(parse_int64(buffer, &create_account_op->starting_balance))
  ------------------
  |  |   15|   247k|    {                           \
  |  |   16|   247k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 247k]
  |  |  ------------------
  |  |   17|   247k|    }
  ------------------
  404|   247k|    return true;
  405|   247k|}
parser.c:parse_payment:
  407|  4.76k|static bool parse_payment(buffer_t *buffer, payment_op_t *payment_op) {
  408|  4.76k|    PARSER_CHECK(parse_muxed_account(buffer, &payment_op->destination))
  ------------------
  |  |   15|  4.76k|    {                           \
  |  |   16|  4.76k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 4.75k]
  |  |  ------------------
  |  |   17|  4.76k|    }
  ------------------
  409|  4.75k|    PARSER_CHECK(parse_asset(buffer, &payment_op->asset))
  ------------------
  |  |   15|  4.75k|    {                           \
  |  |   16|  4.75k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 4.74k]
  |  |  ------------------
  |  |   17|  4.75k|    }
  ------------------
  410|  4.74k|    PARSER_CHECK(parse_int64(buffer, &payment_op->amount))
  ------------------
  |  |   15|  4.74k|    {                           \
  |  |   16|  4.74k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 4.73k]
  |  |  ------------------
  |  |   17|  4.74k|    }
  ------------------
  411|  4.73k|    return true;
  412|  4.74k|}
parser.c:parse_asset:
  325|  49.7k|static bool parse_asset(buffer_t *buffer, asset_t *asset) {
  326|  49.7k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  49.7k|    {                           \
  |  |   16|  49.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 86, False: 49.6k]
  |  |  ------------------
  |  |   17|  49.7k|    }
  ------------------
  327|  49.6k|    switch (asset->type) {
  328|  46.4k|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (328:9): [True: 46.4k, False: 3.12k]
  ------------------
  329|  46.4k|            return true;
  330|      0|        }
  331|  1.66k|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (331:9): [True: 1.66k, False: 47.9k]
  ------------------
  332|  1.66k|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  333|      0|        }
  334|  1.33k|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (334:9): [True: 1.33k, False: 48.2k]
  ------------------
  335|  1.33k|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  336|      0|        }
  337|    123|        default:
  ------------------
  |  Branch (337:9): [True: 123, False: 49.4k]
  ------------------
  338|    123|            return false;  // unknown asset type
  339|  49.6k|    }
  340|  49.6k|}
parser.c:parse_alpha_num4_asset:
  313|  2.72k|static bool parse_alpha_num4_asset(buffer_t *buffer, alpha_num4_t *asset) {
  314|  2.72k|    PARSER_CHECK(buffer_read_bytes(buffer, &asset->asset_code, 4))
  ------------------
  |  |   15|  2.72k|    {                           \
  |  |   16|  2.72k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 22, False: 2.70k]
  |  |  ------------------
  |  |   17|  2.72k|    }
  ------------------
  315|  2.70k|    PARSER_CHECK(parse_account_id(buffer, &asset->issuer))
  ------------------
  |  |   15|  2.70k|    {                           \
  |  |   16|  2.70k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 29, False: 2.67k]
  |  |  ------------------
  |  |   17|  2.70k|    }
  ------------------
  316|  2.67k|    return true;
  317|  2.70k|}
parser.c:parse_alpha_num12_asset:
  319|  2.13k|static bool parse_alpha_num12_asset(buffer_t *buffer, alpha_num12_t *asset) {
  320|  2.13k|    PARSER_CHECK(buffer_read_bytes(buffer, &asset->asset_code, 12))
  ------------------
  |  |   15|  2.13k|    {                           \
  |  |   16|  2.13k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 34, False: 2.10k]
  |  |  ------------------
  |  |   17|  2.13k|    }
  ------------------
  321|  2.10k|    PARSER_CHECK(parse_account_id(buffer, &asset->issuer))
  ------------------
  |  |   15|  2.10k|    {                           \
  |  |   16|  2.10k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 23, False: 2.07k]
  |  |  ------------------
  |  |   17|  2.10k|    }
  ------------------
  322|  2.07k|    return true;
  323|  2.10k|}
parser.c:parse_path_payment_strict_receive:
  415|  1.98k|                                              path_payment_strict_receive_op_t *op) {
  416|  1.98k|    uint32_t path_len;
  417|       |
  418|  1.98k|    PARSER_CHECK(parse_asset(buffer, &op->send_asset))
  ------------------
  |  |   15|  1.98k|    {                           \
  |  |   16|  1.98k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 1.96k]
  |  |  ------------------
  |  |   17|  1.98k|    }
  ------------------
  419|  1.96k|    PARSER_CHECK(parse_int64(buffer, &op->send_max))
  ------------------
  |  |   15|  1.96k|    {                           \
  |  |   16|  1.96k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 1.95k]
  |  |  ------------------
  |  |   17|  1.96k|    }
  ------------------
  420|  1.95k|    PARSER_CHECK(parse_muxed_account(buffer, &op->destination))
  ------------------
  |  |   15|  1.95k|    {                           \
  |  |   16|  1.95k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.94k]
  |  |  ------------------
  |  |   17|  1.95k|    }
  ------------------
  421|  1.94k|    PARSER_CHECK(parse_asset(buffer, &op->dest_asset))
  ------------------
  |  |   15|  1.94k|    {                           \
  |  |   16|  1.94k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 1.94k]
  |  |  ------------------
  |  |   17|  1.94k|    }
  ------------------
  422|  1.94k|    PARSER_CHECK(parse_int64(buffer, &op->dest_amount))
  ------------------
  |  |   15|  1.94k|    {                           \
  |  |   16|  1.94k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 19, False: 1.92k]
  |  |  ------------------
  |  |   17|  1.94k|    }
  ------------------
  423|       |
  424|  1.92k|    PARSER_CHECK(parse_uint32(buffer, &path_len))
  ------------------
  |  |   15|  1.92k|    {                           \
  |  |   16|  1.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.91k]
  |  |  ------------------
  |  |   17|  1.92k|    }
  ------------------
  425|  1.91k|    if (path_len > PATH_PAYMENT_MAX_PATH_LENGTH) {
  ------------------
  |  |   35|  1.91k|#define PATH_PAYMENT_MAX_PATH_LENGTH  5
  ------------------
  |  Branch (425:9): [True: 4, False: 1.91k]
  ------------------
  426|      4|        return false;
  427|      4|    }
  428|  3.71k|    for (uint32_t i = 0; i < path_len; i++) {
  ------------------
  |  Branch (428:26): [True: 1.82k, False: 1.89k]
  ------------------
  429|  1.82k|        asset_t tmp_asset;
  430|  1.82k|        PARSER_CHECK(parse_asset(buffer, &tmp_asset))
  ------------------
  |  |   15|  1.82k|    {                           \
  |  |   16|  1.82k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 1.80k]
  |  |  ------------------
  |  |   17|  1.82k|    }
  ------------------
  431|  1.82k|    }
  432|  1.89k|    return true;
  433|  1.91k|}
parser.c:parse_create_passive_sell_offer:
  500|  3.51k|static bool parse_create_passive_sell_offer(buffer_t *buffer, create_passive_sell_offer_op_t *op) {
  501|  3.51k|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|  3.51k|    {                           \
  |  |   16|  3.51k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 3.50k]
  |  |  ------------------
  |  |   17|  3.51k|    }
  ------------------
  502|  3.50k|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|  3.50k|    {                           \
  |  |   16|  3.50k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 16, False: 3.48k]
  |  |  ------------------
  |  |   17|  3.50k|    }
  ------------------
  503|  3.48k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  3.48k|    {                           \
  |  |   16|  3.48k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 3.48k]
  |  |  ------------------
  |  |   17|  3.48k|    }
  ------------------
  504|  3.48k|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|  3.48k|    {                           \
  |  |   16|  3.48k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 3.46k]
  |  |  ------------------
  |  |   17|  3.48k|    }
  ------------------
  505|  3.46k|    return true;
  506|  3.48k|}
parser.c:parse_price:
  475|  7.40k|static bool parse_price(buffer_t *buffer, price_t *price) {
  476|  7.40k|    PARSER_CHECK(parse_int32(buffer, &price->n))
  ------------------
  |  |   15|  7.40k|    {                           \
  |  |   16|  7.40k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 26, False: 7.37k]
  |  |  ------------------
  |  |   17|  7.40k|    }
  ------------------
  477|  7.37k|    PARSER_CHECK(parse_int32(buffer, &price->d))
  ------------------
  |  |   15|  7.37k|    {                           \
  |  |   16|  7.37k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 7.36k]
  |  |  ------------------
  |  |   17|  7.37k|    }
  ------------------
  478|       |    // Denominator cannot be null, as it would lead to a division by zero.
  479|  7.36k|    return price->d != 0;
  480|  7.37k|}
parser.c:parse_manage_sell_offer:
  482|  1.54k|static bool parse_manage_sell_offer(buffer_t *buffer, manage_sell_offer_op_t *op) {
  483|  1.54k|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|  1.54k|    {                           \
  |  |   16|  1.54k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.53k]
  |  |  ------------------
  |  |   17|  1.54k|    }
  ------------------
  484|  1.53k|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|  1.53k|    {                           \
  |  |   16|  1.53k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 1.52k]
  |  |  ------------------
  |  |   17|  1.53k|    }
  ------------------
  485|  1.52k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  1.52k|    {                           \
  |  |   16|  1.52k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 1.51k]
  |  |  ------------------
  |  |   17|  1.52k|    }
  ------------------
  486|  1.51k|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|  1.51k|    {                           \
  |  |   16|  1.51k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 1.50k]
  |  |  ------------------
  |  |   17|  1.51k|    }
  ------------------
  487|  1.50k|    PARSER_CHECK(parse_int64(buffer, &op->offer_id))
  ------------------
  |  |   15|  1.50k|    {                           \
  |  |   16|  1.50k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 1.50k]
  |  |  ------------------
  |  |   17|  1.50k|    }
  ------------------
  488|  1.50k|    return true;
  489|  1.50k|}
parser.c:parse_set_options:
  521|  19.3k|static bool parse_set_options(buffer_t *buffer, set_options_op_t *set_options) {
  522|  19.3k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  19.3k|    {                           \
  |  |   16|  19.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 19.3k]
  |  |  ------------------
  |  |   17|  19.3k|    }
  ------------------
  523|  19.3k|                                     (xdr_type_reader) parse_account_id,
  524|  19.3k|                                     &set_options->inflation_destination,
  525|  19.3k|                                     &set_options->inflation_destination_present))
  526|       |
  527|  19.3k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  19.3k|    {                           \
  |  |   16|  19.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 19.3k]
  |  |  ------------------
  |  |   17|  19.3k|    }
  ------------------
  528|  19.3k|                                     (xdr_type_reader) parse_uint32,
  529|  19.3k|                                     &set_options->clear_flags,
  530|  19.3k|                                     &set_options->clear_flags_present))
  531|  19.3k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  19.3k|    {                           \
  |  |   16|  19.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 19.3k]
  |  |  ------------------
  |  |   17|  19.3k|    }
  ------------------
  532|  19.3k|                                     (xdr_type_reader) parse_uint32,
  533|  19.3k|                                     &set_options->set_flags,
  534|  19.3k|                                     &set_options->set_flags_present))
  535|  19.3k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  19.3k|    {                           \
  |  |   16|  19.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 19.3k]
  |  |  ------------------
  |  |   17|  19.3k|    }
  ------------------
  536|  19.3k|                                     (xdr_type_reader) parse_uint32,
  537|  19.3k|                                     &set_options->master_weight,
  538|  19.3k|                                     &set_options->master_weight_present))
  539|  19.3k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  19.3k|    {                           \
  |  |   16|  19.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 19.3k]
  |  |  ------------------
  |  |   17|  19.3k|    }
  ------------------
  540|  19.3k|                                     (xdr_type_reader) parse_uint32,
  541|  19.3k|                                     &set_options->low_threshold,
  542|  19.3k|                                     &set_options->low_threshold_present))
  543|  19.3k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  19.3k|    {                           \
  |  |   16|  19.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 19.3k]
  |  |  ------------------
  |  |   17|  19.3k|    }
  ------------------
  544|  19.3k|                                     (xdr_type_reader) parse_uint32,
  545|  19.3k|                                     &set_options->medium_threshold,
  546|  19.3k|                                     &set_options->medium_threshold_present))
  547|  19.3k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  19.3k|    {                           \
  |  |   16|  19.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 19.2k]
  |  |  ------------------
  |  |   17|  19.3k|    }
  ------------------
  548|  19.3k|                                     (xdr_type_reader) parse_uint32,
  549|  19.3k|                                     &set_options->high_threshold,
  550|  19.3k|                                     &set_options->high_threshold_present))
  551|       |
  552|  19.2k|    uint32_t home_domain_present;
  553|  19.2k|    PARSER_CHECK(parse_uint32(buffer, &home_domain_present))
  ------------------
  |  |   15|  19.2k|    {                           \
  |  |   16|  19.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 19.2k]
  |  |  ------------------
  |  |   17|  19.2k|    }
  ------------------
  554|  19.2k|    set_options->home_domain_present = home_domain_present ? true : false;
  ------------------
  |  Branch (554:40): [True: 4.79k, False: 14.4k]
  ------------------
  555|  19.2k|    if (set_options->home_domain_present) {
  ------------------
  |  Branch (555:9): [True: 4.79k, False: 14.4k]
  ------------------
  556|  4.79k|        PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  4.79k|    {                           \
  |  |   16|  4.79k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 4.78k]
  |  |  ------------------
  |  |   17|  4.79k|    }
  ------------------
  557|  4.79k|                                             &set_options->home_domain,
  558|  4.79k|                                             &set_options->home_domain_size,
  559|  4.79k|                                             HOME_DOMAIN_MAX_SIZE))
  560|  14.4k|    } else {
  561|  14.4k|        set_options->home_domain_size = 0;
  562|  14.4k|    }
  563|       |
  564|  19.2k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  19.2k|    {                           \
  |  |   16|  19.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 33, False: 19.2k]
  |  |  ------------------
  |  |   17|  19.2k|    }
  ------------------
  565|  19.2k|                                     (xdr_type_reader) parse_signer,
  566|  19.2k|                                     &set_options->signer,
  567|  19.2k|                                     &set_options->signer_present))
  568|  19.2k|    return true;
  569|  19.2k|}
parser.c:parse_signer:
  515|  1.59k|static bool parse_signer(buffer_t *buffer, signer_t *signer) {
  516|  1.59k|    PARSER_CHECK(parse_signer_key(buffer, &signer->key))
  ------------------
  |  |   15|  1.59k|    {                           \
  |  |   16|  1.59k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 1.58k]
  |  |  ------------------
  |  |   17|  1.59k|    }
  ------------------
  517|  1.58k|    PARSER_CHECK(parse_uint32(buffer, &signer->weight))
  ------------------
  |  |   15|  1.58k|    {                           \
  |  |   16|  1.58k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.58k]
  |  |  ------------------
  |  |   17|  1.58k|    }
  ------------------
  518|  1.58k|    return true;
  519|  1.58k|}
parser.c:parse_change_trust:
  508|  3.12k|static bool parse_change_trust(buffer_t *buffer, change_trust_op_t *op) {
  509|  3.12k|    PARSER_CHECK(parse_change_trust_asset(buffer, &op->line))
  ------------------
  |  |   15|  3.12k|    {                           \
  |  |   16|  3.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 45, False: 3.08k]
  |  |  ------------------
  |  |   17|  3.12k|    }
  ------------------
  510|  3.08k|    PARSER_CHECK(parse_int64(buffer, &op->limit));
  ------------------
  |  |   15|  3.08k|    {                           \
  |  |   16|  3.08k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 3.07k]
  |  |  ------------------
  |  |   17|  3.08k|    }
  ------------------
  511|       |    // Limit cannot be negative
  512|  3.07k|    return op->limit >= 0;
  513|  3.08k|}
parser.c:parse_change_trust_asset:
  381|  3.12k|static bool parse_change_trust_asset(buffer_t *buffer, change_trust_asset_t *asset) {
  382|  3.12k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  3.12k|    {                           \
  |  |   16|  3.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 3.12k]
  |  |  ------------------
  |  |   17|  3.12k|    }
  ------------------
  383|  3.12k|    switch (asset->type) {
  384|    387|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (384:9): [True: 387, False: 2.73k]
  ------------------
  385|    387|            return true;
  386|      0|        }
  387|    945|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (387:9): [True: 945, False: 2.18k]
  ------------------
  388|    945|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  389|      0|        }
  390|    622|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (390:9): [True: 622, False: 2.50k]
  ------------------
  391|    622|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  392|      0|        }
  393|  1.16k|        case ASSET_TYPE_POOL_SHARE: {
  ------------------
  |  Branch (393:9): [True: 1.16k, False: 1.96k]
  ------------------
  394|  1.16k|            return parse_liquidity_pool_parameters(buffer, &asset->liquidity_pool);
  395|      0|        }
  396|      8|        default:
  ------------------
  |  Branch (396:9): [True: 8, False: 3.11k]
  ------------------
  397|      8|            return false;  // unknown asset type
  398|  3.12k|    }
  399|  3.12k|}
parser.c:parse_liquidity_pool_parameters:
  366|  1.16k|    liquidity_pool_parameters_t *liquidity_pool_parameters) {
  367|  1.16k|    uint32_t liquidity_pool_type;
  368|  1.16k|    PARSER_CHECK(parse_uint32(buffer, &liquidity_pool_type))
  ------------------
  |  |   15|  1.16k|    {                           \
  |  |   16|  1.16k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 1.16k]
  |  |  ------------------
  |  |   17|  1.16k|    }
  ------------------
  369|  1.16k|    switch (liquidity_pool_type) {
  370|  1.15k|        case LIQUIDITY_POOL_CONSTANT_PRODUCT: {
  ------------------
  |  Branch (370:9): [True: 1.15k, False: 3]
  ------------------
  371|  1.15k|            PARSER_CHECK(parse_asset(buffer, &liquidity_pool_parameters->constant_product.asset_a))
  ------------------
  |  |   15|  1.15k|    {                           \
  |  |   16|  1.15k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.15k]
  |  |  ------------------
  |  |   17|  1.15k|    }
  ------------------
  372|  1.15k|            PARSER_CHECK(parse_asset(buffer, &liquidity_pool_parameters->constant_product.asset_b))
  ------------------
  |  |   15|  1.15k|    {                           \
  |  |   16|  1.15k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.14k]
  |  |  ------------------
  |  |   17|  1.15k|    }
  ------------------
  373|  1.14k|            PARSER_CHECK(parse_int32(buffer, &liquidity_pool_parameters->constant_product.fee))
  ------------------
  |  |   15|  1.14k|    {                           \
  |  |   16|  1.14k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.14k]
  |  |  ------------------
  |  |   17|  1.14k|    }
  ------------------
  374|  1.14k|            return true;
  375|  1.14k|        }
  376|      3|        default:
  ------------------
  |  Branch (376:9): [True: 3, False: 1.15k]
  ------------------
  377|      3|            return false;
  378|  1.16k|    }
  379|  1.16k|}
parser.c:parse_allow_trust:
  435|  1.13k|static bool parse_allow_trust(buffer_t *buffer, allow_trust_op_t *op) {
  436|  1.13k|    PARSER_CHECK(parse_account_id(buffer, &op->trustor))
  ------------------
  |  |   15|  1.13k|    {                           \
  |  |   16|  1.13k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.12k]
  |  |  ------------------
  |  |   17|  1.13k|    }
  ------------------
  437|  1.12k|    PARSER_CHECK(parse_uint32(buffer, &op->asset_type))
  ------------------
  |  |   15|  1.12k|    {                           \
  |  |   16|  1.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.12k]
  |  |  ------------------
  |  |   17|  1.12k|    }
  ------------------
  438|       |
  439|  1.12k|    switch (op->asset_type) {
  440|    717|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (440:9): [True: 717, False: 407]
  ------------------
  441|    717|            PARSER_CHECK(buffer_read_bytes(buffer, &op->asset_code, 4))
  ------------------
  |  |   15|    717|    {                           \
  |  |   16|    717|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 713]
  |  |  ------------------
  |  |   17|    717|    }
  ------------------
  442|    713|            break;
  443|    713|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (443:9): [True: 400, False: 724]
  ------------------
  444|    400|            PARSER_CHECK(buffer_read_bytes(buffer, &op->asset_code, 12))
  ------------------
  |  |   15|    400|    {                           \
  |  |   16|    400|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 392]
  |  |  ------------------
  |  |   17|    400|    }
  ------------------
  445|    392|            break;
  446|    392|        default:
  ------------------
  |  Branch (446:9): [True: 7, False: 1.11k]
  ------------------
  447|      7|            return false;  // unknown asset type
  448|  1.12k|    }
  449|       |
  450|  1.10k|    PARSER_CHECK(parse_uint32(buffer, &op->authorize))
  ------------------
  |  |   15|  1.10k|    {                           \
  |  |   16|  1.10k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.10k]
  |  |  ------------------
  |  |   17|  1.10k|    }
  ------------------
  451|  1.10k|    return true;
  452|  1.10k|}
parser.c:parse_account_merge:
  454|  4.88k|static bool parse_account_merge(buffer_t *buffer, account_merge_op_t *op) {
  455|  4.88k|    return parse_muxed_account(buffer, &op->destination);
  456|  4.88k|}
parser.c:parse_manage_data:
  458|  10.1k|static bool parse_manage_data(buffer_t *buffer, manage_data_op_t *op) {
  459|  10.1k|    PARSER_CHECK(
  ------------------
  |  |   15|  10.1k|    {                           \
  |  |   16|  10.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 10.1k]
  |  |  ------------------
  |  |   17|  10.1k|    }
  ------------------
  460|  10.1k|        parse_binary_string_ptr(buffer, &op->data_name, &op->data_name_size, DATA_NAME_MAX_SIZE))
  461|       |
  462|  10.1k|    bool has_value;
  463|  10.1k|    PARSER_CHECK(parse_bool(buffer, &has_value))
  ------------------
  |  |   15|  10.1k|    {                           \
  |  |   16|  10.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 10.1k]
  |  |  ------------------
  |  |   17|  10.1k|    }
  ------------------
  464|  10.1k|    if (has_value) {
  ------------------
  |  Branch (464:9): [True: 3.52k, False: 6.60k]
  ------------------
  465|  3.52k|        PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  3.52k|    {                           \
  |  |   16|  3.52k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 3.51k]
  |  |  ------------------
  |  |   17|  3.52k|    }
  ------------------
  466|  3.52k|                                             &op->data_value,
  467|  3.52k|                                             &op->data_value_size,
  468|  3.52k|                                             DATA_VALUE_MAX_SIZE))
  469|  6.60k|    } else {
  470|  6.60k|        op->data_value_size = 0;
  471|  6.60k|    }
  472|  10.1k|    return true;
  473|  10.1k|}
parser.c:parse_bump_sequence:
  571|  1.77k|static bool parse_bump_sequence(buffer_t *buffer, bump_sequence_op_t *op) {
  572|  1.77k|    return parse_int64(buffer, &op->bump_to);
  573|  1.77k|}
parser.c:parse_manage_buy_offer:
  491|  1.94k|static bool parse_manage_buy_offer(buffer_t *buffer, manage_buy_offer_op_t *op) {
  492|  1.94k|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|  1.94k|    {                           \
  |  |   16|  1.94k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 17, False: 1.92k]
  |  |  ------------------
  |  |   17|  1.94k|    }
  ------------------
  493|  1.92k|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|  1.92k|    {                           \
  |  |   16|  1.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 1.91k]
  |  |  ------------------
  |  |   17|  1.92k|    }
  ------------------
  494|  1.91k|    PARSER_CHECK(parse_int64(buffer, &op->buy_amount))
  ------------------
  |  |   15|  1.91k|    {                           \
  |  |   16|  1.91k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 1.91k]
  |  |  ------------------
  |  |   17|  1.91k|    }
  ------------------
  495|  1.91k|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|  1.91k|    {                           \
  |  |   16|  1.91k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 1.90k]
  |  |  ------------------
  |  |   17|  1.91k|    }
  ------------------
  496|  1.90k|    PARSER_CHECK(parse_int64(buffer, &op->offer_id))
  ------------------
  |  |   15|  1.90k|    {                           \
  |  |   16|  1.90k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.90k]
  |  |  ------------------
  |  |   17|  1.90k|    }
  ------------------
  497|  1.90k|    return true;
  498|  1.90k|}
parser.c:parse_path_payment_strict_send:
  575|  1.63k|static bool parse_path_payment_strict_send(buffer_t *buffer, path_payment_strict_send_op_t *op) {
  576|  1.63k|    uint32_t path_len;
  577|       |
  578|  1.63k|    PARSER_CHECK(parse_asset(buffer, &op->send_asset))
  ------------------
  |  |   15|  1.63k|    {                           \
  |  |   16|  1.63k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 1.62k]
  |  |  ------------------
  |  |   17|  1.63k|    }
  ------------------
  579|  1.62k|    PARSER_CHECK(parse_int64(buffer, &op->send_amount))
  ------------------
  |  |   15|  1.62k|    {                           \
  |  |   16|  1.62k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.62k]
  |  |  ------------------
  |  |   17|  1.62k|    }
  ------------------
  580|  1.62k|    PARSER_CHECK(parse_muxed_account(buffer, &op->destination))
  ------------------
  |  |   15|  1.62k|    {                           \
  |  |   16|  1.62k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.62k]
  |  |  ------------------
  |  |   17|  1.62k|    }
  ------------------
  581|  1.62k|    PARSER_CHECK(parse_asset(buffer, &op->dest_asset))
  ------------------
  |  |   15|  1.62k|    {                           \
  |  |   16|  1.62k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.61k]
  |  |  ------------------
  |  |   17|  1.62k|    }
  ------------------
  582|  1.61k|    PARSER_CHECK(parse_int64(buffer, &op->dest_min))
  ------------------
  |  |   15|  1.61k|    {                           \
  |  |   16|  1.61k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.61k]
  |  |  ------------------
  |  |   17|  1.61k|    }
  ------------------
  583|  1.61k|    PARSER_CHECK(parse_uint32(buffer, &path_len))
  ------------------
  |  |   15|  1.61k|    {                           \
  |  |   16|  1.61k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.60k]
  |  |  ------------------
  |  |   17|  1.61k|    }
  ------------------
  584|  1.60k|    if (path_len > PATH_PAYMENT_MAX_PATH_LENGTH) {
  ------------------
  |  |   35|  1.60k|#define PATH_PAYMENT_MAX_PATH_LENGTH  5
  ------------------
  |  Branch (584:9): [True: 4, False: 1.60k]
  ------------------
  585|      4|        return false;
  586|      4|    }
  587|  7.68k|    for (uint32_t i = 0; i < path_len; i++) {
  ------------------
  |  Branch (587:26): [True: 6.09k, False: 1.58k]
  ------------------
  588|  6.09k|        asset_t tmp_asset;
  589|  6.09k|        PARSER_CHECK(parse_asset(buffer, &tmp_asset))
  ------------------
  |  |   15|  6.09k|    {                           \
  |  |   16|  6.09k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 16, False: 6.08k]
  |  |  ------------------
  |  |   17|  6.09k|    }
  ------------------
  590|  6.09k|    }
  591|  1.58k|    return true;
  592|  1.60k|}
parser.c:parse_create_claimable_balance:
  645|  2.28k|static bool parse_create_claimable_balance(buffer_t *buffer, create_claimable_balance_op_t *op) {
  646|  2.28k|    uint32_t claimant_len;
  647|  2.28k|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|  2.28k|    {                           \
  |  |   16|  2.28k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 2.27k]
  |  |  ------------------
  |  |   17|  2.28k|    }
  ------------------
  648|  2.27k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  2.27k|    {                           \
  |  |   16|  2.27k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 2.26k]
  |  |  ------------------
  |  |   17|  2.27k|    }
  ------------------
  649|  2.26k|    PARSER_CHECK(parse_uint32(buffer, &claimant_len))
  ------------------
  |  |   15|  2.26k|    {                           \
  |  |   16|  2.26k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 2.26k]
  |  |  ------------------
  |  |   17|  2.26k|    }
  ------------------
  650|  2.26k|    if (claimant_len > CLAIMANTS_MAX_LENGTH) {
  ------------------
  |  |   34|  2.26k|#define CLAIMANTS_MAX_LENGTH          10
  ------------------
  |  Branch (650:9): [True: 4, False: 2.25k]
  ------------------
  651|      4|        return false;
  652|      4|    }
  653|  2.25k|    op->claimant_len = claimant_len;
  654|  7.33k|    for (int i = 0; i < op->claimant_len; i++) {
  ------------------
  |  Branch (654:21): [True: 5.39k, False: 1.93k]
  ------------------
  655|  5.39k|        PARSER_CHECK(parse_claimant(buffer, &op->claimants[i]))
  ------------------
  |  |   15|  5.39k|    {                           \
  |  |   16|  5.39k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 322, False: 5.07k]
  |  |  ------------------
  |  |   17|  5.39k|    }
  ------------------
  656|  5.39k|    }
  657|  1.93k|    return true;
  658|  2.25k|}
parser.c:parse_claimant:
  633|  5.39k|static bool parse_claimant(buffer_t *buffer, claimant_t *claimant) {
  634|  5.39k|    PARSER_CHECK(parse_uint32(buffer, &claimant->type))
  ------------------
  |  |   15|  5.39k|    {                           \
  |  |   16|  5.39k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 62, False: 5.33k]
  |  |  ------------------
  |  |   17|  5.39k|    }
  ------------------
  635|  5.33k|    switch (claimant->type) {
  636|  5.28k|        case CLAIMANT_TYPE_V0:
  ------------------
  |  Branch (636:9): [True: 5.28k, False: 49]
  ------------------
  637|  5.28k|            PARSER_CHECK(parse_account_id(buffer, &claimant->v0.destination))
  ------------------
  |  |   15|  5.28k|    {                           \
  |  |   16|  5.28k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 5.25k]
  |  |  ------------------
  |  |   17|  5.28k|    }
  ------------------
  638|  5.25k|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|  5.25k|    {                           \
  |  |   16|  5.25k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 187, False: 5.07k]
  |  |  ------------------
  |  |   17|  5.25k|    }
  ------------------
  639|  5.07k|            return true;
  640|     49|        default:
  ------------------
  |  Branch (640:9): [True: 49, False: 5.28k]
  ------------------
  641|     49|            return false;
  642|  5.33k|    }
  643|  5.33k|}
parser.c:parse_claimant_predicate:
  594|  6.22k|static bool parse_claimant_predicate(buffer_t *buffer) {
  595|       |    // Currently, does not support displaying claimant details.
  596|       |    // So here we will not store the parsed data, just to ensure that the data can be parsed
  597|       |    // correctly.
  598|  6.22k|    uint32_t claim_predicate_type;
  599|  6.22k|    uint32_t predicates_len;
  600|  6.22k|    bool not_predicate_present;
  601|  6.22k|    int64_t abs_before;
  602|  6.22k|    int64_t rel_before;
  603|  6.22k|    PARSER_CHECK(parse_uint32(buffer, &claim_predicate_type))
  ------------------
  |  |   15|  6.22k|    {                           \
  |  |   16|  6.22k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 34, False: 6.19k]
  |  |  ------------------
  |  |   17|  6.22k|    }
  ------------------
  604|  6.19k|    switch (claim_predicate_type) {
  605|  4.56k|        case CLAIM_PREDICATE_UNCONDITIONAL:
  ------------------
  |  Branch (605:9): [True: 4.56k, False: 1.63k]
  ------------------
  606|  4.56k|            return true;
  607|    282|        case CLAIM_PREDICATE_AND:
  ------------------
  |  Branch (607:9): [True: 282, False: 5.91k]
  ------------------
  608|    477|        case CLAIM_PREDICATE_OR:
  ------------------
  |  Branch (608:9): [True: 195, False: 5.99k]
  ------------------
  609|    477|            PARSER_CHECK(parse_uint32(buffer, &predicates_len))
  ------------------
  |  |   15|    477|    {                           \
  |  |   16|    477|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 25, False: 452]
  |  |  ------------------
  |  |   17|    477|    }
  ------------------
  610|    452|            if (predicates_len != 2) {
  ------------------
  |  Branch (610:17): [True: 63, False: 389]
  ------------------
  611|     63|                return false;
  612|     63|            }
  613|    389|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|    389|    {                           \
  |  |   16|    389|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 135, False: 254]
  |  |  ------------------
  |  |   17|    389|    }
  ------------------
  614|    254|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|    254|    {                           \
  |  |   16|    254|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 71, False: 183]
  |  |  ------------------
  |  |   17|    254|    }
  ------------------
  615|    183|            return true;
  616|    654|        case CLAIM_PREDICATE_NOT:
  ------------------
  |  Branch (616:9): [True: 654, False: 5.54k]
  ------------------
  617|    654|            PARSER_CHECK(parse_bool(buffer, &not_predicate_present))
  ------------------
  |  |   15|    654|    {                           \
  |  |   16|    654|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 645]
  |  |  ------------------
  |  |   17|    654|    }
  ------------------
  618|    645|            if (not_predicate_present) {
  ------------------
  |  Branch (618:17): [True: 326, False: 319]
  ------------------
  619|    326|                PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|    326|    {                           \
  |  |   16|    326|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 311]
  |  |  ------------------
  |  |   17|    326|    }
  ------------------
  620|    326|            }
  621|    630|            return true;
  622|    329|        case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:
  ------------------
  |  Branch (622:9): [True: 329, False: 5.86k]
  ------------------
  623|    329|            PARSER_CHECK(parse_int64(buffer, &abs_before))
  ------------------
  |  |   15|    329|    {                           \
  |  |   16|    329|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 320]
  |  |  ------------------
  |  |   17|    329|    }
  ------------------
  624|    320|            return true;
  625|    134|        case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:
  ------------------
  |  Branch (625:9): [True: 134, False: 6.06k]
  ------------------
  626|    134|            PARSER_CHECK(parse_int64(buffer, &rel_before))
  ------------------
  |  |   15|    134|    {                           \
  |  |   16|    134|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 125]
  |  |  ------------------
  |  |   17|    134|    }
  ------------------
  627|    125|            return true;
  628|     38|        default:
  ------------------
  |  Branch (628:9): [True: 38, False: 6.15k]
  ------------------
  629|     38|            return false;
  630|  6.19k|    }
  631|  6.19k|}
parser.c:parse_claim_claimable_balance:
  673|  2.08k|static bool parse_claim_claimable_balance(buffer_t *buffer, claim_claimable_balance_op_t *op) {
  674|  2.08k|    PARSER_CHECK(parse_claimable_balance_id(buffer, &op->balance_id))
  ------------------
  |  |   15|  2.08k|    {                           \
  |  |   16|  2.08k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 2.07k]
  |  |  ------------------
  |  |   17|  2.08k|    }
  ------------------
  675|  2.07k|    return true;
  676|  2.08k|}
parser.c:parse_claimable_balance_id:
  661|  3.73k|                                       claimable_balance_id_t *claimable_balance_id_t) {
  662|  3.73k|    PARSER_CHECK(parse_uint32(buffer, &claimable_balance_id_t->type))
  ------------------
  |  |   15|  3.73k|    {                           \
  |  |   16|  3.73k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 3.73k]
  |  |  ------------------
  |  |   17|  3.73k|    }
  ------------------
  663|  3.73k|    switch (claimable_balance_id_t->type) {
  664|  3.71k|        case CLAIMABLE_BALANCE_ID_TYPE_V0:
  ------------------
  |  Branch (664:9): [True: 3.71k, False: 12]
  ------------------
  665|  3.71k|            PARSER_CHECK(
  ------------------
  |  |   15|  3.71k|    {                           \
  |  |   16|  3.71k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 3.71k]
  |  |  ------------------
  |  |   17|  3.71k|    }
  ------------------
  666|  3.71k|                buffer_read_bytes(buffer, &claimable_balance_id_t->v0, CLAIMABLE_BALANCE_ID_SIZE))
  667|  3.71k|            return true;
  668|     12|        default:
  ------------------
  |  Branch (668:9): [True: 12, False: 3.71k]
  ------------------
  669|     12|            return false;
  670|  3.73k|    }
  671|  3.73k|}
parser.c:parse_begin_sponsoring_future_reserves:
  679|  6.82k|                                                   begin_sponsoring_future_reserves_op_t *op) {
  680|  6.82k|    PARSER_CHECK(parse_account_id(buffer, &op->sponsored_id))
  ------------------
  |  |   15|  6.82k|    {                           \
  |  |   16|  6.82k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 6.81k]
  |  |  ------------------
  |  |   17|  6.82k|    }
  ------------------
  681|  6.81k|    return true;
  682|  6.82k|}
parser.c:parse_revoke_sponsorship:
  849|  22.7k|static bool parse_revoke_sponsorship(buffer_t *buffer, revoke_sponsorship_op_t *op) {
  850|  22.7k|    PARSER_CHECK(parse_uint32(buffer, &op->type))
  ------------------
  |  |   15|  22.7k|    {                           \
  |  |   16|  22.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 22.7k]
  |  |  ------------------
  |  |   17|  22.7k|    }
  ------------------
  851|  22.7k|    switch (op->type) {
  852|  15.5k|        case REVOKE_SPONSORSHIP_LEDGER_ENTRY:
  ------------------
  |  Branch (852:9): [True: 15.5k, False: 7.23k]
  ------------------
  853|  15.5k|            PARSER_CHECK(parse_ledger_key(buffer, &op->ledger_key))
  ------------------
  |  |   15|  15.5k|    {                           \
  |  |   16|  15.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 107, False: 15.4k]
  |  |  ------------------
  |  |   17|  15.5k|    }
  ------------------
  854|  15.4k|            return true;
  855|  7.22k|        case REVOKE_SPONSORSHIP_SIGNER:
  ------------------
  |  Branch (855:9): [True: 7.22k, False: 15.5k]
  ------------------
  856|  7.22k|            PARSER_CHECK(parse_account_id(buffer, &op->signer.account_id))
  ------------------
  |  |   15|  7.22k|    {                           \
  |  |   16|  7.22k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 7.21k]
  |  |  ------------------
  |  |   17|  7.22k|    }
  ------------------
  857|  7.21k|            PARSER_CHECK(parse_signer_key(buffer, &op->signer.signer_key))
  ------------------
  |  |   15|  7.21k|    {                           \
  |  |   16|  7.21k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 7.20k]
  |  |  ------------------
  |  |   17|  7.21k|    }
  ------------------
  858|  7.20k|            return true;
  859|      4|        default:
  ------------------
  |  Branch (859:9): [True: 4, False: 22.7k]
  ------------------
  860|      4|            return false;
  861|  22.7k|    }
  862|  22.7k|}
parser.c:parse_ledger_key:
  813|  15.5k|static bool parse_ledger_key(buffer_t *buffer, ledger_key_t *ledger_key) {
  814|  15.5k|    PARSER_CHECK(parse_uint32(buffer, &ledger_key->type))
  ------------------
  |  |   15|  15.5k|    {                           \
  |  |   16|  15.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 15.5k]
  |  |  ------------------
  |  |   17|  15.5k|    }
  ------------------
  815|  15.5k|    switch (ledger_key->type) {
  816|  2.70k|        case ACCOUNT:
  ------------------
  |  Branch (816:9): [True: 2.70k, False: 12.8k]
  ------------------
  817|  2.70k|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->account.account_id))
  ------------------
  |  |   15|  2.70k|    {                           \
  |  |   16|  2.70k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 2.68k]
  |  |  ------------------
  |  |   17|  2.70k|    }
  ------------------
  818|  2.68k|            return true;
  819|  2.09k|        case TRUSTLINE:
  ------------------
  |  Branch (819:9): [True: 2.09k, False: 13.4k]
  ------------------
  820|  2.09k|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->trust_line.account_id))
  ------------------
  |  |   15|  2.09k|    {                           \
  |  |   16|  2.09k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 2.09k]
  |  |  ------------------
  |  |   17|  2.09k|    }
  ------------------
  821|  2.09k|            PARSER_CHECK(parse_trust_line_asset(buffer, &ledger_key->trust_line.asset))
  ------------------
  |  |   15|  2.09k|    {                           \
  |  |   16|  2.09k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 43, False: 2.04k]
  |  |  ------------------
  |  |   17|  2.09k|    }
  ------------------
  822|  2.04k|            return true;
  823|    610|        case OFFER:
  ------------------
  |  Branch (823:9): [True: 610, False: 14.9k]
  ------------------
  824|    610|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->offer.seller_id))
  ------------------
  |  |   15|    610|    {                           \
  |  |   16|    610|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 601]
  |  |  ------------------
  |  |   17|    610|    }
  ------------------
  825|    601|            PARSER_CHECK(parse_int64(buffer, &ledger_key->offer.offer_id))
  ------------------
  |  |   15|    601|    {                           \
  |  |   16|    601|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 598]
  |  |  ------------------
  |  |   17|    601|    }
  ------------------
  826|    598|            return true;
  827|  2.39k|        case DATA:
  ------------------
  |  Branch (827:9): [True: 2.39k, False: 13.1k]
  ------------------
  828|  2.39k|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->data.account_id))
  ------------------
  |  |   15|  2.39k|    {                           \
  |  |   16|  2.39k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 2.37k]
  |  |  ------------------
  |  |   17|  2.39k|    }
  ------------------
  829|  2.37k|            PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  2.37k|    {                           \
  |  |   16|  2.37k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 2.37k]
  |  |  ------------------
  |  |   17|  2.37k|    }
  ------------------
  830|  2.37k|                                                 &ledger_key->data.data_name,
  831|  2.37k|                                                 &ledger_key->data.data_name_size,
  832|  2.37k|                                                 DATA_NAME_MAX_SIZE))
  833|  2.37k|            return true;
  834|    642|        case CLAIMABLE_BALANCE:
  ------------------
  |  Branch (834:9): [True: 642, False: 14.8k]
  ------------------
  835|    642|            PARSER_CHECK(
  ------------------
  |  |   15|    642|    {                           \
  |  |   16|    642|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 638]
  |  |  ------------------
  |  |   17|    642|    }
  ------------------
  836|    642|                parse_claimable_balance_id(buffer, &ledger_key->claimable_balance.balance_id))
  837|    638|            return true;
  838|  7.06k|        case LIQUIDITY_POOL:
  ------------------
  |  Branch (838:9): [True: 7.06k, False: 8.44k]
  ------------------
  839|  7.06k|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|  7.06k|    {                           \
  |  |   16|  7.06k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 7.06k]
  |  |  ------------------
  |  |   17|  7.06k|    }
  ------------------
  840|  7.06k|                                           &ledger_key->liquidity_pool.liquidity_pool_id,
  841|  7.06k|                                           LIQUIDITY_POOL_ID_SIZE))
  842|       |
  843|  7.06k|            return true;
  844|      6|        default:
  ------------------
  |  Branch (844:9): [True: 6, False: 15.5k]
  ------------------
  845|      6|            return false;
  846|  15.5k|    }
  847|  15.5k|}
parser.c:parse_trust_line_asset:
  342|  2.09k|static bool parse_trust_line_asset(buffer_t *buffer, trust_line_asset_t *asset) {
  343|  2.09k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  2.09k|    {                           \
  |  |   16|  2.09k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 2.08k]
  |  |  ------------------
  |  |   17|  2.09k|    }
  ------------------
  344|  2.08k|    switch (asset->type) {
  345|  1.35k|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (345:9): [True: 1.35k, False: 737]
  ------------------
  346|  1.35k|            return true;
  347|      0|        }
  348|    119|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (348:9): [True: 119, False: 1.96k]
  ------------------
  349|    119|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  350|      0|        }
  351|    180|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (351:9): [True: 180, False: 1.90k]
  ------------------
  352|    180|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  353|      0|        }
  354|    427|        case ASSET_TYPE_POOL_SHARE: {
  ------------------
  |  Branch (354:9): [True: 427, False: 1.66k]
  ------------------
  355|    427|            PARSER_CHECK(
  ------------------
  |  |   15|    427|    {                           \
  |  |   16|    427|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 420]
  |  |  ------------------
  |  |   17|    427|    }
  ------------------
  356|    427|                buffer_read_bytes(buffer, &asset->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  357|    420|            return true;
  358|    427|        }
  359|     11|        default:
  ------------------
  |  Branch (359:9): [True: 11, False: 2.07k]
  ------------------
  360|     11|            return false;  // unknown asset type
  361|  2.08k|    }
  362|  2.08k|}
parser.c:parse_clawback:
  864|    583|static bool parse_clawback(buffer_t *buffer, clawback_op_t *op) {
  865|    583|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|    583|    {                           \
  |  |   16|    583|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 563]
  |  |  ------------------
  |  |   17|    583|    }
  ------------------
  866|    563|    PARSER_CHECK(parse_muxed_account(buffer, &op->from))
  ------------------
  |  |   15|    563|    {                           \
  |  |   16|    563|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 559]
  |  |  ------------------
  |  |   17|    563|    }
  ------------------
  867|    559|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    559|    {                           \
  |  |   16|    559|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 556]
  |  |  ------------------
  |  |   17|    559|    }
  ------------------
  868|    556|    return true;
  869|    559|}
parser.c:parse_clawback_claimable_balance:
  872|  1.01k|                                             clawback_claimable_balance_op_t *op) {
  873|  1.01k|    PARSER_CHECK(parse_claimable_balance_id(buffer, &op->balance_id))
  ------------------
  |  |   15|  1.01k|    {                           \
  |  |   16|  1.01k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 999]
  |  |  ------------------
  |  |   17|  1.01k|    }
  ------------------
  874|    999|    return true;
  875|  1.01k|}
parser.c:parse_set_trust_line_flags:
  877|  10.1k|static bool parse_set_trust_line_flags(buffer_t *buffer, set_trust_line_flags_op_t *op) {
  878|  10.1k|    PARSER_CHECK(parse_account_id(buffer, &op->trustor))
  ------------------
  |  |   15|  10.1k|    {                           \
  |  |   16|  10.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 10.1k]
  |  |  ------------------
  |  |   17|  10.1k|    }
  ------------------
  879|  10.1k|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|  10.1k|    {                           \
  |  |   16|  10.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 10.0k]
  |  |  ------------------
  |  |   17|  10.1k|    }
  ------------------
  880|  10.0k|    PARSER_CHECK(parse_uint32(buffer, &op->clear_flags))
  ------------------
  |  |   15|  10.0k|    {                           \
  |  |   16|  10.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 10.0k]
  |  |  ------------------
  |  |   17|  10.0k|    }
  ------------------
  881|  10.0k|    PARSER_CHECK(parse_uint32(buffer, &op->set_flags))
  ------------------
  |  |   15|  10.0k|    {                           \
  |  |   16|  10.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 10.0k]
  |  |  ------------------
  |  |   17|  10.0k|    }
  ------------------
  882|  10.0k|    return true;
  883|  10.0k|}
parser.c:parse_liquidity_pool_deposit:
  885|    263|static bool parse_liquidity_pool_deposit(buffer_t *buffer, liquidity_pool_deposit_op_t *op) {
  886|    263|    PARSER_CHECK(buffer_read_bytes(buffer, &op->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  ------------------
  |  |   15|    263|    {                           \
  |  |   16|    263|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 250]
  |  |  ------------------
  |  |   17|    263|    }
  ------------------
  887|    250|    PARSER_CHECK(parse_int64(buffer, &op->max_amount_a))
  ------------------
  |  |   15|    250|    {                           \
  |  |   16|    250|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 247]
  |  |  ------------------
  |  |   17|    250|    }
  ------------------
  888|    247|    PARSER_CHECK(parse_int64(buffer, &op->max_amount_b))
  ------------------
  |  |   15|    247|    {                           \
  |  |   16|    247|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 245]
  |  |  ------------------
  |  |   17|    247|    }
  ------------------
  889|    245|    PARSER_CHECK(parse_price(buffer, &op->min_price))
  ------------------
  |  |   15|    245|    {                           \
  |  |   16|    245|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 242]
  |  |  ------------------
  |  |   17|    245|    }
  ------------------
  890|    242|    PARSER_CHECK(parse_price(buffer, &op->max_price))
  ------------------
  |  |   15|    242|    {                           \
  |  |   16|    242|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 235]
  |  |  ------------------
  |  |   17|    242|    }
  ------------------
  891|    235|    return true;
  892|    242|}
parser.c:parse_liquidity_pool_withdraw:
  894|  1.88k|static bool parse_liquidity_pool_withdraw(buffer_t *buffer, liquidity_pool_withdraw_op_t *op) {
  895|  1.88k|    PARSER_CHECK(buffer_read_bytes(buffer, &op->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  ------------------
  |  |   15|  1.88k|    {                           \
  |  |   16|  1.88k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 1.87k]
  |  |  ------------------
  |  |   17|  1.88k|    }
  ------------------
  896|  1.87k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  1.87k|    {                           \
  |  |   16|  1.87k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.86k]
  |  |  ------------------
  |  |   17|  1.87k|    }
  ------------------
  897|  1.86k|    PARSER_CHECK(parse_int64(buffer, &op->min_amount_a))
  ------------------
  |  |   15|  1.86k|    {                           \
  |  |   16|  1.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 1.86k]
  |  |  ------------------
  |  |   17|  1.86k|    }
  ------------------
  898|  1.86k|    PARSER_CHECK(parse_int64(buffer, &op->min_amount_b))
  ------------------
  |  |   15|  1.86k|    {                           \
  |  |   16|  1.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.86k]
  |  |  ------------------
  |  |   17|  1.86k|    }
  ------------------
  899|  1.86k|    return true;
  900|  1.86k|}
parser.c:parse_invoke_host_function:
 1035|  7.73k|static bool parse_invoke_host_function(buffer_t *buffer, invoke_host_function_op_t *op) {
 1036|       |    // hostFunction
 1037|  7.73k|    PARSER_CHECK(parse_uint32(buffer, &op->host_function_type));
  ------------------
  |  |   15|  7.73k|    {                           \
  |  |   16|  7.73k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 7.72k]
  |  |  ------------------
  |  |   17|  7.73k|    }
  ------------------
 1038|  7.72k|    PRINTF("host_function_type=%d\n", op->host_function_type);
 1039|  7.72k|    switch (op->host_function_type) {
 1040|  4.08k|        case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:
  ------------------
  |  Branch (1040:9): [True: 4.08k, False: 3.64k]
  ------------------
 1041|  4.08k|            PARSER_CHECK(parse_invoke_contract_args(buffer, &op->invoke_contract_args))
  ------------------
  |  |   15|  4.08k|    {                           \
  |  |   16|  4.08k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 165, False: 3.92k]
  |  |  ------------------
  |  |   17|  4.08k|    }
  ------------------
 1042|  3.92k|            break;
 1043|  3.92k|        case HOST_FUNCTION_TYPE_CREATE_CONTRACT:
  ------------------
  |  Branch (1043:9): [True: 2.08k, False: 5.64k]
  ------------------
 1044|  2.08k|            PARSER_CHECK(read_create_contract_args_advance(buffer))
  ------------------
  |  |   15|  2.08k|    {                           \
  |  |   16|  2.08k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 84, False: 2.00k]
  |  |  ------------------
  |  |   17|  2.08k|    }
  ------------------
 1045|  2.00k|            break;
 1046|  2.00k|        case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM: {
  ------------------
  |  Branch (1046:9): [True: 1.55k, False: 6.17k]
  ------------------
 1047|  1.55k|            size_t data_size = 0;
 1048|  1.55k|            PARSER_CHECK(parse_uint32(buffer, &data_size))
  ------------------
  |  |   15|  1.55k|    {                           \
  |  |   16|  1.55k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.55k]
  |  |  ------------------
  |  |   17|  1.55k|    }
  ------------------
 1049|  1.55k|            PARSER_CHECK(num_bytes(data_size, &data_size))
  ------------------
  |  |   15|  1.55k|    {                           \
  |  |   16|  1.55k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 1.55k]
  |  |  ------------------
  |  |   17|  1.55k|    }
  ------------------
 1050|  1.55k|            PARSER_CHECK(buffer_advance(buffer, data_size))
  ------------------
  |  |   15|  1.55k|    {                           \
  |  |   16|  1.55k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.54k]
  |  |  ------------------
  |  |   17|  1.55k|    }
  ------------------
 1051|  1.54k|            break;
 1052|  1.55k|        }
 1053|  1.54k|        default:
  ------------------
  |  Branch (1053:9): [True: 4, False: 7.72k]
  ------------------
 1054|      4|            return false;
 1055|  7.72k|    }
 1056|       |
 1057|       |    // auth<>
 1058|  7.46k|    uint32_t auth_len;
 1059|  7.46k|    uint8_t sub_invocations_count = 0;
 1060|  7.46k|    PARSER_CHECK(parse_uint32(buffer, &auth_len))
  ------------------
  |  |   15|  7.46k|    {                           \
  |  |   16|  7.46k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 32, False: 7.43k]
  |  |  ------------------
  |  |   17|  7.46k|    }
  ------------------
 1061|  9.90k|    for (uint32_t i = 0; i < auth_len; i++) {
  ------------------
  |  Branch (1061:26): [True: 3.07k, False: 6.82k]
  ------------------
 1062|       |        // PARSER_CHECK(read_soroban_authorization_entry_advance(buffer,
 1063|       |        //                                                       &sub_invocations_count,
 1064|       |        //                                                       op->sub_invocation_positions))
 1065|       |        // PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, count, positions))
 1066|       |        // 1. read credentials
 1067|  3.07k|        uint32_t credentials_type;
 1068|  3.07k|        PARSER_CHECK(read_parse_soroban_credentials_advance(buffer, &credentials_type))
  ------------------
  |  |   15|  3.07k|    {                           \
  |  |   16|  3.07k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 152, False: 2.92k]
  |  |  ------------------
  |  |   17|  3.07k|    }
  ------------------
 1069|       |        // 2. read rootInvocation.function
 1070|  2.92k|        PARSER_CHECK(read_soroban_authorized_function_advance(buffer))
  ------------------
  |  |   15|  2.92k|    {                           \
  |  |   16|  2.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 163, False: 2.76k]
  |  |  ------------------
  |  |   17|  2.92k|    }
  ------------------
 1071|       |        // 3. read rootInvocation.subInvocations
 1072|       |        // subInvocations
 1073|  2.76k|        uint32_t len;
 1074|  2.76k|        PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  2.76k|    {                           \
  |  |   16|  2.76k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 2.75k]
  |  |  ------------------
  |  |   17|  2.76k|    }
  ------------------
 1075|  5.30k|        for (uint32_t j = 0; j < len; j++) {
  ------------------
  |  Branch (1075:30): [True: 2.82k, False: 2.47k]
  ------------------
 1076|  2.82k|            if (credentials_type == SOROBAN_CREDENTIALS_SOURCE_ACCOUNT) {
  ------------------
  |  Branch (1076:17): [True: 1.58k, False: 1.24k]
  ------------------
 1077|  1.58k|                PARSER_CHECK(
  ------------------
  |  |   15|  1.58k|    {                           \
  |  |   16|  1.58k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 116, False: 1.47k]
  |  |  ------------------
  |  |   17|  1.58k|    }
  ------------------
 1078|  1.58k|                    read_soroban_authorized_invocation_advance(buffer,
 1079|  1.58k|                                                               &sub_invocations_count,
 1080|  1.58k|                                                               op->sub_invocation_positions))
 1081|  1.58k|            } else {
 1082|  1.24k|                PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, NULL, NULL))
  ------------------
  |  |   15|  1.24k|    {                           \
  |  |   16|  1.24k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 169, False: 1.07k]
  |  |  ------------------
  |  |   17|  1.24k|    }
  ------------------
 1083|  1.24k|            }
 1084|  2.82k|        }
 1085|  2.75k|    }
 1086|  6.82k|    op->sub_invocations_count = sub_invocations_count;
 1087|       |
 1088|  6.82k|    PRINTF("sub_invocations_count=%d\n", sub_invocations_count);
 1089|       |    // for (uint8_t i = 0; i < 16; i++) {
 1090|       |    //     PRINTF("sub_invocation_positions[%d]=%d\n", i, op->sub_invocation_positions[i]);
 1091|       |    // }
 1092|  6.82k|    return true;
 1093|  7.43k|}
parser.c:read_parse_soroban_credentials_advance:
  917|  3.07k|static bool read_parse_soroban_credentials_advance(buffer_t *buffer, uint32_t *credentials_type) {
  918|  3.07k|    PARSER_CHECK(parse_uint32(buffer, credentials_type))
  ------------------
  |  |   15|  3.07k|    {                           \
  |  |   16|  3.07k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 44, False: 3.03k]
  |  |  ------------------
  |  |   17|  3.07k|    }
  ------------------
  919|  3.03k|    switch (*credentials_type) {
  920|  2.49k|        case SOROBAN_CREDENTIALS_SOURCE_ACCOUNT:
  ------------------
  |  Branch (920:9): [True: 2.49k, False: 537]
  ------------------
  921|       |            // void
  922|  2.49k|            break;
  923|    490|        case SOROBAN_CREDENTIALS_ADDRESS: {
  ------------------
  |  Branch (923:9): [True: 490, False: 2.54k]
  ------------------
  924|    490|            sc_address_t address;
  925|    490|            PARSER_CHECK(parse_sc_address(buffer, &address))
  ------------------
  |  |   15|    490|    {                           \
  |  |   16|    490|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 21, False: 469]
  |  |  ------------------
  |  |   17|    490|    }
  ------------------
  926|       |            PARSER_CHECK(buffer_advance(buffer, 8))   // nonce
  ------------------
  |  |   15|    469|    {                           \
  |  |   16|    469|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 460]
  |  |  ------------------
  |  |   17|    469|    }
  ------------------
  927|       |            PARSER_CHECK(buffer_advance(buffer, 4))   // signatureExpirationLedger
  ------------------
  |  |   15|    460|    {                           \
  |  |   16|    460|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 446]
  |  |  ------------------
  |  |   17|    460|    }
  ------------------
  928|       |            PARSER_CHECK(read_scval_advance(buffer))  // signature
  ------------------
  |  |   15|    446|    {                           \
  |  |   16|    446|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 17, False: 429]
  |  |  ------------------
  |  |   17|    446|    }
  ------------------
  929|    429|            break;
  930|    446|        }
  931|    429|        default:
  ------------------
  |  Branch (931:9): [True: 47, False: 2.98k]
  ------------------
  932|     47|            return false;
  933|  3.03k|    }
  934|  2.92k|    return true;
  935|  3.03k|}
parser.c:read_soroban_authorized_function_advance:
  994|  23.1k|static bool read_soroban_authorized_function_advance(buffer_t *buffer) {
  995|  23.1k|    uint32_t type;
  996|  23.1k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  23.1k|    {                           \
  |  |   16|  23.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 276, False: 22.9k]
  |  |  ------------------
  |  |   17|  23.1k|    }
  ------------------
  997|  22.9k|    switch (type) {
  998|  21.6k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN: {
  ------------------
  |  Branch (998:9): [True: 21.6k, False: 1.25k]
  ------------------
  999|       |            // contractFn
 1000|  21.6k|            invoke_contract_args_t args;
 1001|  21.6k|            PARSER_CHECK(parse_invoke_contract_args(buffer, &args));
  ------------------
  |  |   15|  21.6k|    {                           \
  |  |   16|  21.6k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 630, False: 21.0k]
  |  |  ------------------
  |  |   17|  21.6k|    }
  ------------------
 1002|  21.0k|            break;
 1003|  21.6k|        }
 1004|    968|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1004:9): [True: 968, False: 21.9k]
  ------------------
 1005|       |            // createContractHostFn
 1006|    968|            PARSER_CHECK(read_create_contract_args_advance(buffer));
  ------------------
  |  |   15|    968|    {                           \
  |  |   16|    968|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 129, False: 839]
  |  |  ------------------
  |  |   17|    968|    }
  ------------------
 1007|    839|            break;
 1008|    282|        default:
  ------------------
  |  Branch (1008:9): [True: 282, False: 22.6k]
  ------------------
 1009|    282|            return false;
 1010|  22.9k|    }
 1011|  21.8k|    return true;
 1012|  22.9k|}
parser.c:parse_extend_footprint_ttl:
 1095|  1.02k|static bool parse_extend_footprint_ttl(buffer_t *buffer, extend_footprint_ttl_op_t *op) {
 1096|  1.02k|    PARSER_CHECK(parse_extension_point_v0(buffer))
  ------------------
  |  |   15|  1.02k|    {                           \
  |  |   16|  1.02k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.02k]
  |  |  ------------------
  |  |   17|  1.02k|    }
  ------------------
 1097|  1.02k|    PARSER_CHECK(parse_uint32(buffer, &op->extend_to))
  ------------------
  |  |   15|  1.02k|    {                           \
  |  |   16|  1.02k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.01k]
  |  |  ------------------
  |  |   17|  1.02k|    }
  ------------------
 1098|  1.01k|    return true;
 1099|  1.02k|}
parser.c:parse_extension_point_v0:
  902|  5.01k|static bool parse_extension_point_v0(buffer_t *buffer) {
  903|  5.01k|    uint32_t v;
  904|  5.01k|    PARSER_CHECK(parse_uint32(buffer, &v))
  ------------------
  |  |   15|  5.01k|    {                           \
  |  |   16|  5.01k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 5.00k]
  |  |  ------------------
  |  |   17|  5.01k|    }
  ------------------
  905|  5.00k|    if (v != 0) {
  ------------------
  |  Branch (905:9): [True: 11, False: 4.99k]
  ------------------
  906|     11|        return false;
  907|     11|    }
  908|  4.99k|    return true;
  909|  5.00k|}
parser.c:parse_restore_footprint:
  911|  3.98k|static bool parse_restore_footprint(buffer_t *buffer, restore_footprint_op_t *op) {
  912|  3.98k|    (void) op;
  913|  3.98k|    PARSER_CHECK(parse_extension_point_v0(buffer))
  ------------------
  |  |   15|  3.98k|    {                           \
  |  |   16|  3.98k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 3.97k]
  |  |  ------------------
  |  |   17|  3.98k|    }
  ------------------
  914|  3.97k|    return true;
  915|  3.98k|}
parser.c:parse_invoke_contract_args:
  962|  57.2k|static bool parse_invoke_contract_args(buffer_t *buffer, invoke_contract_args_t *args) {
  963|       |    // contractAddress
  964|  57.2k|    PARSER_CHECK(parse_sc_address(buffer, &args->address))
  ------------------
  |  |   15|  57.2k|    {                           \
  |  |   16|  57.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.59k, False: 55.6k]
  |  |  ------------------
  |  |   17|  57.2k|    }
  ------------------
  965|       |    // functionName
  966|  55.6k|    PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  55.6k|    {                           \
  |  |   16|  55.6k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.86k, False: 53.8k]
  |  |  ------------------
  |  |   17|  55.6k|    }
  ------------------
  967|  55.6k|                                         &args->function.name,
  968|  55.6k|                                         &args->function.name_size,
  969|  55.6k|                                         SCV_SYMBOL_MAX_SIZE))
  970|       |
  971|       |    // args
  972|  53.8k|    uint32_t args_len;
  973|  53.8k|    PARSER_CHECK(parse_uint32(buffer, &args_len))
  ------------------
  |  |   15|  53.8k|    {                           \
  |  |   16|  53.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 40, False: 53.7k]
  |  |  ------------------
  |  |   17|  53.8k|    }
  ------------------
  974|       |
  975|  53.7k|    args->parameters_length = args_len;
  976|  53.7k|    args->parameters_position = buffer->offset;
  977|       |
  978|  53.7k|    if (args_len > HOST_FUNCTION_ARGS_MAX_LENGTH) {
  ------------------
  |  |   36|  53.7k|#define HOST_FUNCTION_ARGS_MAX_LENGTH 10
  ------------------
  |  Branch (978:9): [True: 731, False: 53.0k]
  ------------------
  979|       |        // We dont support more than 10 arguments
  980|    731|        return false;
  981|    731|    }
  982|       |
  983|       |    // PRINTF("function_name.text_size=%d, function_name.text=%s, args->parameters_length=%d\n",
  984|       |    //        args->function.name_size,
  985|       |    //        args->function.name,
  986|       |    //        args->parameters_length);
  987|       |
  988|   134k|    for (uint32_t i = 0; i < args_len; i++) {
  ------------------
  |  Branch (988:26): [True: 92.5k, False: 41.8k]
  ------------------
  989|  92.5k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  92.5k|    {                           \
  |  |   16|  92.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11.1k, False: 81.3k]
  |  |  ------------------
  |  |   17|  92.5k|    }
  ------------------
  990|  92.5k|    }
  991|  41.8k|    return true;
  992|  53.0k|}
parser.c:read_create_contract_args_advance:
  937|  3.57k|static bool read_create_contract_args_advance(buffer_t *buffer) {
  938|       |    // contract_id_preimage
  939|  3.57k|    uint32_t type;
  940|  3.57k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  3.57k|    {                           \
  |  |   16|  3.57k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 26, False: 3.55k]
  |  |  ------------------
  |  |   17|  3.57k|    }
  ------------------
  941|  3.55k|    switch (type) {
  942|  2.92k|        case CONTRACT_ID_PREIMAGE_FROM_ADDRESS: {
  ------------------
  |  |  489|  2.92k|#define CONTRACT_ID_PREIMAGE_FROM_ADDRESS 0
  ------------------
  |  Branch (942:9): [True: 2.92k, False: 622]
  ------------------
  943|  2.92k|            sc_address_t address;
  944|  2.92k|            PARSER_CHECK(parse_sc_address(buffer, &address))
  ------------------
  |  |   15|  2.92k|    {                           \
  |  |   16|  2.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 2.90k]
  |  |  ------------------
  |  |   17|  2.92k|    }
  ------------------
  945|       |            PARSER_CHECK(buffer_advance(buffer, 32))  // salt
  ------------------
  |  |   15|  2.90k|    {                           \
  |  |   16|  2.90k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 2.88k]
  |  |  ------------------
  |  |   17|  2.90k|    }
  ------------------
  946|  2.88k|            break;
  947|  2.90k|        }
  948|  2.88k|        case CONTRACT_ID_PREIMAGE_FROM_ASSET: {
  ------------------
  |  |  490|    586|#define CONTRACT_ID_PREIMAGE_FROM_ASSET   1
  ------------------
  |  Branch (948:9): [True: 586, False: 2.96k]
  ------------------
  949|    586|            asset_t asset;
  950|    586|            PARSER_CHECK(parse_asset(buffer, &asset))
  ------------------
  |  |   15|    586|    {                           \
  |  |   16|    586|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 75, False: 511]
  |  |  ------------------
  |  |   17|    586|    }
  ------------------
  951|    511|            break;
  952|    586|        }
  953|    511|        default:
  ------------------
  |  Branch (953:9): [True: 36, False: 3.51k]
  ------------------
  954|     36|            return false;
  955|  3.55k|    }
  956|       |
  957|       |    // executable
  958|  3.40k|    PARSER_CHECK(read_contract_executable_advance(buffer))
  ------------------
  |  |   15|  3.40k|    {                           \
  |  |   16|  3.40k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 84, False: 3.31k]
  |  |  ------------------
  |  |   17|  3.40k|    }
  ------------------
  959|  3.31k|    return true;
  960|  3.40k|}
parser.c:read_soroban_authorized_invocation_advance:
 1016|  20.3k|                                                       size_t *positions) {
 1017|  20.3k|    if (count != NULL && positions != NULL) {
  ------------------
  |  Branch (1017:9): [True: 18.9k, False: 1.33k]
  |  Branch (1017:26): [True: 18.9k, False: 0]
  ------------------
 1018|  18.9k|        if (*count >= MAX_SUB_INVOCATIONS_SIZE) {
  ------------------
  |  |   44|  18.9k|#define MAX_SUB_INVOCATIONS_SIZE 16
  ------------------
  |  Branch (1018:13): [True: 60, False: 18.9k]
  ------------------
 1019|     60|            return false;
 1020|     60|        }
 1021|  18.9k|        positions[(*count)++] = buffer->offset;
 1022|  18.9k|    }
 1023|       |    // function
 1024|  20.2k|    PARSER_CHECK(read_soroban_authorized_function_advance(buffer))
  ------------------
  |  |   15|  20.2k|    {                           \
  |  |   16|  20.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.15k, False: 19.1k]
  |  |  ------------------
  |  |   17|  20.2k|    }
  ------------------
 1025|       |
 1026|       |    // subInvocations
 1027|  19.1k|    uint32_t len;
 1028|  19.1k|    PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  19.1k|    {                           \
  |  |   16|  19.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 33, False: 19.0k]
  |  |  ------------------
  |  |   17|  19.1k|    }
  ------------------
 1029|  27.2k|    for (uint32_t i = 0; i < len; i++) {
  ------------------
  |  Branch (1029:26): [True: 9.02k, False: 18.1k]
  ------------------
 1030|  9.02k|        PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, count, positions))
  ------------------
  |  |   15|  9.02k|    {                           \
  |  |   16|  9.02k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 879, False: 8.14k]
  |  |  ------------------
  |  |   17|  9.02k|    }
  ------------------
 1031|  9.02k|    }
 1032|  18.1k|    return true;
 1033|  19.0k|}

crc16:
   15|  61.7k|uint16_t crc16(const uint8_t *input_str, uint32_t num_bytes) {
   16|  61.7k|    uint16_t crc = 0;
   17|  2.11M|    while (num_bytes-- > 0) {
  ------------------
  |  Branch (17:12): [True: 2.05M, False: 61.7k]
  ------------------
   18|  2.05M|        crc = crc ^ (uint32_t) *input_str++ << 8;
   19|  2.05M|        int i = 8;
   20|  16.4M|        do {
   21|  16.4M|            if (crc & 0x8000)
  ------------------
  |  Branch (21:17): [True: 8.08M, False: 8.37M]
  ------------------
   22|  8.08M|                crc = crc << 1 ^ 0x1021;
   23|  8.37M|            else
   24|  8.37M|                crc = crc << 1;
   25|  16.4M|        } while (--i);
  ------------------
  |  Branch (25:18): [True: 14.3M, False: 2.05M]
  ------------------
   26|  2.05M|    }
   27|  61.7k|    return crc;
   28|  61.7k|}
encode_key:
   30|  60.8k|bool encode_key(const uint8_t *in, uint8_t version_byte, char *out, uint8_t out_len) {
   31|  60.8k|    if (in == NULL || out_len < 56 + 1) {
  ------------------
  |  Branch (31:9): [True: 0, False: 60.8k]
  |  Branch (31:23): [True: 0, False: 60.8k]
  ------------------
   32|      0|        return false;
   33|      0|    }
   34|  60.8k|    uint8_t buffer[35] = {0};
   35|  60.8k|    buffer[0] = version_byte;
   36|  2.00M|    for (uint8_t i = 0; i < 32; i++) {
  ------------------
  |  Branch (36:25): [True: 1.94M, False: 60.8k]
  ------------------
   37|  1.94M|        buffer[i + 1] = in[i];
   38|  1.94M|    }
   39|  60.8k|    uint16_t crc = crc16(buffer, 33);  // checksum
   40|  60.8k|    buffer[33] = crc;
   41|  60.8k|    buffer[34] = crc >> 8;
   42|  60.8k|    if (base32_encode(buffer, 35, (uint8_t *) out, 56) == -1) {
  ------------------
  |  Branch (42:9): [True: 0, False: 60.8k]
  ------------------
   43|      0|        return false;
   44|      0|    }
   45|  60.8k|    out[56] = '\0';
   46|  60.8k|    return true;
   47|  60.8k|}
encode_ed25519_public_key:
   51|  56.4k|                               size_t out_len) {
   52|  56.4k|    return encode_key(raw_public_key, VERSION_BYTE_ED25519_PUBLIC_KEY, out, out_len);
  ------------------
  |  |   25|  56.4k|#define VERSION_BYTE_ED25519_PUBLIC_KEY     6 << 3
  ------------------
   53|  56.4k|}
encode_hash_x_key:
   57|    199|                       size_t out_len) {
   58|    199|    return encode_key(raw_hash_x, VERSION_BYTE_HASH_X, out, out_len);
  ------------------
  |  |   28|    199|#define VERSION_BYTE_HASH_X                 23 << 3
  ------------------
   59|    199|}
encode_pre_auth_x_key:
   63|    267|                           size_t out_len) {
   64|    267|    return encode_key(raw_pre_auth_tx, VERSION_BYTE_PRE_AUTH_TX_KEY, out, out_len);
  ------------------
  |  |   27|    267|#define VERSION_BYTE_PRE_AUTH_TX_KEY        19 << 3
  ------------------
   65|    267|}
encode_contract:
   69|  3.98k|                     size_t out_len) {
   70|  3.98k|    return encode_key(raw_contract, VERSION_BYTE_CONTRACT, out, out_len);
  ------------------
  |  |   31|  3.98k|#define VERSION_BYTE_CONTRACT               2 << 3
  ------------------
   71|  3.98k|}
encode_ed25519_signed_payload:
   75|    367|                                   size_t out_len) {
   76|    367|    if (out_len < ED25519_SIGNED_PAYLOAD_MAX_LENGTH) {  // (103 * 8 + 4) / 5
  ------------------
  |  |   12|    367|#define ED25519_SIGNED_PAYLOAD_MAX_LENGTH 166  // include the null terminator
  ------------------
  |  Branch (76:9): [True: 0, False: 367]
  ------------------
   77|      0|        return false;
   78|      0|    }
   79|    367|    if (signed_payload->payload_len > 64 || signed_payload->payload_len <= 0) {
  ------------------
  |  Branch (79:9): [True: 0, False: 367]
  |  Branch (79:45): [True: 0, False: 367]
  ------------------
   80|      0|        return false;
   81|      0|    }
   82|    367|    uint8_t data_len = RAW_ED25519_PUBLIC_KEY_SIZE + 4 + signed_payload->payload_len +
  ------------------
  |  |   18|    367|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
   83|    367|                       ((4 - signed_payload->payload_len % 4) % 4);
   84|    367|    uint8_t buffer[1 + 32 + 4 + 64 + 2] = {0};
   85|    367|    buffer[0] = VERSION_BYTE_ED25519_SIGNED_PAYLOAD;
  ------------------
  |  |   30|    367|#define VERSION_BYTE_ED25519_SIGNED_PAYLOAD 15 << 3
  ------------------
   86|  12.1k|    for (uint8_t i = 0; i < 32; i++) {
  ------------------
  |  Branch (86:25): [True: 11.7k, False: 367]
  ------------------
   87|  11.7k|        buffer[i + 1] = signed_payload->ed25519[i];
   88|  11.7k|    }
   89|    367|    buffer[36] = signed_payload->payload_len;
   90|  11.8k|    for (uint32_t i = 0; i < signed_payload->payload_len; i++) {
  ------------------
  |  Branch (90:26): [True: 11.4k, False: 367]
  ------------------
   91|  11.4k|        buffer[i + 37] = signed_payload->payload[i];
   92|  11.4k|    }
   93|    367|    uint16_t crc = crc16(buffer, data_len + 1);  // checksum
   94|    367|    buffer[1 + data_len] = crc;
   95|    367|    buffer[1 + data_len + 1] = crc >> 8;
   96|    367|    int ret = base32_encode(buffer, data_len + 3, (uint8_t *) out, out_len);
   97|    367|    if (ret == -1) {
  ------------------
  |  Branch (97:9): [True: 0, False: 367]
  ------------------
   98|      0|        return false;
   99|      0|    }
  100|    367|    out[ret] = '\0';
  101|    367|    return true;
  102|    367|}
encode_muxed_account:
  104|  10.8k|bool encode_muxed_account(const muxed_account_t *raw_muxed_account, char *out, size_t out_len) {
  105|  10.8k|    if (raw_muxed_account == NULL) {
  ------------------
  |  Branch (105:9): [True: 0, False: 10.8k]
  ------------------
  106|      0|        return false;
  107|      0|    }
  108|  10.8k|    if (raw_muxed_account->type == KEY_TYPE_ED25519) {
  ------------------
  |  Branch (108:9): [True: 10.3k, False: 520]
  ------------------
  109|  10.3k|        return encode_ed25519_public_key(raw_muxed_account->ed25519, out, out_len);
  110|  10.3k|    } else {
  111|    520|        if (out_len < ENCODED_MUXED_ACCOUNT_KEY_LENGTH) {
  ------------------
  |  |   16|    520|#define ENCODED_MUXED_ACCOUNT_KEY_LENGTH   70
  ------------------
  |  Branch (111:13): [True: 0, False: 520]
  ------------------
  112|      0|            return false;
  113|      0|        }
  114|    520|        uint8_t buffer[MUXED_ACCOUNT_MED_25519_SIZE] = {0};
  115|    520|        buffer[0] = VERSION_BYTE_MUXED_ACCOUNT;
  ------------------
  |  |   29|    520|#define VERSION_BYTE_MUXED_ACCOUNT          12 << 3
  ------------------
  116|    520|        memcpy(buffer + 1, raw_muxed_account->med25519.ed25519, RAW_ED25519_PUBLIC_KEY_SIZE);
  ------------------
  |  |   18|    520|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  117|  4.68k|        for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (117:25): [True: 4.16k, False: 520]
  ------------------
  118|  4.16k|            buffer[33 + i] = raw_muxed_account->med25519.id >> 8 * (7 - i);
  119|  4.16k|        }
  120|    520|        uint16_t crc = crc16(buffer, MUXED_ACCOUNT_MED_25519_SIZE - 2);  // checksum
  ------------------
  |  |   10|    520|#define MUXED_ACCOUNT_MED_25519_SIZE      43
  ------------------
  121|    520|        buffer[41] = crc;
  122|    520|        buffer[42] = crc >> 8;
  123|    520|        if (base32_encode(buffer,
  ------------------
  |  Branch (123:13): [True: 0, False: 520]
  ------------------
  124|    520|                          MUXED_ACCOUNT_MED_25519_SIZE,
  ------------------
  |  |   10|    520|#define MUXED_ACCOUNT_MED_25519_SIZE      43
  ------------------
  125|    520|                          (uint8_t *) out,
  126|    520|                          ENCODED_MUXED_ACCOUNT_KEY_LENGTH) == -1) {
  ------------------
  |  |   16|    520|#define ENCODED_MUXED_ACCOUNT_KEY_LENGTH   70
  ------------------
  127|      0|            return false;
  128|      0|        }
  129|    520|        out[69] = '\0';
  130|    520|        return true;
  131|    520|    }
  132|  10.8k|}
print_binary:
  162|  1.76k|                  uint8_t num_chars_r) {
  163|  1.76k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (163:9): [True: 218, False: 1.54k]
  ------------------
  164|    218|        char buffer[BINARY_MAX_SIZE * 2 + 1];
  165|    218|        if (!format_hex(in, in_len, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (165:13): [True: 0, False: 218]
  ------------------
  166|      0|            return false;
  167|      0|        }
  168|    218|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  169|    218|    }
  170|  1.54k|    return format_hex(in, in_len, out, out_len);
  171|  1.76k|}
print_account_id:
  177|  46.1k|                      uint8_t num_chars_r) {
  178|  46.1k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (178:9): [True: 1.03k, False: 45.1k]
  ------------------
  179|  1.03k|        char buffer[ENCODED_ED25519_PUBLIC_KEY_LENGTH];
  180|  1.03k|        if (!encode_ed25519_public_key(account_id, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (180:13): [True: 0, False: 1.03k]
  ------------------
  181|      0|            return false;
  182|      0|        }
  183|  1.03k|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  184|  1.03k|    }
  185|  45.1k|    return encode_ed25519_public_key(account_id, out, out_len);
  186|  46.1k|}
print_contract_id:
  192|  3.98k|                       uint8_t num_chars_r) {
  193|  3.98k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (193:9): [True: 0, False: 3.98k]
  ------------------
  194|      0|        char buffer[ENCODED_CONTRACT_KEY_LENGTH];
  195|      0|        if (!encode_contract(contract_id, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (195:13): [True: 0, False: 0]
  ------------------
  196|      0|            return false;
  197|      0|        }
  198|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  199|      0|    }
  200|  3.98k|    return encode_contract(contract_id, out, out_len);
  201|  3.98k|}
print_hash_x_key:
  207|    199|                      uint8_t num_chars_r) {
  208|    199|    if (num_chars_l > 0) {
  ------------------
  |  Branch (208:9): [True: 0, False: 199]
  ------------------
  209|      0|        char buffer[ENCODED_HASH_X_KEY_LENGTH];
  210|      0|        if (!encode_hash_x_key(raw_hash_x, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|            return false;
  212|      0|        }
  213|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  214|      0|    }
  215|    199|    return encode_hash_x_key(raw_hash_x, out, out_len);
  216|    199|}
print_pre_auth_x_key:
  222|    267|                          uint8_t num_chars_r) {
  223|    267|    if (num_chars_l > 0) {
  ------------------
  |  Branch (223:9): [True: 0, False: 267]
  ------------------
  224|      0|        char buffer[ENCODED_PRE_AUTH_TX_KEY_LENGTH];
  225|      0|        if (!encode_pre_auth_x_key(raw_pre_auth_tx, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (225:13): [True: 0, False: 0]
  ------------------
  226|      0|            return false;
  227|      0|        }
  228|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  229|      0|    }
  230|    267|    return encode_pre_auth_x_key(raw_pre_auth_tx, out, out_len);
  231|    267|}
print_ed25519_signed_payload:
  237|    367|                                  uint8_t num_chars_r) {
  238|    367|    char tmp[ED25519_SIGNED_PAYLOAD_MAX_LENGTH];
  239|    367|    if (!encode_ed25519_signed_payload(signed_payload, tmp, sizeof(tmp))) {
  ------------------
  |  Branch (239:9): [True: 0, False: 367]
  ------------------
  240|      0|        return false;
  241|    367|    };
  242|       |
  243|    367|    if (num_chars_l > 0) {
  ------------------
  |  Branch (243:9): [True: 367, False: 0]
  ------------------
  244|    367|        if (out_len < num_chars_l + num_chars_r + 2 + 1) {
  ------------------
  |  Branch (244:13): [True: 0, False: 367]
  ------------------
  245|      0|            return false;
  246|      0|        }
  247|    367|        return print_summary(tmp, out, out_len, num_chars_l, num_chars_r);
  248|    367|    } else {
  249|      0|        if (strlcpy(out, tmp, out_len) >= out_len) {
  ------------------
  |  Branch (249:13): [True: 0, False: 0]
  ------------------
  250|      0|            return false;
  251|      0|        }
  252|      0|    }
  253|      0|    return true;
  254|    367|}
print_sc_address:
  260|  12.8k|                      uint8_t num_chars_r) {
  261|  12.8k|    if (sc_address->type == SC_ADDRESS_TYPE_ACCOUNT) {
  ------------------
  |  Branch (261:9): [True: 8.88k, False: 3.98k]
  ------------------
  262|  8.88k|        return print_account_id(sc_address->address, out, out_len, num_chars_l, num_chars_r);
  263|  8.88k|    } else {
  264|  3.98k|        return print_contract_id(sc_address->address, out, out_len, num_chars_l, num_chars_r);
  265|  3.98k|    }
  266|      0|    return true;
  267|  12.8k|}
print_muxed_account:
  273|  10.8k|                         uint8_t num_chars_r) {
  274|  10.8k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (274:9): [True: 1.24k, False: 9.57k]
  ------------------
  275|  1.24k|        char buffer[ENCODED_MUXED_ACCOUNT_KEY_LENGTH];
  276|  1.24k|        if (!encode_muxed_account(muxed_account, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (276:13): [True: 0, False: 1.24k]
  ------------------
  277|      0|            return false;
  278|      0|        }
  279|  1.24k|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  280|  1.24k|    }
  281|  9.57k|    return encode_muxed_account(muxed_account, out, out_len);
  282|  10.8k|}
print_claimable_balance_id:
  288|    525|                                uint8_t num_chars_r) {
  289|    525|    if (out_len < (4 + CLAIMABLE_BALANCE_ID_SIZE) * 2 + 1) {
  ------------------
  |  |   48|    525|#define CLAIMABLE_BALANCE_ID_SIZE 32
  ------------------
  |  Branch (289:9): [True: 0, False: 525]
  ------------------
  290|      0|        return false;
  291|      0|    }
  292|    525|    uint8_t data[(4 + CLAIMABLE_BALANCE_ID_SIZE)];
  293|  2.62k|    for (uint8_t i = 0; i < 4; i++) {
  ------------------
  |  Branch (293:25): [True: 2.10k, False: 525]
  ------------------
  294|  2.10k|        data[i] = claimable_balance_id_t->type >> (8 * (3 - i));
  295|  2.10k|    }
  296|    525|    memcpy(data + 4, claimable_balance_id_t->v0, CLAIMABLE_BALANCE_ID_SIZE);
  ------------------
  |  |   48|    525|#define CLAIMABLE_BALANCE_ID_SIZE 32
  ------------------
  297|    525|    return print_binary(data, sizeof(data), out, out_len, num_chars_l, num_chars_r);
  298|    525|}
print_uint64_num:
  300|   168k|bool print_uint64_num(uint64_t num, char *out, size_t out_len) {
  301|   168k|    uint8_t data[8] = {0};
  302|  1.51M|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (302:21): [True: 1.34M, False: 168k]
  ------------------
  303|  1.34M|        data[i] = num >> (8 * (7 - i));
  304|  1.34M|    }
  305|   168k|    return print_uint64(data, 0, out, out_len, false);
  306|   168k|}
print_int64_num:
  308|    282|bool print_int64_num(int64_t num, char *out, size_t out_len) {
  309|    282|    uint8_t data[8] = {0};
  310|  2.53k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (310:21): [True: 2.25k, False: 282]
  ------------------
  311|  2.25k|        data[i] = num >> (8 * (7 - i));
  312|  2.25k|    }
  313|    282|    return print_int64(data, 0, out, out_len, false);
  314|    282|}
print_time:
  316|    784|bool print_time(uint64_t seconds, char *out, size_t out_len) {
  317|    784|    if (seconds > 253402300799) {
  ------------------
  |  Branch (317:9): [True: 72, False: 712]
  ------------------
  318|       |        // valid range 1970-01-01 00:00:00 - 9999-12-31 23:59:59
  319|     72|        return false;
  320|     72|    }
  321|    712|    char time_str[20] = {0};  // 1970-01-01 00:00:00
  322|       |
  323|    712|    if (out_len < sizeof(time_str)) {
  ------------------
  |  Branch (323:9): [True: 0, False: 712]
  ------------------
  324|      0|        return false;
  325|      0|    }
  326|    712|    struct tm tm;
  327|    712|    if (!gmtime_r((time_t *) &seconds, &tm)) {
  ------------------
  |  Branch (327:9): [True: 0, False: 712]
  ------------------
  328|      0|        return false;
  329|    712|    };
  330|       |
  331|    712|    if (snprintf(time_str,
  ------------------
  |  Branch (331:9): [True: 0, False: 712]
  ------------------
  332|    712|                 sizeof(time_str),
  333|    712|                 "%04d-%02d-%02d %02d:%02d:%02d",
  334|    712|                 tm.tm_year + 1900,
  335|    712|                 tm.tm_mon + 1,
  336|    712|                 tm.tm_mday,
  337|    712|                 tm.tm_hour,
  338|    712|                 tm.tm_min,
  339|    712|                 tm.tm_sec) < 0) {
  340|      0|        return false;
  341|    712|    };
  342|    712|    if (strlcpy(out, time_str, out_len) >= out_len) {
  ------------------
  |  Branch (342:9): [True: 0, False: 712]
  ------------------
  343|      0|        return false;
  344|      0|    }
  345|    712|    return true;
  346|    712|}
print_asset_name:
  348|  46.2k|bool print_asset_name(const asset_t *asset, uint8_t network_id, char *out, size_t out_len) {
  349|  46.2k|    switch (asset->type) {
  350|  45.2k|        case ASSET_TYPE_NATIVE:
  ------------------
  |  Branch (350:9): [True: 45.2k, False: 1.06k]
  ------------------
  351|  45.2k|            if (network_id == NETWORK_TYPE_UNKNOWN) {
  ------------------
  |  |   59|  45.2k|#define NETWORK_TYPE_UNKNOWN 2
  ------------------
  |  Branch (351:17): [True: 43.0k, False: 2.16k]
  ------------------
  352|  43.0k|                if (strlcpy(out, "native", out_len) >= out_len) {
  ------------------
  |  Branch (352:21): [True: 0, False: 43.0k]
  ------------------
  353|      0|                    return false;
  354|      0|                }
  355|  43.0k|            } else {
  356|  2.16k|                if (strlcpy(out, "XLM", out_len) >= out_len) {
  ------------------
  |  Branch (356:21): [True: 0, False: 2.16k]
  ------------------
  357|      0|                    return false;
  358|      0|                }
  359|  2.16k|            }
  360|  45.2k|            return true;
  361|    648|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (361:9): [True: 648, False: 45.6k]
  ------------------
  362|  2.12k|            for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (362:29): [True: 1.82k, False: 297]
  ------------------
  363|  1.82k|                out[i] = asset->alpha_num4.asset_code[i];
  364|  1.82k|                if (out[i] == 0) {
  ------------------
  |  Branch (364:21): [True: 351, False: 1.47k]
  ------------------
  365|    351|                    break;
  366|    351|                }
  367|  1.82k|            }
  368|    648|            out[4] = 0;
  369|    648|            return true;
  370|    417|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (370:9): [True: 417, False: 45.8k]
  ------------------
  371|  1.33k|            for (int i = 0; i < 12; i++) {
  ------------------
  |  Branch (371:29): [True: 1.29k, False: 31]
  ------------------
  372|  1.29k|                out[i] = asset->alpha_num12.asset_code[i];
  373|  1.29k|                if (out[i] == 0) {
  ------------------
  |  Branch (373:21): [True: 386, False: 913]
  ------------------
  374|    386|                    break;
  375|    386|                }
  376|  1.29k|            }
  377|    417|            out[12] = 0;
  378|    417|            return true;
  379|      0|        default:
  ------------------
  |  Branch (379:9): [True: 0, False: 46.2k]
  ------------------
  380|      0|            return false;
  381|  46.2k|    }
  382|  46.2k|}
print_asset:
  384|  44.7k|bool print_asset(const asset_t *asset, uint8_t network_id, char *out, size_t out_len) {
  385|  44.7k|    char asset_code[12 + 1];
  386|  44.7k|    char asset_issuer[3 + 2 + 4 + 1];
  387|  44.7k|    print_asset_name(asset, network_id, asset_code, sizeof(asset_code));
  388|       |
  389|  44.7k|    switch (asset->type) {
  390|    628|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (390:9): [True: 628, False: 44.1k]
  ------------------
  391|    628|            print_account_id(asset->alpha_num4.issuer, asset_issuer, sizeof(asset_issuer), 3, 4);
  392|    628|            break;
  393|    405|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (393:9): [True: 405, False: 44.3k]
  ------------------
  394|    405|            print_account_id(asset->alpha_num12.issuer, asset_issuer, sizeof(asset_issuer), 3, 4);
  395|    405|            break;
  396|  43.7k|        default:
  ------------------
  |  Branch (396:9): [True: 43.7k, False: 1.03k]
  ------------------
  397|  43.7k|            break;
  398|  44.7k|    }
  399|  44.7k|    if (strlcpy(out, asset_code, out_len) >= out_len) {
  ------------------
  |  Branch (399:9): [True: 0, False: 44.7k]
  ------------------
  400|      0|        return false;
  401|      0|    }
  402|  44.7k|    if (asset->type != ASSET_TYPE_NATIVE) {
  ------------------
  |  Branch (402:9): [True: 1.03k, False: 43.7k]
  ------------------
  403|  1.03k|        if (strlcat(out, "@", out_len) >= out_len) {
  ------------------
  |  Branch (403:13): [True: 0, False: 1.03k]
  ------------------
  404|      0|            return false;
  405|      0|        }
  406|  1.03k|        if (strlcat(out, asset_issuer, out_len) >= out_len) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.03k]
  ------------------
  407|      0|            return false;
  408|      0|        }
  409|  1.03k|    }
  410|  44.7k|    return true;
  411|  44.7k|}
print_flag:
  413|  3.69k|bool print_flag(const char *flag, char *out, size_t out_len) {
  414|  3.69k|    if (out[0]) {
  ------------------
  |  Branch (414:9): [True: 1.92k, False: 1.77k]
  ------------------
  415|  1.92k|        if (strlcat(out, ", ", out_len) >= out_len) {
  ------------------
  |  Branch (415:13): [True: 0, False: 1.92k]
  ------------------
  416|      0|            return false;
  417|      0|        }
  418|  1.92k|    }
  419|  3.69k|    if (strlcat(out, flag, out_len) >= out_len) {
  ------------------
  |  Branch (419:9): [True: 0, False: 3.69k]
  ------------------
  420|      0|        return false;
  421|      0|    }
  422|  3.69k|    return true;
  423|  3.69k|}
print_account_flags:
  425|  1.07k|bool print_account_flags(uint32_t flags, char *out, size_t out_len) {
  426|  1.07k|    explicit_bzero(out, out_len);
  427|  1.07k|    if (flags & 0x01u) {
  ------------------
  |  Branch (427:9): [True: 406, False: 671]
  ------------------
  428|    406|        if (!print_flag("AUTH_REQUIRED", out, out_len)) {
  ------------------
  |  Branch (428:13): [True: 0, False: 406]
  ------------------
  429|      0|            return false;
  430|      0|        }
  431|    406|    }
  432|  1.07k|    if (flags & 0x02u) {
  ------------------
  |  Branch (432:9): [True: 682, False: 395]
  ------------------
  433|    682|        if (!print_flag("AUTH_REVOCABLE", out, out_len)) {
  ------------------
  |  Branch (433:13): [True: 0, False: 682]
  ------------------
  434|      0|            return false;
  435|      0|        }
  436|    682|    }
  437|  1.07k|    if (flags & 0x04u) {
  ------------------
  |  Branch (437:9): [True: 502, False: 575]
  ------------------
  438|    502|        if (!print_flag("AUTH_IMMUTABLE", out, out_len)) {
  ------------------
  |  Branch (438:13): [True: 0, False: 502]
  ------------------
  439|      0|            return false;
  440|      0|        }
  441|    502|    }
  442|  1.07k|    if (flags & 0x08u) {
  ------------------
  |  Branch (442:9): [True: 344, False: 733]
  ------------------
  443|    344|        if (!print_flag("AUTH_CLAWBACK_ENABLED", out, out_len)) {
  ------------------
  |  Branch (443:13): [True: 0, False: 344]
  ------------------
  444|      0|            return false;
  445|      0|        }
  446|    344|    }
  447|  1.07k|    return true;
  448|  1.07k|}
print_trust_line_flags:
  450|  1.59k|bool print_trust_line_flags(uint32_t flags, char *out, size_t out_len) {
  451|  1.59k|    explicit_bzero(out, out_len);
  452|  1.59k|    if (flags & AUTHORIZED_FLAG) {
  ------------------
  |  Branch (452:9): [True: 707, False: 886]
  ------------------
  453|    707|        if (!print_flag("AUTHORIZED", out, out_len)) {
  ------------------
  |  Branch (453:13): [True: 0, False: 707]
  ------------------
  454|      0|            return false;
  455|      0|        }
  456|    707|    }
  457|  1.59k|    if (flags & AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG) {
  ------------------
  |  Branch (457:9): [True: 616, False: 977]
  ------------------
  458|    616|        if (!print_flag("AUTHORIZED_TO_MAINTAIN_LIABILITIES", out, out_len)) {
  ------------------
  |  Branch (458:13): [True: 0, False: 616]
  ------------------
  459|      0|            return false;
  460|      0|        }
  461|    616|    }
  462|  1.59k|    if (flags & TRUSTLINE_CLAWBACK_ENABLED_FLAG) {
  ------------------
  |  Branch (462:9): [True: 439, False: 1.15k]
  ------------------
  463|    439|        if (!print_flag("TRUSTLINE_CLAWBACK_ENABLED", out, out_len)) {
  ------------------
  |  Branch (463:13): [True: 0, False: 439]
  ------------------
  464|      0|            return false;
  465|      0|        }
  466|    439|    }
  467|  1.59k|    return true;
  468|  1.59k|}
print_allow_trust_flags:
  470|    293|bool print_allow_trust_flags(uint32_t flag, char *out, size_t out_len) {
  471|    293|    explicit_bzero(out, out_len);
  472|    293|    if (flag & AUTHORIZED_FLAG) {
  ------------------
  |  Branch (472:9): [True: 100, False: 193]
  ------------------
  473|    100|        if (strlcpy(out, "AUTHORIZED", out_len) >= out_len) {
  ------------------
  |  Branch (473:13): [True: 0, False: 100]
  ------------------
  474|      0|            return false;
  475|      0|        }
  476|    193|    } else if (flag & AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG) {
  ------------------
  |  Branch (476:16): [True: 33, False: 160]
  ------------------
  477|     33|        if (strlcpy(out, "AUTHORIZED_TO_MAINTAIN_LIABILITIES", out_len) >= out_len) {
  ------------------
  |  Branch (477:13): [True: 0, False: 33]
  ------------------
  478|      0|            return false;
  479|      0|        }
  480|    160|    } else {
  481|    160|        if (strlcpy(out, "UNAUTHORIZED", out_len) >= out_len) {
  ------------------
  |  Branch (481:13): [True: 0, False: 160]
  ------------------
  482|      0|            return false;
  483|      0|        }
  484|    160|    }
  485|    293|    return true;
  486|    293|}
print_amount:
  492|  43.5k|                  size_t out_len) {
  493|  43.5k|    uint8_t data[8] = {0};
  494|   391k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (494:21): [True: 348k, False: 43.5k]
  ------------------
  495|   348k|        data[i] = amount >> (8 * (7 - i));
  496|   348k|    }
  497|       |
  498|  43.5k|    if (!print_uint64(data, 7, out, out_len, true)) {
  ------------------
  |  Branch (498:9): [True: 0, False: 43.5k]
  ------------------
  499|      0|        return false;
  500|      0|    }
  501|       |
  502|  43.5k|    if (asset) {
  ------------------
  |  Branch (502:9): [True: 41.0k, False: 2.50k]
  ------------------
  503|  41.0k|        if (strlcat(out, " ", out_len) >= out_len) {
  ------------------
  |  Branch (503:13): [True: 0, False: 41.0k]
  ------------------
  504|      0|            return false;
  505|      0|        }
  506|  41.0k|        size_t length = strlen(out);
  507|  41.0k|        if (!print_asset(asset, network_id, out + length, out_len - length)) {
  ------------------
  |  Branch (507:13): [True: 0, False: 41.0k]
  ------------------
  508|      0|            return false;
  509|  41.0k|        };
  510|  41.0k|    }
  511|  43.5k|    return true;
  512|  43.5k|}
is_printable_binary:
  514|  1.12k|bool is_printable_binary(const uint8_t *str, size_t str_len) {
  515|  7.07k|    for (size_t i = 0; i < str_len; i++) {
  ------------------
  |  Branch (515:24): [True: 6.38k, False: 687]
  ------------------
  516|  6.38k|        if (str[i] > 0x7e || str[i] < 0x20) {
  ------------------
  |  Branch (516:13): [True: 178, False: 6.21k]
  |  Branch (516:30): [True: 258, False: 5.95k]
  ------------------
  517|    436|            return false;
  518|    436|        }
  519|  6.38k|    }
  520|    687|    return true;
  521|  1.12k|}
add_decimal_point:
  661|   216k|bool add_decimal_point(char *out, size_t out_len, uint8_t decimals) {
  662|   216k|    if (out == NULL || out_len == 0) {
  ------------------
  |  Branch (662:9): [True: 0, False: 216k]
  |  Branch (662:24): [True: 0, False: 216k]
  ------------------
  663|      0|        return false;
  664|      0|    }
  665|   216k|    if (decimals == 0) {
  ------------------
  |  Branch (665:9): [True: 172k, False: 43.8k]
  ------------------
  666|   172k|        return true;
  667|   172k|    }
  668|       |
  669|  43.8k|    bool is_negative = out[0] == '-';
  670|  43.8k|    char *start = is_negative ? out + 1 : out;
  ------------------
  |  Branch (670:19): [True: 89, False: 43.7k]
  ------------------
  671|       |
  672|  43.8k|    size_t len = strlen(start);
  673|  43.8k|    if (len == 0) {
  ------------------
  |  Branch (673:9): [True: 0, False: 43.8k]
  ------------------
  674|      0|        return true;
  675|      0|    }
  676|       |
  677|  43.8k|    if (is_negative) {
  ------------------
  |  Branch (677:9): [True: 89, False: 43.7k]
  ------------------
  678|     89|        if (decimals >= out_len - 2) {
  ------------------
  |  Branch (678:13): [True: 0, False: 89]
  ------------------
  679|       |            // Not enough space to add decimal point and leading zero.
  680|      0|            return false;
  681|      0|        }
  682|  43.7k|    } else {
  683|  43.7k|        if (decimals >= out_len - 1) {
  ------------------
  |  Branch (683:13): [True: 0, False: 43.7k]
  ------------------
  684|       |            // Not enough space to add decimal point.
  685|      0|            return false;
  686|      0|        }
  687|  43.7k|    }
  688|       |
  689|  43.8k|    if (len <= decimals) {
  ------------------
  |  Branch (689:9): [True: 32.5k, False: 11.2k]
  ------------------
  690|       |        // Shift the number to the right and add leading zeros
  691|  32.5k|        memmove(start + decimals - len + 2, start, len + 1);
  692|  32.5k|        start[0] = '0';
  693|  32.5k|        start[1] = '.';
  694|  32.5k|        memset(start + 2, '0', decimals - len);
  695|  32.5k|    } else {
  696|       |        // Insert the decimal point at the appropriate position
  697|  11.2k|        memmove(start + len - decimals + 1, start + len - decimals, decimals + 1);
  698|  11.2k|        start[len - decimals] = '.';
  699|  11.2k|    }
  700|       |
  701|       |    // Remove trailing zeros after decimal point
  702|  43.8k|    char *p = start + strlen(start) - 1;
  703|   202k|    while (p > start && *p == '0') {
  ------------------
  |  Branch (703:12): [True: 202k, False: 0]
  |  Branch (703:25): [True: 158k, False: 43.8k]
  ------------------
  704|   158k|        *p-- = '\0';
  705|   158k|    }
  706|       |
  707|       |    // Remove decimal point if it's the last character
  708|  43.8k|    if (p > start && *p == '.') {
  ------------------
  |  Branch (708:9): [True: 43.8k, False: 0]
  |  Branch (708:22): [True: 22.0k, False: 21.7k]
  ------------------
  709|  22.0k|        *p = '\0';
  710|  22.0k|    }
  711|       |
  712|       |    // Add the negative sign back if necessary
  713|  43.8k|    if (is_negative && out[0] != '-') {
  ------------------
  |  Branch (713:9): [True: 89, False: 43.7k]
  |  Branch (713:24): [True: 0, False: 89]
  ------------------
  714|      0|        memmove(out + 1, out, strlen(out) + 1);
  715|      0|        out[0] = '-';
  716|      0|    }
  717|       |
  718|  43.8k|    return true;
  719|  43.8k|}
add_separator_to_number:
  721|  47.7k|bool add_separator_to_number(char *out, size_t out_len) {
  722|  47.7k|    if (out == NULL || out_len == 0) {
  ------------------
  |  Branch (722:9): [True: 0, False: 47.7k]
  |  Branch (722:24): [True: 0, False: 47.7k]
  ------------------
  723|      0|        return false;
  724|      0|    }
  725|       |
  726|  47.7k|    size_t length = strlen(out);
  727|  47.7k|    uint8_t negative = (out[0] == '-') ? 1 : 0;  // Check if the number is negative
  ------------------
  |  Branch (727:24): [True: 625, False: 47.1k]
  ------------------
  728|       |
  729|       |    // Find the position of the decimal point
  730|  47.7k|    char *decimal_point = strchr(out, '.');
  731|  47.7k|    size_t decimal_index = decimal_point ? decimal_point - out : length;
  ------------------
  |  Branch (731:28): [True: 21.6k, False: 26.1k]
  ------------------
  732|       |
  733|       |    // Calculate the new length of the string with the commas
  734|  47.7k|    size_t new_length = 0;
  735|  47.7k|    if (negative) {
  ------------------
  |  Branch (735:9): [True: 625, False: 47.1k]
  ------------------
  736|    625|        if (decimal_index < 2) {
  ------------------
  |  Branch (736:13): [True: 0, False: 625]
  ------------------
  737|       |            // The string is too short to have a negative number
  738|      0|            return false;
  739|      0|        }
  740|    625|        new_length = decimal_index + (decimal_index - 2) / 3;
  741|  47.1k|    } else {
  742|  47.1k|        if (decimal_index < 1) {
  ------------------
  |  Branch (742:13): [True: 0, False: 47.1k]
  ------------------
  743|       |            // The string is too short to have a positive number
  744|      0|            return false;
  745|      0|        }
  746|  47.1k|        new_length = decimal_index + (decimal_index - 1) / 3;
  747|  47.1k|    }
  748|       |
  749|       |    // If the new length is greater than the maximum length, return false
  750|  47.7k|    if (new_length >= out_len || new_length >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  47.7k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (750:9): [True: 0, False: 47.7k]
  |  Branch (750:34): [True: 0, False: 47.7k]
  ------------------
  751|      0|        return false;
  752|      0|    }
  753|       |
  754|  47.7k|    char temp[NUMBER_WITH_COMMAS_MAX_LENGTH];
  755|  47.7k|    if (strlcpy(temp, out, NUMBER_WITH_COMMAS_MAX_LENGTH) >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  47.7k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
                  if (strlcpy(temp, out, NUMBER_WITH_COMMAS_MAX_LENGTH) >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  47.7k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (755:9): [True: 0, False: 47.7k]
  ------------------
  756|      0|        return false;
  757|      0|    }
  758|       |
  759|  47.7k|    temp[new_length] = '\0';  // Set the end of the new string
  760|       |
  761|       |    // Start from the end of the string and move the digits to their new positions
  762|   256k|    for (int i = decimal_index - 1, j = new_length - 1; i >= 0; i--, j--) {
  ------------------
  |  Branch (762:57): [True: 208k, False: 47.7k]
  ------------------
  763|   208k|        temp[j] = out[i];
  764|       |
  765|       |        // If the current position is a multiple of 3 and it's not the first digit, add a comma
  766|   208k|        if ((decimal_index - i) % 3 == 0 && i != negative && j > 0) {
  ------------------
  |  Branch (766:13): [True: 54.2k, False: 154k]
  |  Branch (766:45): [True: 48.6k, False: 5.58k]
  |  Branch (766:62): [True: 48.2k, False: 385]
  ------------------
  767|  48.2k|            temp[--j] = ',';
  768|  48.2k|        }
  769|   208k|    }
  770|       |
  771|       |    // If there is a decimal point, append the part after the decimal point
  772|  47.7k|    if (decimal_point) {
  ------------------
  |  Branch (772:9): [True: 21.6k, False: 26.1k]
  ------------------
  773|  21.6k|        if (strlcpy(temp + new_length, decimal_point, NUMBER_WITH_COMMAS_MAX_LENGTH - new_length) >=
  ------------------
  |  |   13|  21.6k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (773:13): [True: 0, False: 21.6k]
  ------------------
  774|  21.6k|            NUMBER_WITH_COMMAS_MAX_LENGTH - new_length) {
  ------------------
  |  |   13|  21.6k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  775|      0|            return false;
  776|      0|        }
  777|  21.6k|    }
  778|       |
  779|  47.7k|    if (strlcpy(out, temp, out_len) >= out_len) {
  ------------------
  |  Branch (779:9): [True: 0, False: 47.7k]
  ------------------
  780|      0|        return false;
  781|      0|    }
  782|       |
  783|  47.7k|    return true;
  784|  47.7k|}
print_int32:
  790|    671|                 bool add_separator) {
  791|    671|    return int256_to_decimal(value, 4, out, out_len) && add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (791:12): [True: 671, False: 0]
  |  Branch (791:57): [True: 671, False: 0]
  ------------------
  792|    671|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (792:13): [True: 305, False: 366]
  |  Branch (792:31): [True: 366, False: 0]
  ------------------
  793|    671|}
print_uint32:
  799|    198|                  bool add_separator) {
  800|    198|    return uint256_to_decimal(value, 4, out, out_len) &&
  ------------------
  |  Branch (800:12): [True: 198, False: 0]
  ------------------
  801|    198|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (801:12): [True: 198, False: 0]
  ------------------
  802|    198|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (802:13): [True: 0, False: 198]
  |  Branch (802:31): [True: 198, False: 0]
  ------------------
  803|    198|}
print_int64:
  809|    845|                 bool add_separator) {
  810|    845|    return int256_to_decimal(value, 8, out, out_len) && add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (810:12): [True: 845, False: 0]
  |  Branch (810:57): [True: 845, False: 0]
  ------------------
  811|    845|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (811:13): [True: 282, False: 563]
  |  Branch (811:31): [True: 563, False: 0]
  ------------------
  812|    845|}
print_uint64:
  818|   211k|                  bool add_separator) {
  819|   211k|    return uint256_to_decimal(value, 8, out, out_len) &&
  ------------------
  |  Branch (819:12): [True: 211k, False: 0]
  ------------------
  820|   211k|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (820:12): [True: 211k, False: 0]
  ------------------
  821|   211k|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (821:13): [True: 168k, False: 43.6k]
  |  Branch (821:31): [True: 43.6k, False: 0]
  ------------------
  822|   211k|}
print_int128:
  828|  1.81k|                  bool add_separator) {
  829|  1.81k|    return int256_to_decimal(value, 16, out, out_len) &&
  ------------------
  |  Branch (829:12): [True: 1.81k, False: 0]
  ------------------
  830|  1.81k|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (830:12): [True: 1.81k, False: 0]
  ------------------
  831|  1.81k|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (831:13): [True: 0, False: 1.81k]
  |  Branch (831:31): [True: 1.81k, False: 0]
  ------------------
  832|  1.81k|}
print_uint128:
  838|    347|                   bool add_separator) {
  839|    347|    return uint256_to_decimal(value, 16, out, out_len) &&
  ------------------
  |  Branch (839:12): [True: 347, False: 0]
  ------------------
  840|    347|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (840:12): [True: 347, False: 0]
  ------------------
  841|    347|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (841:13): [True: 0, False: 347]
  |  Branch (841:31): [True: 347, False: 0]
  ------------------
  842|    347|}
print_int256:
  848|    473|                  bool add_separator) {
  849|    473|    return int256_to_decimal(value, 32, out, out_len) &&
  ------------------
  |  Branch (849:12): [True: 473, False: 0]
  ------------------
  850|    473|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (850:12): [True: 473, False: 0]
  ------------------
  851|    473|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (851:13): [True: 0, False: 473]
  |  Branch (851:31): [True: 473, False: 0]
  ------------------
  852|    473|}
print_uint256:
  858|    321|                   bool add_separator) {
  859|    321|    return uint256_to_decimal(value, 32, out, out_len) &&
  ------------------
  |  Branch (859:12): [True: 321, False: 0]
  ------------------
  860|    321|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (860:12): [True: 321, False: 0]
  ------------------
  861|    321|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (861:13): [True: 0, False: 321]
  |  Branch (861:31): [True: 321, False: 0]
  ------------------
  862|    321|}
print_scv_symbol:
  864|    393|bool print_scv_symbol(const scv_symbol_t *scv_symbol, char *out, size_t out_len) {
  865|    393|    if (scv_symbol == NULL || out == NULL) {
  ------------------
  |  Branch (865:9): [True: 0, False: 393]
  |  Branch (865:31): [True: 0, False: 393]
  ------------------
  866|      0|        return false;
  867|      0|    }
  868|    393|    if (scv_symbol->size > SCV_SYMBOL_MAX_SIZE || scv_symbol->size > out_len - 1) {
  ------------------
  |  |   55|    786|#define SCV_SYMBOL_MAX_SIZE     32
  ------------------
  |  Branch (868:9): [True: 0, False: 393]
  |  Branch (868:51): [True: 0, False: 393]
  ------------------
  869|      0|        return false;
  870|      0|    }
  871|    393|    if (scv_symbol->size == 0) {
  ------------------
  |  Branch (871:9): [True: 147, False: 246]
  ------------------
  872|       |        // print empty symbol
  873|    147|        if (strlcpy(out, "[empty symbol]", out_len) >= out_len) {
  ------------------
  |  Branch (873:13): [True: 0, False: 147]
  ------------------
  874|      0|            return false;
  875|      0|        }
  876|    147|        return true;
  877|    147|    }
  878|    246|    if (!is_printable_binary(scv_symbol->symbol, scv_symbol->size)) {
  ------------------
  |  Branch (878:9): [True: 9, False: 237]
  ------------------
  879|      9|        return false;
  880|      9|    }
  881|    237|    if (!print_string(out, out_len, scv_symbol->symbol, scv_symbol->size)) {
  ------------------
  |  Branch (881:9): [True: 0, False: 237]
  ------------------
  882|      0|        return false;
  883|      0|    }
  884|    237|    return true;
  885|    237|}
print_scv_string:
  887|    784|bool print_scv_string(const scv_string_t *scv_string, char *out, size_t out_len) {
  888|    784|    if (scv_string == NULL || out == NULL) {
  ------------------
  |  Branch (888:9): [True: 0, False: 784]
  |  Branch (888:31): [True: 0, False: 784]
  ------------------
  889|      0|        return false;
  890|      0|    }
  891|       |
  892|    784|    if (scv_string->size == 0) {
  ------------------
  |  Branch (892:9): [True: 474, False: 310]
  ------------------
  893|       |        // print empty symbol
  894|    474|        if (strlcpy(out, "[empty string]", out_len) >= out_len) {
  ------------------
  |  Branch (894:13): [True: 0, False: 474]
  ------------------
  895|      0|            return false;
  896|      0|        }
  897|    474|        return true;
  898|    474|    }
  899|       |
  900|       |    // if the string is not printable, print [unprintable string]
  901|    310|    if (!is_printable_binary(scv_string->string, scv_string->size)) {
  ------------------
  |  Branch (901:9): [True: 267, False: 43]
  ------------------
  902|    267|        if (strlcpy(out, "[unprintable string]", out_len) >= out_len) {
  ------------------
  |  Branch (902:13): [True: 0, False: 267]
  ------------------
  903|      0|            return false;
  904|      0|        }
  905|    267|        return true;
  906|    267|    }
  907|       |
  908|     43|    size_t copy_len = scv_string->size;
  909|       |
  910|       |    // If the output buffer is large enough to hold the entire scv_string, copy it directly and
  911|       |    // append a null terminator.
  912|     43|    if (out_len > copy_len) {
  ------------------
  |  Branch (912:9): [True: 43, False: 0]
  ------------------
  913|     43|        memcpy(out, scv_string->string, copy_len);
  914|     43|        out[copy_len] = '\0';  // Ensure the string is null-terminated.
  915|     43|    } else {
  916|      0|        if (out_len < 3) {
  ------------------
  |  Branch (916:13): [True: 0, False: 0]
  ------------------
  917|      0|            return false;
  918|      0|        }
  919|       |        // Calculate the lengths of the beginning and end parts that can be displayed.
  920|      0|        size_t dots_len = 2;                 // The length of two dots.
  921|      0|        size_t available_len = out_len - 1;  // Subtract 1 to reserve space for the null terminator.
  922|      0|        size_t start_copy_len = available_len / 2;
  923|      0|        size_t end_copy_len = available_len - start_copy_len - dots_len;
  924|       |
  925|       |        // Copy the beginning part of the string.
  926|      0|        memcpy(out, scv_string->string, start_copy_len);
  927|      0|        out[start_copy_len] = '.';
  928|      0|        out[start_copy_len + 1] = '.';
  929|       |
  930|       |        // Copy the end part of the string if there is space for it after the dots.
  931|      0|        if (end_copy_len > 0) {
  ------------------
  |  Branch (931:13): [True: 0, False: 0]
  ------------------
  932|      0|            memcpy(out + start_copy_len + dots_len,
  933|      0|                   scv_string->string + copy_len - end_copy_len,
  934|      0|                   end_copy_len);
  935|      0|        }
  936|       |
  937|       |        // Ensure the output string is null-terminated by placing a null character at the end of the
  938|       |        // buffer.
  939|      0|        out[out_len - 1] = '\0';
  940|      0|    }
  941|       |
  942|     43|    return true;
  943|     43|}
print_string:
  945|  14.8k|bool print_string(char *out, size_t out_len, const uint8_t *src, size_t src_size) {
  946|  14.8k|    if (out == NULL || src == NULL || out_len == 0) {
  ------------------
  |  Branch (946:9): [True: 0, False: 14.8k]
  |  Branch (946:24): [True: 0, False: 14.8k]
  |  Branch (946:39): [True: 0, False: 14.8k]
  ------------------
  947|      0|        return false;
  948|      0|    }
  949|  14.8k|    if (src_size + 1 > out_len) {
  ------------------
  |  Branch (949:9): [True: 0, False: 14.8k]
  ------------------
  950|      0|        return false;
  951|      0|    }
  952|  14.8k|    memcpy(out, src, src_size);
  953|  14.8k|    out[src_size] = '\0';
  954|  14.8k|    return true;
  955|  14.8k|}
print_price:
  962|    895|                 size_t out_len) {
  963|    895|    uint64_t scaled_price = ((uint64_t) price->n * 10000000) / price->d;
  964|    895|    if (!print_amount(scaled_price, NULL, network_id, out, out_len)) {
  ------------------
  |  Branch (964:9): [True: 0, False: 895]
  ------------------
  965|      0|        return false;
  966|      0|    }
  967|       |
  968|    895|    if (asset_a != NULL && asset_b != NULL) {
  ------------------
  |  Branch (968:9): [True: 745, False: 150]
  |  Branch (968:28): [True: 745, False: 0]
  ------------------
  969|    745|        char tmp_asset_code[ASSET_CODE_MAX_LENGTH] = {0};
  970|    745|        if (strlcat(out, " ", out_len) >= out_len ||
  ------------------
  |  Branch (970:13): [True: 0, False: 745]
  ------------------
  971|    745|            !print_asset_name(asset_a, network_id, tmp_asset_code, sizeof(tmp_asset_code)) ||
  ------------------
  |  Branch (971:13): [True: 0, False: 745]
  ------------------
  972|    745|            strlcat(out, tmp_asset_code, out_len) >= out_len ||
  ------------------
  |  Branch (972:13): [True: 0, False: 745]
  ------------------
  973|    745|            strlcat(out, "/", out_len) >= out_len ||
  ------------------
  |  Branch (973:13): [True: 0, False: 745]
  ------------------
  974|    745|            !print_asset_name(asset_b, network_id, tmp_asset_code, sizeof(tmp_asset_code)) ||
  ------------------
  |  Branch (974:13): [True: 0, False: 745]
  ------------------
  975|    745|            strlcat(out, tmp_asset_code, out_len) >= out_len) {
  ------------------
  |  Branch (975:13): [True: 0, False: 745]
  ------------------
  976|      0|            return false;
  977|      0|        }
  978|    745|    }
  979|    895|    return true;
  980|    895|}
printer.c:print_summary:
  138|  2.86k|                          uint8_t num_chars_r) {
  139|  2.86k|    uint8_t result_len = num_chars_l + num_chars_r + 2;
  140|  2.86k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (140:9): [True: 0, False: 2.86k]
  ------------------
  141|      0|        return false;
  142|      0|    }
  143|  2.86k|    uint16_t in_len = strlen(in);
  144|  2.86k|    if (in_len > result_len) {
  ------------------
  |  Branch (144:9): [True: 2.86k, False: 0]
  ------------------
  145|  2.86k|        memcpy(out, in, num_chars_l);
  146|  2.86k|        out[num_chars_l] = '.';
  147|  2.86k|        out[num_chars_l + 1] = '.';
  148|  2.86k|        memcpy(out + num_chars_l + 2, in + in_len - num_chars_r, num_chars_r);
  149|  2.86k|        out[result_len] = '\0';
  150|  2.86k|    } else {
  151|      0|        memcpy(out, in, in_len);
  152|      0|        out[in_len] = '\0';
  153|      0|    }
  154|  2.86k|    return true;
  155|  2.86k|}
printer.c:int256_to_decimal:
  595|  3.80k|static bool int256_to_decimal(const uint8_t *value, size_t value_len, char *out, size_t out_len) {
  596|  3.80k|    if (value_len > INT256_LENGTH) {
  ------------------
  |  |    9|  3.80k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (596:9): [True: 0, False: 3.80k]
  ------------------
  597|       |        // Value length is bigger than INT256_LENGTH
  598|      0|        return false;
  599|      0|    }
  600|       |
  601|  3.80k|    bool is_negative = (value[0] & 0x80) != 0;
  602|  3.80k|    uint8_t n[INT256_LENGTH] = {0};
  603|       |
  604|  3.80k|    if (is_negative) {
  ------------------
  |  Branch (604:9): [True: 714, False: 3.08k]
  ------------------
  605|       |        // Compute the absolute value using two's complement
  606|    714|        bool carry = true;
  607|  16.2k|        for (size_t i = value_len; i-- > 0;) {
  ------------------
  |  Branch (607:36): [True: 15.5k, False: 714]
  ------------------
  608|  15.5k|            n[INT256_LENGTH - value_len + i] = ~value[i] + carry;
  ------------------
  |  |    9|  15.5k|#define INT256_LENGTH                     32
  ------------------
  609|  15.5k|            carry = carry && (value[i] == 0);
  ------------------
  |  Branch (609:21): [True: 8.61k, False: 6.96k]
  |  Branch (609:30): [True: 7.89k, False: 714]
  ------------------
  610|  15.5k|        }
  611|  3.08k|    } else {
  612|  3.08k|        memcpy(n + INT256_LENGTH - value_len, value, value_len);
  ------------------
  |  |    9|  3.08k|#define INT256_LENGTH                     32
  ------------------
  613|  3.08k|    }
  614|       |
  615|  3.80k|    char *p = out + out_len;
  616|  3.80k|    size_t result_len = 0;
  617|       |
  618|  71.3k|    do {
  619|  71.3k|        if (p == out) {
  ------------------
  |  Branch (619:13): [True: 0, False: 71.3k]
  ------------------
  620|       |            // Not enough space in the output buffer
  621|      0|            return false;
  622|      0|        }
  623|       |
  624|  71.3k|        uint32_t remainder = 0;
  625|  2.35M|        for (size_t i = 0; i < INT256_LENGTH; ++i) {
  ------------------
  |  |    9|  2.35M|#define INT256_LENGTH                     32
  ------------------
  |  Branch (625:28): [True: 2.28M, False: 71.3k]
  ------------------
  626|  2.28M|            uint32_t temp = (remainder << 8) | n[i];
  627|  2.28M|            n[i] = temp / 10;
  628|  2.28M|            remainder = temp % 10;
  629|  2.28M|        }
  630|       |
  631|  71.3k|        *--p = '0' + remainder;
  632|  71.3k|        result_len++;
  633|  71.3k|    } while (!allzeroes(n, INT256_LENGTH));
  ------------------
  |  |    9|  71.3k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (633:14): [True: 67.5k, False: 3.80k]
  ------------------
  634|       |
  635|  3.80k|    if (is_negative) {
  ------------------
  |  Branch (635:9): [True: 714, False: 3.08k]
  ------------------
  636|    714|        if (p == out) {
  ------------------
  |  Branch (636:13): [True: 0, False: 714]
  ------------------
  637|       |            // Not enough space in the output buffer
  638|      0|            return false;
  639|      0|        }
  640|    714|        *--p = '-';
  641|    714|        result_len++;
  642|    714|    }
  643|       |
  644|  3.80k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (644:9): [True: 0, False: 3.80k]
  ------------------
  645|       |        // Not enough space to hold the result and \0.
  646|      0|        return false;
  647|      0|    }
  648|       |
  649|  3.80k|    memmove(out, p, result_len);
  650|  3.80k|    out[result_len] = '\0';
  651|       |
  652|       |    // Clear the rest of the 'out' array
  653|       |    // Generally speaking, this is unnecessary,
  654|       |    // but handler_get_app_configuration requires that it must be followed by `\0`.
  655|  3.80k|    if (result_len + 1 < out_len) {
  ------------------
  |  Branch (655:9): [True: 3.80k, False: 0]
  ------------------
  656|  3.80k|        memset(out + result_len + 1, 0, out_len - result_len - 1);
  657|  3.80k|    }
  658|  3.80k|    return true;
  659|  3.80k|}
printer.c:allzeroes:
  523|  1.06M|static int allzeroes(const void *buf, size_t n) {
  524|  1.06M|    uint8_t *p = (uint8_t *) buf;
  525|  31.8M|    for (size_t i = 0; i < n; ++i) {
  ------------------
  |  Branch (525:24): [True: 31.6M, False: 216k]
  ------------------
  526|  31.6M|        if (p[i]) {
  ------------------
  |  Branch (526:13): [True: 845k, False: 30.8M]
  ------------------
  527|   845k|            return 0;
  528|   845k|        }
  529|  31.6M|    }
  530|   216k|    return 1;
  531|  1.06M|}
printer.c:uint256_to_decimal:
  533|   212k|static bool uint256_to_decimal(const uint8_t *value, size_t value_len, char *out, size_t out_len) {
  534|   212k|    if (value_len > INT256_LENGTH) {
  ------------------
  |  |    9|   212k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (534:9): [True: 0, False: 212k]
  ------------------
  535|      0|        return false;
  536|      0|    }
  537|       |
  538|   212k|    uint16_t n[16] = {0};
  539|       |    // Copy and right-align the number
  540|   212k|    memcpy((uint8_t *) n + INT256_LENGTH - value_len, value, value_len);
  ------------------
  |  |    9|   212k|#define INT256_LENGTH                     32
  ------------------
  541|       |
  542|       |    // Special case when value is 0
  543|   212k|    if (allzeroes(n, sizeof(n))) {
  ------------------
  |  Branch (543:9): [True: 26.9k, False: 185k]
  ------------------
  544|  26.9k|        if (out_len < 2) {
  ------------------
  |  Branch (544:13): [True: 0, False: 26.9k]
  ------------------
  545|       |            // Not enough space to hold "0" and \0.
  546|      0|            return false;
  547|      0|        }
  548|  26.9k|        out[0] = '0';
  549|  26.9k|        out[1] = '\0';
  550|  26.9k|        return true;
  551|  26.9k|    }
  552|       |
  553|       |    // Swap the byte order of each uint16_t element in the array
  554|  3.15M|    for (int i = 0; i < 16; i++) {
  ------------------
  |  Branch (554:21): [True: 2.97M, False: 185k]
  ------------------
  555|  2.97M|        n[i] = __builtin_bswap16(n[i]);
  556|  2.97M|    }
  557|       |
  558|   185k|    size_t result_len = 0;
  559|   185k|    int pos = out_len;
  560|       |
  561|   777k|    while (!allzeroes(n, sizeof(n))) {
  ------------------
  |  Branch (561:12): [True: 591k, False: 185k]
  ------------------
  562|   591k|        if (pos == 0) {
  ------------------
  |  Branch (562:13): [True: 0, False: 591k]
  ------------------
  563|      0|            return false;
  564|      0|        }
  565|   591k|        pos--;
  566|   591k|        result_len++;
  567|       |
  568|   591k|        uint32_t carry = 0;
  569|  10.0M|        for (int i = 0; i < 16; i++) {
  ------------------
  |  Branch (569:25): [True: 9.46M, False: 591k]
  ------------------
  570|  9.46M|            uint32_t digit = ((carry << 16) | n[i]);
  571|  9.46M|            n[i] = digit / 10;
  572|  9.46M|            carry = digit % 10;
  573|  9.46M|        }
  574|   591k|        out[pos] = '0' + carry;
  575|   591k|    }
  576|       |
  577|   185k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (577:9): [True: 0, False: 185k]
  ------------------
  578|       |        // Not enough space to hold the result and \0.
  579|      0|        return false;
  580|      0|    }
  581|       |
  582|       |    // Move the result to the beginning of the output buffer
  583|   185k|    memmove(out, out + pos, result_len);
  584|   185k|    out[result_len] = '\0';
  585|       |
  586|       |    // Clear the rest of the 'out' array
  587|       |    // Generally speaking, this is unnecessary,
  588|       |    // but handler_get_app_configuration requires that it must be followed by `\0`.
  589|   185k|    if (result_len + 1 < out_len) {
  ------------------
  |  Branch (589:9): [True: 185k, False: 0]
  ------------------
  590|   185k|        memset(out + result_len + 1, 0, out_len - result_len - 1);
  591|   185k|    }
  592|   185k|    return true;
  593|   185k|}

