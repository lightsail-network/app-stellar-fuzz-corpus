buffer_can_read:
   28|  12.9M|{
   29|  12.9M|    return buffer->size - buffer->offset >= n;
   30|  12.9M|}
buffer_seek_cur:
   44|  23.1M|{
   45|  23.1M|    if (buffer->offset + offset < buffer->offset ||  // overflow
  ------------------
  |  Branch (45:9): [True: 0, False: 23.1M]
  ------------------
   46|  23.1M|        buffer->offset + offset > buffer->size) {    // exceed buffer size
  ------------------
  |  Branch (46:9): [True: 44, False: 23.1M]
  ------------------
   47|     44|        return false;
   48|     44|    }
   49|       |
   50|  23.1M|    buffer->offset += offset;
   51|       |
   52|  23.1M|    return true;
   53|  23.1M|}
buffer_read_u32:
   97|  12.8M|{
   98|  12.8M|    if (!buffer_can_read(buffer, 4)) {
  ------------------
  |  Branch (98:9): [True: 517, False: 12.8M]
  ------------------
   99|    517|        *value = 0;
  100|       |
  101|    517|        return false;
  102|    517|    }
  103|       |
  104|  12.8M|    *value = ((endianness == BE) ? read_u32_be(buffer->ptr, buffer->offset)
  ------------------
  |  Branch (104:15): [True: 12.8M, False: 0]
  ------------------
  105|  12.8M|                                 : read_u32_le(buffer->ptr, buffer->offset));
  106|       |
  107|  12.8M|    buffer_seek_cur(buffer, 4);
  108|       |
  109|  12.8M|    return true;
  110|  12.8M|}
buffer_read_u64:
  113|  2.89k|{
  114|  2.89k|    if (!buffer_can_read(buffer, 8)) {
  ------------------
  |  Branch (114:9): [True: 10, False: 2.88k]
  ------------------
  115|     10|        *value = 0;
  116|       |
  117|     10|        return false;
  118|     10|    }
  119|       |
  120|  2.88k|    *value = ((endianness == BE) ? read_u64_be(buffer->ptr, buffer->offset)
  ------------------
  |  Branch (120:15): [True: 2.88k, False: 0]
  ------------------
  121|  2.88k|                                 : read_u64_le(buffer->ptr, buffer->offset));
  122|       |
  123|  2.88k|    buffer_seek_cur(buffer, 8);
  124|       |
  125|  2.88k|    return true;
  126|  2.89k|}

format_hex:
  157|    219|{
  158|    219|    if (out_len < 2 * in_len + 1) {
  ------------------
  |  Branch (158:9): [True: 0, False: 219]
  ------------------
  159|      0|        return -1;
  160|      0|    }
  161|       |
  162|    219|    const char hex[]   = "0123456789ABCDEF";
  163|    219|    size_t     i       = 0;
  164|    219|    int        written = 0;
  165|       |
  166|  7.55k|    while (i < in_len && (i * 2 + (2 + 1)) <= out_len) {
  ------------------
  |  Branch (166:12): [True: 7.34k, False: 219]
  |  Branch (166:26): [True: 7.34k, False: 0]
  ------------------
  167|  7.34k|        uint8_t high_nibble = (in[i] & 0xF0) >> 4;
  168|  7.34k|        *out                = hex[high_nibble];
  169|  7.34k|        out++;
  170|       |
  171|  7.34k|        uint8_t low_nibble = in[i] & 0x0F;
  172|  7.34k|        *out               = hex[low_nibble];
  173|  7.34k|        out++;
  174|       |
  175|  7.34k|        i++;
  176|  7.34k|        written += 2;
  177|  7.34k|    }
  178|       |
  179|    219|    *out = '\0';
  180|       |
  181|    219|    return written + 1;
  182|    219|}

read_u32_be:
   27|  12.8M|{
   28|  12.8M|    return (uint32_t) ptr[offset + 0] << 24 |  //
   29|  12.8M|           (uint32_t) ptr[offset + 1] << 16 |  //
   30|  12.8M|           (uint32_t) ptr[offset + 2] << 8 |   //
   31|  12.8M|           (uint32_t) ptr[offset + 3] << 0;
   32|  12.8M|}
read_u64_be:
   35|  2.88k|{
   36|  2.88k|    return (uint64_t) ptr[offset + 0] << 56 |  //
   37|  2.88k|           (uint64_t) ptr[offset + 1] << 48 |  //
   38|  2.88k|           (uint64_t) ptr[offset + 2] << 40 |  //
   39|  2.88k|           (uint64_t) ptr[offset + 3] << 32 |  //
   40|  2.88k|           (uint64_t) ptr[offset + 4] << 24 |  //
   41|  2.88k|           (uint64_t) ptr[offset + 5] << 16 |  //
   42|  2.88k|           (uint64_t) ptr[offset + 6] << 8 |   //
   43|  2.88k|           (uint64_t) ptr[offset + 7] << 0;
   44|  2.88k|}

LLVMFuzzerTestOneInput:
   23|  2.53k|int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   24|  2.53k|    envelope_t envelope;
   25|  2.53k|    bool data_exists = true;
   26|  2.53k|    bool is_op_header = false;
   27|  2.53k|    char detail_caption[DETAIL_CAPTION_MAX_LENGTH];
   28|  2.53k|    char detail_value[DETAIL_VALUE_MAX_LENGTH];
   29|  2.53k|    uint8_t signing_key[] = {0xe9, 0x33, 0x88, 0xbb, 0xfd, 0x2f, 0xbd, 0x11, 0x80, 0x6d, 0xd0,
   30|  2.53k|                             0xbd, 0x59, 0xce, 0xa9, 0x7,  0x9e, 0x7c, 0xc7, 0xc,  0xe7, 0xb1,
   31|  2.53k|                             0xe1, 0x54, 0xf1, 0x14, 0xcd, 0xfe, 0x4e, 0x46, 0x6e, 0xcd};
   32|       |
   33|  2.53k|    memset(&envelope, 0, sizeof(envelope_t));
   34|  2.53k|    if (parse_transaction_envelope(data, size, &envelope)) {
  ------------------
  |  Branch (34:9): [True: 815, False: 1.71k]
  ------------------
   35|    815|        formatter_data_t tx_fdata = {
   36|    815|            .raw_data = data,
   37|    815|            .raw_data_len = size,
   38|    815|            .envelope = &envelope,
   39|    815|            .caption = detail_caption,
   40|    815|            .value = detail_value,
   41|    815|            .signing_key = signing_key,
   42|    815|            .caption_len = DETAIL_CAPTION_MAX_LENGTH,
  ------------------
  |  |    9|    815|#define DETAIL_CAPTION_MAX_LENGTH 21
  ------------------
   43|    815|            .value_len = DETAIL_VALUE_MAX_LENGTH,
  ------------------
  |  |   10|    815|#define DETAIL_VALUE_MAX_LENGTH   105
  ------------------
   44|    815|            .display_sequence = true,
   45|    815|        };
   46|    815|        reset_formatter();
   47|       |
   48|  26.4k|        while (true) {
   49|  26.4k|            if (!get_next_data(&tx_fdata, true, &data_exists, &is_op_header)) {
  ------------------
  |  Branch (49:17): [True: 39, False: 26.3k]
  ------------------
   50|     39|                break;
   51|     39|            }
   52|       |
   53|  26.3k|            if (!data_exists) {
  ------------------
  |  Branch (53:17): [True: 776, False: 25.6k]
  ------------------
   54|    776|                break;
   55|    776|            }
   56|  26.3k|        }
   57|    815|    }
   58|       |
   59|  2.53k|    memset(&envelope, 0, sizeof(envelope_t));
   60|  2.53k|    if (parse_soroban_authorization_envelope(data, size, &envelope)) {
  ------------------
  |  Branch (60:9): [True: 386, False: 2.14k]
  ------------------
   61|    386|        formatter_data_t auth_fdata = {
   62|    386|            .raw_data = data,
   63|    386|            .raw_data_len = size,
   64|    386|            .envelope = &envelope,
   65|    386|            .caption = detail_caption,
   66|    386|            .value = detail_value,
   67|    386|            .signing_key = signing_key,
   68|    386|            .caption_len = DETAIL_CAPTION_MAX_LENGTH,
  ------------------
  |  |    9|    386|#define DETAIL_CAPTION_MAX_LENGTH 21
  ------------------
   69|    386|            .value_len = DETAIL_VALUE_MAX_LENGTH,
  ------------------
  |  |   10|    386|#define DETAIL_VALUE_MAX_LENGTH   105
  ------------------
   70|    386|            .display_sequence = true,
   71|    386|            .plugin_check_presence = &plugin_check_presence,
   72|    386|            .plugin_init_contract = &plugin_init_contract,
   73|    386|            .plugin_query_data_pair_count = &plugin_query_data_pair_count,
   74|    386|            .plugin_query_data_pair = &plugin_query_data_pair,
   75|    386|        };
   76|       |
   77|    386|        reset_formatter();
   78|       |
   79|  5.67k|        while (true) {
   80|  5.67k|            if (!get_next_data(&auth_fdata, true, &data_exists, &is_op_header)) {
  ------------------
  |  Branch (80:17): [True: 94, False: 5.58k]
  ------------------
   81|     94|                break;
   82|     94|            }
   83|       |
   84|  5.58k|            if (!data_exists) {
  ------------------
  |  Branch (84:17): [True: 292, False: 5.29k]
  ------------------
   85|    292|                break;
   86|    292|            }
   87|  5.58k|        }
   88|    386|    }
   89|       |
   90|  2.53k|    return 0;
   91|  2.53k|}
fuzz_tx.c:plugin_check_presence:
   93|  1.44k|static bool plugin_check_presence(const uint8_t *contract_address) {
   94|  1.44k|    uint8_t expected[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   95|  1.44k|                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   96|  1.44k|                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
   97|  1.44k|    return memcmp(contract_address, expected, 32) == 0;
   98|  1.44k|}
fuzz_tx.c:plugin_init_contract:
  100|    157|stellar_plugin_result_t plugin_init_contract(const uint8_t *contract_address) {
  101|       |    // Build-in token plugin
  102|    157|    if (plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (102:9): [True: 157, False: 0]
  ------------------
  103|    157|        return STELLAR_PLUGIN_RESULT_OK;
  104|    157|    }
  105|      0|    return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  106|    157|}
fuzz_tx.c:plugin_query_data_pair_count:
  109|    157|                                                     uint8_t *data_pair_count) {
  110|       |    // Build-in token plugin
  111|    157|    if (plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (111:9): [True: 157, False: 0]
  ------------------
  112|    157|        *data_pair_count = 3;
  113|    157|        return STELLAR_PLUGIN_RESULT_OK;
  114|    157|    }
  115|      0|    return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  116|    157|}
fuzz_tx.c:plugin_query_data_pair:
  123|    471|                                               uint8_t value_len) {
  124|    471|    if (!plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (124:9): [True: 0, False: 471]
  ------------------
  125|      0|        return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  126|      0|    }
  127|    471|    switch (data_pair_index) {
  128|    157|        case 0:
  ------------------
  |  Branch (128:9): [True: 157, False: 314]
  ------------------
  129|    157|            strncpy(caption, "caption 0", caption_len);
  130|    157|            strncpy(value, "value 0", value_len);
  131|    157|            break;
  132|    157|        case 1:
  ------------------
  |  Branch (132:9): [True: 157, False: 314]
  ------------------
  133|    157|            strncpy(caption, "caption 1", caption_len);
  134|    157|            strncpy(value, "value 1", value_len);
  135|    157|            break;
  136|    157|        case 2:
  ------------------
  |  Branch (136:9): [True: 157, False: 314]
  ------------------
  137|    157|            strncpy(caption, "caption 2", caption_len);
  138|    157|            strncpy(value, "value 2", value_len);
  139|    157|            break;
  140|      0|        default:
  ------------------
  |  Branch (140:9): [True: 0, False: 471]
  ------------------
  141|      0|            return STELLAR_PLUGIN_RESULT_ERROR;
  142|    471|    }
  143|    471|    return STELLAR_PLUGIN_RESULT_OK;
  144|    471|}

base32_encode:
   64|  6.48k|int base32_encode(const uint8_t *data, int length, uint8_t *result, int buf_size) {
   65|  6.48k|    if (length < 0 || length > (1 << 28)) {
  ------------------
  |  Branch (65:9): [True: 0, False: 6.48k]
  |  Branch (65:23): [True: 0, False: 6.48k]
  ------------------
   66|      0|        return -1;
   67|      0|    }
   68|  6.48k|    int count = 0;
   69|  6.48k|    if (length > 0) {
  ------------------
  |  Branch (69:9): [True: 6.48k, False: 0]
  ------------------
   70|  6.48k|        uint32_t buffer = data[0];
   71|  6.48k|        int next = 1;
   72|  6.48k|        int bits_left = 8;
   73|   382k|        while (count < buf_size && (bits_left > 0 || next < length)) {
  ------------------
  |  Branch (73:16): [True: 375k, False: 6.24k]
  |  Branch (73:37): [True: 335k, False: 40.7k]
  |  Branch (73:54): [True: 40.5k, False: 240]
  ------------------
   74|   375k|            if (bits_left < 5) {
  ------------------
  |  Branch (74:17): [True: 228k, False: 147k]
  ------------------
   75|   228k|                if (next < length) {
  ------------------
  |  Branch (75:21): [True: 228k, False: 238]
  ------------------
   76|   228k|                    buffer <<= 8;
   77|   228k|                    buffer |= data[next++] & 0xFF;
   78|   228k|                    bits_left += 8;
   79|   228k|                } else {
   80|    238|                    int pad = 5 - bits_left;
   81|    238|                    buffer <<= pad;
   82|    238|                    bits_left += pad;
   83|    238|                }
   84|   228k|            }
   85|   375k|            int index = 0x1F & (buffer >> (bits_left - 5));
   86|   375k|            bits_left -= 5;
   87|   375k|            result[count++] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"[index];
   88|   375k|        }
   89|  6.48k|    }
   90|  6.48k|    if (count < buf_size) {
  ------------------
  |  Branch (90:9): [True: 240, False: 6.24k]
  ------------------
   91|    240|        result[count] = '\000';
   92|    240|    }
   93|  6.48k|    return count;
   94|  6.48k|}

base64_encode:
   11|     18|bool base64_encode(const uint8_t *data, size_t in_len, char *out, size_t out_len) {
   12|     18|    size_t encoded_len = 4 * ((in_len + 2) / 3);
   13|     18|    if (encoded_len > out_len) {
  ------------------
  |  Branch (13:9): [True: 0, False: 18]
  ------------------
   14|      0|        return false;
   15|      0|    }
   16|       |
   17|     86|    for (unsigned int i = 0, j = 0; i < in_len;) {
  ------------------
  |  Branch (17:37): [True: 68, False: 18]
  ------------------
   18|     68|        uint32_t octet_a = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (18:28): [True: 68, False: 0]
  ------------------
   19|     68|        uint32_t octet_b = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (19:28): [True: 62, False: 6]
  ------------------
   20|     68|        uint32_t octet_c = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (20:28): [True: 56, False: 12]
  ------------------
   21|       |
   22|     68|        uint32_t triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;
   23|       |
   24|     68|        out[j++] = BASE64_ALPHABET[(triple >> 3 * 6) & 0x3F];
   25|     68|        out[j++] = BASE64_ALPHABET[(triple >> 2 * 6) & 0x3F];
   26|     68|        out[j++] = BASE64_ALPHABET[(triple >> 1 * 6) & 0x3F];
   27|     68|        out[j++] = BASE64_ALPHABET[(triple >> 0 * 6) & 0x3F];
   28|     68|    }
   29|       |
   30|     36|    for (int i = 0; i < BASE64_MOD_TABLE[in_len % 3]; i++) {
  ------------------
  |  Branch (30:21): [True: 18, False: 18]
  ------------------
   31|     18|        out[encoded_len - 1 - i] = '=';
   32|     18|    }
   33|       |
   34|     18|    out[encoded_len] = '\0';
   35|     18|    return true;
   36|     18|}

reset_formatter:
 2427|  1.20k|void reset_formatter(void) {
 2428|  1.20k|    explicit_bzero(formatter_stack, sizeof(formatter_stack));
 2429|  1.20k|    formatter_index = 0;
 2430|  1.20k|    current_data_index = 0;
 2431|  1.20k|}
get_next_data:
 2433|  32.1k|bool get_next_data(formatter_data_t *fdata, bool forward, bool *data_exists, bool *is_op_header) {
 2434|  32.1k|    if (current_data_index == 0 && formatter_index == 0 && !forward) {
  ------------------
  |  Branch (2434:9): [True: 9.82k, False: 22.2k]
  |  Branch (2434:36): [True: 1.20k, False: 8.62k]
  |  Branch (2434:60): [True: 0, False: 1.20k]
  ------------------
 2435|      0|        return false;
 2436|      0|    }
 2437|  32.1k|    explicit_bzero(fdata->caption, fdata->caption_len);
 2438|  32.1k|    explicit_bzero(fdata->value, fdata->value_len);
 2439|  32.1k|    *is_op_header = false;
 2440|  32.1k|    uint8_t total_data = get_data_count(fdata);
 2441|       |    // printf("current_data_index: %d, formatter_index: %d\n", current_data_index,
 2442|       |    // formatter_index);
 2443|  32.1k|    if (forward) {
  ------------------
  |  Branch (2443:9): [True: 32.1k, False: 0]
  ------------------
 2444|  32.1k|        if (current_data_index == 0 && formatter_index == 0) {
  ------------------
  |  Branch (2444:13): [True: 9.82k, False: 22.2k]
  |  Branch (2444:40): [True: 1.20k, False: 8.62k]
  ------------------
 2445|  1.20k|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|  1.20k|    {                           \
  |  |   31|  1.20k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.20k]
  |  |  ------------------
  |  |   32|  1.20k|    }
  ------------------
 2446|  1.20k|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2446:17): [True: 0, False: 1.20k]
  ------------------
 2447|      0|                return false;
 2448|      0|            }
 2449|  1.20k|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|  1.20k|    {                           \
  |  |   31|  1.20k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.20k]
  |  |  ------------------
  |  |   32|  1.20k|    }
  ------------------
 2450|  1.20k|            *data_exists = true;
 2451|  30.9k|        } else if (current_data_index < total_data - 1 &&
  ------------------
  |  Branch (2451:20): [True: 22.2k, False: 8.65k]
  ------------------
 2452|  30.9k|                   formatter_stack[formatter_index - 1] == NULL) {
  ------------------
  |  Branch (2452:20): [True: 5.67k, False: 16.5k]
  ------------------
 2453|  5.67k|            current_data_index++;
 2454|  5.67k|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|  5.67k|    {                           \
  |  |   31|  5.67k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.67k]
  |  |  ------------------
  |  |   32|  5.67k|    }
  ------------------
 2455|  5.67k|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2455:17): [True: 0, False: 5.67k]
  ------------------
 2456|      0|                return false;
 2457|      0|            }
 2458|  5.67k|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|  5.67k|    {                           \
  |  |   31|  5.67k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 2, False: 5.67k]
  |  |  ------------------
  |  |   32|  5.67k|    }
  ------------------
 2459|  5.67k|            *is_op_header = true;
 2460|  5.67k|            *data_exists = true;
 2461|  25.2k|        } else if (current_data_index == total_data - 1 &&
  ------------------
  |  Branch (2461:20): [True: 8.65k, False: 16.5k]
  ------------------
 2462|  25.2k|                   formatter_stack[formatter_index - 1] == NULL) {
  ------------------
  |  Branch (2462:20): [True: 1.06k, False: 7.58k]
  ------------------
 2463|  1.06k|            formatter_index++;  // we can back from the approve page
 2464|  1.06k|            *data_exists = false;
 2465|  24.1k|        } else {
 2466|  24.1k|            FORMATTER_CHECK(formatter_stack[formatter_index - 1](fdata));
  ------------------
  |  |   30|  24.1k|    {                           \
  |  |   31|  24.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 131, False: 24.0k]
  |  |  ------------------
  |  |   32|  24.1k|    }
  ------------------
 2467|  24.0k|            *data_exists = true;
 2468|  24.0k|        }
 2469|  32.1k|    } else {
 2470|      0|        if (current_data_index == 0 && formatter_index == 2) {
  ------------------
  |  Branch (2470:13): [True: 0, False: 0]
  |  Branch (2470:40): [True: 0, False: 0]
  ------------------
 2471|      0|            formatter_index = 0;
 2472|      0|            *data_exists = false;
 2473|      0|        } else if (current_data_index > 0 && formatter_index == 2) {
  ------------------
  |  Branch (2473:20): [True: 0, False: 0]
  |  Branch (2473:46): [True: 0, False: 0]
  ------------------
 2474|      0|            current_data_index -= 1;
 2475|      0|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2476|      0|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2476:17): [True: 0, False: 0]
  ------------------
 2477|      0|                return false;
 2478|      0|            }
 2479|      0|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2480|      0|            *data_exists = true;
 2481|      0|            if (current_data_index > 0) {
  ------------------
  |  Branch (2481:17): [True: 0, False: 0]
  ------------------
 2482|      0|                *is_op_header = true;
 2483|      0|            }
 2484|      0|        } else {
 2485|      0|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2486|      0|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2486:17): [True: 0, False: 0]
  ------------------
 2487|      0|                return false;
 2488|      0|            }
 2489|      0|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2490|      0|            *data_exists = true;
 2491|      0|            if (current_data_index > 0) {
  ------------------
  |  Branch (2491:17): [True: 0, False: 0]
  ------------------
 2492|      0|                *is_op_header = true;
 2493|      0|            }
 2494|      0|        }
 2495|      0|    }
 2496|       |
 2497|  31.9k|    return true;
 2498|  32.1k|}
formatter.c:get_data_count:
 2419|  32.1k|static uint8_t get_data_count(formatter_data_t *fdata) {
 2420|  32.1k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2420:9): [True: 5.67k, False: 26.4k]
  ------------------
 2421|  5.67k|        return 1;
 2422|  5.67k|    }
 2423|  26.4k|    uint8_t op_cnt = fdata->envelope->tx_details.tx.operations_count;
 2424|  26.4k|    return op_cnt + 1;
 2425|  32.1k|}
formatter.c:format:
 2397|  6.87k|static bool format(formatter_data_t *fdata, uint8_t data_index) {
 2398|  6.87k|    explicit_bzero(formatter_stack, sizeof(formatter_stack));
 2399|  6.87k|    formatter_index = 0;
 2400|  6.87k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2400:9): [True: 386, False: 6.48k]
  ------------------
 2401|    386|        return format_soroban_authorization(fdata);
 2402|  6.48k|    } else {
 2403|  6.48k|        if (data_index == 0) {
  ------------------
  |  Branch (2403:13): [True: 815, False: 5.67k]
  ------------------
 2404|    815|            return format_transaction_info(fdata);
 2405|  5.67k|        } else {
 2406|  5.67k|            uint8_t op_index = data_index - 1;
 2407|  5.67k|            if (!parse_transaction_operation(fdata->raw_data,
  ------------------
  |  Branch (2407:17): [True: 0, False: 5.67k]
  ------------------
 2408|  5.67k|                                             fdata->raw_data_len,
 2409|  5.67k|                                             fdata->envelope,
 2410|  5.67k|                                             op_index)) {
 2411|      0|                return false;
 2412|  5.67k|            };
 2413|  5.67k|            FORMATTER_CHECK(push_to_formatter_stack(&format_confirm_operation))
  ------------------
  |  |   30|  5.67k|    {                           \
  |  |   31|  5.67k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.67k]
  |  |  ------------------
  |  |   32|  5.67k|    }
  ------------------
 2414|  5.67k|        }
 2415|  6.48k|    }
 2416|  5.67k|    return true;
 2417|  6.87k|}
formatter.c:format_soroban_authorization:
 2388|    386|static bool format_soroban_authorization(formatter_data_t *fdata) {
 2389|    386|    if (fdata->envelope->network != 0) {
  ------------------
  |  Branch (2389:9): [True: 376, False: 10]
  ------------------
 2390|    376|        FORMATTER_CHECK(push_to_formatter_stack(&format_network))
  ------------------
  |  |   30|    376|    {                           \
  |  |   31|    376|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 376]
  |  |  ------------------
  |  |   32|    376|    }
  ------------------
 2391|    376|    } else {
 2392|     10|        FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_nonce))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
 2393|     10|    }
 2394|    386|    return true;
 2395|    386|}
formatter.c:format_network:
 2368|  1.17k|static bool format_network(formatter_data_t *fdata) {
 2369|  1.17k|    STRLCPY(fdata->caption, "Network", fdata->caption_len);
  ------------------
  |  |   35|  1.17k|    {                                         \
  |  |   36|  1.17k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.17k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.17k]
  |  |  ------------------
  |  |   38|  1.17k|    }
  ------------------
 2370|  1.17k|    STRLCPY(fdata->value, (char *) PIC(NETWORK_NAMES[fdata->envelope->network]), fdata->value_len);
  ------------------
  |  |   35|  1.17k|    {                                         \
  |  |   36|  1.17k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.17k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.17k]
  |  |  ------------------
  |  |   38|  1.17k|    }
  ------------------
 2371|  1.17k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2371:9): [True: 376, False: 798]
  ------------------
 2372|    376|        FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_nonce))
  ------------------
  |  |   30|    376|    {                           \
  |  |   31|    376|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 376]
  |  |  ------------------
  |  |   32|    376|    }
  ------------------
 2373|    798|    } else {
 2374|    798|        return get_tx_details_formatter(fdata);
 2375|    798|    }
 2376|    376|    return true;
 2377|  1.17k|}
formatter.c:get_tx_details_formatter:
 2327|    815|static bool get_tx_details_formatter(formatter_data_t *fdata) {
 2328|    815|    if (fdata->envelope->type == ENVELOPE_TYPE_TX_FEE_BUMP) {
  ------------------
  |  Branch (2328:9): [True: 10, False: 805]
  ------------------
 2329|     10|        FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_details))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
 2330|     10|    }
 2331|       |
 2332|    815|    if (fdata->envelope->type == ENVELOPE_TYPE_TX) {
  ------------------
  |  Branch (2332:9): [True: 805, False: 10]
  ------------------
 2333|    805|        if (fdata->envelope->tx_details.tx.memo.type != MEMO_NONE) {
  ------------------
  |  Branch (2333:13): [True: 21, False: 784]
  ------------------
 2334|     21|            FORMATTER_CHECK(push_to_formatter_stack(&format_memo))
  ------------------
  |  |   30|     21|    {                           \
  |  |   31|     21|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 21]
  |  |  ------------------
  |  |   32|     21|    }
  ------------------
 2335|    784|        } else {
 2336|    784|            FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|    784|    {                           \
  |  |   31|    784|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 784]
  |  |  ------------------
  |  |   32|    784|    }
  ------------------
 2337|    784|        }
 2338|    805|    }
 2339|       |
 2340|    815|    return true;
 2341|    815|}
formatter.c:format_fee_bump_transaction_details:
 2319|     10|static bool format_fee_bump_transaction_details(formatter_data_t *fdata) {
 2320|     10|    (void) fdata;
 2321|     10|    STRLCPY(fdata->caption, "Fee Bump", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
 2322|     10|    STRLCPY(fdata->value, "Transaction Details", fdata->value_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
 2323|     10|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_source))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
 2324|     10|    return true;
 2325|     10|}
formatter.c:format_fee_bump_transaction_source:
 2296|     10|static bool format_fee_bump_transaction_source(formatter_data_t *fdata) {
 2297|     10|    STRLCPY(fdata->caption, "Fee Source", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
 2298|     10|    if (fdata->envelope->type == ENVELOPE_TYPE_TX_FEE_BUMP &&
  ------------------
  |  Branch (2298:9): [True: 10, False: 0]
  ------------------
 2299|     10|        fdata->envelope->tx_details.fee_bump_tx.fee_source.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (2299:9): [True: 9, False: 1]
  ------------------
 2300|     10|        memcmp(fdata->envelope->tx_details.fee_bump_tx.fee_source.ed25519,
  ------------------
  |  Branch (2300:9): [True: 5, False: 4]
  ------------------
 2301|      9|               fdata->signing_key,
 2302|      9|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|      9|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 2303|      5|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.fee_bump_tx.fee_source,
  ------------------
  |  |   30|      5|    {                           \
  |  |   31|      5|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   32|      5|    }
  ------------------
 2304|      5|                                            fdata->value,
 2305|      5|                                            fdata->value_len,
 2306|      5|                                            6,
 2307|      5|                                            6))
 2308|      5|    } else {
 2309|      5|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.fee_bump_tx.fee_source,
  ------------------
  |  |   30|      5|    {                           \
  |  |   31|      5|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   32|      5|    }
  ------------------
 2310|      5|                                            fdata->value,
 2311|      5|                                            fdata->value_len,
 2312|      5|                                            0,
 2313|      5|                                            0))
 2314|      5|    }
 2315|     10|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_fee))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
 2316|     10|    return true;
 2317|     10|}
formatter.c:format_fee_bump_transaction_fee:
 2284|     10|static bool format_fee_bump_transaction_fee(formatter_data_t *fdata) {
 2285|     10|    STRLCPY(fdata->caption, "Max Fee", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
 2286|     10|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
 2287|     10|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.fee_bump_tx.fee,
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
 2288|     10|                                 &asset,
 2289|     10|                                 fdata->envelope->network,
 2290|     10|                                 fdata->value,
 2291|     10|                                 fdata->value_len))
 2292|     10|    FORMATTER_CHECK(push_to_formatter_stack(&format_transaction_details))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
 2293|     10|    return true;
 2294|     10|}
formatter.c:format_transaction_details:
  285|     10|static bool format_transaction_details(formatter_data_t *fdata) {
  286|     10|    switch (fdata->envelope->type) {
  287|     10|        case ENVELOPE_TYPE_TX_FEE_BUMP:
  ------------------
  |  Branch (287:9): [True: 10, False: 0]
  ------------------
  288|     10|            STRLCPY(fdata->caption, "InnerTx", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
  289|     10|            break;
  290|      0|        case ENVELOPE_TYPE_TX:
  ------------------
  |  Branch (290:9): [True: 0, False: 10]
  ------------------
  291|      0|            STRLCPY(fdata->caption, "Transaction", fdata->caption_len);
  ------------------
  |  |   35|      0|    {                                         \
  |  |   36|      0|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      0|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   38|      0|    }
  ------------------
  292|      0|            break;
  293|      0|        default:
  ------------------
  |  Branch (293:9): [True: 0, False: 10]
  ------------------
  294|      0|            return false;
  295|     10|    }
  296|     10|    STRLCPY(fdata->value, "Details", fdata->value_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
  297|     10|    if (fdata->envelope->tx_details.tx.memo.type != MEMO_NONE) {
  ------------------
  |  Branch (297:9): [True: 2, False: 8]
  ------------------
  298|      2|        FORMATTER_CHECK(push_to_formatter_stack(&format_memo))
  ------------------
  |  |   30|      2|    {                           \
  |  |   31|      2|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   32|      2|    }
  ------------------
  299|      8|    } else {
  300|      8|        FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
  301|      8|    }
  302|     10|    return true;
  303|     10|}
formatter.c:format_memo:
  242|     23|static bool format_memo(formatter_data_t *fdata) {
  243|     23|    memo_t *memo = &fdata->envelope->tx_details.tx.memo;
  244|     23|    switch (memo->type) {
  245|      2|        case MEMO_ID: {
  ------------------
  |  Branch (245:9): [True: 2, False: 21]
  ------------------
  246|      2|            STRLCPY(fdata->caption, "Memo ID", fdata->caption_len);
  ------------------
  |  |   35|      2|    {                                         \
  |  |   36|      2|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      2|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   38|      2|    }
  ------------------
  247|      2|            FORMATTER_CHECK(print_uint64_num(memo->id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|      2|    {                           \
  |  |   31|      2|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   32|      2|    }
  ------------------
  248|      2|            break;
  249|      2|        }
  250|     19|        case MEMO_TEXT: {
  ------------------
  |  Branch (250:9): [True: 19, False: 4]
  ------------------
  251|     19|            STRLCPY(fdata->caption, "Memo Text", fdata->caption_len);
  ------------------
  |  |   35|     19|    {                                         \
  |  |   36|     19|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     19|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   38|     19|    }
  ------------------
  252|     19|            if (is_printable_binary(memo->text.text, memo->text.text_size)) {
  ------------------
  |  Branch (252:17): [True: 4, False: 15]
  ------------------
  253|      4|                FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  254|      4|                                             fdata->value_len,
  255|      4|                                             memo->text.text,
  256|      4|                                             memo->text.text_size))
  257|     15|            } else {
  258|     15|                STRLCPY(fdata->value, "Base64: ", fdata->value_len)
  ------------------
  |  |   35|     15|    {                                         \
  |  |   36|     15|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     15|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   38|     15|    }
  ------------------
  259|     15|                FORMATTER_CHECK(base64_encode(memo->text.text,
  ------------------
  |  |   30|     15|    {                           \
  |  |   31|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   32|     15|    }
  ------------------
  260|     15|                                              memo->text.text_size,
  261|     15|                                              fdata->value + strlen(fdata->value),
  262|     15|                                              fdata->value_len - strlen(fdata->value)))
  263|     15|            }
  264|     19|            break;
  265|     19|        }
  266|     19|        case MEMO_HASH: {
  ------------------
  |  Branch (266:9): [True: 1, False: 22]
  ------------------
  267|      1|            STRLCPY(fdata->caption, "Memo Hash", fdata->caption_len);
  ------------------
  |  |   35|      1|    {                                         \
  |  |   36|      1|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      1|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   38|      1|    }
  ------------------
  268|      1|            FORMATTER_CHECK(
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
  269|      1|                print_binary(memo->hash, HASH_SIZE, fdata->value, fdata->value_len, 0, 0))
  270|      1|            break;
  271|      1|        }
  272|      1|        case MEMO_RETURN: {
  ------------------
  |  Branch (272:9): [True: 1, False: 22]
  ------------------
  273|      1|            STRLCPY(fdata->caption, "Memo Return", fdata->caption_len);
  ------------------
  |  |   35|      1|    {                                         \
  |  |   36|      1|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      1|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   38|      1|    }
  ------------------
  274|      1|            FORMATTER_CHECK(
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
  275|      1|                print_binary(memo->hash, HASH_SIZE, fdata->value, fdata->value_len, 0, 0))
  276|      1|            break;
  277|      1|        }
  278|      1|        default:
  ------------------
  |  Branch (278:9): [True: 0, False: 23]
  ------------------
  279|      0|            return false;
  280|     23|    }
  281|     23|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|     23|    {                           \
  |  |   31|     23|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 23]
  |  |  ------------------
  |  |   32|     23|    }
  ------------------
  282|     23|    return true;
  283|     23|}
formatter.c:format_fee:
  226|    815|static bool format_fee(formatter_data_t *fdata) {
  227|    815|    STRLCPY(fdata->caption, "Max Fee", fdata->caption_len);
  ------------------
  |  |   35|    815|    {                                         \
  |  |   36|    815|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    815|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 815]
  |  |  ------------------
  |  |   38|    815|    }
  ------------------
  228|    815|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
  229|    815|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.fee,
  ------------------
  |  |   30|    815|    {                           \
  |  |   31|    815|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 815]
  |  |  ------------------
  |  |   32|    815|    }
  ------------------
  230|    815|                                 &asset,
  231|    815|                                 fdata->envelope->network,
  232|    815|                                 fdata->value,
  233|    815|                                 fdata->value_len))
  234|    815|    if (fdata->display_sequence) {
  ------------------
  |  Branch (234:9): [True: 815, False: 0]
  ------------------
  235|    815|        FORMATTER_CHECK(push_to_formatter_stack(&format_sequence))
  ------------------
  |  |   30|    815|    {                           \
  |  |   31|    815|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 815]
  |  |  ------------------
  |  |   32|    815|    }
  ------------------
  236|    815|    } else {
  237|      0|        FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds))
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
  238|      0|    }
  239|    815|    return true;
  240|    815|}
formatter.c:format_sequence:
  217|    815|static bool format_sequence(formatter_data_t *fdata) {
  218|    815|    STRLCPY(fdata->caption, "Sequence Num", fdata->caption_len);
  ------------------
  |  |   35|    815|    {                                         \
  |  |   36|    815|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    815|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 815]
  |  |  ------------------
  |  |   38|    815|    }
  ------------------
  219|    815|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.sequence_number,
  ------------------
  |  |   30|    815|    {                           \
  |  |   31|    815|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 815]
  |  |  ------------------
  |  |   32|    815|    }
  ------------------
  220|    815|                                     fdata->value,
  221|    815|                                     fdata->value_len))
  222|    815|    FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds))
  ------------------
  |  |   30|    815|    {                           \
  |  |   31|    815|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 815]
  |  |  ------------------
  |  |   32|    815|    }
  ------------------
  223|    815|    return true;
  224|    815|}
formatter.c:format_time_bounds:
  204|    815|static bool format_time_bounds(formatter_data_t *fdata) {
  205|    815|    if (!fdata->envelope->tx_details.tx.cond.time_bounds_present ||
  ------------------
  |  Branch (205:9): [True: 796, False: 19]
  ------------------
  206|    815|        (fdata->envelope->tx_details.tx.cond.time_bounds.min_time == 0 &&
  ------------------
  |  Branch (206:10): [True: 11, False: 8]
  ------------------
  207|    797|         fdata->envelope->tx_details.tx.cond.time_bounds.max_time == 0)) {
  ------------------
  |  Branch (207:10): [True: 1, False: 10]
  ------------------
  208|    797|        return format_ledger_bounds(fdata);
  209|    797|    } else if (fdata->envelope->tx_details.tx.cond.time_bounds.min_time != 0) {
  ------------------
  |  Branch (209:16): [True: 8, False: 10]
  ------------------
  210|      8|        return format_time_bounds_min_time(fdata);
  211|     10|    } else {
  212|     10|        return format_time_bounds_max_time(fdata);
  213|     10|    }
  214|      0|    return true;
  215|    815|}
formatter.c:format_ledger_bounds:
  168|    811|static bool format_ledger_bounds(formatter_data_t *fdata) {
  169|    811|    if (!fdata->envelope->tx_details.tx.cond.ledger_bounds_present ||
  ------------------
  |  Branch (169:9): [True: 807, False: 4]
  ------------------
  170|    811|        (fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger == 0 &&
  ------------------
  |  Branch (170:10): [True: 2, False: 2]
  ------------------
  171|    808|         fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger == 0)) {
  ------------------
  |  Branch (171:10): [True: 1, False: 1]
  ------------------
  172|    808|        return format_min_seq_num_prepare(fdata);
  173|    808|    } else if (fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger != 0) {
  ------------------
  |  Branch (173:16): [True: 2, False: 1]
  ------------------
  174|      2|        return format_ledger_bounds_min_ledger(fdata);
  175|      2|    } else {
  176|      1|        return format_ledger_bounds_max_ledger(fdata);
  177|      1|    }
  178|      0|    return true;
  179|    811|}
formatter.c:format_min_seq_num_prepare:
  137|    811|static bool format_min_seq_num_prepare(formatter_data_t *fdata) {
  138|    811|    if (!fdata->envelope->tx_details.tx.cond.min_seq_num_present ||
  ------------------
  |  Branch (138:9): [True: 809, False: 2]
  ------------------
  139|    811|        fdata->envelope->tx_details.tx.cond.min_seq_num == 0) {
  ------------------
  |  Branch (139:9): [True: 1, False: 1]
  ------------------
  140|    810|        return format_min_seq_age_prepare(fdata);
  141|    810|    } else {
  142|      1|        return format_min_seq_num(fdata);
  143|      1|    }
  144|    811|}
formatter.c:format_min_seq_age_prepare:
  119|    811|static bool format_min_seq_age_prepare(formatter_data_t *fdata) {
  120|    811|    if (fdata->envelope->tx_details.tx.cond.min_seq_age == 0) {
  ------------------
  |  Branch (120:9): [True: 807, False: 4]
  ------------------
  121|    807|        format_min_seq_ledger_gap_prepare(fdata);
  122|    807|    } else {
  123|      4|        format_min_seq_age(fdata);
  124|      4|    }
  125|    811|    return true;
  126|    811|}
formatter.c:format_min_seq_ledger_gap_prepare:
  102|    811|static bool format_min_seq_ledger_gap_prepare(formatter_data_t *fdata) {
  103|    811|    if (fdata->envelope->tx_details.tx.cond.min_seq_ledger_gap == 0) {
  ------------------
  |  Branch (103:9): [True: 810, False: 1]
  ------------------
  104|    810|        return format_transaction_source(fdata);
  105|    810|    } else {
  106|      1|        return format_min_seq_ledger_gap(fdata);
  107|      1|    }
  108|    811|}
formatter.c:format_transaction_source:
   70|    811|static bool format_transaction_source(formatter_data_t *fdata) {
   71|    811|    STRLCPY(fdata->caption, "Tx Source", fdata->caption_len);
  ------------------
  |  |   35|    811|    {                                         \
  |  |   36|    811|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    811|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 811]
  |  |  ------------------
  |  |   38|    811|    }
  ------------------
   72|    811|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (72:9): [True: 801, False: 10]
  ------------------
   73|    811|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (73:9): [True: 791, False: 10]
  ------------------
   74|    811|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (74:9): [True: 34, False: 757]
  ------------------
   75|    791|               fdata->signing_key,
   76|    791|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|    791|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
   77|     34|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.source_account,
  ------------------
  |  |   30|     34|    {                           \
  |  |   31|     34|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   32|     34|    }
  ------------------
   78|     34|                                            fdata->value,
   79|     34|                                            fdata->value_len,
   80|     34|                                            6,
   81|     34|                                            6))
   82|    777|    } else {
   83|    777|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.source_account,
  ------------------
  |  |   30|    777|    {                           \
  |  |   31|    777|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 777]
  |  |  ------------------
  |  |   32|    777|    }
  ------------------
   84|    777|                                            fdata->value,
   85|    777|                                            fdata->value_len,
   86|    777|                                            0,
   87|    777|                                            0))
   88|    777|    }
   89|    811|    FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|    811|    {                           \
  |  |   31|    811|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 811]
  |  |  ------------------
  |  |   32|    811|    }
  ------------------
   90|    811|    return true;
   91|    811|}
formatter.c:format_min_seq_ledger_gap:
   93|      1|static bool format_min_seq_ledger_gap(formatter_data_t *fdata) {
   94|      1|    STRLCPY(fdata->caption, "Min Seq Ledger Gap", fdata->caption_len);
  ------------------
  |  |   35|      1|    {                                         \
  |  |   36|      1|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      1|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   38|      1|    }
  ------------------
   95|      1|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_ledger_gap,
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
   96|      1|                                     fdata->value,
   97|      1|                                     fdata->value_len))
   98|      1|    FORMATTER_CHECK(push_to_formatter_stack(&format_transaction_source))
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
   99|      1|    return true;
  100|      1|}
formatter.c:format_min_seq_age:
  110|      4|static bool format_min_seq_age(formatter_data_t *fdata) {
  111|      4|    STRLCPY(fdata->caption, "Min Seq Age", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  112|      4|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_age,
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  113|      4|                                     fdata->value,
  114|      4|                                     fdata->value_len))
  115|      4|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_ledger_gap_prepare))
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  116|      4|    return true;
  117|      4|}
formatter.c:format_min_seq_num:
  128|      1|static bool format_min_seq_num(formatter_data_t *fdata) {
  129|      1|    STRLCPY(fdata->caption, "Min Seq Num", fdata->caption_len);
  ------------------
  |  |   35|      1|    {                                         \
  |  |   36|      1|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      1|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   38|      1|    }
  ------------------
  130|      1|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_num,
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
  131|      1|                                     fdata->value,
  132|      1|                                     fdata->value_len))
  133|      1|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_age_prepare))
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
  134|      1|    return true;
  135|      1|}
formatter.c:format_ledger_bounds_min_ledger:
  155|      2|static bool format_ledger_bounds_min_ledger(formatter_data_t *fdata) {
  156|      2|    STRLCPY(fdata->caption, "Ledger Bounds Min", fdata->caption_len);
  ------------------
  |  |   35|      2|    {                                         \
  |  |   36|      2|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      2|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   38|      2|    }
  ------------------
  157|      2|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger,
  ------------------
  |  |   30|      2|    {                           \
  |  |   31|      2|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   32|      2|    }
  ------------------
  158|      2|                                     fdata->value,
  159|      2|                                     fdata->value_len))
  160|      2|    if (fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger != 0) {
  ------------------
  |  Branch (160:9): [True: 1, False: 1]
  ------------------
  161|      1|        FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds_max_ledger))
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
  162|      1|    } else {
  163|      1|        FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_num_prepare))
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
  164|      1|    }
  165|      2|    return true;
  166|      2|}
formatter.c:format_ledger_bounds_max_ledger:
  146|      2|static bool format_ledger_bounds_max_ledger(formatter_data_t *fdata) {
  147|      2|    STRLCPY(fdata->caption, "Ledger Bounds Max", fdata->caption_len);
  ------------------
  |  |   35|      2|    {                                         \
  |  |   36|      2|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      2|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   38|      2|    }
  ------------------
  148|      2|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger,
  ------------------
  |  |   30|      2|    {                           \
  |  |   31|      2|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   32|      2|    }
  ------------------
  149|      2|                                     fdata->value,
  150|      2|                                     fdata->value_len))
  151|      2|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_num_prepare))
  ------------------
  |  |   30|      2|    {                           \
  |  |   31|      2|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   32|      2|    }
  ------------------
  152|      2|    return true;
  153|      2|}
formatter.c:format_time_bounds_min_time:
  190|      8|static bool format_time_bounds_min_time(formatter_data_t *fdata) {
  191|      8|    STRLCPY(fdata->caption, "Valid After (UTC)", fdata->caption_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
  192|      8|    FORMATTER_CHECK(print_time(fdata->envelope->tx_details.tx.cond.time_bounds.min_time,
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 2, False: 6]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
  193|      8|                               fdata->value,
  194|      8|                               fdata->value_len))
  195|       |
  196|      6|    if (fdata->envelope->tx_details.tx.cond.time_bounds.max_time != 0) {
  ------------------
  |  Branch (196:9): [True: 5, False: 1]
  ------------------
  197|      5|        FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds_max_time))
  ------------------
  |  |   30|      5|    {                           \
  |  |   31|      5|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   32|      5|    }
  ------------------
  198|      5|    } else {
  199|      1|        FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds))
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
  200|      1|    }
  201|      6|    return true;
  202|      6|}
formatter.c:format_time_bounds_max_time:
  181|     15|static bool format_time_bounds_max_time(formatter_data_t *fdata) {
  182|     15|    STRLCPY(fdata->caption, "Valid Before (UTC)", fdata->caption_len);
  ------------------
  |  |   35|     15|    {                                         \
  |  |   36|     15|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     15|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   38|     15|    }
  ------------------
  183|     15|    FORMATTER_CHECK(print_time(fdata->envelope->tx_details.tx.cond.time_bounds.max_time,
  ------------------
  |  |   30|     15|    {                           \
  |  |   31|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 2, False: 13]
  |  |  ------------------
  |  |   32|     15|    }
  ------------------
  184|     15|                               fdata->value,
  185|     15|                               fdata->value_len))
  186|     13|    FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds))
  ------------------
  |  |   30|     13|    {                           \
  |  |   31|     13|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 13]
  |  |  ------------------
  |  |   32|     13|    }
  ------------------
  187|     13|    return true;
  188|     13|}
formatter.c:format_soroban_authorization_nonce:
 2353|    386|static bool format_soroban_authorization_nonce(formatter_data_t *fdata) {
 2354|       |    // avoid the root invoke_contract_args be overwritten by the sub-invocation
 2355|    386|    if (!parse_soroban_authorization_envelope(fdata->raw_data,
  ------------------
  |  Branch (2355:9): [True: 0, False: 386]
  ------------------
 2356|    386|                                              fdata->raw_data_len,
 2357|    386|                                              fdata->envelope)) {
 2358|      0|        return false;
 2359|    386|    };
 2360|    386|    STRLCPY(fdata->caption, "Nonce", fdata->caption_len);
  ------------------
  |  |   35|    386|    {                                         \
  |  |   36|    386|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    386|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 386]
  |  |  ------------------
  |  |   38|    386|    }
  ------------------
 2361|    386|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->soroban_authorization.nonce,
  ------------------
  |  |   30|    386|    {                           \
  |  |   31|    386|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 386]
  |  |  ------------------
  |  |   32|    386|    }
  ------------------
 2362|    386|                                     fdata->value,
 2363|    386|                                     fdata->value_len))
 2364|    386|    FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_sig_exp))
  ------------------
  |  |   30|    386|    {                           \
  |  |   31|    386|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 386]
  |  |  ------------------
  |  |   32|    386|    }
  ------------------
 2365|    386|    return true;
 2366|    386|}
formatter.c:format_soroban_authorization_sig_exp:
 2343|    386|static bool format_soroban_authorization_sig_exp(formatter_data_t *fdata) {
 2344|    386|    STRLCPY(fdata->caption, "Sig Exp Ledger", fdata->caption_len);
  ------------------
  |  |   35|    386|    {                                         \
  |  |   36|    386|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    386|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 386]
  |  |  ------------------
  |  |   38|    386|    }
  ------------------
 2345|    386|    FORMATTER_CHECK(
  ------------------
  |  |   30|    386|    {                           \
  |  |   31|    386|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 386]
  |  |  ------------------
  |  |   32|    386|    }
  ------------------
 2346|    386|        print_uint64_num(fdata->envelope->soroban_authorization.signature_expiration_ledger,
 2347|    386|                         fdata->value,
 2348|    386|                         fdata->value_len))
 2349|    386|    FORMATTER_CHECK(push_to_formatter_stack(&format_auth_function));
  ------------------
  |  |   30|    386|    {                           \
  |  |   31|    386|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 386]
  |  |  ------------------
  |  |   32|    386|    }
  ------------------
 2350|    386|    return true;
 2351|    386|}
formatter.c:format_auth_function:
 2205|    386|static bool format_auth_function(formatter_data_t *fdata) {
 2206|    386|    switch (fdata->envelope->soroban_authorization.auth_function_type) {
 2207|    379|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
  ------------------
  |  Branch (2207:9): [True: 379, False: 7]
  ------------------
 2208|    379|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    379|    {                                         \
  |  |   36|    379|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    379|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 379]
  |  |  ------------------
  |  |   38|    379|    }
  ------------------
 2209|    379|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|    379|    {                                         \
  |  |   36|    379|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    379|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 379]
  |  |  ------------------
  |  |   38|    379|    }
  ------------------
 2210|    379|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_contract_id));
  ------------------
  |  |   30|    379|    {                           \
  |  |   31|    379|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 379]
  |  |  ------------------
  |  |   32|    379|    }
  ------------------
 2211|    379|            break;
 2212|      7|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (2212:9): [True: 7, False: 379]
  ------------------
 2213|      7|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|      7|    {                                         \
  |  |   36|      7|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      7|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   38|      7|    }
  ------------------
 2214|      7|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|      7|    {                                         \
  |  |   36|      7|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      7|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   38|      7|    }
  ------------------
 2215|       |            // we dont need to care the sub-invocation here
 2216|      7|            FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|      7|    {                           \
  |  |   31|      7|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   32|      7|    }
  ------------------
 2217|      7|            break;
 2218|      7|        default:
  ------------------
  |  Branch (2218:9): [True: 0, False: 386]
  ------------------
 2219|      0|            return false;
 2220|    386|    }
 2221|    386|    return true;
 2222|    386|}
formatter.c:format_invoke_host_function_contract_id:
 2158|    434|static bool format_invoke_host_function_contract_id(formatter_data_t *fdata) {
 2159|    434|    sc_address_t *address =
 2160|    434|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2160:9): [True: 379, False: 55]
  ------------------
 2161|    434|            ? &fdata->envelope->soroban_authorization.invoke_contract_args.address
 2162|    434|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2163|     55|                   .invoke_contract_args.address;
 2164|       |
 2165|    434|    STRLCPY(fdata->caption, "Contract ID", fdata->caption_len);
  ------------------
  |  |   35|    434|    {                                         \
  |  |   36|    434|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    434|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 434]
  |  |  ------------------
  |  |   38|    434|    }
  ------------------
 2166|       |
 2167|    434|    FORMATTER_CHECK(print_sc_address(address, fdata->value, fdata->value_len, 0, 0))
  ------------------
  |  |   30|    434|    {                           \
  |  |   31|    434|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 434]
  |  |  ------------------
  |  |   32|    434|    }
  ------------------
 2168|    434|    push_to_formatter_stack(&format_invoke_host_function_func_name);
 2169|    434|    return true;
 2170|    434|}
formatter.c:format_invoke_host_function_func_name:
 2126|    434|static bool format_invoke_host_function_func_name(formatter_data_t *fdata) {
 2127|    434|    invoke_contract_args_t invoke_contract_args;
 2128|    434|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2128:9): [True: 379, False: 55]
  ------------------
 2129|    379|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2130|    379|    } else {
 2131|     55|        invoke_contract_args =
 2132|     55|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2133|     55|    }
 2134|    434|    STRLCPY(fdata->caption, "Function", fdata->caption_len);
  ------------------
  |  |   35|    434|    {                                         \
  |  |   36|    434|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    434|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 434]
  |  |  ------------------
  |  |   38|    434|    }
  ------------------
 2135|    434|    FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|    434|    {                           \
  |  |   31|    434|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 434]
  |  |  ------------------
  |  |   32|    434|    }
  ------------------
 2136|    434|                                 fdata->value_len,
 2137|    434|                                 invoke_contract_args.function.name,
 2138|    434|                                 invoke_contract_args.function.name_size))
 2139|       |
 2140|    434|    uint8_t data_count = should_move_control_to_plugin(fdata);
 2141|    434|    if (data_count == 0) {
  ------------------
  |  Branch (2141:9): [True: 419, False: 15]
  ------------------
 2142|       |        // we should not move control to plugin
 2143|    419|        if (invoke_contract_args.parameters_length == 0) {
  ------------------
  |  Branch (2143:13): [True: 153, False: 266]
  ------------------
 2144|    153|            return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2145|    266|        } else {
 2146|    266|            parameters_index = 0;
 2147|    266|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args))
  ------------------
  |  |   30|    266|    {                           \
  |  |   31|    266|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 266]
  |  |  ------------------
  |  |   32|    266|    }
  ------------------
 2148|    266|        }
 2149|    419|    } else {
 2150|     15|        PRINTF("we should move control to plugin\n");
 2151|     15|        parameters_index = 0;
 2152|     15|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args_with_plugin))
  ------------------
  |  |   30|     15|    {                           \
  |  |   31|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   32|     15|    }
  ------------------
 2153|     15|    }
 2154|       |
 2155|    281|    return true;
 2156|    434|}
formatter.c:should_move_control_to_plugin:
 1664|    796|static bool should_move_control_to_plugin(formatter_data_t *fdata) {
 1665|    796|    if (fdata->plugin_check_presence == NULL || fdata->plugin_init_contract == NULL ||
  ------------------
  |  Branch (1665:9): [True: 132, False: 664]
  |  Branch (1665:49): [True: 0, False: 664]
  ------------------
 1666|    796|        fdata->plugin_query_data_pair_count == NULL || fdata->plugin_query_data_pair == NULL) {
  ------------------
  |  Branch (1666:9): [True: 0, False: 664]
  |  Branch (1666:56): [True: 0, False: 664]
  ------------------
 1667|    132|        return false;
 1668|    132|    }
 1669|       |
 1670|    664|    invoke_contract_args_t invoke_contract_args;
 1671|    664|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1671:9): [True: 664, False: 0]
  ------------------
 1672|    664|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1673|    664|    } else {
 1674|      0|        invoke_contract_args =
 1675|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1676|      0|    }
 1677|       |
 1678|    664|    const uint8_t *contract_address = invoke_contract_args.address.address;
 1679|       |
 1680|       |    // check if plugin exists
 1681|    664|    if (!fdata->plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (1681:9): [True: 507, False: 157]
  ------------------
 1682|    507|        return false;
 1683|    507|    }
 1684|       |
 1685|       |    // init plugin
 1686|    157|    if (fdata->plugin_init_contract(contract_address) != STELLAR_PLUGIN_RESULT_OK) {
  ------------------
  |  Branch (1686:9): [True: 0, False: 157]
  ------------------
 1687|      0|        return false;
 1688|      0|    }
 1689|       |
 1690|       |    // get data count
 1691|    157|    if (fdata->plugin_query_data_pair_count(contract_address, &plugin_data_pair_count) !=
  ------------------
  |  Branch (1691:9): [True: 0, False: 157]
  ------------------
 1692|    157|        STELLAR_PLUGIN_RESULT_OK) {
 1693|      0|        return false;
 1694|      0|    }
 1695|       |
 1696|    157|    return plugin_data_pair_count != 0;
 1697|    157|}
formatter.c:format_operation_source_prepare_for_invoke_host_function_op:
 2027|    346|static bool format_operation_source_prepare_for_invoke_host_function_op(formatter_data_t *fdata) {
 2028|    346|    if (fdata->envelope->type != ENVELOPE_TYPE_SOROBAN_AUTHORIZATION &&
  ------------------
  |  Branch (2028:9): [True: 51, False: 295]
  ------------------
 2029|    346|        fdata->envelope->tx_details.tx.op_details.source_account_present) {
  ------------------
  |  Branch (2029:9): [True: 18, False: 33]
  ------------------
 2030|       |        // If the source exists, when the user clicks the next button,
 2031|       |        // it will jump to the page showing the source
 2032|     18|        FORMATTER_CHECK(
  ------------------
  |  |   30|     18|    {                           \
  |  |   31|     18|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   32|     18|    }
  ------------------
 2033|     18|            push_to_formatter_stack(&format_operation_source_for_invoke_host_function_op))
 2034|    328|    } else {
 2035|    328|        uint8_t sub_invocations_count =
 2036|    328|            fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2036:13): [True: 295, False: 33]
  ------------------
 2037|    328|                ? fdata->envelope->soroban_authorization.sub_invocations_count
 2038|    328|                : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2039|     33|                      .sub_invocations_count;
 2040|    328|        if (sub_invocations_count > 0) {
  ------------------
  |  Branch (2040:13): [True: 59, False: 269]
  ------------------
 2041|     59|            formatter_index = 0;
 2042|     59|            FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_start))
  ------------------
  |  |   30|     59|    {                           \
  |  |   31|     59|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 59]
  |  |  ------------------
  |  |   32|     59|    }
  ------------------
 2043|    269|        } else {
 2044|    269|            FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|    269|    {                           \
  |  |   31|    269|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 3, False: 266]
  |  |  ------------------
  |  |   32|    269|    }
  ------------------
 2045|    269|        }
 2046|    328|    }
 2047|    343|    return true;
 2048|    346|}
formatter.c:format_operation_source_for_invoke_host_function_op:
 1988|     18|static bool format_operation_source_for_invoke_host_function_op(formatter_data_t *fdata) {
 1989|     18|    STRLCPY(fdata->caption, "Op Source", fdata->caption_len);
  ------------------
  |  |   35|     18|    {                                         \
  |  |   36|     18|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     18|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   38|     18|    }
  ------------------
 1990|     18|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (1990:9): [True: 17, False: 1]
  ------------------
 1991|     18|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (1991:9): [True: 16, False: 1]
  ------------------
 1992|     18|        fdata->envelope->tx_details.tx.op_details.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (1992:9): [True: 15, False: 1]
  ------------------
 1993|     18|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (1993:9): [True: 11, False: 4]
  ------------------
 1994|     15|               fdata->signing_key,
 1995|     15|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0 &&
  ------------------
  |  |   18|     15|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 1996|     18|        memcmp(fdata->envelope->tx_details.tx.op_details.source_account.ed25519,
  ------------------
  |  Branch (1996:9): [True: 8, False: 3]
  ------------------
 1997|     11|               fdata->signing_key,
 1998|     11|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|     11|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 1999|      8|        FORMATTER_CHECK(
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 2000|      8|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
 2001|      8|                                fdata->value,
 2002|      8|                                fdata->value_len,
 2003|      8|                                6,
 2004|      8|                                6))
 2005|     10|    } else {
 2006|     10|        FORMATTER_CHECK(
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
 2007|     10|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
 2008|     10|                                fdata->value,
 2009|     10|                                fdata->value_len,
 2010|     10|                                0,
 2011|     10|                                0))
 2012|     10|    }
 2013|     18|    uint8_t sub_invocations_count =
 2014|     18|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2014:9): [True: 0, False: 18]
  ------------------
 2015|     18|            ? fdata->envelope->soroban_authorization.sub_invocations_count
 2016|     18|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2017|     18|                  .sub_invocations_count;
 2018|     18|    if (sub_invocations_count > 0) {
  ------------------
  |  Branch (2018:9): [True: 11, False: 7]
  ------------------
 2019|     11|        formatter_index = 0;
 2020|     11|        FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_start))
  ------------------
  |  |   30|     11|    {                           \
  |  |   31|     11|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 11]
  |  |  ------------------
  |  |   32|     11|    }
  ------------------
 2021|     11|    } else {
 2022|      7|        FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|      7|    {                           \
  |  |   31|      7|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   32|      7|    }
  ------------------
 2023|      7|    }
 2024|     18|    return true;
 2025|     18|}
formatter.c:format_sub_invocation_start:
 1941|    393|static bool format_sub_invocation_start(formatter_data_t *fdata) {
 1942|    393|    uint8_t sub_invocation_index = 0;
 1943|    393|    uint8_t sub_invocations_count = 0;
 1944|    393|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1944:9): [True: 310, False: 83]
  ------------------
 1945|    310|        sub_invocation_index = fdata->envelope->soroban_authorization.sub_invocation_index;
 1946|    310|        sub_invocations_count = fdata->envelope->soroban_authorization.sub_invocations_count;
 1947|    310|    } else {
 1948|     83|        sub_invocation_index =
 1949|     83|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocation_index;
 1950|     83|        sub_invocations_count =
 1951|     83|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocations_count;
 1952|     83|    }
 1953|       |
 1954|    393|    STRLCPY(fdata->caption, "Nested Authorization", fdata->caption_len);
  ------------------
  |  |   35|    393|    {                                         \
  |  |   36|    393|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    393|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 393]
  |  |  ------------------
  |  |   38|    393|    }
  ------------------
 1955|       |
 1956|    393|    FORMATTER_CHECK(print_uint64_num(sub_invocation_index + 1, fdata->value, fdata->value_len))
  ------------------
  |  |   30|    393|    {                           \
  |  |   31|    393|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 393]
  |  |  ------------------
  |  |   32|    393|    }
  ------------------
 1957|    393|    STRLCAT(fdata->value, " of ", fdata->value_len)
  ------------------
  |  |   41|    393|    {                                         \
  |  |   42|    393|        size_t len = strlcat(dst, src, size); \
  |  |   43|    393|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 393]
  |  |  ------------------
  |  |   44|    393|    }
  ------------------
 1958|    393|    FORMATTER_CHECK(print_uint64_num(sub_invocations_count,
  ------------------
  |  |   30|    393|    {                           \
  |  |   31|    393|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 393]
  |  |  ------------------
  |  |   32|    393|    }
  ------------------
 1959|    393|                                     fdata->value + strlen(fdata->value),
 1960|    393|                                     fdata->value_len - strlen(fdata->value)))
 1961|       |
 1962|    393|    buffer_t buffer = {
 1963|    393|        .ptr = fdata->raw_data,
 1964|    393|        .size = fdata->raw_data_len,
 1965|    393|        .offset = fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1965:19): [True: 310, False: 83]
  ------------------
 1966|    393|                      ? fdata->envelope->soroban_authorization
 1967|    310|                            .sub_invocation_positions[sub_invocation_index]
 1968|    393|                      : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1969|     83|                            .sub_invocation_positions[sub_invocation_index]};
 1970|       |
 1971|       |    // here we parse the sub-invocation, and store it in the invoke_contract_args
 1972|    393|    FORMATTER_CHECK(parse_auth_function(
  ------------------
  |  |   30|    393|    {                           \
  |  |   31|  1.57k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 393]
  |  |  |  Branch (31:15): [True: 310, False: 83]
  |  |  |  Branch (31:15): [True: 310, False: 83]
  |  |  ------------------
  |  |   32|    393|    }
  ------------------
 1973|    393|        &buffer,
 1974|    393|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
 1975|    393|            ? &fdata->envelope->soroban_authorization.auth_function_type
 1976|    393|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.auth_function_type,
 1977|    393|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
 1978|    393|            ? &fdata->envelope->soroban_authorization.invoke_contract_args
 1979|    393|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1980|    393|                   .invoke_contract_args))
 1981|       |
 1982|    393|    FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_auth_function))
  ------------------
  |  |   30|    393|    {                           \
  |  |   31|    393|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 393]
  |  |  ------------------
  |  |   32|    393|    }
  ------------------
 1983|    393|    return true;
 1984|    393|}
formatter.c:format_sub_invocation_auth_function:
 1917|    393|static bool format_sub_invocation_auth_function(formatter_data_t *fdata) {
 1918|    393|    soroban_authorization_function_type_t auth_function_type =
 1919|    393|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1919:9): [True: 310, False: 83]
  ------------------
 1920|    393|            ? fdata->envelope->soroban_authorization.auth_function_type
 1921|    393|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.auth_function_type;
 1922|    393|    PRINTF("auth_function_type: %d\n", auth_function_type);
 1923|    393|    switch (auth_function_type) {
 1924|    362|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
  ------------------
  |  Branch (1924:9): [True: 362, False: 31]
  ------------------
 1925|    362|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    362|    {                                         \
  |  |   36|    362|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    362|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 362]
  |  |  ------------------
  |  |   38|    362|    }
  ------------------
 1926|    362|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|    362|    {                                         \
  |  |   36|    362|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    362|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 362]
  |  |  ------------------
  |  |   38|    362|    }
  ------------------
 1927|    362|            FORMATTER_CHECK(
  ------------------
  |  |   30|    362|    {                           \
  |  |   31|    362|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 362]
  |  |  ------------------
  |  |   32|    362|    }
  ------------------
 1928|    362|                push_to_formatter_stack(&format_sub_invocation_invoke_host_function_contract_id));
 1929|    362|            break;
 1930|     31|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1930:9): [True: 31, False: 362]
  ------------------
 1931|     31|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|     31|    {                                         \
  |  |   36|     31|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     31|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   38|     31|    }
  ------------------
 1932|     31|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|     31|    {                                         \
  |  |   36|     31|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     31|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   38|     31|    }
  ------------------
 1933|     31|            FORMATTER_CHECK(format_next_sub_invocation(fdata));
  ------------------
  |  |   30|     31|    {                           \
  |  |   31|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   32|     31|    }
  ------------------
 1934|     31|            break;
 1935|      0|        default:
  ------------------
  |  Branch (1935:9): [True: 0, False: 393]
  ------------------
 1936|      0|            return false;
 1937|    393|    }
 1938|    393|    return true;
 1939|    393|}
formatter.c:format_sub_invocation_invoke_host_function_contract_id:
 1900|    362|static bool format_sub_invocation_invoke_host_function_contract_id(formatter_data_t *fdata) {
 1901|    362|    invoke_contract_args_t invoke_contract_args;
 1902|    362|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1902:9): [True: 285, False: 77]
  ------------------
 1903|    285|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1904|    285|    } else {
 1905|     77|        invoke_contract_args =
 1906|     77|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1907|     77|    }
 1908|       |
 1909|    362|    STRLCPY(fdata->caption, "Contract ID", fdata->caption_len);
  ------------------
  |  |   35|    362|    {                                         \
  |  |   36|    362|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    362|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 362]
  |  |  ------------------
  |  |   38|    362|    }
  ------------------
 1910|       |
 1911|    362|    FORMATTER_CHECK(
  ------------------
  |  |   30|    362|    {                           \
  |  |   31|    362|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 362]
  |  |  ------------------
  |  |   32|    362|    }
  ------------------
 1912|    362|        print_sc_address(&invoke_contract_args.address, fdata->value, fdata->value_len, 0, 0))
 1913|    362|    push_to_formatter_stack(&format_sub_invocation_invoke_host_function_func_name);
 1914|    362|    return true;
 1915|    362|}
formatter.c:format_sub_invocation_invoke_host_function_func_name:
 1866|    362|static bool format_sub_invocation_invoke_host_function_func_name(formatter_data_t *fdata) {
 1867|    362|    invoke_contract_args_t invoke_contract_args;
 1868|    362|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1868:9): [True: 285, False: 77]
  ------------------
 1869|    285|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1870|    285|    } else {
 1871|     77|        invoke_contract_args =
 1872|     77|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1873|     77|    }
 1874|    362|    STRLCPY(fdata->caption, "Function", fdata->caption_len);
  ------------------
  |  |   35|    362|    {                                         \
  |  |   36|    362|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    362|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 362]
  |  |  ------------------
  |  |   38|    362|    }
  ------------------
 1875|    362|    FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|    362|    {                           \
  |  |   31|    362|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 362]
  |  |  ------------------
  |  |   32|    362|    }
  ------------------
 1876|    362|                                 fdata->value_len,
 1877|    362|                                 invoke_contract_args.function.name,
 1878|    362|                                 invoke_contract_args.function.name_size))
 1879|       |
 1880|    362|    uint8_t data_count = should_move_control_to_plugin(fdata);
 1881|    362|    if (data_count == 0) {
  ------------------
  |  Branch (1881:9): [True: 220, False: 142]
  ------------------
 1882|       |        // we should not move control to plugin
 1883|    220|        if (invoke_contract_args.parameters_length == 0) {
  ------------------
  |  Branch (1883:13): [True: 122, False: 98]
  ------------------
 1884|    122|            return format_next_sub_invocation(fdata);
 1885|    122|        } else {
 1886|     98|            parameters_index = 0;
 1887|     98|            FORMATTER_CHECK(
  ------------------
  |  |   30|     98|    {                           \
  |  |   31|     98|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 98]
  |  |  ------------------
  |  |   32|     98|    }
  ------------------
 1888|     98|                push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args))
 1889|     98|        }
 1890|    220|    } else {
 1891|    142|        PRINTF("we should move control to plugin\n");
 1892|    142|        parameters_index = 0;
 1893|    142|        FORMATTER_CHECK(
  ------------------
  |  |   30|    142|    {                           \
  |  |   31|    142|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 142]
  |  |  ------------------
  |  |   32|    142|    }
  ------------------
 1894|    142|            push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args_with_plugin))
 1895|    142|    }
 1896|       |
 1897|    240|    return true;
 1898|    362|}
formatter.c:format_sub_invocation_invoke_host_function_args:
 1794|    249|static bool format_sub_invocation_invoke_host_function_args(formatter_data_t *fdata) {
 1795|    249|    invoke_contract_args_t invoke_contract_args;
 1796|    249|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1796:9): [True: 184, False: 65]
  ------------------
 1797|    184|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1798|    184|    } else {
 1799|     65|        invoke_contract_args =
 1800|     65|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1801|     65|    }
 1802|       |
 1803|    249|    size_t length;
 1804|    249|    STRLCPY(fdata->caption, "Arg ", fdata->caption_len);
  ------------------
  |  |   35|    249|    {                                         \
  |  |   36|    249|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    249|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 249]
  |  |  ------------------
  |  |   38|    249|    }
  ------------------
 1805|    249|    length = strlen(fdata->caption);
 1806|    249|    FORMATTER_CHECK(print_uint64_num(parameters_index + 1,
  ------------------
  |  |   30|    249|    {                           \
  |  |   31|    249|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 249]
  |  |  ------------------
  |  |   32|    249|    }
  ------------------
 1807|    249|                                     fdata->caption + length,
 1808|    249|                                     fdata->caption_len - length))
 1809|       |
 1810|    249|    STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|    249|    {                                         \
  |  |   42|    249|        size_t len = strlcat(dst, src, size); \
  |  |   43|    249|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 249]
  |  |  ------------------
  |  |   44|    249|    }
  ------------------
 1811|    249|    length = strlen(fdata->caption);
 1812|    249|    FORMATTER_CHECK(print_uint64_num(invoke_contract_args.parameters_length,
  ------------------
  |  |   30|    249|    {                           \
  |  |   31|    249|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 249]
  |  |  ------------------
  |  |   32|    249|    }
  ------------------
 1813|    249|                                     fdata->caption + length,
 1814|    249|                                     fdata->caption_len - length))
 1815|       |
 1816|    249|    buffer_t buffer = {.ptr = fdata->raw_data,
 1817|    249|                       .size = fdata->raw_data_len,
 1818|    249|                       .offset = invoke_contract_args.parameters_position};
 1819|       |    // Content
 1820|    881|    for (uint8_t i = 0; i < parameters_index; i++) {
  ------------------
  |  Branch (1820:25): [True: 632, False: 249]
  ------------------
 1821|    632|        FORMATTER_CHECK(read_scval_advance(&buffer))
  ------------------
  |  |   30|    632|    {                           \
  |  |   31|    632|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 632]
  |  |  ------------------
  |  |   32|    632|    }
  ------------------
 1822|    632|    }
 1823|       |
 1824|    249|    FORMATTER_CHECK(print_scval(buffer, fdata->value, fdata->value_len))
  ------------------
  |  |   30|    249|    {                           \
  |  |   31|    249|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 8, False: 241]
  |  |  ------------------
  |  |   32|    249|    }
  ------------------
 1825|       |
 1826|    241|    parameters_index++;
 1827|    241|    if (parameters_index == invoke_contract_args.parameters_length) {
  ------------------
  |  Branch (1827:9): [True: 90, False: 151]
  ------------------
 1828|     90|        return format_next_sub_invocation(fdata);
 1829|    151|    } else {
 1830|    151|        FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args))
  ------------------
  |  |   30|    151|    {                           \
  |  |   31|    151|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 151]
  |  |  ------------------
  |  |   32|    151|    }
  ------------------
 1831|    151|    }
 1832|    151|    return true;
 1833|    241|}
formatter.c:print_scval:
 1699|  1.58k|static bool print_scval(buffer_t buffer, char *value, uint8_t value_len) {
 1700|  1.58k|    uint32_t sc_type;
 1701|  1.58k|    FORMATTER_CHECK(parse_uint32(&buffer, &sc_type))
  ------------------
  |  |   30|  1.58k|    {                           \
  |  |   31|  1.58k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.58k]
  |  |  ------------------
  |  |   32|  1.58k|    }
  ------------------
 1702|       |
 1703|  1.58k|    switch (sc_type) {
 1704|    776|        case SCV_BOOL: {
  ------------------
  |  Branch (1704:9): [True: 776, False: 810]
  ------------------
 1705|    776|            bool b;
 1706|    776|            FORMATTER_CHECK(parse_bool(&buffer, &b))
  ------------------
  |  |   30|    776|    {                           \
  |  |   31|    776|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 77, False: 699]
  |  |  ------------------
  |  |   32|    776|    }
  ------------------
 1707|    699|            STRLCPY(value, b ? "true" : "false", value_len);
  ------------------
  |  |   35|    699|    {                                         \
  |  |   36|  1.39k|        size_t len = strlcpy(dst, src, size); \
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 3, False: 696]
  |  |  ------------------
  |  |   37|    699|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 699]
  |  |  ------------------
  |  |   38|    699|    }
  ------------------
 1708|    699|            break;
 1709|    699|        }
 1710|    175|        case SCV_VOID:
  ------------------
  |  Branch (1710:9): [True: 175, False: 1.41k]
  ------------------
 1711|    175|            STRLCPY(value, "[void]", value_len);
  ------------------
  |  |   35|    175|    {                                         \
  |  |   36|    175|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    175|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 175]
  |  |  ------------------
  |  |   38|    175|    }
  ------------------
 1712|    175|            break;  // void
 1713|     17|        case SCV_U32:
  ------------------
  |  Branch (1713:9): [True: 17, False: 1.56k]
  ------------------
 1714|     17|            FORMATTER_CHECK(print_uint32(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
 1715|     17|            break;
 1716|     36|        case SCV_I32:
  ------------------
  |  Branch (1716:9): [True: 36, False: 1.55k]
  ------------------
 1717|     36|            FORMATTER_CHECK(print_int32(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     36|    {                           \
  |  |   31|     36|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   32|     36|    }
  ------------------
 1718|     36|            break;
 1719|     29|        case SCV_U64:
  ------------------
  |  Branch (1719:9): [True: 29, False: 1.55k]
  ------------------
 1720|     29|            FORMATTER_CHECK(print_uint64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
 1721|     29|            break;
 1722|     20|        case SCV_I64:
  ------------------
  |  Branch (1722:9): [True: 20, False: 1.56k]
  ------------------
 1723|     20|            FORMATTER_CHECK(print_int64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     20|    {                           \
  |  |   31|     20|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   32|     20|    }
  ------------------
 1724|     20|            break;
 1725|     27|        case SCV_TIMEPOINT: {
  ------------------
  |  Branch (1725:9): [True: 27, False: 1.55k]
  ------------------
 1726|     27|            uint64_t timepoint;
 1727|     27|            FORMATTER_CHECK(parse_uint64(&buffer, &timepoint));
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1728|     27|            FORMATTER_CHECK(print_time(timepoint, value, value_len));
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 11, False: 16]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1729|     16|            break;
 1730|     27|        }
 1731|     19|        case SCV_DURATION:
  ------------------
  |  Branch (1731:9): [True: 19, False: 1.56k]
  ------------------
 1732|     19|            FORMATTER_CHECK(print_int64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     19|    {                           \
  |  |   31|     19|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   32|     19|    }
  ------------------
 1733|     19|            break;
 1734|     28|        case SCV_U128:
  ------------------
  |  Branch (1734:9): [True: 28, False: 1.55k]
  ------------------
 1735|     28|            FORMATTER_CHECK(print_uint128(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     28|    {                           \
  |  |   31|     28|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 28]
  |  |  ------------------
  |  |   32|     28|    }
  ------------------
 1736|     28|            break;
 1737|     83|        case SCV_I128:
  ------------------
  |  Branch (1737:9): [True: 83, False: 1.50k]
  ------------------
 1738|     83|            FORMATTER_CHECK(print_int128(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     83|    {                           \
  |  |   31|     83|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 83]
  |  |  ------------------
  |  |   32|     83|    }
  ------------------
 1739|     83|            break;
 1740|     32|        case SCV_U256:
  ------------------
  |  Branch (1740:9): [True: 32, False: 1.55k]
  ------------------
 1741|     32|            FORMATTER_CHECK(print_uint256(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
 1742|     32|            break;
 1743|     52|        case SCV_I256:
  ------------------
  |  Branch (1743:9): [True: 52, False: 1.53k]
  ------------------
 1744|     52|            FORMATTER_CHECK(print_int256(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     52|    {                           \
  |  |   31|     52|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 52]
  |  |  ------------------
  |  |   32|     52|    }
  ------------------
 1745|     52|            break;
 1746|     31|        case SCV_BYTES:
  ------------------
  |  Branch (1746:9): [True: 31, False: 1.55k]
  ------------------
 1747|     31|            STRLCPY(value, "[Bytes Data]", value_len);
  ------------------
  |  |   35|     31|    {                                         \
  |  |   36|     31|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     31|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   38|     31|    }
  ------------------
 1748|     31|            break;
 1749|    115|        case SCV_STRING: {
  ------------------
  |  Branch (1749:9): [True: 115, False: 1.47k]
  ------------------
 1750|    115|            scv_string_t scv_string;
 1751|    115|            FORMATTER_CHECK(parse_scv_string(&buffer, &scv_string));
  ------------------
  |  |   30|    115|    {                           \
  |  |   31|    115|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1, False: 114]
  |  |  ------------------
  |  |   32|    115|    }
  ------------------
 1752|    114|            FORMATTER_CHECK(print_scv_string(&scv_string, value, value_len));
  ------------------
  |  |   30|    114|    {                           \
  |  |   31|    114|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 114]
  |  |  ------------------
  |  |   32|    114|    }
  ------------------
 1753|    114|            break;
 1754|    114|        }
 1755|     31|        case SCV_SYMBOL: {
  ------------------
  |  Branch (1755:9): [True: 31, False: 1.55k]
  ------------------
 1756|     31|            scv_symbol_t scv_symbol;
 1757|     31|            FORMATTER_CHECK(parse_scv_symbol(&buffer, &scv_symbol));
  ------------------
  |  |   30|     31|    {                           \
  |  |   31|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 6, False: 25]
  |  |  ------------------
  |  |   32|     31|    }
  ------------------
 1758|     25|            FORMATTER_CHECK(print_scv_symbol(&scv_symbol, value, value_len));
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1, False: 24]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
 1759|     24|            break;
 1760|     25|        }
 1761|     39|        case SCV_ADDRESS: {
  ------------------
  |  Branch (1761:9): [True: 39, False: 1.54k]
  ------------------
 1762|     39|            sc_address_t sc_address;
 1763|     39|            FORMATTER_CHECK(parse_sc_address(&buffer, &sc_address));
  ------------------
  |  |   30|     39|    {                           \
  |  |   31|     39|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   32|     39|    }
  ------------------
 1764|     39|            FORMATTER_CHECK(print_sc_address(&sc_address, value, value_len, 0, 0));
  ------------------
  |  |   30|     39|    {                           \
  |  |   31|     39|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   32|     39|    }
  ------------------
 1765|     39|            break;
 1766|     39|        }
 1767|     76|        default:
  ------------------
  |  Branch (1767:9): [True: 76, False: 1.51k]
  ------------------
 1768|     76|            STRLCPY(value, "[unable to display]", value_len);
  ------------------
  |  |   35|     76|    {                                         \
  |  |   36|     76|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     76|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 76]
  |  |  ------------------
  |  |   38|     76|    }
  ------------------
 1769|  1.58k|    }
 1770|  1.49k|    return true;
 1771|  1.58k|}
formatter.c:format_sub_invocation_invoke_host_function_args_with_plugin:
 1835|    426|static bool format_sub_invocation_invoke_host_function_args_with_plugin(formatter_data_t *fdata) {
 1836|    426|    invoke_contract_args_t invoke_contract_args;
 1837|    426|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1837:9): [True: 426, False: 0]
  ------------------
 1838|    426|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1839|    426|    } else {
 1840|      0|        invoke_contract_args =
 1841|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1842|      0|    }
 1843|       |
 1844|    426|    const uint8_t *contract_address = invoke_contract_args.address.address;
 1845|       |
 1846|       |    // get data pair
 1847|    426|    if (fdata->plugin_query_data_pair(contract_address,
  ------------------
  |  Branch (1847:9): [True: 0, False: 426]
  ------------------
 1848|    426|                                      parameters_index,
 1849|    426|                                      fdata->caption,
 1850|    426|                                      fdata->caption_len,
 1851|    426|                                      fdata->value,
 1852|    426|                                      fdata->value_len) != STELLAR_PLUGIN_RESULT_OK) {
 1853|      0|        return false;
 1854|      0|    }
 1855|       |
 1856|    426|    parameters_index++;
 1857|    426|    if (parameters_index == plugin_data_pair_count) {
  ------------------
  |  Branch (1857:9): [True: 142, False: 284]
  ------------------
 1858|    142|        return format_next_sub_invocation(fdata);
 1859|    284|    } else {
 1860|    284|        FORMATTER_CHECK(
  ------------------
  |  |   30|    284|    {                           \
  |  |   31|    284|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 284]
  |  |  ------------------
  |  |   32|    284|    }
  ------------------
 1861|    284|            push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args_with_plugin))
 1862|    284|    }
 1863|    284|    return true;
 1864|    426|}
formatter.c:format_next_sub_invocation:
 1774|    385|static bool format_next_sub_invocation(formatter_data_t *fdata) {
 1775|    385|    uint8_t sub_invocations_count =
 1776|    385|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1776:9): [True: 303, False: 82]
  ------------------
 1777|    385|            ? fdata->envelope->soroban_authorization.sub_invocations_count
 1778|    385|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1779|     82|                  .sub_invocations_count;
 1780|    385|    uint8_t *sub_invocation_index =
 1781|    385|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1781:9): [True: 303, False: 82]
  ------------------
 1782|    385|            ? &fdata->envelope->soroban_authorization.sub_invocation_index
 1783|    385|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1784|     82|                   .sub_invocation_index;
 1785|    385|    (*sub_invocation_index)++;
 1786|    385|    if (*sub_invocation_index == sub_invocations_count) {
  ------------------
  |  Branch (1786:9): [True: 62, False: 323]
  ------------------
 1787|     62|        return push_to_formatter_stack(NULL);
 1788|    323|    } else {
 1789|    323|        formatter_index = 0;
 1790|    323|        return push_to_formatter_stack(format_sub_invocation_start);
 1791|    323|    }
 1792|    385|}
formatter.c:format_invoke_host_function_args:
 2050|  1.33k|static bool format_invoke_host_function_args(formatter_data_t *fdata) {
 2051|  1.33k|    invoke_contract_args_t invoke_contract_args;
 2052|  1.33k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2052:9): [True: 1.25k, False: 87]
  ------------------
 2053|  1.25k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2054|  1.25k|    } else {
 2055|     87|        invoke_contract_args =
 2056|     87|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2057|     87|    }
 2058|       |
 2059|  1.33k|    size_t length;
 2060|  1.33k|    STRLCPY(fdata->caption, "Arg ", fdata->caption_len);
  ------------------
  |  |   35|  1.33k|    {                                         \
  |  |   36|  1.33k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.33k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.33k]
  |  |  ------------------
  |  |   38|  1.33k|    }
  ------------------
 2061|  1.33k|    length = strlen(fdata->caption);
 2062|  1.33k|    FORMATTER_CHECK(print_uint64_num(parameters_index + 1,
  ------------------
  |  |   30|  1.33k|    {                           \
  |  |   31|  1.33k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.33k]
  |  |  ------------------
  |  |   32|  1.33k|    }
  ------------------
 2063|  1.33k|                                     fdata->caption + length,
 2064|  1.33k|                                     fdata->caption_len - length))
 2065|       |
 2066|  1.33k|    STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  1.33k|    {                                         \
  |  |   42|  1.33k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  1.33k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 1.33k]
  |  |  ------------------
  |  |   44|  1.33k|    }
  ------------------
 2067|  1.33k|    length = strlen(fdata->caption);
 2068|  1.33k|    FORMATTER_CHECK(print_uint64_num(invoke_contract_args.parameters_length,
  ------------------
  |  |   30|  1.33k|    {                           \
  |  |   31|  1.33k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.33k]
  |  |  ------------------
  |  |   32|  1.33k|    }
  ------------------
 2069|  1.33k|                                     fdata->caption + length,
 2070|  1.33k|                                     fdata->caption_len - length))
 2071|       |
 2072|  1.33k|    buffer_t buffer = {.ptr = fdata->raw_data,
 2073|  1.33k|                       .size = fdata->raw_data_len,
 2074|  1.33k|                       .offset = invoke_contract_args.parameters_position};
 2075|       |    // Content
 2076|  5.09k|    for (uint8_t i = 0; i < parameters_index; i++) {
  ------------------
  |  Branch (2076:25): [True: 3.75k, False: 1.33k]
  ------------------
 2077|  3.75k|        FORMATTER_CHECK(read_scval_advance(&buffer))
  ------------------
  |  |   30|  3.75k|    {                           \
  |  |   31|  3.75k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.75k]
  |  |  ------------------
  |  |   32|  3.75k|    }
  ------------------
 2078|  3.75k|    }
 2079|       |
 2080|  1.33k|    FORMATTER_CHECK(print_scval(buffer, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  1.33k|    {                           \
  |  |   31|  1.33k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 88, False: 1.24k]
  |  |  ------------------
  |  |   32|  1.33k|    }
  ------------------
 2081|       |
 2082|  1.24k|    parameters_index++;
 2083|  1.24k|    if (parameters_index == invoke_contract_args.parameters_length) {
  ------------------
  |  Branch (2083:9): [True: 178, False: 1.07k]
  ------------------
 2084|    178|        return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2085|  1.07k|    } else {
 2086|  1.07k|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args))
  ------------------
  |  |   30|  1.07k|    {                           \
  |  |   31|  1.07k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.07k]
  |  |  ------------------
  |  |   32|  1.07k|    }
  ------------------
 2087|  1.07k|    }
 2088|  1.07k|    return true;
 2089|  1.24k|}
formatter.c:format_invoke_host_function_args_with_plugin:
 2091|     45|static bool format_invoke_host_function_args_with_plugin(formatter_data_t *fdata) {
 2092|     45|    invoke_contract_args_t invoke_contract_args;
 2093|     45|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2093:9): [True: 45, False: 0]
  ------------------
 2094|     45|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2095|     45|    } else {
 2096|      0|        invoke_contract_args =
 2097|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2098|      0|    }
 2099|       |
 2100|     45|    const uint8_t *contract_address = invoke_contract_args.address.address;
 2101|       |
 2102|       |    // get data pair
 2103|     45|    if (fdata->plugin_query_data_pair(contract_address,
  ------------------
  |  Branch (2103:9): [True: 0, False: 45]
  ------------------
 2104|     45|                                      parameters_index,
 2105|     45|                                      fdata->caption,
 2106|     45|                                      fdata->caption_len,
 2107|     45|                                      fdata->value,
 2108|     45|                                      fdata->value_len) != STELLAR_PLUGIN_RESULT_OK) {
 2109|      0|        return false;
 2110|      0|    }
 2111|       |
 2112|     45|    parameters_index++;
 2113|     45|    if (parameters_index == plugin_data_pair_count) {
  ------------------
  |  Branch (2113:9): [True: 15, False: 30]
  ------------------
 2114|       |        // if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
 2115|       |        //     FORMATTER_CHECK(push_to_formatter_stack(NULL))
 2116|       |        // } else {
 2117|       |        //     return format_operation_source_prepare(fdata);
 2118|       |        // }
 2119|     15|        return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2120|     30|    } else {
 2121|     30|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args_with_plugin))
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 2122|     30|    }
 2123|     30|    return true;
 2124|     45|}
formatter.c:format_transaction_info:
 2379|    815|static bool format_transaction_info(formatter_data_t *fdata) {
 2380|    815|    if (fdata->envelope->network != 0) {
  ------------------
  |  Branch (2380:9): [True: 798, False: 17]
  ------------------
 2381|    798|        FORMATTER_CHECK(push_to_formatter_stack(&format_network))
  ------------------
  |  |   30|    798|    {                           \
  |  |   31|    798|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 798]
  |  |  ------------------
  |  |   32|    798|    }
  ------------------
 2382|    798|    } else {
 2383|     17|        return get_tx_details_formatter(fdata);
 2384|     17|    }
 2385|    798|    return true;
 2386|    815|}
formatter.c:push_to_formatter_stack:
   59|  37.7k|static bool push_to_formatter_stack(format_function_t formatter) {
   60|  37.7k|    if (formatter_index >= MAX_FORMATTERS_PER_OPERATION) {
  ------------------
  |  |   47|  37.7k|#define MAX_FORMATTERS_PER_OPERATION 16
  ------------------
  |  Branch (60:9): [True: 3, False: 37.7k]
  ------------------
   61|      3|        PRINTF("Formatter stack overflow\n");
   62|      3|        return false;
   63|      3|    }
   64|       |
   65|  37.7k|    formatter_stack[formatter_index++] = formatter;
   66|       |
   67|  37.7k|    return true;
   68|  37.7k|}
formatter.c:format_confirm_operation:
 2264|  5.67k|static bool format_confirm_operation(formatter_data_t *fdata) {
 2265|  5.67k|    if (fdata->envelope->tx_details.tx.operations_count > 1) {
  ------------------
  |  Branch (2265:9): [True: 5.52k, False: 148]
  ------------------
 2266|  5.52k|        STRLCPY(fdata->caption, "Operation", fdata->caption_len);
  ------------------
  |  |   35|  5.52k|    {                                         \
  |  |   36|  5.52k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  5.52k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.52k]
  |  |  ------------------
  |  |   38|  5.52k|    }
  ------------------
 2267|  5.52k|        FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.operation_index + 1,
  ------------------
  |  |   30|  5.52k|    {                           \
  |  |   31|  5.52k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.52k]
  |  |  ------------------
  |  |   32|  5.52k|    }
  ------------------
 2268|  5.52k|                                         fdata->value,
 2269|  5.52k|                                         fdata->value_len))
 2270|  5.52k|        STRLCAT(fdata->value, " of ", fdata->value_len)
  ------------------
  |  |   41|  5.52k|    {                                         \
  |  |   42|  5.52k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  5.52k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 5.52k]
  |  |  ------------------
  |  |   44|  5.52k|    }
  ------------------
 2271|  5.52k|        FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.operations_count,
  ------------------
  |  |   30|  5.52k|    {                           \
  |  |   31|  5.52k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.52k]
  |  |  ------------------
  |  |   32|  5.52k|    }
  ------------------
 2272|  5.52k|                                         fdata->value + strlen(fdata->value),
 2273|  5.52k|                                         fdata->value_len - strlen(fdata->value)))
 2274|       |
 2275|  5.52k|        FORMATTER_CHECK(push_to_formatter_stack(
  ------------------
  |  |   30|  5.52k|    {                           \
  |  |   31|  5.52k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.52k]
  |  |  ------------------
  |  |   32|  5.52k|    }
  ------------------
 2276|  5.52k|            ((format_function_t) PIC(formatters[fdata->envelope->tx_details.tx.op_details.type]))));
 2277|  5.52k|    } else {
 2278|    148|        format_function_t func = PIC(formatters[fdata->envelope->tx_details.tx.op_details.type]);
  ------------------
  |  |    6|    148|#define PIC(x) x
  ------------------
 2279|    148|        FORMATTER_CHECK(func(fdata));
  ------------------
  |  |   30|    148|    {                           \
  |  |   31|    148|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 2, False: 146]
  |  |  ------------------
  |  |   32|    148|    }
  ------------------
 2280|    146|    }
 2281|  5.67k|    return true;
 2282|  5.67k|}
formatter.c:format_create_account:
 1136|  3.41k|static bool format_create_account(formatter_data_t *fdata) {
 1137|  3.41k|    (void) fdata;
 1138|  3.41k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  3.41k|    {                                         \
  |  |   36|  3.41k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  3.41k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3.41k]
  |  |  ------------------
  |  |   38|  3.41k|    }
  ------------------
 1139|  3.41k|    STRLCPY(fdata->value, "Create Account", fdata->value_len);
  ------------------
  |  |   35|  3.41k|    {                                         \
  |  |   36|  3.41k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  3.41k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3.41k]
  |  |  ------------------
  |  |   38|  3.41k|    }
  ------------------
 1140|  3.41k|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_account_destination))
  ------------------
  |  |   30|  3.41k|    {                           \
  |  |   31|  3.41k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.41k]
  |  |  ------------------
  |  |   32|  3.41k|    }
  ------------------
 1141|  3.41k|    return true;
 1142|  3.41k|}
formatter.c:format_create_account_destination:
 1124|  3.41k|static bool format_create_account_destination(formatter_data_t *fdata) {
 1125|  3.41k|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|  3.41k|    {                                         \
  |  |   36|  3.41k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  3.41k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3.41k]
  |  |  ------------------
  |  |   38|  3.41k|    }
  ------------------
 1126|  3.41k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  3.41k|    {                           \
  |  |   31|  3.41k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.41k]
  |  |  ------------------
  |  |   32|  3.41k|    }
  ------------------
 1127|  3.41k|        print_account_id(fdata->envelope->tx_details.tx.op_details.create_account_op.destination,
 1128|  3.41k|                         fdata->value,
 1129|  3.41k|                         fdata->value_len,
 1130|  3.41k|                         0,
 1131|  3.41k|                         0))
 1132|  3.41k|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_account_amount))
  ------------------
  |  |   30|  3.41k|    {                           \
  |  |   31|  3.41k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.41k]
  |  |  ------------------
  |  |   32|  3.41k|    }
  ------------------
 1133|  3.41k|    return true;
 1134|  3.41k|}
formatter.c:format_create_account_amount:
 1112|  3.41k|static bool format_create_account_amount(formatter_data_t *fdata) {
 1113|  3.41k|    STRLCPY(fdata->caption, "Starting Balance", fdata->caption_len);
  ------------------
  |  |   35|  3.41k|    {                                         \
  |  |   36|  3.41k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  3.41k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3.41k]
  |  |  ------------------
  |  |   38|  3.41k|    }
  ------------------
 1114|  3.41k|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
 1115|  3.41k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  3.41k|    {                           \
  |  |   31|  3.41k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.41k]
  |  |  ------------------
  |  |   32|  3.41k|    }
  ------------------
 1116|  3.41k|        print_amount(fdata->envelope->tx_details.tx.op_details.create_account_op.starting_balance,
 1117|  3.41k|                     &asset,
 1118|  3.41k|                     fdata->envelope->network,
 1119|  3.41k|                     fdata->value,
 1120|  3.41k|                     fdata->value_len))
 1121|  3.41k|    return format_operation_source_prepare(fdata);
 1122|  3.41k|}
formatter.c:format_operation_source_prepare:
  334|  5.58k|static bool format_operation_source_prepare(formatter_data_t *fdata) {
  335|  5.58k|    if (fdata->envelope->tx_details.tx.op_details.source_account_present) {
  ------------------
  |  Branch (335:9): [True: 127, False: 5.46k]
  ------------------
  336|       |        // If the source exists, when the user clicks the next button,
  337|       |        // it will jump to the page showing the source
  338|    127|        FORMATTER_CHECK(push_to_formatter_stack(&format_operation_source))
  ------------------
  |  |   30|    127|    {                           \
  |  |   31|    127|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 127]
  |  |  ------------------
  |  |   32|    127|    }
  ------------------
  339|  5.46k|    } else {
  340|  5.46k|        FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  5.46k|    {                           \
  |  |   31|  5.46k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.46k]
  |  |  ------------------
  |  |   32|  5.46k|    }
  ------------------
  341|  5.46k|    }
  342|  5.58k|    return true;
  343|  5.58k|}
formatter.c:format_operation_source:
  305|    127|static bool format_operation_source(formatter_data_t *fdata) {
  306|    127|    STRLCPY(fdata->caption, "Op Source", fdata->caption_len);
  ------------------
  |  |   35|    127|    {                                         \
  |  |   36|    127|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    127|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 127]
  |  |  ------------------
  |  |   38|    127|    }
  ------------------
  307|    127|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (307:9): [True: 113, False: 14]
  ------------------
  308|    127|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (308:9): [True: 96, False: 17]
  ------------------
  309|    127|        fdata->envelope->tx_details.tx.op_details.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (309:9): [True: 82, False: 14]
  ------------------
  310|    127|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (310:9): [True: 35, False: 47]
  ------------------
  311|     82|               fdata->signing_key,
  312|     82|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0 &&
  ------------------
  |  |   18|     82|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  313|    127|        memcmp(fdata->envelope->tx_details.tx.op_details.source_account.ed25519,
  ------------------
  |  Branch (313:9): [True: 14, False: 21]
  ------------------
  314|     35|               fdata->signing_key,
  315|     35|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|     35|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  316|     14|        FORMATTER_CHECK(
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
  317|     14|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
  318|     14|                                fdata->value,
  319|     14|                                fdata->value_len,
  320|     14|                                6,
  321|     14|                                6))
  322|    113|    } else {
  323|    113|        FORMATTER_CHECK(
  ------------------
  |  |   30|    113|    {                           \
  |  |   31|    113|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 113]
  |  |  ------------------
  |  |   32|    113|    }
  ------------------
  324|    113|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
  325|    113|                                fdata->value,
  326|    113|                                fdata->value_len,
  327|    113|                                0,
  328|    113|                                0))
  329|    113|    }
  330|    127|    FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|    127|    {                           \
  |  |   31|    127|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 127]
  |  |  ------------------
  |  |   32|    127|    }
  ------------------
  331|    127|    return true;
  332|    127|}
formatter.c:format_payment:
 1101|     72|static bool format_payment(formatter_data_t *fdata) {
 1102|     72|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|     72|    {                                         \
  |  |   36|     72|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     72|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 72]
  |  |  ------------------
  |  |   38|     72|    }
  ------------------
 1103|     72|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.payment_op.amount,
  ------------------
  |  |   30|     72|    {                           \
  |  |   31|     72|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 72]
  |  |  ------------------
  |  |   32|     72|    }
  ------------------
 1104|     72|                                 &fdata->envelope->tx_details.tx.op_details.payment_op.asset,
 1105|     72|                                 fdata->envelope->network,
 1106|     72|                                 fdata->value,
 1107|     72|                                 fdata->value_len))
 1108|     72|    FORMATTER_CHECK(push_to_formatter_stack(&format_payment_destination))
  ------------------
  |  |   30|     72|    {                           \
  |  |   31|     72|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 72]
  |  |  ------------------
  |  |   32|     72|    }
  ------------------
 1109|     72|    return true;
 1110|     72|}
formatter.c:format_payment_destination:
 1090|     72|static bool format_payment_destination(formatter_data_t *fdata) {
 1091|     72|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|     72|    {                                         \
  |  |   36|     72|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     72|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 72]
  |  |  ------------------
  |  |   38|     72|    }
  ------------------
 1092|     72|    FORMATTER_CHECK(
  ------------------
  |  |   30|     72|    {                           \
  |  |   31|     72|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 72]
  |  |  ------------------
  |  |   32|     72|    }
  ------------------
 1093|     72|        print_muxed_account(&fdata->envelope->tx_details.tx.op_details.payment_op.destination,
 1094|     72|                            fdata->value,
 1095|     72|                            fdata->value_len,
 1096|     72|                            0,
 1097|     72|                            0))
 1098|     72|    return format_operation_source_prepare(fdata);
 1099|     72|}
formatter.c:format_path_payment_strict_receive:
 1043|     24|static bool format_path_payment_strict_receive(formatter_data_t *fdata) {
 1044|     24|    STRLCPY(fdata->caption, "Send Max", fdata->caption_len);
  ------------------
  |  |   35|     24|    {                                         \
  |  |   36|     24|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     24|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   38|     24|    }
  ------------------
 1045|     24|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     24|    {                           \
  |  |   31|     24|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   32|     24|    }
  ------------------
 1046|     24|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.send_max,
 1047|     24|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.send_asset,
 1048|     24|        fdata->envelope->network,
 1049|     24|        fdata->value,
 1050|     24|        fdata->value_len))
 1051|     24|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_receive_destination))
  ------------------
  |  |   30|     24|    {                           \
  |  |   31|     24|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   32|     24|    }
  ------------------
 1052|     24|    return true;
 1053|     24|}
formatter.c:format_path_payment_strict_receive_destination:
 1031|     24|static bool format_path_payment_strict_receive_destination(formatter_data_t *fdata) {
 1032|     24|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|     24|    {                                         \
  |  |   36|     24|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     24|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   38|     24|    }
  ------------------
 1033|     24|    FORMATTER_CHECK(print_muxed_account(
  ------------------
  |  |   30|     24|    {                           \
  |  |   31|     24|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   32|     24|    }
  ------------------
 1034|     24|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.destination,
 1035|     24|        fdata->value,
 1036|     24|        fdata->value_len,
 1037|     24|        0,
 1038|     24|        0))
 1039|     24|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_receive_receive))
  ------------------
  |  |   30|     24|    {                           \
  |  |   31|     24|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   32|     24|    }
  ------------------
 1040|     24|    return true;
 1041|     24|}
formatter.c:format_path_payment_strict_receive_receive:
 1020|     24|static bool format_path_payment_strict_receive_receive(formatter_data_t *fdata) {
 1021|     24|    STRLCPY(fdata->caption, "Receive", fdata->caption_len);
  ------------------
  |  |   35|     24|    {                                         \
  |  |   36|     24|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     24|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   38|     24|    }
  ------------------
 1022|     24|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     24|    {                           \
  |  |   31|     24|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   32|     24|    }
  ------------------
 1023|     24|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.dest_amount,
 1024|     24|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.dest_asset,
 1025|     24|        fdata->envelope->network,
 1026|     24|        fdata->value,
 1027|     24|        fdata->value_len))
 1028|     24|    return format_operation_source_prepare(fdata);
 1029|     24|}
formatter.c:format_manage_sell_offer:
  897|     35|static bool format_manage_sell_offer(formatter_data_t *fdata) {
  898|     35|    if (!fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.amount) {
  ------------------
  |  Branch (898:9): [True: 6, False: 29]
  ------------------
  899|      6|        STRLCPY(fdata->caption, "Remove Offer", fdata->caption_len);
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
  900|      6|        FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
  901|      6|            fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id,
  902|      6|            fdata->value,
  903|      6|            fdata->value_len))
  904|      6|        return format_operation_source_prepare(fdata);
  905|     29|    } else {
  906|     29|        if (fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id) {
  ------------------
  |  Branch (906:13): [True: 24, False: 5]
  ------------------
  907|     24|            STRLCPY(fdata->caption, "Change Offer", fdata->caption_len);
  ------------------
  |  |   35|     24|    {                                         \
  |  |   36|     24|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     24|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   38|     24|    }
  ------------------
  908|     24|            FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|     24|    {                           \
  |  |   31|     24|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   32|     24|    }
  ------------------
  909|     24|                fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id,
  910|     24|                fdata->value,
  911|     24|                fdata->value_len))
  912|     24|        } else {
  913|      5|            STRLCPY(fdata->caption, "Create Offer", fdata->caption_len);
  ------------------
  |  |   35|      5|    {                                         \
  |  |   36|      5|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      5|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   38|      5|    }
  ------------------
  914|      5|            STRLCPY(fdata->value, "New Offer", fdata->value_len);
  ------------------
  |  |   35|      5|    {                                         \
  |  |   36|      5|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      5|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   38|      5|    }
  ------------------
  915|      5|        }
  916|     29|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_buy))
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  917|     29|    }
  918|     29|    return true;
  919|     35|}
formatter.c:format_manage_sell_offer_buy:
  886|     29|static bool format_manage_sell_offer_buy(formatter_data_t *fdata) {
  887|     29|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|     29|    {                                         \
  |  |   36|     29|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     29|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   38|     29|    }
  ------------------
  888|     29|    FORMATTER_CHECK(
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  889|     29|        print_asset(&fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.buying,
  890|     29|                    fdata->envelope->network,
  891|     29|                    fdata->value,
  892|     29|                    fdata->value_len))
  893|     29|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_sell))
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  894|     29|    return true;
  895|     29|}
formatter.c:format_manage_sell_offer_sell:
  874|     29|static bool format_manage_sell_offer_sell(formatter_data_t *fdata) {
  875|     29|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|     29|    {                                         \
  |  |   36|     29|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     29|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   38|     29|    }
  ------------------
  876|     29|    FORMATTER_CHECK(
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  877|     29|        print_amount(fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.amount,
  878|     29|                     &fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.selling,
  879|     29|                     fdata->envelope->network,
  880|     29|                     fdata->value,
  881|     29|                     fdata->value_len))
  882|     29|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_price))
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  883|     29|    return true;
  884|     29|}
formatter.c:format_manage_sell_offer_price:
  862|     29|static bool format_manage_sell_offer_price(formatter_data_t *fdata) {
  863|     29|    manage_sell_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op;
  864|     29|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|     29|    {                                         \
  |  |   36|     29|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     29|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   38|     29|    }
  ------------------
  865|     29|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  866|     29|                                &op->buying,
  867|     29|                                &op->selling,
  868|     29|                                fdata->envelope->network,
  869|     29|                                fdata->value,
  870|     29|                                fdata->value_len))
  871|     29|    return format_operation_source_prepare(fdata);
  872|     29|}
formatter.c:format_create_passive_sell_offer:
 1012|     42|static bool format_create_passive_sell_offer(formatter_data_t *fdata) {
 1013|     42|    (void) fdata;
 1014|     42|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     42|    {                                         \
  |  |   36|     42|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     42|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   38|     42|    }
  ------------------
 1015|     42|    STRLCPY(fdata->value, "Create Passive Sell Offer", fdata->value_len);
  ------------------
  |  |   35|     42|    {                                         \
  |  |   36|     42|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     42|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   38|     42|    }
  ------------------
 1016|     42|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_buy))
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1017|     42|    return true;
 1018|     42|}
formatter.c:format_create_passive_sell_offer_buy:
 1001|     42|static bool format_create_passive_sell_offer_buy(formatter_data_t *fdata) {
 1002|     42|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|     42|    {                                         \
  |  |   36|     42|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     42|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   38|     42|    }
  ------------------
 1003|     42|    FORMATTER_CHECK(
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1004|     42|        print_asset(&fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.buying,
 1005|     42|                    fdata->envelope->network,
 1006|     42|                    fdata->value,
 1007|     42|                    fdata->value_len))
 1008|     42|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_sell))
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1009|     42|    return true;
 1010|     42|}
formatter.c:format_create_passive_sell_offer_sell:
  989|     42|static bool format_create_passive_sell_offer_sell(formatter_data_t *fdata) {
  990|     42|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|     42|    {                                         \
  |  |   36|     42|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     42|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   38|     42|    }
  ------------------
  991|     42|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
  992|     42|        fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.amount,
  993|     42|        &fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.selling,
  994|     42|        fdata->envelope->network,
  995|     42|        fdata->value,
  996|     42|        fdata->value_len))
  997|     42|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_price))
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
  998|     42|    return true;
  999|     42|}
formatter.c:format_create_passive_sell_offer_price:
  976|     42|static bool format_create_passive_sell_offer_price(formatter_data_t *fdata) {
  977|     42|    create_passive_sell_offer_op_t *op =
  978|     42|        &fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op;
  979|     42|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|     42|    {                                         \
  |  |   36|     42|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     42|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   38|     42|    }
  ------------------
  980|     42|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
  981|     42|                                &op->buying,
  982|     42|                                &op->selling,
  983|     42|                                fdata->envelope->network,
  984|     42|                                fdata->value,
  985|     42|                                fdata->value_len))
  986|     42|    return format_operation_source_prepare(fdata);
  987|     42|}
formatter.c:format_set_options:
  763|    323|static bool format_set_options(formatter_data_t *fdata) {
  764|       |    // this operation is a special one among all operations, because all its
  765|       |    // fields are optional.
  766|    323|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    323|    {                                         \
  |  |   36|    323|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    323|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 323]
  |  |  ------------------
  |  |   38|    323|    }
  ------------------
  767|    323|    STRLCPY(fdata->value, "Set Options", fdata->value_len);
  ------------------
  |  |   35|    323|    {                                         \
  |  |   36|    323|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    323|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 323]
  |  |  ------------------
  |  |   38|    323|    }
  ------------------
  768|    323|    if (is_empty_set_options_body(fdata)) {
  ------------------
  |  Branch (768:9): [True: 64, False: 259]
  ------------------
  769|     64|        FORMATTER_CHECK(push_to_formatter_stack(format_set_options_empty_body))
  ------------------
  |  |   30|     64|    {                           \
  |  |   31|     64|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 64]
  |  |  ------------------
  |  |   32|     64|    }
  ------------------
  770|    259|    } else {
  771|    259|        format_set_option_inflation_destination_prepare(fdata);
  772|    259|    }
  773|    323|    return true;
  774|    323|}
formatter.c:is_empty_set_options_body:
  750|    323|static bool is_empty_set_options_body(formatter_data_t *fdata) {
  751|    323|    return !(
  752|    323|        fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination_present ||
  ------------------
  |  Branch (752:9): [True: 4, False: 319]
  ------------------
  753|    323|        fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags_present ||
  ------------------
  |  Branch (753:9): [True: 50, False: 269]
  ------------------
  754|    323|        fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags_present ||
  ------------------
  |  Branch (754:9): [True: 10, False: 259]
  ------------------
  755|    323|        fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight_present ||
  ------------------
  |  Branch (755:9): [True: 14, False: 245]
  ------------------
  756|    323|        fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold_present ||
  ------------------
  |  Branch (756:9): [True: 42, False: 203]
  ------------------
  757|    323|        fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold_present ||
  ------------------
  |  Branch (757:9): [True: 35, False: 168]
  ------------------
  758|    323|        fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold_present ||
  ------------------
  |  Branch (758:9): [True: 14, False: 154]
  ------------------
  759|    323|        fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_present ||
  ------------------
  |  Branch (759:9): [True: 46, False: 108]
  ------------------
  760|    323|        fdata->envelope->tx_details.tx.op_details.set_options_op.signer_present);
  ------------------
  |  Branch (760:9): [True: 44, False: 64]
  ------------------
  761|    323|}
formatter.c:format_set_options_empty_body:
  743|     64|static bool format_set_options_empty_body(formatter_data_t *fdata) {
  744|     64|    (void) fdata;
  745|     64|    STRLCPY(fdata->caption, "SET OPTIONS", fdata->caption_len);
  ------------------
  |  |   35|     64|    {                                         \
  |  |   36|     64|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     64|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 64]
  |  |  ------------------
  |  |   38|     64|    }
  ------------------
  746|     64|    STRLCPY(fdata->value, "[BODY IS EMPTY]", fdata->value_len);
  ------------------
  |  |   35|     64|    {                                         \
  |  |   36|     64|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     64|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 64]
  |  |  ------------------
  |  |   38|     64|    }
  ------------------
  747|     64|    return format_operation_source_prepare(fdata);
  748|     64|}
formatter.c:format_set_option_inflation_destination_prepare:
  734|    259|static bool format_set_option_inflation_destination_prepare(formatter_data_t *fdata) {
  735|    259|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination_present) {
  ------------------
  |  Branch (735:9): [True: 4, False: 255]
  ------------------
  736|      4|        FORMATTER_CHECK(push_to_formatter_stack(format_set_option_inflation_destination))
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  737|    255|    } else {
  738|    255|        format_set_option_clear_flags_prepare(fdata);
  739|    255|    }
  740|    259|    return true;
  741|    259|}
formatter.c:format_set_option_inflation_destination:
  722|      4|static bool format_set_option_inflation_destination(formatter_data_t *fdata) {
  723|      4|    STRLCPY(fdata->caption, "Inflation Dest", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  724|      4|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  725|      4|        fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination,
  726|      4|        fdata->value,
  727|      4|        fdata->value_len,
  728|      4|        0,
  729|      4|        0))
  730|      4|    format_set_option_clear_flags_prepare(fdata);
  731|      4|    return true;
  732|      4|}
formatter.c:format_set_option_clear_flags_prepare:
  713|    259|static bool format_set_option_clear_flags_prepare(formatter_data_t *fdata) {
  714|    259|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags_present) {
  ------------------
  |  Branch (714:9): [True: 53, False: 206]
  ------------------
  715|     53|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_clear_flags))
  ------------------
  |  |   30|     53|    {                           \
  |  |   31|     53|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 53]
  |  |  ------------------
  |  |   32|     53|    }
  ------------------
  716|    206|    } else {
  717|    206|        format_set_option_set_flags_prepare(fdata);
  718|    206|    }
  719|    259|    return true;
  720|    259|}
formatter.c:format_set_option_clear_flags:
  703|     53|static bool format_set_option_clear_flags(formatter_data_t *fdata) {
  704|     53|    STRLCPY(fdata->caption, "Clear Flags", fdata->caption_len);
  ------------------
  |  |   35|     53|    {                                         \
  |  |   36|     53|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     53|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 53]
  |  |  ------------------
  |  |   38|     53|    }
  ------------------
  705|     53|    FORMATTER_CHECK(
  ------------------
  |  |   30|     53|    {                           \
  |  |   31|     53|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 53]
  |  |  ------------------
  |  |   32|     53|    }
  ------------------
  706|     53|        print_account_flags(fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags,
  707|     53|                            fdata->value,
  708|     53|                            fdata->value_len))
  709|     53|    format_set_option_set_flags_prepare(fdata);
  710|     53|    return true;
  711|     53|}
formatter.c:format_set_option_set_flags_prepare:
  694|    259|static bool format_set_option_set_flags_prepare(formatter_data_t *fdata) {
  695|    259|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags_present) {
  ------------------
  |  Branch (695:9): [True: 58, False: 201]
  ------------------
  696|     58|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_set_flags))
  ------------------
  |  |   30|     58|    {                           \
  |  |   31|     58|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 58]
  |  |  ------------------
  |  |   32|     58|    }
  ------------------
  697|    201|    } else {
  698|    201|        format_set_option_master_weight_prepare(fdata);
  699|    201|    }
  700|    259|    return true;
  701|    259|}
formatter.c:format_set_option_set_flags:
  684|     58|static bool format_set_option_set_flags(formatter_data_t *fdata) {
  685|     58|    STRLCPY(fdata->caption, "Set Flags", fdata->caption_len);
  ------------------
  |  |   35|     58|    {                                         \
  |  |   36|     58|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     58|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 58]
  |  |  ------------------
  |  |   38|     58|    }
  ------------------
  686|     58|    FORMATTER_CHECK(
  ------------------
  |  |   30|     58|    {                           \
  |  |   31|     58|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 58]
  |  |  ------------------
  |  |   32|     58|    }
  ------------------
  687|     58|        print_account_flags(fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags,
  688|     58|                            fdata->value,
  689|     58|                            fdata->value_len))
  690|     58|    format_set_option_master_weight_prepare(fdata);
  691|     58|    return true;
  692|     58|}
formatter.c:format_set_option_master_weight_prepare:
  675|    259|static bool format_set_option_master_weight_prepare(formatter_data_t *fdata) {
  676|    259|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight_present) {
  ------------------
  |  Branch (676:9): [True: 16, False: 243]
  ------------------
  677|     16|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_master_weight))
  ------------------
  |  |   30|     16|    {                           \
  |  |   31|     16|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 16]
  |  |  ------------------
  |  |   32|     16|    }
  ------------------
  678|    243|    } else {
  679|    243|        format_set_option_low_threshold_prepare(fdata);
  680|    243|    }
  681|    259|    return true;
  682|    259|}
formatter.c:format_set_option_master_weight:
  665|     16|static bool format_set_option_master_weight(formatter_data_t *fdata) {
  666|     16|    STRLCPY(fdata->caption, "Master Weight", fdata->caption_len);
  ------------------
  |  |   35|     16|    {                                         \
  |  |   36|     16|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     16|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 16]
  |  |  ------------------
  |  |   38|     16|    }
  ------------------
  667|     16|    FORMATTER_CHECK(
  ------------------
  |  |   30|     16|    {                           \
  |  |   31|     16|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 16]
  |  |  ------------------
  |  |   32|     16|    }
  ------------------
  668|     16|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight,
  669|     16|                         fdata->value,
  670|     16|                         fdata->value_len))
  671|     16|    format_set_option_low_threshold_prepare(fdata);
  672|     16|    return true;
  673|     16|}
formatter.c:format_set_option_low_threshold_prepare:
  656|    259|static bool format_set_option_low_threshold_prepare(formatter_data_t *fdata) {
  657|    259|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold_present) {
  ------------------
  |  Branch (657:9): [True: 43, False: 216]
  ------------------
  658|     43|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_low_threshold))
  ------------------
  |  |   30|     43|    {                           \
  |  |   31|     43|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   32|     43|    }
  ------------------
  659|    216|    } else {
  660|    216|        format_set_option_medium_threshold_prepare(fdata);
  661|    216|    }
  662|    259|    return true;
  663|    259|}
formatter.c:format_set_option_low_threshold:
  646|     43|static bool format_set_option_low_threshold(formatter_data_t *fdata) {
  647|     43|    STRLCPY(fdata->caption, "Low Threshold", fdata->caption_len);
  ------------------
  |  |   35|     43|    {                                         \
  |  |   36|     43|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     43|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   38|     43|    }
  ------------------
  648|     43|    FORMATTER_CHECK(
  ------------------
  |  |   30|     43|    {                           \
  |  |   31|     43|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   32|     43|    }
  ------------------
  649|     43|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold,
  650|     43|                         fdata->value,
  651|     43|                         fdata->value_len))
  652|     43|    format_set_option_medium_threshold_prepare(fdata);
  653|     43|    return true;
  654|     43|}
formatter.c:format_set_option_medium_threshold_prepare:
  637|    259|static bool format_set_option_medium_threshold_prepare(formatter_data_t *fdata) {
  638|    259|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold_present) {
  ------------------
  |  Branch (638:9): [True: 36, False: 223]
  ------------------
  639|     36|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_medium_threshold))
  ------------------
  |  |   30|     36|    {                           \
  |  |   31|     36|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   32|     36|    }
  ------------------
  640|    223|    } else {
  641|    223|        format_set_option_high_threshold_prepare(fdata);
  642|    223|    }
  643|    259|    return true;
  644|    259|}
formatter.c:format_set_option_medium_threshold:
  627|     36|static bool format_set_option_medium_threshold(formatter_data_t *fdata) {
  628|     36|    STRLCPY(fdata->caption, "Medium Threshold", fdata->caption_len);
  ------------------
  |  |   35|     36|    {                                         \
  |  |   36|     36|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     36|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   38|     36|    }
  ------------------
  629|     36|    FORMATTER_CHECK(
  ------------------
  |  |   30|     36|    {                           \
  |  |   31|     36|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   32|     36|    }
  ------------------
  630|     36|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold,
  631|     36|                         fdata->value,
  632|     36|                         fdata->value_len))
  633|     36|    format_set_option_high_threshold_prepare(fdata);
  634|     36|    return true;
  635|     36|}
formatter.c:format_set_option_high_threshold_prepare:
  618|    259|static bool format_set_option_high_threshold_prepare(formatter_data_t *fdata) {
  619|    259|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold_present) {
  ------------------
  |  Branch (619:9): [True: 15, False: 244]
  ------------------
  620|     15|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_high_threshold))
  ------------------
  |  |   30|     15|    {                           \
  |  |   31|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   32|     15|    }
  ------------------
  621|    244|    } else {
  622|    244|        format_set_option_home_domain_prepare(fdata);
  623|    244|    }
  624|    259|    return true;
  625|    259|}
formatter.c:format_set_option_high_threshold:
  608|     15|static bool format_set_option_high_threshold(formatter_data_t *fdata) {
  609|     15|    STRLCPY(fdata->caption, "High Threshold", fdata->caption_len);
  ------------------
  |  |   35|     15|    {                                         \
  |  |   36|     15|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     15|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   38|     15|    }
  ------------------
  610|     15|    FORMATTER_CHECK(
  ------------------
  |  |   30|     15|    {                           \
  |  |   31|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   32|     15|    }
  ------------------
  611|     15|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold,
  612|     15|                         fdata->value,
  613|     15|                         fdata->value_len))
  614|     15|    format_set_option_home_domain_prepare(fdata);
  615|     15|    return true;
  616|     15|}
formatter.c:format_set_option_home_domain_prepare:
  599|    259|static bool format_set_option_home_domain_prepare(formatter_data_t *fdata) {
  600|    259|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_present) {
  ------------------
  |  Branch (600:9): [True: 49, False: 210]
  ------------------
  601|     49|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_home_domain))
  ------------------
  |  |   30|     49|    {                           \
  |  |   31|     49|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 49]
  |  |  ------------------
  |  |   32|     49|    }
  ------------------
  602|    210|    } else {
  603|    210|        format_set_option_signer_prepare(fdata);
  604|    210|    }
  605|    259|    return true;
  606|    259|}
formatter.c:format_set_option_home_domain:
  584|     49|static bool format_set_option_home_domain(formatter_data_t *fdata) {
  585|     49|    STRLCPY(fdata->caption, "Home Domain", fdata->caption_len);
  ------------------
  |  |   35|     49|    {                                         \
  |  |   36|     49|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     49|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 49]
  |  |  ------------------
  |  |   38|     49|    }
  ------------------
  586|     49|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_size) {
  ------------------
  |  Branch (586:9): [True: 25, False: 24]
  ------------------
  587|     25|        FORMATTER_CHECK(
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  588|     25|            print_string(fdata->value,
  589|     25|                         fdata->value_len,
  590|     25|                         fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain,
  591|     25|                         fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_size))
  592|     25|    } else {
  593|     24|        STRLCPY(fdata->value, "[remove home domain from account]", fdata->value_len);
  ------------------
  |  |   35|     24|    {                                         \
  |  |   36|     24|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     24|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   38|     24|    }
  ------------------
  594|     24|    }
  595|     49|    format_set_option_signer_prepare(fdata);
  596|     49|    return true;
  597|     49|}
formatter.c:format_set_option_signer_prepare:
  575|    259|static bool format_set_option_signer_prepare(formatter_data_t *fdata) {
  576|    259|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.signer_present) {
  ------------------
  |  Branch (576:9): [True: 70, False: 189]
  ------------------
  577|     70|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer))
  ------------------
  |  |   30|     70|    {                           \
  |  |   31|     70|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 70]
  |  |  ------------------
  |  |   32|     70|    }
  ------------------
  578|    189|    } else {
  579|    189|        return format_operation_source_prepare(fdata);
  580|    189|    }
  581|     70|    return true;
  582|    259|}
formatter.c:format_set_option_signer:
  544|     70|static bool format_set_option_signer(formatter_data_t *fdata) {
  545|     70|    signer_t *signer = &fdata->envelope->tx_details.tx.op_details.set_options_op.signer;
  546|     70|    if (signer->weight) {
  ------------------
  |  Branch (546:9): [True: 22, False: 48]
  ------------------
  547|     22|        STRLCPY(fdata->caption, "Add Signer", fdata->caption_len);
  ------------------
  |  |   35|     22|    {                                         \
  |  |   36|     22|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     22|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 22]
  |  |  ------------------
  |  |   38|     22|    }
  ------------------
  548|     48|    } else {
  549|     48|        STRLCPY(fdata->caption, "Remove Signer", fdata->caption_len);
  ------------------
  |  |   35|     48|    {                                         \
  |  |   36|     48|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     48|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 48]
  |  |  ------------------
  |  |   38|     48|    }
  ------------------
  550|     48|    }
  551|     70|    switch (signer->key.type) {
  552|     19|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (552:9): [True: 19, False: 51]
  ------------------
  553|     19|            STRLCPY(fdata->value, "Type Public Key", fdata->value_len);
  ------------------
  |  |   35|     19|    {                                         \
  |  |   36|     19|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     19|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   38|     19|    }
  ------------------
  554|     19|            break;
  555|     19|        }
  556|     19|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (556:9): [True: 19, False: 51]
  ------------------
  557|     19|            STRLCPY(fdata->value, "Type Hash(x)", fdata->value_len);
  ------------------
  |  |   35|     19|    {                                         \
  |  |   36|     19|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     19|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   38|     19|    }
  ------------------
  558|     19|            break;
  559|     19|        }
  560|     30|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (560:9): [True: 30, False: 40]
  ------------------
  561|     30|            STRLCPY(fdata->value, "Type Pre-Auth", fdata->value_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
  562|     30|            break;
  563|     30|        }
  564|      2|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (564:9): [True: 2, False: 68]
  ------------------
  565|      2|            STRLCPY(fdata->value, "Type Ed25519 Signed Payload", fdata->value_len);
  ------------------
  |  |   35|      2|    {                                         \
  |  |   36|      2|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      2|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   38|      2|    }
  ------------------
  566|      2|            break;
  567|      2|        }
  568|      0|        default:
  ------------------
  |  Branch (568:9): [True: 0, False: 70]
  ------------------
  569|      0|            return false;
  570|     70|    }
  571|     70|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer_detail))
  ------------------
  |  |   30|     70|    {                           \
  |  |   31|     70|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 70]
  |  |  ------------------
  |  |   32|     70|    }
  ------------------
  572|     70|    return true;
  573|     70|}
formatter.c:format_set_option_signer_detail:
  530|     70|static bool format_set_option_signer_detail(formatter_data_t *fdata) {
  531|     70|    STRLCPY(fdata->caption, "Signer Key", fdata->caption_len);
  ------------------
  |  |   35|     70|    {                                         \
  |  |   36|     70|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     70|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 70]
  |  |  ------------------
  |  |   38|     70|    }
  ------------------
  532|     70|    signer_key_t *key = &fdata->envelope->tx_details.tx.op_details.set_options_op.signer.key;
  533|       |
  534|     70|    FORMATTER_CHECK(print_signer_key_detail(key, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     70|    {                           \
  |  |   31|     70|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 70]
  |  |  ------------------
  |  |   32|     70|    }
  ------------------
  535|       |
  536|     70|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.signer.weight != 0) {
  ------------------
  |  Branch (536:9): [True: 22, False: 48]
  ------------------
  537|     22|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer_weight))
  ------------------
  |  |   30|     22|    {                           \
  |  |   31|     22|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 22]
  |  |  ------------------
  |  |   32|     22|    }
  ------------------
  538|     48|    } else {
  539|     48|        return format_operation_source_prepare(fdata);
  540|     48|    }
  541|     22|    return true;
  542|     70|}
formatter.c:print_signer_key_detail:
  502|    331|static bool print_signer_key_detail(signer_key_t *key, char *value, size_t value_len) {
  503|    331|    switch (key->type) {
  504|     39|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (504:9): [True: 39, False: 292]
  ------------------
  505|     39|            FORMATTER_CHECK(print_account_id(key->ed25519, value, value_len, 0, 0))
  ------------------
  |  |   30|     39|    {                           \
  |  |   31|     39|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   32|     39|    }
  ------------------
  506|     39|            break;
  507|     39|        }
  508|     39|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (508:9): [True: 33, False: 298]
  ------------------
  509|     33|            FORMATTER_CHECK(print_hash_x_key(key->hash_x, value, value_len, 0, 0))
  ------------------
  |  |   30|     33|    {                           \
  |  |   31|     33|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 33]
  |  |  ------------------
  |  |   32|     33|    }
  ------------------
  510|     33|            break;
  511|     33|        }
  512|     76|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (512:9): [True: 76, False: 255]
  ------------------
  513|     76|            FORMATTER_CHECK(print_pre_auth_x_key(key->pre_auth_tx, value, value_len, 0, 0))
  ------------------
  |  |   30|     76|    {                           \
  |  |   31|     76|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 76]
  |  |  ------------------
  |  |   32|     76|    }
  ------------------
  514|     76|            break;
  515|     76|        }
  516|    183|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (516:9): [True: 183, False: 148]
  ------------------
  517|    183|            FORMATTER_CHECK(print_ed25519_signed_payload(&key->ed25519_signed_payload,
  ------------------
  |  |   30|    183|    {                           \
  |  |   31|    183|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 183]
  |  |  ------------------
  |  |   32|    183|    }
  ------------------
  518|    183|                                                         value,
  519|    183|                                                         value_len,
  520|    183|                                                         12,
  521|    183|                                                         12))
  522|    183|            break;
  523|    183|        }
  524|    183|        default:
  ------------------
  |  Branch (524:9): [True: 0, False: 331]
  ------------------
  525|      0|            return false;
  526|    331|    }
  527|    331|    return true;
  528|    331|}
formatter.c:format_set_option_signer_weight:
  493|     22|static bool format_set_option_signer_weight(formatter_data_t *fdata) {
  494|     22|    STRLCPY(fdata->caption, "Weight", fdata->caption_len);
  ------------------
  |  |   35|     22|    {                                         \
  |  |   36|     22|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     22|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 22]
  |  |  ------------------
  |  |   38|     22|    }
  ------------------
  495|     22|    FORMATTER_CHECK(
  ------------------
  |  |   30|     22|    {                           \
  |  |   31|     22|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 22]
  |  |  ------------------
  |  |   32|     22|    }
  ------------------
  496|     22|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.signer.weight,
  497|     22|                         fdata->value,
  498|     22|                         fdata->value_len))
  499|     22|    return format_operation_source_prepare(fdata);
  500|     22|}
formatter.c:format_change_trust:
  829|    159|static bool format_change_trust(formatter_data_t *fdata) {
  830|    159|    if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit) {
  ------------------
  |  Branch (830:9): [True: 97, False: 62]
  ------------------
  831|     97|        STRLCPY(fdata->caption, "Change Trust", fdata->caption_len);
  ------------------
  |  |   35|     97|    {                                         \
  |  |   36|     97|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     97|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 97]
  |  |  ------------------
  |  |   38|     97|    }
  ------------------
  832|     97|    } else {
  833|     62|        STRLCPY(fdata->caption, "Remove Trust", fdata->caption_len);
  ------------------
  |  |   35|     62|    {                                         \
  |  |   36|     62|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     62|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 62]
  |  |  ------------------
  |  |   38|     62|    }
  ------------------
  834|     62|    }
  835|    159|    uint8_t asset_type = fdata->envelope->tx_details.tx.op_details.change_trust_op.line.type;
  836|    159|    switch (asset_type) {
  837|     26|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (837:9): [True: 26, False: 133]
  ------------------
  838|     60|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (838:9): [True: 34, False: 125]
  ------------------
  839|     60|            FORMATTER_CHECK(print_asset(
  ------------------
  |  |   30|     60|    {                           \
  |  |   31|     60|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 60]
  |  |  ------------------
  |  |   32|     60|    }
  ------------------
  840|     60|                (asset_t *) &fdata->envelope->tx_details.tx.op_details.change_trust_op.line,
  841|     60|                fdata->envelope->network,
  842|     60|                fdata->value,
  843|     60|                fdata->value_len))
  844|     60|            if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit &&
  ------------------
  |  Branch (844:17): [True: 45, False: 15]
  ------------------
  845|     60|                fdata->envelope->tx_details.tx.op_details.change_trust_op.limit != INT64_MAX) {
  ------------------
  |  Branch (845:17): [True: 44, False: 1]
  ------------------
  846|     44|                FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_limit))
  ------------------
  |  |   30|     44|    {                           \
  |  |   31|     44|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 44]
  |  |  ------------------
  |  |   32|     44|    }
  ------------------
  847|     44|            } else {
  848|     16|                return format_operation_source_prepare(fdata);
  849|     16|            }
  850|     44|            break;
  851|     69|        case ASSET_TYPE_POOL_SHARE:
  ------------------
  |  Branch (851:9): [True: 69, False: 90]
  ------------------
  852|     69|            STRLCPY(fdata->value, "Liquidity Pool Asset", fdata->value_len);
  ------------------
  |  |   35|     69|    {                                         \
  |  |   36|     69|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     69|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   38|     69|    }
  ------------------
  853|     69|            FORMATTER_CHECK(
  ------------------
  |  |   30|     69|    {                           \
  |  |   31|     69|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   32|     69|    }
  ------------------
  854|     69|                push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_asset_a))
  855|     69|            break;
  856|     69|        default:
  ------------------
  |  Branch (856:9): [True: 30, False: 129]
  ------------------
  857|     30|            return false;
  858|    159|    }
  859|    113|    return true;
  860|    159|}
formatter.c:format_change_trust_limit:
  776|     73|static bool format_change_trust_limit(formatter_data_t *fdata) {
  777|     73|    STRLCPY(fdata->caption, "Trust Limit", fdata->caption_len);
  ------------------
  |  |   35|     73|    {                                         \
  |  |   36|     73|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     73|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   38|     73|    }
  ------------------
  778|     73|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.change_trust_op.limit,
  ------------------
  |  |   30|     73|    {                           \
  |  |   31|     73|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   32|     73|    }
  ------------------
  779|     73|                                 NULL,
  780|     73|                                 fdata->envelope->network,
  781|     73|                                 fdata->value,
  782|     73|                                 fdata->value_len))
  783|     73|    return format_operation_source_prepare(fdata);
  784|     73|}
formatter.c:format_change_trust_detail_liquidity_pool_asset_a:
  818|     69|static bool format_change_trust_detail_liquidity_pool_asset_a(formatter_data_t *fdata) {
  819|     69|    STRLCPY(fdata->caption, "Asset A", fdata->caption_len);
  ------------------
  |  |   35|     69|    {                                         \
  |  |   36|     69|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     69|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   38|     69|    }
  ------------------
  820|     69|    FORMATTER_CHECK(print_asset(&fdata->envelope->tx_details.tx.op_details.change_trust_op.line
  ------------------
  |  |   30|     69|    {                           \
  |  |   31|     69|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   32|     69|    }
  ------------------
  821|     69|                                     .liquidity_pool.constant_product.asset_a,
  822|     69|                                fdata->envelope->network,
  823|     69|                                fdata->value,
  824|     69|                                fdata->value_len))
  825|     69|    FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_asset_b))
  ------------------
  |  |   30|     69|    {                           \
  |  |   31|     69|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   32|     69|    }
  ------------------
  826|     69|    return true;
  827|     69|}
formatter.c:format_change_trust_detail_liquidity_pool_asset_b:
  807|     69|static bool format_change_trust_detail_liquidity_pool_asset_b(formatter_data_t *fdata) {
  808|     69|    STRLCPY(fdata->caption, "Asset B", fdata->caption_len);
  ------------------
  |  |   35|     69|    {                                         \
  |  |   36|     69|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     69|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   38|     69|    }
  ------------------
  809|     69|    FORMATTER_CHECK(print_asset(&fdata->envelope->tx_details.tx.op_details.change_trust_op.line
  ------------------
  |  |   30|     69|    {                           \
  |  |   31|     69|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   32|     69|    }
  ------------------
  810|     69|                                     .liquidity_pool.constant_product.asset_b,
  811|     69|                                fdata->envelope->network,
  812|     69|                                fdata->value,
  813|     69|                                fdata->value_len))
  814|     69|    FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_fee))
  ------------------
  |  |   30|     69|    {                           \
  |  |   31|     69|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   32|     69|    }
  ------------------
  815|     69|    return true;
  816|     69|}
formatter.c:format_change_trust_detail_liquidity_pool_fee:
  786|     69|static bool format_change_trust_detail_liquidity_pool_fee(formatter_data_t *fdata) {
  787|     69|    STRLCPY(fdata->caption, "Pool Fee Rate", fdata->caption_len);
  ------------------
  |  |   35|     69|    {                                         \
  |  |   36|     69|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     69|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   38|     69|    }
  ------------------
  788|       |
  789|     69|    uint8_t fee[4] = {0};
  790|    345|    for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (790:21): [True: 276, False: 69]
  ------------------
  791|    276|        fee[i] = fdata->envelope->tx_details.tx.op_details.change_trust_op.line.liquidity_pool
  792|    276|                     .constant_product.fee >>
  793|    276|                 (8 * (3 - i));
  794|    276|    }
  795|     69|    FORMATTER_CHECK(print_int32(fee, 2, fdata->value, fdata->value_len, false))
  ------------------
  |  |   30|     69|    {                           \
  |  |   31|     69|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   32|     69|    }
  ------------------
  796|       |
  797|     69|    STRLCAT(fdata->value, "%", fdata->value_len);
  ------------------
  |  |   41|     69|    {                                         \
  |  |   42|     69|        size_t len = strlcat(dst, src, size); \
  |  |   43|     69|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   44|     69|    }
  ------------------
  798|     69|    if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit &&
  ------------------
  |  Branch (798:9): [True: 30, False: 39]
  ------------------
  799|     69|        fdata->envelope->tx_details.tx.op_details.change_trust_op.limit != INT64_MAX) {
  ------------------
  |  Branch (799:9): [True: 29, False: 1]
  ------------------
  800|     29|        FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_limit))
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  801|     40|    } else {
  802|     40|        return format_operation_source_prepare(fdata);
  803|     40|    }
  804|     29|    return true;
  805|     69|}
formatter.c:format_allow_trust:
  485|     32|static bool format_allow_trust(formatter_data_t *fdata) {
  486|     32|    (void) fdata;
  487|     32|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
  488|     32|    STRLCPY(fdata->value, "Allow Trust", fdata->value_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
  489|     32|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_trustor))
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
  490|     32|    return true;
  491|     32|}
formatter.c:format_allow_trust_trustor:
  473|     32|static bool format_allow_trust_trustor(formatter_data_t *fdata) {
  474|     32|    STRLCPY(fdata->caption, "Trustor", fdata->caption_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
  475|     32|    FORMATTER_CHECK(
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
  476|     32|        print_account_id(fdata->envelope->tx_details.tx.op_details.allow_trust_op.trustor,
  477|     32|                         fdata->value,
  478|     32|                         fdata->value_len,
  479|     32|                         0,
  480|     32|                         0))
  481|     32|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_asset_code))
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
  482|     32|    return true;
  483|     32|}
formatter.c:format_allow_trust_asset_code:
  446|     32|static bool format_allow_trust_asset_code(formatter_data_t *fdata) {
  447|     32|    STRLCPY(fdata->caption, "Asset Code", fdata->caption_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
  448|     32|    switch (fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_type) {
  449|     27|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (449:9): [True: 27, False: 5]
  ------------------
  450|     27|            FORMATTER_CHECK(
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
  451|     27|                print_string(fdata->value,
  452|     27|                             fdata->value_len,
  453|     27|                             fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_code,
  454|     27|                             4))
  455|       |
  456|     27|            break;
  457|     27|        }
  458|     27|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (458:9): [True: 5, False: 27]
  ------------------
  459|      5|            FORMATTER_CHECK(
  ------------------
  |  |   30|      5|    {                           \
  |  |   31|      5|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   32|      5|    }
  ------------------
  460|      5|                print_string(fdata->value,
  461|      5|                             fdata->value_len,
  462|      5|                             fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_code,
  463|      5|                             12))
  464|      5|            break;
  465|      5|        }
  466|      5|        default:
  ------------------
  |  Branch (466:9): [True: 0, False: 32]
  ------------------
  467|      0|            return false;  // unknown asset type
  468|     32|    }
  469|     32|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_authorize))
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
  470|     32|    return true;
  471|     32|}
formatter.c:format_allow_trust_authorize:
  437|     32|static bool format_allow_trust_authorize(formatter_data_t *fdata) {
  438|     32|    STRLCPY(fdata->caption, "Authorize Flag", fdata->caption_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
  439|     32|    FORMATTER_CHECK(
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
  440|     32|        print_allow_trust_flags(fdata->envelope->tx_details.tx.op_details.allow_trust_op.authorize,
  441|     32|                                fdata->value,
  442|     32|                                fdata->value_len))
  443|     32|    return format_operation_source_prepare(fdata);
  444|     32|}
formatter.c:format_account_merge:
  387|     53|static bool format_account_merge(formatter_data_t *fdata) {
  388|     53|    (void) fdata;
  389|     53|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     53|    {                                         \
  |  |   36|     53|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     53|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 53]
  |  |  ------------------
  |  |   38|     53|    }
  ------------------
  390|     53|    STRLCPY(fdata->value, "Account Merge", fdata->value_len);
  ------------------
  |  |   35|     53|    {                                         \
  |  |   36|     53|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     53|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 53]
  |  |  ------------------
  |  |   38|     53|    }
  ------------------
  391|     53|    FORMATTER_CHECK(push_to_formatter_stack(&format_account_merge_detail))
  ------------------
  |  |   30|     53|    {                           \
  |  |   31|     53|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 53]
  |  |  ------------------
  |  |   32|     53|    }
  ------------------
  392|     53|    return true;
  393|     53|}
formatter.c:format_account_merge_detail:
  380|     53|static bool format_account_merge_detail(formatter_data_t *fdata) {
  381|     53|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|     53|    {                                         \
  |  |   36|     53|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     53|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 53]
  |  |  ------------------
  |  |   38|     53|    }
  ------------------
  382|     53|    STRLCPY(fdata->value, "All Funds", fdata->value_len);
  ------------------
  |  |   35|     53|    {                                         \
  |  |   36|     53|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     53|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 53]
  |  |  ------------------
  |  |   38|     53|    }
  ------------------
  383|     53|    FORMATTER_CHECK(push_to_formatter_stack(&format_account_merge_destination))
  ------------------
  |  |   30|     53|    {                           \
  |  |   31|     53|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 53]
  |  |  ------------------
  |  |   32|     53|    }
  ------------------
  384|     53|    return true;
  385|     53|}
formatter.c:format_account_merge_destination:
  369|     53|static bool format_account_merge_destination(formatter_data_t *fdata) {
  370|     53|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|     53|    {                                         \
  |  |   36|     53|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     53|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 53]
  |  |  ------------------
  |  |   38|     53|    }
  ------------------
  371|     53|    FORMATTER_CHECK(
  ------------------
  |  |   30|     53|    {                           \
  |  |   31|     53|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 53]
  |  |  ------------------
  |  |   32|     53|    }
  ------------------
  372|     53|        print_muxed_account(&fdata->envelope->tx_details.tx.op_details.account_merge_op.destination,
  373|     53|                            fdata->value,
  374|     53|                            fdata->value_len,
  375|     53|                            0,
  376|     53|                            0))
  377|     53|    return format_operation_source_prepare(fdata);
  378|     53|}
formatter.c:format_inflation:
  362|    166|static bool format_inflation(formatter_data_t *fdata) {
  363|    166|    (void) fdata;
  364|    166|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    166|    {                                         \
  |  |   36|    166|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    166|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 166]
  |  |  ------------------
  |  |   38|    166|    }
  ------------------
  365|    166|    STRLCPY(fdata->value, "Inflation", fdata->value_len);
  ------------------
  |  |   35|    166|    {                                         \
  |  |   36|    166|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    166|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 166]
  |  |  ------------------
  |  |   38|    166|    }
  ------------------
  366|    166|    return format_operation_source_prepare(fdata);
  367|    166|}
formatter.c:format_manage_data:
  420|    155|static bool format_manage_data(formatter_data_t *fdata) {
  421|    155|    FORMATTER_CHECK(
  ------------------
  |  |   30|    155|    {                           \
  |  |   31|    155|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 155]
  |  |  ------------------
  |  |   32|    155|    }
  ------------------
  422|    155|        print_string(fdata->value,
  423|    155|                     fdata->value_len,
  424|    155|                     fdata->envelope->tx_details.tx.op_details.manage_data_op.data_name,
  425|    155|                     fdata->envelope->tx_details.tx.op_details.manage_data_op.data_name_size))
  426|       |
  427|    155|    if (fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size) {
  ------------------
  |  Branch (427:9): [True: 4, False: 151]
  ------------------
  428|      4|        STRLCPY(fdata->caption, "Set Data", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  429|      4|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_data_value))
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  430|    151|    } else {
  431|    151|        STRLCPY(fdata->caption, "Remove Data", fdata->caption_len);
  ------------------
  |  |   35|    151|    {                                         \
  |  |   36|    151|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    151|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 151]
  |  |  ------------------
  |  |   38|    151|    }
  ------------------
  432|    151|        return format_operation_source_prepare(fdata);
  433|    151|    }
  434|      4|    return true;
  435|    155|}
formatter.c:format_manage_data_value:
  395|      4|static bool format_manage_data_value(formatter_data_t *fdata) {
  396|      4|    STRLCPY(fdata->caption, "Data Value", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  397|      4|    if (is_printable_binary(
  ------------------
  |  Branch (397:9): [True: 1, False: 3]
  ------------------
  398|      4|            fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  399|      4|            fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size)) {
  400|      1|        if (fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size >=
  ------------------
  |  Branch (400:13): [True: 0, False: 1]
  ------------------
  401|      1|            fdata->value_len) {
  402|      0|            return false;
  403|      0|        }
  404|      1|        FORMATTER_CHECK(
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
  405|      1|            print_string(fdata->value,
  406|      1|                         fdata->value_len,
  407|      1|                         fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  408|      1|                         fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size))
  409|      3|    } else {
  410|      3|        STRLCPY(fdata->value, "Base64: ", fdata->value_len)
  ------------------
  |  |   35|      3|    {                                         \
  |  |   36|      3|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      3|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   38|      3|    }
  ------------------
  411|      3|        FORMATTER_CHECK(
  ------------------
  |  |   30|      3|    {                           \
  |  |   31|      3|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   32|      3|    }
  ------------------
  412|      3|            base64_encode(fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  413|      3|                          fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size,
  414|      3|                          fdata->value + strlen(fdata->value),
  415|      3|                          fdata->value_len - strlen(fdata->value)))
  416|      3|    }
  417|      4|    return format_operation_source_prepare(fdata);
  418|      4|}
formatter.c:format_bump_sequence:
  354|     20|static bool format_bump_sequence(formatter_data_t *fdata) {
  355|     20|    (void) fdata;
  356|     20|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     20|    {                                         \
  |  |   36|     20|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     20|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   38|     20|    }
  ------------------
  357|     20|    STRLCPY(fdata->value, "Bump Sequence", fdata->value_len);
  ------------------
  |  |   35|     20|    {                                         \
  |  |   36|     20|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     20|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   38|     20|    }
  ------------------
  358|     20|    FORMATTER_CHECK(push_to_formatter_stack(&format_bump_sequence_bump_to))
  ------------------
  |  |   30|     20|    {                           \
  |  |   31|     20|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   32|     20|    }
  ------------------
  359|     20|    return true;
  360|     20|}
formatter.c:format_bump_sequence_bump_to:
  345|     20|static bool format_bump_sequence_bump_to(formatter_data_t *fdata) {
  346|     20|    STRLCPY(fdata->caption, "Bump To", fdata->caption_len);
  ------------------
  |  |   35|     20|    {                                         \
  |  |   36|     20|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     20|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   38|     20|    }
  ------------------
  347|     20|    FORMATTER_CHECK(
  ------------------
  |  |   30|     20|    {                           \
  |  |   31|     20|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   32|     20|    }
  ------------------
  348|     20|        print_int64_num(fdata->envelope->tx_details.tx.op_details.bump_sequence_op.bump_to,
  349|     20|                        fdata->value,
  350|     20|                        fdata->value_len))
  351|     20|    return format_operation_source_prepare(fdata);
  352|     20|}
formatter.c:format_manage_buy_offer:
  956|     25|static bool format_manage_buy_offer(formatter_data_t *fdata) {
  957|     25|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  958|       |
  959|     25|    if (op->buy_amount == 0) {
  ------------------
  |  Branch (959:9): [True: 13, False: 12]
  ------------------
  960|     13|        STRLCPY(fdata->caption, "Remove Offer", fdata->caption_len);
  ------------------
  |  |   35|     13|    {                                         \
  |  |   36|     13|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     13|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 13]
  |  |  ------------------
  |  |   38|     13|    }
  ------------------
  961|     13|        FORMATTER_CHECK(print_uint64_num(op->offer_id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     13|    {                           \
  |  |   31|     13|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 13]
  |  |  ------------------
  |  |   32|     13|    }
  ------------------
  962|     13|        return format_operation_source_prepare(fdata);
  963|     13|    } else {
  964|     12|        if (op->offer_id) {
  ------------------
  |  Branch (964:13): [True: 5, False: 7]
  ------------------
  965|      5|            STRLCPY(fdata->caption, "Change Offer", fdata->caption_len);
  ------------------
  |  |   35|      5|    {                                         \
  |  |   36|      5|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      5|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   38|      5|    }
  ------------------
  966|      5|            FORMATTER_CHECK(print_uint64_num(op->offer_id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|      5|    {                           \
  |  |   31|      5|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   32|      5|    }
  ------------------
  967|      7|        } else {
  968|      7|            STRLCPY(fdata->caption, "Create Offer", fdata->caption_len);
  ------------------
  |  |   35|      7|    {                                         \
  |  |   36|      7|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      7|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   38|      7|    }
  ------------------
  969|      7|            STRLCPY(fdata->value, "New Offer", fdata->value_len);
  ------------------
  |  |   35|      7|    {                                         \
  |  |   36|      7|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      7|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   38|      7|    }
  ------------------
  970|      7|        }
  971|     12|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_sell))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  972|     12|    }
  973|     12|    return true;
  974|     25|}
formatter.c:format_manage_buy_offer_sell:
  946|     12|static bool format_manage_buy_offer_sell(formatter_data_t *fdata) {
  947|     12|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  948|       |
  949|     12|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|     12|    {                                         \
  |  |   36|     12|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     12|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   38|     12|    }
  ------------------
  950|     12|    FORMATTER_CHECK(
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  951|     12|        print_asset(&op->selling, fdata->envelope->network, fdata->value, fdata->value_len))
  952|     12|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_buy))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  953|     12|    return true;
  954|     12|}
formatter.c:format_manage_buy_offer_buy:
  933|     12|static bool format_manage_buy_offer_buy(formatter_data_t *fdata) {
  934|     12|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  935|       |
  936|     12|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|     12|    {                                         \
  |  |   36|     12|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     12|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   38|     12|    }
  ------------------
  937|     12|    FORMATTER_CHECK(print_amount(op->buy_amount,
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  938|     12|                                 &op->buying,
  939|     12|                                 fdata->envelope->network,
  940|     12|                                 fdata->value,
  941|     12|                                 fdata->value_len))
  942|     12|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_price))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  943|     12|    return true;
  944|     12|}
formatter.c:format_manage_buy_offer_price:
  921|     12|static bool format_manage_buy_offer_price(formatter_data_t *fdata) {
  922|     12|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  923|     12|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|     12|    {                                         \
  |  |   36|     12|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     12|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   38|     12|    }
  ------------------
  924|     12|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  925|     12|                                &op->selling,
  926|     12|                                &op->buying,
  927|     12|                                fdata->envelope->network,
  928|     12|                                fdata->value,
  929|     12|                                fdata->value_len))
  930|     12|    return format_operation_source_prepare(fdata);
  931|     12|}
formatter.c:format_path_payment_strict_send:
 1078|     42|static bool format_path_payment_strict_send(formatter_data_t *fdata) {
 1079|     42|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|     42|    {                                         \
  |  |   36|     42|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     42|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   38|     42|    }
  ------------------
 1080|     42|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1081|     42|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.send_amount,
 1082|     42|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.send_asset,
 1083|     42|        fdata->envelope->network,
 1084|     42|        fdata->value,
 1085|     42|        fdata->value_len))
 1086|     42|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_send_destination))
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1087|     42|    return true;
 1088|     42|}
formatter.c:format_path_payment_strict_send_destination:
 1066|     42|static bool format_path_payment_strict_send_destination(formatter_data_t *fdata) {
 1067|     42|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|     42|    {                                         \
  |  |   36|     42|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     42|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   38|     42|    }
  ------------------
 1068|     42|    FORMATTER_CHECK(print_muxed_account(
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1069|     42|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.destination,
 1070|     42|        fdata->value,
 1071|     42|        fdata->value_len,
 1072|     42|        0,
 1073|     42|        0))
 1074|     42|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_send_receive))
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1075|     42|    return true;
 1076|     42|}
formatter.c:format_path_payment_strict_send_receive:
 1055|     42|static bool format_path_payment_strict_send_receive(formatter_data_t *fdata) {
 1056|     42|    STRLCPY(fdata->caption, "Receive Min", fdata->caption_len);
  ------------------
  |  |   35|     42|    {                                         \
  |  |   36|     42|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     42|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   38|     42|    }
  ------------------
 1057|     42|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1058|     42|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.dest_min,
 1059|     42|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.dest_asset,
 1060|     42|        fdata->envelope->network,
 1061|     42|        fdata->value,
 1062|     42|        fdata->value_len))
 1063|     42|    return format_operation_source_prepare(fdata);
 1064|     42|}
formatter.c:format_create_claimable_balance:
 1167|     86|static bool format_create_claimable_balance(formatter_data_t *fdata) {
 1168|     86|    (void) fdata;
 1169|     86|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 1170|     86|    STRLCPY(fdata->value, "Create Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 1171|     86|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_claimable_balance_balance))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 1172|     86|    return true;
 1173|     86|}
formatter.c:format_create_claimable_balance_balance:
 1155|     86|static bool format_create_claimable_balance_balance(formatter_data_t *fdata) {
 1156|     86|    STRLCPY(fdata->caption, "Balance", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 1157|     86|    FORMATTER_CHECK(
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 1158|     86|        print_amount(fdata->envelope->tx_details.tx.op_details.create_claimable_balance_op.amount,
 1159|     86|                     &fdata->envelope->tx_details.tx.op_details.create_claimable_balance_op.asset,
 1160|     86|                     fdata->envelope->network,
 1161|     86|                     fdata->value,
 1162|     86|                     fdata->value_len))
 1163|     86|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_claimable_balance_warning))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 1164|     86|    return true;
 1165|     86|}
formatter.c:format_create_claimable_balance_warning:
 1144|     86|static bool format_create_claimable_balance_warning(formatter_data_t *fdata) {
 1145|     86|    (void) fdata;
 1146|       |    // The claimant can be very complicated. I haven't figured out how to
 1147|       |    // display it for the time being, so let's display an WARNING here first.
 1148|     86|    STRLCPY(fdata->caption, "WARNING", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 1149|     86|    STRLCPY(fdata->value,
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 1150|     86|            "Currently does not support displaying claimant details",
 1151|     86|            fdata->value_len);
 1152|     86|    return format_operation_source_prepare(fdata);
 1153|     86|}
formatter.c:format_claim_claimable_balance:
 1186|     50|static bool format_claim_claimable_balance(formatter_data_t *fdata) {
 1187|     50|    (void) fdata;
 1188|     50|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     50|    {                                         \
  |  |   36|     50|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     50|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   38|     50|    }
  ------------------
 1189|     50|    STRLCPY(fdata->value, "Claim Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|     50|    {                                         \
  |  |   36|     50|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     50|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   38|     50|    }
  ------------------
 1190|     50|    FORMATTER_CHECK(push_to_formatter_stack(&format_claim_claimable_balance_balance_id))
  ------------------
  |  |   30|     50|    {                           \
  |  |   31|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   32|     50|    }
  ------------------
 1191|     50|    return true;
 1192|     50|}
formatter.c:format_claim_claimable_balance_balance_id:
 1175|     50|static bool format_claim_claimable_balance_balance_id(formatter_data_t *fdata) {
 1176|     50|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|     50|    {                                         \
  |  |   36|     50|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     50|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   38|     50|    }
  ------------------
 1177|     50|    FORMATTER_CHECK(print_claimable_balance_id(
  ------------------
  |  |   30|     50|    {                           \
  |  |   31|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   32|     50|    }
  ------------------
 1178|     50|        &fdata->envelope->tx_details.tx.op_details.claim_claimable_balance_op.balance_id,
 1179|     50|        fdata->value,
 1180|     50|        fdata->value_len,
 1181|     50|        12,
 1182|     50|        12))
 1183|     50|    return format_operation_source_prepare(fdata);
 1184|     50|}
formatter.c:format_begin_sponsoring_future_reserves:
 1205|     80|static bool format_begin_sponsoring_future_reserves(formatter_data_t *fdata) {
 1206|     80|    (void) fdata;
 1207|     80|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     80|    {                                         \
  |  |   36|     80|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     80|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 80]
  |  |  ------------------
  |  |   38|     80|    }
  ------------------
 1208|     80|    STRLCPY(fdata->value, "Begin Sponsoring Future Reserves", fdata->value_len);
  ------------------
  |  |   35|     80|    {                                         \
  |  |   36|     80|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     80|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 80]
  |  |  ------------------
  |  |   38|     80|    }
  ------------------
 1209|     80|    FORMATTER_CHECK(push_to_formatter_stack(&format_claim_claimable_balance_sponsored_id))
  ------------------
  |  |   30|     80|    {                           \
  |  |   31|     80|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 80]
  |  |  ------------------
  |  |   32|     80|    }
  ------------------
 1210|     80|    return true;
 1211|     80|}
formatter.c:format_claim_claimable_balance_sponsored_id:
 1194|     80|static bool format_claim_claimable_balance_sponsored_id(formatter_data_t *fdata) {
 1195|     80|    STRLCPY(fdata->caption, "Sponsored ID", fdata->caption_len);
  ------------------
  |  |   35|     80|    {                                         \
  |  |   36|     80|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     80|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 80]
  |  |  ------------------
  |  |   38|     80|    }
  ------------------
 1196|     80|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|     80|    {                           \
  |  |   31|     80|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 80]
  |  |  ------------------
  |  |   32|     80|    }
  ------------------
 1197|     80|        fdata->envelope->tx_details.tx.op_details.begin_sponsoring_future_reserves_op.sponsored_id,
 1198|     80|        fdata->value,
 1199|     80|        fdata->value_len,
 1200|     80|        0,
 1201|     80|        0))
 1202|     80|    return format_operation_source_prepare(fdata);
 1203|     80|}
formatter.c:format_end_sponsoring_future_reserves:
 1213|     39|static bool format_end_sponsoring_future_reserves(formatter_data_t *fdata) {
 1214|     39|    (void) fdata;
 1215|     39|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     39|    {                                         \
  |  |   36|     39|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     39|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   38|     39|    }
  ------------------
 1216|     39|    STRLCPY(fdata->value, "End Sponsoring Future Reserves", fdata->value_len);
  ------------------
  |  |   35|     39|    {                                         \
  |  |   36|     39|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     39|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   38|     39|    }
  ------------------
 1217|     39|    return format_operation_source_prepare(fdata);
 1218|     39|}
formatter.c:format_revoke_sponsorship:
 1385|    505|static bool format_revoke_sponsorship(formatter_data_t *fdata) {
 1386|    505|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    505|    {                                         \
  |  |   36|    505|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    505|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 505]
  |  |  ------------------
  |  |   38|    505|    }
  ------------------
 1387|    505|    if (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.type ==
  ------------------
  |  Branch (1387:9): [True: 261, False: 244]
  ------------------
 1388|    505|        REVOKE_SPONSORSHIP_SIGNER) {
 1389|    261|        STRLCPY(fdata->value, "Revoke Sponsorship (SIGNER_KEY)", fdata->value_len);
  ------------------
  |  |   35|    261|    {                                         \
  |  |   36|    261|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    261|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 261]
  |  |  ------------------
  |  |   38|    261|    }
  ------------------
 1390|    261|        FORMATTER_CHECK(
  ------------------
  |  |   30|    261|    {                           \
  |  |   31|    261|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 261]
  |  |  ------------------
  |  |   32|    261|    }
  ------------------
 1391|    261|            push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_account))
 1392|    261|    } else {
 1393|    244|        switch (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.type) {
 1394|     65|            case ACCOUNT:
  ------------------
  |  Branch (1394:13): [True: 65, False: 179]
  ------------------
 1395|     65|                STRLCPY(fdata->value, "Revoke Sponsorship (ACCOUNT)", fdata->value_len);
  ------------------
  |  |   35|     65|    {                                         \
  |  |   36|     65|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     65|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 65]
  |  |  ------------------
  |  |   38|     65|    }
  ------------------
 1396|     65|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_account))
  ------------------
  |  |   30|     65|    {                           \
  |  |   31|     65|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 65]
  |  |  ------------------
  |  |   32|     65|    }
  ------------------
 1397|     65|                break;
 1398|     65|            case OFFER:
  ------------------
  |  Branch (1398:13): [True: 15, False: 229]
  ------------------
 1399|     15|                STRLCPY(fdata->value, "Revoke Sponsorship (OFFER)", fdata->value_len);
  ------------------
  |  |   35|     15|    {                                         \
  |  |   36|     15|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     15|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   38|     15|    }
  ------------------
 1400|     15|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_offer_seller_id))
  ------------------
  |  |   30|     15|    {                           \
  |  |   31|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   32|     15|    }
  ------------------
 1401|     15|                break;
 1402|     57|            case TRUSTLINE:
  ------------------
  |  Branch (1402:13): [True: 57, False: 187]
  ------------------
 1403|     57|                STRLCPY(fdata->value, "Revoke Sponsorship (TRUSTLINE)", fdata->value_len);
  ------------------
  |  |   35|     57|    {                                         \
  |  |   36|     57|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     57|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 57]
  |  |  ------------------
  |  |   38|     57|    }
  ------------------
 1404|     57|                FORMATTER_CHECK(
  ------------------
  |  |   30|     57|    {                           \
  |  |   31|     57|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 57]
  |  |  ------------------
  |  |   32|     57|    }
  ------------------
 1405|     57|                    push_to_formatter_stack(&format_revoke_sponsorship_trust_line_account))
 1406|     57|                break;
 1407|     57|            case DATA:
  ------------------
  |  Branch (1407:13): [True: 27, False: 217]
  ------------------
 1408|     27|                STRLCPY(fdata->value, "Revoke Sponsorship (DATA)", fdata->value_len);
  ------------------
  |  |   35|     27|    {                                         \
  |  |   36|     27|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     27|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   38|     27|    }
  ------------------
 1409|     27|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_data_account))
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1410|     27|                break;
 1411|     27|            case CLAIMABLE_BALANCE:
  ------------------
  |  Branch (1411:13): [True: 14, False: 230]
  ------------------
 1412|     14|                STRLCPY(fdata->value, "Revoke Sponsorship (CLAIMABLE_BALANCE)", fdata->value_len);
  ------------------
  |  |   35|     14|    {                                         \
  |  |   36|     14|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     14|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   38|     14|    }
  ------------------
 1413|     14|                FORMATTER_CHECK(
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
 1414|     14|                    push_to_formatter_stack(&format_revoke_sponsorship_claimable_balance))
 1415|     14|                break;
 1416|     66|            case LIQUIDITY_POOL:
  ------------------
  |  Branch (1416:13): [True: 66, False: 178]
  ------------------
 1417|     66|                STRLCPY(fdata->value, "Revoke Sponsorship (LIQUIDITY_POOL)", fdata->value_len);
  ------------------
  |  |   35|     66|    {                                         \
  |  |   36|     66|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     66|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 66]
  |  |  ------------------
  |  |   38|     66|    }
  ------------------
 1418|     66|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_liquidity_pool))
  ------------------
  |  |   30|     66|    {                           \
  |  |   31|     66|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 66]
  |  |  ------------------
  |  |   32|     66|    }
  ------------------
 1419|     66|                break;
 1420|     66|            default:
  ------------------
  |  Branch (1420:13): [True: 0, False: 244]
  ------------------
 1421|      0|                return false;
 1422|    244|        }
 1423|    244|    }
 1424|    505|    return true;
 1425|    505|}
formatter.c:format_revoke_sponsorship_claimable_signer_account:
 1372|    261|static bool format_revoke_sponsorship_claimable_signer_account(formatter_data_t *fdata) {
 1373|    261|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    261|    {                                         \
  |  |   36|    261|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    261|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 261]
  |  |  ------------------
  |  |   38|    261|    }
  ------------------
 1374|    261|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|    261|    {                           \
  |  |   31|    261|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 261]
  |  |  ------------------
  |  |   32|    261|    }
  ------------------
 1375|    261|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.account_id,
 1376|    261|        fdata->value,
 1377|    261|        fdata->value_len,
 1378|    261|        0,
 1379|    261|        0))
 1380|    261|    FORMATTER_CHECK(
  ------------------
  |  |   30|    261|    {                           \
  |  |   31|    261|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 261]
  |  |  ------------------
  |  |   32|    261|    }
  ------------------
 1381|    261|        push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_signer_key_type))
 1382|    261|    return true;
 1383|    261|}
formatter.c:format_revoke_sponsorship_claimable_signer_signer_key_type:
 1343|    261|static bool format_revoke_sponsorship_claimable_signer_signer_key_type(formatter_data_t *fdata) {
 1344|    261|    STRLCPY(fdata->caption, "Signer Key Type", fdata->caption_len);
  ------------------
  |  |   35|    261|    {                                         \
  |  |   36|    261|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    261|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 261]
  |  |  ------------------
  |  |   38|    261|    }
  ------------------
 1345|    261|    switch (
 1346|    261|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.signer_key.type) {
 1347|     20|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (1347:9): [True: 20, False: 241]
  ------------------
 1348|     20|            STRLCPY(fdata->value, "Public Key", fdata->value_len);
  ------------------
  |  |   35|     20|    {                                         \
  |  |   36|     20|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     20|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   38|     20|    }
  ------------------
 1349|     20|            break;
 1350|     20|        }
 1351|     14|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (1351:9): [True: 14, False: 247]
  ------------------
 1352|     14|            STRLCPY(fdata->value, "Hash(x)", fdata->value_len);
  ------------------
  |  |   35|     14|    {                                         \
  |  |   36|     14|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     14|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   38|     14|    }
  ------------------
 1353|     14|            break;
 1354|     14|        }
 1355|     46|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (1355:9): [True: 46, False: 215]
  ------------------
 1356|     46|            STRLCPY(fdata->value, "Pre-Auth", fdata->value_len);
  ------------------
  |  |   35|     46|    {                                         \
  |  |   36|     46|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     46|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 46]
  |  |  ------------------
  |  |   38|     46|    }
  ------------------
 1357|     46|            break;
 1358|     46|        }
 1359|    181|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (1359:9): [True: 181, False: 80]
  ------------------
 1360|    181|            STRLCPY(fdata->value, "Ed25519 Signed Payload", fdata->value_len);
  ------------------
  |  |   35|    181|    {                                         \
  |  |   36|    181|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    181|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 181]
  |  |  ------------------
  |  |   38|    181|    }
  ------------------
 1361|    181|            break;
 1362|    181|        }
 1363|      0|        default:
  ------------------
  |  Branch (1363:9): [True: 0, False: 261]
  ------------------
 1364|      0|            return false;
 1365|    261|    }
 1366|       |
 1367|    261|    FORMATTER_CHECK(
  ------------------
  |  |   30|    261|    {                           \
  |  |   31|    261|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 261]
  |  |  ------------------
  |  |   32|    261|    }
  ------------------
 1368|    261|        push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_signer_key_detail))
 1369|    261|    return true;
 1370|    261|}
formatter.c:format_revoke_sponsorship_claimable_signer_signer_key_detail:
 1334|    261|static bool format_revoke_sponsorship_claimable_signer_signer_key_detail(formatter_data_t *fdata) {
 1335|    261|    STRLCPY(fdata->caption, "Signer Key", fdata->caption_len);
  ------------------
  |  |   35|    261|    {                                         \
  |  |   36|    261|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    261|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 261]
  |  |  ------------------
  |  |   38|    261|    }
  ------------------
 1336|    261|    signer_key_t *key =
 1337|    261|        &fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.signer_key;
 1338|       |
 1339|    261|    FORMATTER_CHECK(print_signer_key_detail(key, fdata->value, fdata->value_len))
  ------------------
  |  |   30|    261|    {                           \
  |  |   31|    261|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 261]
  |  |  ------------------
  |  |   32|    261|    }
  ------------------
 1340|    261|    return format_operation_source_prepare(fdata);
 1341|    261|}
formatter.c:format_revoke_sponsorship_account:
 1220|     65|static bool format_revoke_sponsorship_account(formatter_data_t *fdata) {
 1221|     65|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|     65|    {                                         \
  |  |   36|     65|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     65|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 65]
  |  |  ------------------
  |  |   38|     65|    }
  ------------------
 1222|     65|    FORMATTER_CHECK(print_account_id(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|     65|    {                           \
  |  |   31|     65|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 65]
  |  |  ------------------
  |  |   32|     65|    }
  ------------------
 1223|     65|                                         .ledger_key.account.account_id,
 1224|     65|                                     fdata->value,
 1225|     65|                                     fdata->value_len,
 1226|     65|                                     0,
 1227|     65|                                     0))
 1228|     65|    return format_operation_source_prepare(fdata);
 1229|     65|}
formatter.c:format_revoke_sponsorship_offer_seller_id:
 1275|     15|static bool format_revoke_sponsorship_offer_seller_id(formatter_data_t *fdata) {
 1276|     15|    STRLCPY(fdata->caption, "Seller ID", fdata->caption_len);
  ------------------
  |  |   35|     15|    {                                         \
  |  |   36|     15|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     15|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   38|     15|    }
  ------------------
 1277|     15|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|     15|    {                           \
  |  |   31|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   32|     15|    }
  ------------------
 1278|     15|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.offer.seller_id,
 1279|     15|        fdata->value,
 1280|     15|        fdata->value_len,
 1281|     15|        0,
 1282|     15|        0))
 1283|     15|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_offer_offer_id))
  ------------------
  |  |   30|     15|    {                           \
  |  |   31|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   32|     15|    }
  ------------------
 1284|     15|    return true;
 1285|     15|}
formatter.c:format_revoke_sponsorship_offer_offer_id:
 1265|     15|static bool format_revoke_sponsorship_offer_offer_id(formatter_data_t *fdata) {
 1266|     15|    STRLCPY(fdata->caption, "Offer ID", fdata->caption_len);
  ------------------
  |  |   35|     15|    {                                         \
  |  |   36|     15|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     15|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   38|     15|    }
  ------------------
 1267|     15|    FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|     15|    {                           \
  |  |   31|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   32|     15|    }
  ------------------
 1268|     15|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.offer.offer_id,
 1269|     15|        fdata->value,
 1270|     15|        fdata->value_len))
 1271|       |
 1272|     15|    return format_operation_source_prepare(fdata);
 1273|     15|}
formatter.c:format_revoke_sponsorship_trust_line_account:
 1253|     57|static bool format_revoke_sponsorship_trust_line_account(formatter_data_t *fdata) {
 1254|     57|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|     57|    {                                         \
  |  |   36|     57|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     57|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 57]
  |  |  ------------------
  |  |   38|     57|    }
  ------------------
 1255|     57|    FORMATTER_CHECK(print_account_id(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|     57|    {                           \
  |  |   31|     57|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 57]
  |  |  ------------------
  |  |   32|     57|    }
  ------------------
 1256|     57|                                         .ledger_key.trust_line.account_id,
 1257|     57|                                     fdata->value,
 1258|     57|                                     fdata->value_len,
 1259|     57|                                     0,
 1260|     57|                                     0))
 1261|     57|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_trust_line_asset))
  ------------------
  |  |   30|     57|    {                           \
  |  |   31|     57|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 57]
  |  |  ------------------
  |  |   32|     57|    }
  ------------------
 1262|     57|    return true;
 1263|     57|}
formatter.c:format_revoke_sponsorship_trust_line_asset:
 1231|     57|static bool format_revoke_sponsorship_trust_line_asset(formatter_data_t *fdata) {
 1232|     57|    if (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.trust_line.asset
  ------------------
  |  Branch (1232:9): [True: 9, False: 48]
  ------------------
 1233|     57|            .type == ASSET_TYPE_POOL_SHARE) {
 1234|      9|        STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|      9|    {                                         \
  |  |   36|      9|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      9|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 9]
  |  |  ------------------
  |  |   38|      9|    }
  ------------------
 1235|      9|        FORMATTER_CHECK(print_binary(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|      9|    {                           \
  |  |   31|      9|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 9]
  |  |  ------------------
  |  |   32|      9|    }
  ------------------
 1236|      9|                                         .ledger_key.trust_line.asset.liquidity_pool_id,
 1237|      9|                                     LIQUIDITY_POOL_ID_SIZE,
 1238|      9|                                     fdata->value,
 1239|      9|                                     fdata->value_len,
 1240|      9|                                     0,
 1241|      9|                                     0))
 1242|     48|    } else {
 1243|     48|        STRLCPY(fdata->caption, "Asset", fdata->caption_len);
  ------------------
  |  |   35|     48|    {                                         \
  |  |   36|     48|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     48|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 48]
  |  |  ------------------
  |  |   38|     48|    }
  ------------------
 1244|     48|        FORMATTER_CHECK(print_asset((asset_t *) &fdata->envelope->tx_details.tx.op_details
  ------------------
  |  |   30|     48|    {                           \
  |  |   31|     48|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 48]
  |  |  ------------------
  |  |   32|     48|    }
  ------------------
 1245|     48|                                        .revoke_sponsorship_op.ledger_key.trust_line.asset,
 1246|     48|                                    fdata->envelope->network,
 1247|     48|                                    fdata->value,
 1248|     48|                                    fdata->value_len))
 1249|     48|    }
 1250|     57|    return format_operation_source_prepare(fdata);
 1251|     57|}
formatter.c:format_revoke_sponsorship_data_account:
 1298|     27|static bool format_revoke_sponsorship_data_account(formatter_data_t *fdata) {
 1299|     27|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|     27|    {                                         \
  |  |   36|     27|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     27|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   38|     27|    }
  ------------------
 1300|     27|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1301|     27|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data.account_id,
 1302|     27|        fdata->value,
 1303|     27|        fdata->value_len,
 1304|     27|        0,
 1305|     27|        0))
 1306|     27|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_data_data_name))
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1307|     27|    return true;
 1308|     27|}
formatter.c:format_revoke_sponsorship_data_data_name:
 1287|     27|static bool format_revoke_sponsorship_data_data_name(formatter_data_t *fdata) {
 1288|     27|    STRLCPY(fdata->caption, "Data Name", fdata->caption_len);
  ------------------
  |  |   35|     27|    {                                         \
  |  |   36|     27|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     27|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   38|     27|    }
  ------------------
 1289|     27|    FORMATTER_CHECK(print_string(
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1290|     27|        fdata->value,
 1291|     27|        fdata->value_len,
 1292|     27|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data.data_name,
 1293|     27|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data
 1294|     27|            .data_name_size))
 1295|     27|    return format_operation_source_prepare(fdata);
 1296|     27|}
formatter.c:format_revoke_sponsorship_claimable_balance:
 1310|     14|static bool format_revoke_sponsorship_claimable_balance(formatter_data_t *fdata) {
 1311|     14|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|     14|    {                                         \
  |  |   36|     14|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     14|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   38|     14|    }
  ------------------
 1312|     14|    FORMATTER_CHECK(
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
 1313|     14|        print_claimable_balance_id(&fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
 1314|     14|                                        .ledger_key.claimable_balance.balance_id,
 1315|     14|                                   fdata->value,
 1316|     14|                                   fdata->value_len,
 1317|     14|                                   0,
 1318|     14|                                   0))
 1319|     14|    return format_operation_source_prepare(fdata);
 1320|     14|}
formatter.c:format_revoke_sponsorship_liquidity_pool:
 1322|     66|static bool format_revoke_sponsorship_liquidity_pool(formatter_data_t *fdata) {
 1323|     66|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     66|    {                                         \
  |  |   36|     66|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     66|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 66]
  |  |  ------------------
  |  |   38|     66|    }
  ------------------
 1324|     66|    FORMATTER_CHECK(print_binary(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|     66|    {                           \
  |  |   31|     66|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 66]
  |  |  ------------------
  |  |   32|     66|    }
  ------------------
 1325|     66|                                     .ledger_key.liquidity_pool.liquidity_pool_id,
 1326|     66|                                 LIQUIDITY_POOL_ID_SIZE,
 1327|     66|                                 fdata->value,
 1328|     66|                                 fdata->value_len,
 1329|     66|                                 0,
 1330|     66|                                 0))
 1331|     66|    return format_operation_source_prepare(fdata);
 1332|     66|}
formatter.c:format_clawback:
 1448|     10|static bool format_clawback(formatter_data_t *fdata) {
 1449|     10|    (void) fdata;
 1450|     10|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
 1451|     10|    STRLCPY(fdata->value, "Clawback", fdata->value_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
 1452|     10|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_amount))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
 1453|     10|    return true;
 1454|     10|}
formatter.c:format_clawback_amount:
 1437|     10|static bool format_clawback_amount(formatter_data_t *fdata) {
 1438|     10|    STRLCPY(fdata->caption, "Clawback Balance", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
 1439|     10|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.clawback_op.amount,
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
 1440|     10|                                 &fdata->envelope->tx_details.tx.op_details.clawback_op.asset,
 1441|     10|                                 fdata->envelope->network,
 1442|     10|                                 fdata->value,
 1443|     10|                                 fdata->value_len))
 1444|     10|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_from))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
 1445|     10|    return true;
 1446|     10|}
formatter.c:format_clawback_from:
 1427|     10|static bool format_clawback_from(formatter_data_t *fdata) {
 1428|     10|    STRLCPY(fdata->caption, "From", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
 1429|     10|    FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.op_details.clawback_op.from,
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
 1430|     10|                                        fdata->value,
 1431|     10|                                        fdata->value_len,
 1432|     10|                                        0,
 1433|     10|                                        0))
 1434|     10|    return format_operation_source_prepare(fdata);
 1435|     10|}
formatter.c:format_clawback_claimable_balance:
 1467|     19|static bool format_clawback_claimable_balance(formatter_data_t *fdata) {
 1468|     19|    (void) fdata;
 1469|     19|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     19|    {                                         \
  |  |   36|     19|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     19|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   38|     19|    }
  ------------------
 1470|     19|    STRLCPY(fdata->value, "Clawback Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|     19|    {                                         \
  |  |   36|     19|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     19|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   38|     19|    }
  ------------------
 1471|     19|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_claimable_balance_balance_id))
  ------------------
  |  |   30|     19|    {                           \
  |  |   31|     19|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   32|     19|    }
  ------------------
 1472|     19|    return true;
 1473|     19|}
formatter.c:format_clawback_claimable_balance_balance_id:
 1456|     19|static bool format_clawback_claimable_balance_balance_id(formatter_data_t *fdata) {
 1457|     19|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|     19|    {                                         \
  |  |   36|     19|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     19|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   38|     19|    }
  ------------------
 1458|     19|    FORMATTER_CHECK(print_claimable_balance_id(
  ------------------
  |  |   30|     19|    {                           \
  |  |   31|     19|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   32|     19|    }
  ------------------
 1459|     19|        &fdata->envelope->tx_details.tx.op_details.clawback_claimable_balance_op.balance_id,
 1460|     19|        fdata->value,
 1461|     19|        fdata->value_len,
 1462|     19|        0,
 1463|     19|        0))
 1464|     19|    return format_operation_source_prepare(fdata);
 1465|     19|}
formatter.c:format_set_trust_line_flags:
 1525|     96|static bool format_set_trust_line_flags(formatter_data_t *fdata) {
 1526|     96|    (void) fdata;
 1527|     96|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     96|    {                                         \
  |  |   36|     96|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     96|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 96]
  |  |  ------------------
  |  |   38|     96|    }
  ------------------
 1528|     96|    STRLCPY(fdata->value, "Set Trust Line Flags", fdata->value_len);
  ------------------
  |  |   35|     96|    {                                         \
  |  |   36|     96|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     96|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 96]
  |  |  ------------------
  |  |   38|     96|    }
  ------------------
 1529|     96|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_trustor))
  ------------------
  |  |   30|     96|    {                           \
  |  |   31|     96|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 96]
  |  |  ------------------
  |  |   32|     96|    }
  ------------------
 1530|     96|    return true;
 1531|     96|}
formatter.c:format_set_trust_line_trustor:
 1513|     96|static bool format_set_trust_line_trustor(formatter_data_t *fdata) {
 1514|     96|    STRLCPY(fdata->caption, "Trustor", fdata->caption_len);
  ------------------
  |  |   35|     96|    {                                         \
  |  |   36|     96|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     96|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 96]
  |  |  ------------------
  |  |   38|     96|    }
  ------------------
 1515|     96|    FORMATTER_CHECK(
  ------------------
  |  |   30|     96|    {                           \
  |  |   31|     96|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 96]
  |  |  ------------------
  |  |   32|     96|    }
  ------------------
 1516|     96|        print_account_id(fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.trustor,
 1517|     96|                         fdata->value,
 1518|     96|                         fdata->value_len,
 1519|     96|                         0,
 1520|     96|                         0))
 1521|     96|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_asset))
  ------------------
  |  |   30|     96|    {                           \
  |  |   31|     96|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 96]
  |  |  ------------------
  |  |   32|     96|    }
  ------------------
 1522|     96|    return true;
 1523|     96|}
formatter.c:format_set_trust_line_asset:
 1502|     96|static bool format_set_trust_line_asset(formatter_data_t *fdata) {
 1503|     96|    STRLCPY(fdata->caption, "Asset", fdata->caption_len);
  ------------------
  |  |   35|     96|    {                                         \
  |  |   36|     96|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     96|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 96]
  |  |  ------------------
  |  |   38|     96|    }
  ------------------
 1504|     96|    FORMATTER_CHECK(
  ------------------
  |  |   30|     96|    {                           \
  |  |   31|     96|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 96]
  |  |  ------------------
  |  |   32|     96|    }
  ------------------
 1505|     96|        print_asset(&fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.asset,
 1506|     96|                    fdata->envelope->network,
 1507|     96|                    fdata->value,
 1508|     96|                    fdata->value_len))
 1509|     96|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_clear_flags))
  ------------------
  |  |   30|     96|    {                           \
  |  |   31|     96|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 96]
  |  |  ------------------
  |  |   32|     96|    }
  ------------------
 1510|     96|    return true;
 1511|     96|}
formatter.c:format_set_trust_line_clear_flags:
 1488|     96|static bool format_set_trust_line_clear_flags(formatter_data_t *fdata) {
 1489|     96|    STRLCPY(fdata->caption, "Clear Flags", fdata->caption_len);
  ------------------
  |  |   35|     96|    {                                         \
  |  |   36|     96|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     96|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 96]
  |  |  ------------------
  |  |   38|     96|    }
  ------------------
 1490|     96|    if (fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.clear_flags) {
  ------------------
  |  Branch (1490:9): [True: 45, False: 51]
  ------------------
 1491|     45|        FORMATTER_CHECK(print_trust_line_flags(
  ------------------
  |  |   30|     45|    {                           \
  |  |   31|     45|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 45]
  |  |  ------------------
  |  |   32|     45|    }
  ------------------
 1492|     45|            fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.clear_flags,
 1493|     45|            fdata->value,
 1494|     45|            fdata->value_len))
 1495|     51|    } else {
 1496|     51|        STRLCPY(fdata->value, "[none]", fdata->value_len);
  ------------------
  |  |   35|     51|    {                                         \
  |  |   36|     51|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     51|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 51]
  |  |  ------------------
  |  |   38|     51|    }
  ------------------
 1497|     51|    }
 1498|     96|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_set_flags))
  ------------------
  |  |   30|     96|    {                           \
  |  |   31|     96|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 96]
  |  |  ------------------
  |  |   32|     96|    }
  ------------------
 1499|     96|    return true;
 1500|     96|}
formatter.c:format_set_trust_line_set_flags:
 1475|     96|static bool format_set_trust_line_set_flags(formatter_data_t *fdata) {
 1476|     96|    STRLCPY(fdata->caption, "Set Flags", fdata->caption_len);
  ------------------
  |  |   35|     96|    {                                         \
  |  |   36|     96|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     96|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 96]
  |  |  ------------------
  |  |   38|     96|    }
  ------------------
 1477|     96|    if (fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.set_flags) {
  ------------------
  |  Branch (1477:9): [True: 46, False: 50]
  ------------------
 1478|     46|        FORMATTER_CHECK(print_trust_line_flags(
  ------------------
  |  |   30|     46|    {                           \
  |  |   31|     46|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 46]
  |  |  ------------------
  |  |   32|     46|    }
  ------------------
 1479|     46|            fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.set_flags,
 1480|     46|            fdata->value,
 1481|     46|            fdata->value_len))
 1482|     50|    } else {
 1483|     50|        STRLCPY(fdata->value, "[none]", fdata->value_len);
  ------------------
  |  |   35|     50|    {                                         \
  |  |   36|     50|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     50|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   38|     50|    }
  ------------------
 1484|     50|    }
 1485|     96|    return format_operation_source_prepare(fdata);
 1486|     96|}
formatter.c:format_liquidity_pool_deposit:
 1597|     32|static bool format_liquidity_pool_deposit(formatter_data_t *fdata) {
 1598|     32|    (void) fdata;
 1599|     32|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
 1600|     32|    STRLCPY(fdata->value, "Liquidity Pool Deposit", fdata->value_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
 1601|     32|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_liquidity_pool_id))
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
 1602|     32|    return true;
 1603|     32|}
formatter.c:format_liquidity_pool_deposit_liquidity_pool_id:
 1584|     32|static bool format_liquidity_pool_deposit_liquidity_pool_id(formatter_data_t *fdata) {
 1585|     32|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
 1586|     32|    FORMATTER_CHECK(print_binary(
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
 1587|     32|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.liquidity_pool_id,
 1588|     32|        LIQUIDITY_POOL_ID_SIZE,
 1589|     32|        fdata->value,
 1590|     32|        fdata->value_len,
 1591|     32|        0,
 1592|     32|        0))
 1593|     32|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_amount_a))
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
 1594|     32|    return true;
 1595|     32|}
formatter.c:format_liquidity_pool_deposit_max_amount_a:
 1572|     32|static bool format_liquidity_pool_deposit_max_amount_a(formatter_data_t *fdata) {
 1573|     32|    STRLCPY(fdata->caption, "Max Amount A", fdata->caption_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
 1574|     32|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
 1575|     32|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.max_amount_a,
 1576|     32|        NULL,
 1577|     32|        fdata->envelope->network,
 1578|     32|        fdata->value,
 1579|     32|        fdata->value_len))
 1580|     32|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_amount_b))
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
 1581|     32|    return true;
 1582|     32|}
formatter.c:format_liquidity_pool_deposit_max_amount_b:
 1560|     32|static bool format_liquidity_pool_deposit_max_amount_b(formatter_data_t *fdata) {
 1561|     32|    STRLCPY(fdata->caption, "Max Amount B", fdata->caption_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
 1562|     32|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
 1563|     32|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.max_amount_b,
 1564|     32|        NULL,
 1565|     32|        fdata->envelope->network,
 1566|     32|        fdata->value,
 1567|     32|        fdata->value_len))
 1568|     32|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_min_price))
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
 1569|     32|    return true;
 1570|     32|}
formatter.c:format_liquidity_pool_deposit_min_price:
 1546|     32|static bool format_liquidity_pool_deposit_min_price(formatter_data_t *fdata) {
 1547|     32|    liquidity_pool_deposit_op_t *op =
 1548|     32|        &fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op;
 1549|     32|    STRLCPY(fdata->caption, "Min Price", fdata->caption_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
 1550|     32|    FORMATTER_CHECK(print_price(&op->min_price,
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
 1551|     32|                                NULL,
 1552|     32|                                NULL,
 1553|     32|                                fdata->envelope->network,
 1554|     32|                                fdata->value,
 1555|     32|                                fdata->value_len))
 1556|     32|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_price))
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
 1557|     32|    return true;
 1558|     32|}
formatter.c:format_liquidity_pool_deposit_max_price:
 1533|     32|static bool format_liquidity_pool_deposit_max_price(formatter_data_t *fdata) {
 1534|     32|    liquidity_pool_deposit_op_t *op =
 1535|     32|        &fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op;
 1536|     32|    STRLCPY(fdata->caption, "Max Price", fdata->caption_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
 1537|     32|    FORMATTER_CHECK(print_price(&op->max_price,
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
 1538|     32|                                NULL,
 1539|     32|                                NULL,
 1540|     32|                                fdata->envelope->network,
 1541|     32|                                fdata->value,
 1542|     32|                                fdata->value_len))
 1543|     32|    return format_operation_source_prepare(fdata);
 1544|     32|}
formatter.c:format_liquidity_pool_withdraw:
 1653|     27|static bool format_liquidity_pool_withdraw(formatter_data_t *fdata) {
 1654|     27|    (void) fdata;
 1655|     27|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     27|    {                                         \
  |  |   36|     27|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     27|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   38|     27|    }
  ------------------
 1656|     27|    STRLCPY(fdata->value, "Liquidity Pool Withdraw", fdata->value_len);
  ------------------
  |  |   35|     27|    {                                         \
  |  |   36|     27|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     27|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   38|     27|    }
  ------------------
 1657|     27|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_liquidity_pool_id))
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1658|     27|    return true;
 1659|     27|}
formatter.c:format_liquidity_pool_withdraw_liquidity_pool_id:
 1640|     27|static bool format_liquidity_pool_withdraw_liquidity_pool_id(formatter_data_t *fdata) {
 1641|     27|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     27|    {                                         \
  |  |   36|     27|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     27|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   38|     27|    }
  ------------------
 1642|     27|    FORMATTER_CHECK(print_binary(
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1643|     27|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.liquidity_pool_id,
 1644|     27|        LIQUIDITY_POOL_ID_SIZE,
 1645|     27|        fdata->value,
 1646|     27|        fdata->value_len,
 1647|     27|        0,
 1648|     27|        0))
 1649|     27|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_amount))
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1650|     27|    return true;
 1651|     27|}
formatter.c:format_liquidity_pool_withdraw_amount:
 1628|     27|static bool format_liquidity_pool_withdraw_amount(formatter_data_t *fdata) {
 1629|     27|    STRLCPY(fdata->caption, "Amount", fdata->caption_len);
  ------------------
  |  |   35|     27|    {                                         \
  |  |   36|     27|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     27|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   38|     27|    }
  ------------------
 1630|     27|    FORMATTER_CHECK(
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1631|     27|        print_amount(fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.amount,
 1632|     27|                     NULL,
 1633|     27|                     fdata->envelope->network,
 1634|     27|                     fdata->value,
 1635|     27|                     fdata->value_len))
 1636|     27|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_min_amount_a))
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1637|     27|    return true;
 1638|     27|}
formatter.c:format_liquidity_pool_withdraw_min_amount_a:
 1616|     27|static bool format_liquidity_pool_withdraw_min_amount_a(formatter_data_t *fdata) {
 1617|     27|    STRLCPY(fdata->caption, "Min Amount A", fdata->caption_len);
  ------------------
  |  |   35|     27|    {                                         \
  |  |   36|     27|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     27|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   38|     27|    }
  ------------------
 1618|     27|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1619|     27|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.min_amount_a,
 1620|     27|        NULL,
 1621|     27|        fdata->envelope->network,
 1622|     27|        fdata->value,
 1623|     27|        fdata->value_len))
 1624|     27|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_min_amount_b))
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1625|     27|    return true;
 1626|     27|}
formatter.c:format_liquidity_pool_withdraw_min_amount_b:
 1605|     27|static bool format_liquidity_pool_withdraw_min_amount_b(formatter_data_t *fdata) {
 1606|     27|    STRLCPY(fdata->caption, "Min Amount B", fdata->caption_len);
  ------------------
  |  |   35|     27|    {                                         \
  |  |   36|     27|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     27|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   38|     27|    }
  ------------------
 1607|     27|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1608|     27|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.min_amount_b,
 1609|     27|        NULL,
 1610|     27|        fdata->envelope->network,
 1611|     27|        fdata->value,
 1612|     27|        fdata->value_len))
 1613|     27|    return format_operation_source_prepare(fdata);
 1614|     27|}
formatter.c:format_invoke_host_function:
 2172|     90|static bool format_invoke_host_function(formatter_data_t *fdata) {
 2173|       |    // avoid the host function op be overwritten by the sub-invocation
 2174|     90|    if (fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocations_count) {
  ------------------
  |  Branch (2174:9): [True: 14, False: 76]
  ------------------
 2175|     14|        if (!parse_transaction_operation(fdata->raw_data,
  ------------------
  |  Branch (2175:13): [True: 0, False: 14]
  ------------------
 2176|     14|                                         fdata->raw_data_len,
 2177|     14|                                         fdata->envelope,
 2178|     14|                                         fdata->envelope->tx_details.tx.operation_index)) {
 2179|      0|            return false;
 2180|     14|        };
 2181|     14|    }
 2182|     90|    switch (fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.host_function_type) {
 2183|     55|        case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:
  ------------------
  |  Branch (2183:9): [True: 55, False: 35]
  ------------------
 2184|     55|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|     55|    {                                         \
  |  |   36|     55|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     55|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 55]
  |  |  ------------------
  |  |   38|     55|    }
  ------------------
 2185|     55|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|     55|    {                                         \
  |  |   36|     55|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     55|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 55]
  |  |  ------------------
  |  |   38|     55|    }
  ------------------
 2186|     55|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_contract_id));
  ------------------
  |  |   30|     55|    {                           \
  |  |   31|     55|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 55]
  |  |  ------------------
  |  |   32|     55|    }
  ------------------
 2187|     55|            break;
 2188|     19|        case HOST_FUNCTION_TYPE_CREATE_CONTRACT:
  ------------------
  |  Branch (2188:9): [True: 19, False: 71]
  ------------------
 2189|     19|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|     19|    {                                         \
  |  |   36|     19|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     19|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   38|     19|    }
  ------------------
 2190|     19|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|     19|    {                                         \
  |  |   36|     19|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     19|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   38|     19|    }
  ------------------
 2191|       |            // we dont need to care the sub-invocation here
 2192|     19|            return format_operation_source_prepare(fdata);
 2193|      0|            break;
 2194|     16|        case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM:
  ------------------
  |  Branch (2194:9): [True: 16, False: 74]
  ------------------
 2195|     16|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|     16|    {                                         \
  |  |   36|     16|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     16|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 16]
  |  |  ------------------
  |  |   38|     16|    }
  ------------------
 2196|     16|            STRLCPY(fdata->value, "Upload Smart Contract Wasm", fdata->value_len);
  ------------------
  |  |   35|     16|    {                                         \
  |  |   36|     16|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     16|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 16]
  |  |  ------------------
  |  |   38|     16|    }
  ------------------
 2197|     16|            return format_operation_source_prepare(fdata);
 2198|      0|            break;
 2199|      0|        default:
  ------------------
  |  Branch (2199:9): [True: 0, False: 90]
  ------------------
 2200|      0|            return false;
 2201|     90|    }
 2202|     55|    return true;
 2203|     90|}
formatter.c:format_extend_footprint_ttl:
 2224|     26|static bool format_extend_footprint_ttl(formatter_data_t *fdata) {
 2225|     26|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     26|    {                                         \
  |  |   36|     26|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     26|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   38|     26|    }
  ------------------
 2226|     26|    STRLCPY(fdata->value, "Extend Footprint TTL", fdata->value_len);
  ------------------
  |  |   35|     26|    {                                         \
  |  |   36|     26|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     26|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   38|     26|    }
  ------------------
 2227|     26|    return format_operation_source_prepare(fdata);
 2228|     26|}
formatter.c:format_restore_footprint:
 2230|     55|static bool format_restore_footprint(formatter_data_t *fdata) {
 2231|     55|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     55|    {                                         \
  |  |   36|     55|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     55|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 55]
  |  |  ------------------
  |  |   38|     55|    }
  ------------------
 2232|     55|    STRLCPY(fdata->value, "Restore Footprint", fdata->value_len);
  ------------------
  |  |   35|     55|    {                                         \
  |  |   36|     55|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     55|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 55]
  |  |  ------------------
  |  |   38|     55|    }
  ------------------
 2233|     55|    return format_operation_source_prepare(fdata);
 2234|     55|}

parse_bool:
   48|   906k|bool parse_bool(buffer_t *buffer, bool *b) {
   49|   906k|    uint32_t val;
   50|       |
   51|   906k|    if (!parse_uint32(buffer, &val)) {
  ------------------
  |  Branch (51:9): [True: 75, False: 906k]
  ------------------
   52|     75|        return false;
   53|     75|    }
   54|   906k|    if (val != 0 && val != 1) {
  ------------------
  |  Branch (54:9): [True: 842k, False: 64.3k]
  |  Branch (54:21): [True: 94, False: 842k]
  ------------------
   55|     94|        return false;
   56|     94|    }
   57|   906k|    *b = val == 1 ? true : false;
  ------------------
  |  Branch (57:10): [True: 842k, False: 64.3k]
  ------------------
   58|   906k|    return true;
   59|   906k|}
parse_uint64:
   61|  2.89k|bool parse_uint64(buffer_t *buffer, uint64_t *n) {
   62|  2.89k|    return buffer_read_u64(buffer, n, BE);
   63|  2.89k|}
parse_int64:
   65|  39.4k|bool parse_int64(buffer_t *buffer, int64_t *n) {
   66|  39.4k|    if (!buffer_can_read(buffer, 8)) {
  ------------------
  |  Branch (66:9): [True: 31, False: 39.3k]
  ------------------
   67|     31|        *n = 0;
   68|     31|        return false;
   69|     31|    }
   70|  39.3k|    *n = read_i64_be(buffer->ptr, buffer->offset);
   71|  39.3k|    return buffer_seek_cur(buffer, 8);
   72|  39.4k|}
parse_uint32:
   74|  12.8M|bool parse_uint32(buffer_t *buffer, uint32_t *n) {
   75|  12.8M|    return buffer_read_u32(buffer, n, BE);
   76|  12.8M|}
parse_int32:
   78|  2.28k|bool parse_int32(buffer_t *buffer, int32_t *n) {
   79|  2.28k|    if (!buffer_can_read(buffer, 4)) {
  ------------------
  |  Branch (79:9): [True: 8, False: 2.27k]
  ------------------
   80|      8|        *n = 0;
   81|      8|        return false;
   82|      8|    }
   83|  2.27k|    *n = read_i32_be(buffer->ptr, buffer->offset);
   84|  2.27k|    return buffer_seek_cur(buffer, 4);
   85|  2.28k|}
parse_scv_symbol:
  152|     31|bool parse_scv_symbol(buffer_t *buffer, scv_symbol_t *symbol) {
  153|     31|    PARSER_CHECK(
  ------------------
  |  |   15|     31|    {                           \
  |  |   16|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 25]
  |  |  ------------------
  |  |   17|     31|    }
  ------------------
  154|     31|        parse_binary_string_ptr(buffer, &symbol->symbol, &symbol->size, SCV_SYMBOL_MAX_SIZE))
  155|     25|    return true;
  156|     31|}
parse_scv_string:
  158|    115|bool parse_scv_string(buffer_t *buffer, scv_string_t *string) {
  159|    115|    PARSER_CHECK(parse_binary_string_ptr(buffer, &string->string, &string->size, 0))
  ------------------
  |  |   15|    115|    {                           \
  |  |   16|    115|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 114]
  |  |  ------------------
  |  |   17|    115|    }
  ------------------
  160|    114|    return true;
  161|    115|}
parse_sc_address:
  684|  4.87k|bool parse_sc_address(buffer_t *buffer, sc_address_t *sc_address) {
  685|  4.87k|    PARSER_CHECK(parse_uint32(buffer, &sc_address->type))
  ------------------
  |  |   15|  4.87k|    {                           \
  |  |   16|  4.87k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 4.85k]
  |  |  ------------------
  |  |   17|  4.87k|    }
  ------------------
  686|  4.85k|    switch (sc_address->type) {
  687|  3.50k|        case SC_ADDRESS_TYPE_ACCOUNT:
  ------------------
  |  Branch (687:9): [True: 3.50k, False: 1.35k]
  ------------------
  688|  3.50k|            PARSER_CHECK(parse_account_id(buffer, &sc_address->address))
  ------------------
  |  |   15|  3.50k|    {                           \
  |  |   16|  3.50k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 105, False: 3.39k]
  |  |  ------------------
  |  |   17|  3.50k|    }
  ------------------
  689|  3.39k|            return true;
  690|  1.30k|        case SC_ADDRESS_TYPE_CONTRACT:
  ------------------
  |  Branch (690:9): [True: 1.30k, False: 3.55k]
  ------------------
  691|  1.30k|            PARSER_CHECK(buffer_read_bytes(buffer, &sc_address->address, RAW_CONTRACT_KEY_SIZE))
  ------------------
  |  |   15|  1.30k|    {                           \
  |  |   16|  1.30k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.29k]
  |  |  ------------------
  |  |   17|  1.30k|    }
  ------------------
  692|  1.29k|            return true;
  693|     56|        default:
  ------------------
  |  Branch (693:9): [True: 56, False: 4.80k]
  ------------------
  694|     56|            return false;
  695|  4.85k|    }
  696|  4.85k|}
read_scval_advance:
  733|  10.9M|bool read_scval_advance(buffer_t *buffer) {
  734|  10.9M|    uint32_t sc_type;
  735|  10.9M|    PARSER_CHECK(parse_uint32(buffer, &sc_type))
  ------------------
  |  |   15|  10.9M|    {                           \
  |  |   16|  10.9M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 166, False: 10.9M]
  |  |  ------------------
  |  |   17|  10.9M|    }
  ------------------
  736|       |
  737|  10.9M|    switch (sc_type) {
  738|  9.07M|        case SCV_BOOL:
  ------------------
  |  Branch (738:9): [True: 9.07M, False: 1.89M]
  ------------------
  739|  9.07M|            PARSER_CHECK(buffer_advance(buffer, 4))
  ------------------
  |  |   15|  9.07M|    {                           \
  |  |   16|  9.07M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 9.07M]
  |  |  ------------------
  |  |   17|  9.07M|    }
  ------------------
  740|  9.07M|            break;
  741|  9.07M|        case SCV_VOID:
  ------------------
  |  Branch (741:9): [True: 946, False: 10.9M]
  ------------------
  742|    946|            break;  // void
  743|      4|        case SCV_ERROR:
  ------------------
  |  Branch (743:9): [True: 4, False: 10.9M]
  ------------------
  744|      4|            return false;  // not implemented
  745|   168k|        case SCV_U32:
  ------------------
  |  Branch (745:9): [True: 168k, False: 10.8M]
  ------------------
  746|   169k|        case SCV_I32:
  ------------------
  |  Branch (746:9): [True: 975, False: 10.9M]
  ------------------
  747|   169k|            PARSER_CHECK(buffer_advance(buffer, 4))
  ------------------
  |  |   15|   169k|    {                           \
  |  |   16|   169k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 169k]
  |  |  ------------------
  |  |   17|   169k|    }
  ------------------
  748|   169k|            break;
  749|   169k|        case SCV_U64:
  ------------------
  |  Branch (749:9): [True: 174, False: 10.9M]
  ------------------
  750|    300|        case SCV_I64:
  ------------------
  |  Branch (750:9): [True: 126, False: 10.9M]
  ------------------
  751|   686k|        case SCV_TIMEPOINT:
  ------------------
  |  Branch (751:9): [True: 685k, False: 10.2M]
  ------------------
  752|   686k|        case SCV_DURATION:
  ------------------
  |  Branch (752:9): [True: 89, False: 10.9M]
  ------------------
  753|   686k|            PARSER_CHECK(buffer_advance(buffer, 8))
  ------------------
  |  |   15|   686k|    {                           \
  |  |   16|   686k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 686k]
  |  |  ------------------
  |  |   17|   686k|    }
  ------------------
  754|   686k|            break;
  755|   686k|        case SCV_U128:
  ------------------
  |  Branch (755:9): [True: 197k, False: 10.7M]
  ------------------
  756|   198k|        case SCV_I128:
  ------------------
  |  Branch (756:9): [True: 377, False: 10.9M]
  ------------------
  757|   198k|            PARSER_CHECK(buffer_advance(buffer, 16))
  ------------------
  |  |   15|   198k|    {                           \
  |  |   16|   198k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 198k]
  |  |  ------------------
  |  |   17|   198k|    }
  ------------------
  758|   198k|            break;
  759|   198k|        case SCV_U256:
  ------------------
  |  Branch (759:9): [True: 123, False: 10.9M]
  ------------------
  760|    433|        case SCV_I256:
  ------------------
  |  Branch (760:9): [True: 310, False: 10.9M]
  ------------------
  761|    433|            PARSER_CHECK(buffer_advance(buffer, 32))
  ------------------
  |  |   15|    433|    {                           \
  |  |   16|    433|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 428]
  |  |  ------------------
  |  |   17|    433|    }
  ------------------
  762|    428|            break;
  763|    428|        case SCV_BYTES:
  ------------------
  |  Branch (763:9): [True: 166, False: 10.9M]
  ------------------
  764|    859|        case SCV_STRING:
  ------------------
  |  Branch (764:9): [True: 693, False: 10.9M]
  ------------------
  765|  1.00k|        case SCV_SYMBOL: {
  ------------------
  |  Branch (765:9): [True: 149, False: 10.9M]
  ------------------
  766|  1.00k|            size_t data_size = 0;
  767|  1.00k|            PARSER_CHECK(parse_uint32(buffer, &data_size))
  ------------------
  |  |   15|  1.00k|    {                           \
  |  |   16|  1.00k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.00k]
  |  |  ------------------
  |  |   17|  1.00k|    }
  ------------------
  768|  1.00k|            PARSER_CHECK(num_bytes(data_size, &data_size))
  ------------------
  |  |   15|  1.00k|    {                           \
  |  |   16|  1.00k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 1.00k]
  |  |  ------------------
  |  |   17|  1.00k|    }
  ------------------
  769|  1.00k|            PARSER_CHECK(buffer_advance(buffer, data_size))
  ------------------
  |  |   15|  1.00k|    {                           \
  |  |   16|  1.00k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.00k]
  |  |  ------------------
  |  |   17|  1.00k|    }
  ------------------
  770|  1.00k|            break;
  771|  1.00k|        }
  772|  1.00k|        case SCV_VEC: {
  ------------------
  |  Branch (772:9): [True: 497, False: 10.9M]
  ------------------
  773|    497|            bool vec_exists;
  774|    497|            PARSER_CHECK(parse_bool(buffer, &vec_exists))
  ------------------
  |  |   15|    497|    {                           \
  |  |   16|    497|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 493]
  |  |  ------------------
  |  |   17|    497|    }
  ------------------
  775|    493|            if (vec_exists) {
  ------------------
  |  Branch (775:17): [True: 434, False: 59]
  ------------------
  776|    434|                PARSER_CHECK(read_scval_vec_advance(buffer));
  ------------------
  |  |   15|    434|    {                           \
  |  |   16|    434|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 381, False: 53]
  |  |  ------------------
  |  |   17|    434|    }
  ------------------
  777|     53|            }
  778|    112|            break;
  779|    493|        }
  780|   839k|        case SCV_MAP: {
  ------------------
  |  Branch (780:9): [True: 839k, False: 10.1M]
  ------------------
  781|   839k|            bool map_exists;
  782|   839k|            PARSER_CHECK(parse_bool(buffer, &map_exists))
  ------------------
  |  |   15|   839k|    {                           \
  |  |   16|   839k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 839k]
  |  |  ------------------
  |  |   17|   839k|    }
  ------------------
  783|   839k|            if (map_exists) {
  ------------------
  |  Branch (783:17): [True: 839k, False: 370]
  ------------------
  784|   839k|                PARSER_CHECK(read_scval_map_advance(buffer));
  ------------------
  |  |   15|   839k|    {                           \
  |  |   16|   839k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 832k, False: 7.50k]
  |  |  ------------------
  |  |   17|   839k|    }
  ------------------
  785|  7.50k|            }
  786|  7.87k|            break;
  787|   839k|        }
  788|  7.87k|        case SCV_ADDRESS: {
  ------------------
  |  Branch (788:9): [True: 286, False: 10.9M]
  ------------------
  789|    286|            sc_address_t sc_address;
  790|    286|            PARSER_CHECK(parse_sc_address(buffer, &sc_address));
  ------------------
  |  |   15|    286|    {                           \
  |  |   16|    286|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 283]
  |  |  ------------------
  |  |   17|    286|    }
  ------------------
  791|    283|            break;
  792|    286|        }
  793|    209|        case SCV_CONTRACT_INSTANCE: {
  ------------------
  |  Branch (793:9): [True: 209, False: 10.9M]
  ------------------
  794|    209|            PARSER_CHECK(read_contract_executable_advance(buffer))
  ------------------
  |  |   15|    209|    {                           \
  |  |   16|    209|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 206]
  |  |  ------------------
  |  |   17|    209|    }
  ------------------
  795|    206|            bool map_exists;
  796|    206|            PARSER_CHECK(parse_bool(buffer, &map_exists))
  ------------------
  |  |   15|    206|    {                           \
  |  |   16|    206|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 203]
  |  |  ------------------
  |  |   17|    206|    }
  ------------------
  797|    203|            if (map_exists) {
  ------------------
  |  Branch (797:17): [True: 129, False: 74]
  ------------------
  798|    129|                PARSER_CHECK(read_scval_map_advance(buffer));
  ------------------
  |  |   15|    129|    {                           \
  |  |   16|    129|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 60, False: 69]
  |  |  ------------------
  |  |   17|    129|    }
  ------------------
  799|     69|            }
  800|    143|            break;
  801|    203|        }
  802|    166|        case SCV_LEDGER_KEY_CONTRACT_INSTANCE:
  ------------------
  |  Branch (802:9): [True: 166, False: 10.9M]
  ------------------
  803|    166|            break;  // void
  804|     47|        case SCV_LEDGER_KEY_NONCE:
  ------------------
  |  Branch (804:9): [True: 47, False: 10.9M]
  ------------------
  805|     47|            PARSER_CHECK(buffer_advance(buffer, 8))
  ------------------
  |  |   15|     47|    {                           \
  |  |   16|     47|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 44]
  |  |  ------------------
  |  |   17|     47|    }
  ------------------
  806|     44|            break;
  807|    754|        default:
  ------------------
  |  Branch (807:9): [True: 754, False: 10.9M]
  ------------------
  808|    754|            return false;
  809|  10.9M|    }
  810|  10.1M|    return true;
  811|  10.9M|}
parse_transaction_envelope:
 1307|  2.53k|bool parse_transaction_envelope(const uint8_t *data, size_t data_len, envelope_t *envelope) {
 1308|  2.53k|    PRINTF("parse_transaction_envelope\n");
 1309|  2.53k|    buffer_t buffer = {
 1310|  2.53k|        .ptr = data,
 1311|  2.53k|        .size = data_len,
 1312|  2.53k|        .offset = 0,
 1313|  2.53k|    };
 1314|       |
 1315|  2.53k|    explicit_bzero(&envelope->tx_details, sizeof(tx_details_t));
 1316|  2.53k|    uint32_t envelope_type;
 1317|  2.53k|    PARSER_CHECK(parse_network(&buffer, &envelope->network))
  ------------------
  |  |   15|  2.53k|    {                           \
  |  |   16|  2.53k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 2.53k]
  |  |  ------------------
  |  |   17|  2.53k|    }
  ------------------
 1318|  2.53k|    PARSER_CHECK(parse_uint32(&buffer, &envelope_type))
  ------------------
  |  |   15|  2.53k|    {                           \
  |  |   16|  2.53k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 2.52k]
  |  |  ------------------
  |  |   17|  2.53k|    }
  ------------------
 1319|  2.52k|    envelope->type = envelope_type;
 1320|  2.52k|    switch (envelope_type) {
 1321|  1.18k|        case ENVELOPE_TYPE_TX:
  ------------------
  |  Branch (1321:9): [True: 1.18k, False: 1.34k]
  ------------------
 1322|  1.18k|            PARSER_CHECK(parse_transaction_details(&buffer, &envelope->tx_details.tx))
  ------------------
  |  |   15|  1.18k|    {                           \
  |  |   16|  1.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 64, False: 1.12k]
  |  |  ------------------
  |  |   17|  1.18k|    }
  ------------------
 1323|  1.12k|            break;
 1324|  1.12k|        case ENVELOPE_TYPE_TX_FEE_BUMP:
  ------------------
  |  Branch (1324:9): [True: 21, False: 2.50k]
  ------------------
 1325|     21|            PARSER_CHECK(
  ------------------
  |  |   15|     21|    {                           \
  |  |   16|     21|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 13]
  |  |  ------------------
  |  |   17|     21|    }
  ------------------
 1326|     21|                parse_fee_bump_transaction_details(&buffer, &envelope->tx_details.fee_bump_tx))
 1327|     13|            uint32_t inner_envelope_type;
 1328|     13|            PARSER_CHECK(parse_uint32(&buffer, &inner_envelope_type))
  ------------------
  |  |   15|     13|    {                           \
  |  |   16|     13|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 12]
  |  |  ------------------
  |  |   17|     13|    }
  ------------------
 1329|     12|            if (inner_envelope_type != ENVELOPE_TYPE_TX) {
  ------------------
  |  Branch (1329:17): [True: 1, False: 11]
  ------------------
 1330|      1|                return false;
 1331|      1|            }
 1332|     11|            PARSER_CHECK(parse_transaction_details(&buffer, &envelope->tx_details.tx))
  ------------------
  |  |   15|     11|    {                           \
  |  |   16|     11|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 10]
  |  |  ------------------
  |  |   17|     11|    }
  ------------------
 1333|     10|            break;
 1334|  1.32k|        default:
  ------------------
  |  Branch (1334:9): [True: 1.32k, False: 1.20k]
  ------------------
 1335|  1.32k|            return false;
 1336|  2.52k|    }
 1337|       |
 1338|  1.13k|    envelope->tx_details.tx.operation_position = buffer.offset;
 1339|       |
 1340|       |    // check all operations are valid
 1341|  1.13k|    PARSER_CHECK(check_operations(&buffer, envelope->tx_details.tx.operations_count));
  ------------------
  |  |   15|  1.13k|    {                           \
  |  |   16|  1.13k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 316, False: 815]
  |  |  ------------------
  |  |   17|  1.13k|    }
  ------------------
 1342|    815|    return true;
 1343|  1.13k|}
parse_transaction_operation:
 1348|  5.68k|                                 uint8_t operation_index) {
 1349|  5.68k|    buffer_t buffer = {
 1350|  5.68k|        .ptr = data,
 1351|  5.68k|        .size = data_len,
 1352|  5.68k|        .offset = envelope->tx_details.tx.operation_position,
 1353|  5.68k|    };
 1354|  48.5k|    for (uint8_t i = 0; i <= operation_index; i++) {
  ------------------
  |  Branch (1354:25): [True: 42.8k, False: 5.68k]
  ------------------
 1355|  42.8k|        PARSER_CHECK(parse_operation(&buffer, &envelope->tx_details.tx.op_details));
  ------------------
  |  |   15|  42.8k|    {                           \
  |  |   16|  42.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 42.8k]
  |  |  ------------------
  |  |   17|  42.8k|    }
  ------------------
 1356|  42.8k|    }
 1357|  5.68k|    envelope->tx_details.tx.operation_index = operation_index;
 1358|  5.68k|    return true;
 1359|  5.68k|}
parse_auth_function:
 1361|  2.87k|bool parse_auth_function(buffer_t *buffer, uint32_t *type, invoke_contract_args_t *args) {
 1362|       |    // function
 1363|  2.87k|    PARSER_CHECK(parse_uint32(buffer, type))
  ------------------
  |  |   15|  2.87k|    {                           \
  |  |   16|  2.87k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 2.87k]
  |  |  ------------------
  |  |   17|  2.87k|    }
  ------------------
 1364|  2.87k|    switch (*type) {
 1365|  2.59k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN: {
  ------------------
  |  Branch (1365:9): [True: 2.59k, False: 284]
  ------------------
 1366|       |            // contractFn
 1367|  2.59k|            PARSER_CHECK(parse_invoke_contract_args(buffer, args))
  ------------------
  |  |   15|  2.59k|    {                           \
  |  |   16|  2.59k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.38k, False: 1.21k]
  |  |  ------------------
  |  |   17|  2.59k|    }
  ------------------
 1368|  1.21k|            break;
 1369|  2.59k|        }
 1370|  1.21k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1370:9): [True: 57, False: 2.81k]
  ------------------
 1371|       |            // createContractHostFn
 1372|     57|            PARSER_CHECK(read_create_contract_args_advance(buffer))
  ------------------
  |  |   15|     57|    {                           \
  |  |   16|     57|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 47]
  |  |  ------------------
  |  |   17|     57|    }
  ------------------
 1373|     47|            break;
 1374|    227|        default:
  ------------------
  |  Branch (1374:9): [True: 227, False: 2.64k]
  ------------------
 1375|    227|            return false;
 1376|  2.87k|    }
 1377|  1.25k|    return true;
 1378|  2.87k|}
parse_soroban_authorization_envelope:
 1382|  2.92k|                                          envelope_t *envelope) {
 1383|  2.92k|    PRINTF("parse_soroban_authorization_envelope\n");
 1384|  2.92k|    buffer_t buffer = {
 1385|  2.92k|        .ptr = data,
 1386|  2.92k|        .size = data_len,
 1387|  2.92k|        .offset = 0,
 1388|  2.92k|    };
 1389|       |
 1390|  2.92k|    explicit_bzero(&envelope->soroban_authorization, sizeof(soroban_authorization_t));
 1391|       |
 1392|  2.92k|    uint32_t envelope_type;
 1393|  2.92k|    PARSER_CHECK(parse_uint32(&buffer, &envelope_type))
  ------------------
  |  |   15|  2.92k|    {                           \
  |  |   16|  2.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 2.91k]
  |  |  ------------------
  |  |   17|  2.92k|    }
  ------------------
 1394|  2.91k|    if (envelope_type != ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1394:9): [True: 428, False: 2.49k]
  ------------------
 1395|    428|        return false;
 1396|    428|    }
 1397|  2.49k|    envelope->type = envelope_type;
 1398|       |
 1399|  2.49k|    PARSER_CHECK(parse_network(&buffer, &envelope->network))
  ------------------
  |  |   15|  2.49k|    {                           \
  |  |   16|  2.49k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 2.49k]
  |  |  ------------------
  |  |   17|  2.49k|    }
  ------------------
 1400|  2.49k|    PARSER_CHECK(parse_uint64(&buffer, &envelope->soroban_authorization.nonce))
  ------------------
  |  |   15|  2.49k|    {                           \
  |  |   16|  2.49k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 2.48k]
  |  |  ------------------
  |  |   17|  2.49k|    }
  ------------------
 1401|  2.48k|    PARSER_CHECK(
  ------------------
  |  |   15|  2.48k|    {                           \
  |  |   16|  2.48k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 2.48k]
  |  |  ------------------
  |  |   17|  2.48k|    }
  ------------------
 1402|  2.48k|        parse_uint32(&buffer, &envelope->soroban_authorization.signature_expiration_ledger))
 1403|       |
 1404|       |    // function
 1405|  2.48k|    PARSER_CHECK(parse_auth_function(&buffer,
  ------------------
  |  |   15|  2.48k|    {                           \
  |  |   16|  2.48k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.61k, False: 865]
  |  |  ------------------
  |  |   17|  2.48k|    }
  ------------------
 1406|  2.48k|                                     &envelope->soroban_authorization.auth_function_type,
 1407|  2.48k|                                     &envelope->soroban_authorization.invoke_contract_args))
 1408|       |    // subInvocations
 1409|    865|    uint32_t len;
 1410|    865|    uint8_t sub_invocations_count = 0;
 1411|    865|    PARSER_CHECK(parse_uint32(&buffer, &len))
  ------------------
  |  |   15|    865|    {                           \
  |  |   16|    865|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 857]
  |  |  ------------------
  |  |   17|    865|    }
  ------------------
 1412|  1.24k|    for (uint32_t i = 0; i < len; i++) {
  ------------------
  |  Branch (1412:26): [True: 472, False: 772]
  ------------------
 1413|    472|        PARSER_CHECK(read_soroban_authorized_invocation_advance(
  ------------------
  |  |   15|    472|    {                           \
  |  |   16|    472|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 85, False: 387]
  |  |  ------------------
  |  |   17|    472|    }
  ------------------
 1414|    472|            &buffer,
 1415|    472|            &sub_invocations_count,
 1416|    472|            envelope->soroban_authorization.sub_invocation_positions));
 1417|    387|    }
 1418|    772|    envelope->soroban_authorization.sub_invocations_count = sub_invocations_count;
 1419|    772|    PRINTF("sub_invocations_count=%d\n", sub_invocations_count);
 1420|       |    // for (uint8_t i = 0; i < 16; i++) {
 1421|       |    //     PRINTF("sub_invocation_positions[%d]=%d\n",
 1422|       |    //            i,
 1423|       |    //            envelope->soroban_authorization.sub_invocation_positions[i]);
 1424|       |    // }
 1425|    772|    return true;
 1426|    857|}
parser.c:read_i64_be:
   32|  39.3k|static int64_t read_i64_be(const uint8_t *ptr, size_t offset) {
   33|  39.3k|    uint64_t result = 0;
   34|   354k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (34:21): [True: 315k, False: 39.3k]
  ------------------
   35|   315k|        result = (result << 8) | ptr[offset + i];
   36|   315k|    }
   37|  39.3k|    return (int64_t) result;
   38|  39.3k|}
parser.c:read_i32_be:
   40|  2.27k|static int32_t read_i32_be(const uint8_t *ptr, size_t offset) {
   41|  2.27k|    uint32_t result = 0;
   42|  11.3k|    for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (42:21): [True: 9.09k, False: 2.27k]
  ------------------
   43|  9.09k|        result = (result << 8) | ptr[offset + i];
   44|  9.09k|    }
   45|  2.27k|    return (int32_t) result;
   46|  2.27k|}
parser.c:parse_binary_string_ptr:
  114|  6.68k|                                    size_t max_length) {
  115|       |    /* max_length does not include terminal null character */
  116|  6.68k|    uint32_t size;
  117|       |
  118|  6.68k|    PARSER_CHECK(parse_uint32(buffer, &size))
  ------------------
  |  |   15|  6.68k|    {                           \
  |  |   16|  6.68k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 6.67k]
  |  |  ------------------
  |  |   17|  6.68k|    }
  ------------------
  119|  6.67k|    if (max_length != 0 && size > max_length) {
  ------------------
  |  Branch (119:9): [True: 6.56k, False: 115]
  |  Branch (119:28): [True: 6, False: 6.55k]
  ------------------
  120|      6|        return false;
  121|      6|    }
  122|       |
  123|  6.67k|    size_t data_size = 0;
  124|  6.67k|    PARSER_CHECK(num_bytes(size, &data_size))
  ------------------
  |  |   15|  6.67k|    {                           \
  |  |   16|  6.67k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 6.67k]
  |  |  ------------------
  |  |   17|  6.67k|    }
  ------------------
  125|  6.67k|    PARSER_CHECK(buffer_read_bytes(buffer, string, data_size))
  ------------------
  |  |   15|  6.67k|    {                           \
  |  |   16|  6.67k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 19, False: 6.65k]
  |  |  ------------------
  |  |   17|  6.67k|    }
  ------------------
  126|       |    PARSER_CHECK(check_padding(*string, size, data_size))  // security check
  ------------------
  |  |   15|  6.65k|    {                           \
  |  |   16|  6.65k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 170, False: 6.48k]
  |  |  ------------------
  |  |   17|  6.65k|    }
  ------------------
  127|  6.48k|    if (out_len) {
  ------------------
  |  Branch (127:9): [True: 6.48k, False: 0]
  ------------------
  128|  6.48k|        *out_len = size;
  129|  6.48k|    }
  130|  6.48k|    return true;
  131|  6.65k|}
parser.c:check_padding:
  101|  6.65k|static bool check_padding(const uint8_t *buffer, size_t offset, size_t length) {
  102|  6.65k|    size_t i;
  103|  8.52k|    for (i = 0; i < length - offset; i++) {
  ------------------
  |  Branch (103:17): [True: 2.04k, False: 6.48k]
  ------------------
  104|  2.04k|        if (buffer[offset + i] != 0x00) {
  ------------------
  |  Branch (104:13): [True: 170, False: 1.87k]
  ------------------
  105|    170|            return false;
  106|    170|        }
  107|  2.04k|    }
  108|  6.48k|    return true;
  109|  6.65k|}
parser.c:parse_account_id:
  194|  43.4k|static bool parse_account_id(buffer_t *buffer, const uint8_t **account_id) {
  195|  43.4k|    uint32_t account_type;
  196|       |
  197|  43.4k|    PARSER_CHECK(parse_uint32(buffer, &account_type))
  ------------------
  |  |   15|  43.4k|    {                           \
  |  |   16|  43.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 43.4k]
  |  |  ------------------
  |  |   17|  43.4k|    }
  ------------------
  198|  43.4k|    if (account_type != PUBLIC_KEY_TYPE_ED25519) {
  ------------------
  |  |   50|  43.4k|#define PUBLIC_KEY_TYPE_ED25519 0
  ------------------
  |  Branch (198:9): [True: 98, False: 43.3k]
  ------------------
  199|     98|        return false;
  200|     98|    }
  201|  43.3k|    PARSER_CHECK(buffer_read_bytes(buffer, account_id, RAW_ED25519_PUBLIC_KEY_SIZE))
  ------------------
  |  |   15|  43.3k|    {                           \
  |  |   16|  43.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 43.3k]
  |  |  ------------------
  |  |   17|  43.3k|    }
  ------------------
  202|  43.3k|    return true;
  203|  43.3k|}
parser.c:buffer_read_bytes:
   25|  66.0k|static bool buffer_read_bytes(buffer_t *buffer, const uint8_t **data, size_t size) {
   26|  66.0k|    PARSER_CHECK(buffer_can_read(buffer, size))
  ------------------
  |  |   15|  66.0k|    {                           \
  |  |   16|  66.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 63, False: 65.9k]
  |  |  ------------------
  |  |   17|  66.0k|    }
  ------------------
   27|  65.9k|    *data = buffer->ptr + buffer->offset;
   28|  65.9k|    PARSER_CHECK(buffer_advance(buffer, size))
  ------------------
  |  |   15|  65.9k|    {                           \
  |  |   16|  65.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 65.9k]
  |  |  ------------------
  |  |   17|  65.9k|    }
  ------------------
   29|  65.9k|    return true;
   30|  65.9k|}
parser.c:buffer_advance:
   21|  10.1M|static bool buffer_advance(buffer_t *buffer, size_t num_bytes) {
   22|  10.1M|    return buffer_seek_cur(buffer, num_bytes);
   23|  10.1M|}
parser.c:num_bytes:
   87|  9.41k|static bool num_bytes(size_t size, size_t *out_size) {
   88|  9.41k|    size_t remainder = size % 4;
   89|  9.41k|    if (remainder == 0) {
  ------------------
  |  Branch (89:9): [True: 6.66k, False: 2.75k]
  ------------------
   90|  6.66k|        *out_size = size;
   91|  6.66k|        return true;
   92|  6.66k|    }
   93|  2.75k|    if (size > SIZE_MAX - 4) {
  ------------------
  |  Branch (93:9): [True: 0, False: 2.75k]
  ------------------
   94|       |        // size + 4 would overflow
   95|      0|        return false;
   96|      0|    }
   97|  2.75k|    *out_size = size + 4 - remainder;
   98|  2.75k|    return true;
   99|  2.75k|}
parser.c:read_scval_vec_advance:
  698|    434|static bool read_scval_vec_advance(buffer_t *buffer) {
  699|    434|    uint32_t vec_len;
  700|    434|    PARSER_CHECK(parse_uint32(buffer, &vec_len))
  ------------------
  |  |   15|    434|    {                           \
  |  |   16|    434|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 433]
  |  |  ------------------
  |  |   17|    434|    }
  ------------------
  701|    836|    for (uint32_t i = 0; i < vec_len; i++) {
  ------------------
  |  Branch (701:26): [True: 783, False: 53]
  ------------------
  702|    783|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|    783|    {                           \
  |  |   16|    783|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 380, False: 403]
  |  |  ------------------
  |  |   17|    783|    }
  ------------------
  703|    783|    }
  704|     53|    return true;
  705|    433|}
parser.c:read_scval_map_advance:
  707|   839k|static bool read_scval_map_advance(buffer_t *buffer) {
  708|   839k|    uint32_t map_len;
  709|   839k|    PARSER_CHECK(parse_uint32(buffer, &map_len))
  ------------------
  |  |   15|   839k|    {                           \
  |  |   16|   839k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 19, False: 839k]
  |  |  ------------------
  |  |   17|   839k|    }
  ------------------
  710|  5.80M|    for (uint32_t i = 0; i < map_len; i++) {
  ------------------
  |  Branch (710:26): [True: 5.79M, False: 7.57k]
  ------------------
  711|  5.79M|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  5.79M|    {                           \
  |  |   16|  5.79M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 625k, False: 5.16M]
  |  |  ------------------
  |  |   17|  5.79M|    }
  ------------------
  712|  5.16M|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  5.16M|    {                           \
  |  |   16|  5.16M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 206k, False: 4.96M]
  |  |  ------------------
  |  |   17|  5.16M|    }
  ------------------
  713|  5.16M|    }
  714|  7.57k|    return true;
  715|   839k|}
parser.c:read_contract_executable_advance:
  717|    526|static bool read_contract_executable_advance(buffer_t *buffer) {
  718|    526|    uint32_t type;
  719|    526|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|    526|    {                           \
  |  |   16|    526|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 519]
  |  |  ------------------
  |  |   17|    526|    }
  ------------------
  720|    519|    switch (type) {
  721|    320|        case CONTRACT_EXECUTABLE_WASM:
  ------------------
  |  |  491|    320|#define CONTRACT_EXECUTABLE_WASM          0
  ------------------
  |  Branch (721:9): [True: 320, False: 199]
  ------------------
  722|       |            PARSER_CHECK(buffer_advance(buffer, HASH_SIZE))  // code
  ------------------
  |  |   15|    320|    {                           \
  |  |   16|    320|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 317]
  |  |  ------------------
  |  |   17|    320|    }
  ------------------
  723|    317|            break;
  724|    317|        case CONTRACT_EXECUTABLE_STELLAR_ASSET:
  ------------------
  |  |  492|    196|#define CONTRACT_EXECUTABLE_STELLAR_ASSET 1
  ------------------
  |  Branch (724:9): [True: 196, False: 323]
  ------------------
  725|       |            // void
  726|    196|            break;
  727|      3|        default:
  ------------------
  |  Branch (727:9): [True: 3, False: 516]
  ------------------
  728|      3|            return false;
  729|    519|    }
  730|    513|    return true;
  731|    519|}
parser.c:parse_network:
 1293|  5.02k|static bool parse_network(buffer_t *buffer, uint8_t *network) {
 1294|  5.02k|    const uint8_t *network_id;
 1295|  5.02k|    PARSER_CHECK(buffer_read_bytes(buffer, &network_id, HASH_SIZE))
  ------------------
  |  |   15|  5.02k|    {                           \
  |  |   16|  5.02k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 5.02k]
  |  |  ------------------
  |  |   17|  5.02k|    }
  ------------------
 1296|       |
 1297|  5.02k|    if (memcmp(network_id, NETWORK_ID_PUBLIC_HASH, HASH_SIZE) == 0) {
  ------------------
  |  |   46|  5.02k|#define HASH_SIZE                 32
  ------------------
  |  Branch (1297:9): [True: 40, False: 4.98k]
  ------------------
 1298|     40|        *network = NETWORK_TYPE_PUBLIC;
  ------------------
  |  |   57|     40|#define NETWORK_TYPE_PUBLIC  0
  ------------------
 1299|  4.98k|    } else if (memcmp(network_id, NETWORK_ID_TEST_HASH, HASH_SIZE) == 0) {
  ------------------
  |  |   46|  4.98k|#define HASH_SIZE                 32
  ------------------
  |  Branch (1299:16): [True: 34, False: 4.94k]
  ------------------
 1300|     34|        *network = NETWORK_TYPE_TEST;
  ------------------
  |  |   58|     34|#define NETWORK_TYPE_TEST    1
  ------------------
 1301|  4.94k|    } else {
 1302|  4.94k|        *network = NETWORK_TYPE_UNKNOWN;
  ------------------
  |  |   59|  4.94k|#define NETWORK_TYPE_UNKNOWN 2
  ------------------
 1303|  4.94k|    }
 1304|  5.02k|    return true;
 1305|  5.02k|}
parser.c:parse_transaction_details:
 1242|  1.19k|static bool parse_transaction_details(buffer_t *buffer, transaction_details_t *transaction) {
 1243|       |    // account used to run the (inner)transaction
 1244|  1.19k|    PARSER_CHECK(parse_transaction_source(buffer, &transaction->source_account))
  ------------------
  |  |   15|  1.19k|    {                           \
  |  |   16|  1.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.19k]
  |  |  ------------------
  |  |   17|  1.19k|    }
  ------------------
 1245|       |
 1246|       |    // the fee the source_account will pay
 1247|  1.19k|    PARSER_CHECK(parse_transaction_fee(buffer, &transaction->fee))
  ------------------
  |  |   15|  1.19k|    {                           \
  |  |   16|  1.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.19k]
  |  |  ------------------
  |  |   17|  1.19k|    }
  ------------------
 1248|       |
 1249|       |    // sequence number to consume in the account
 1250|  1.19k|    PARSER_CHECK(parse_transaction_sequence(buffer, &transaction->sequence_number))
  ------------------
  |  |   15|  1.19k|    {                           \
  |  |   16|  1.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.18k]
  |  |  ------------------
  |  |   17|  1.19k|    }
  ------------------
 1251|       |
 1252|       |    // validity conditions
 1253|  1.18k|    PARSER_CHECK(parse_transaction_preconditions(buffer, &transaction->cond))
  ------------------
  |  |   15|  1.18k|    {                           \
  |  |   16|  1.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 33, False: 1.15k]
  |  |  ------------------
  |  |   17|  1.18k|    }
  ------------------
 1254|       |
 1255|  1.15k|    PARSER_CHECK(parse_transaction_memo(buffer, &transaction->memo))
  ------------------
  |  |   15|  1.15k|    {                           \
  |  |   16|  1.15k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 22, False: 1.13k]
  |  |  ------------------
  |  |   17|  1.15k|    }
  ------------------
 1256|  1.13k|    PARSER_CHECK(parse_transaction_operation_len(buffer, &transaction->operations_count))
  ------------------
  |  |   15|  1.13k|    {                           \
  |  |   16|  1.13k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.13k]
  |  |  ------------------
  |  |   17|  1.13k|    }
  ------------------
 1257|       |
 1258|       |    // check ops is valid
 1259|       |    // size_t offset = buffer->offset;
 1260|       |    // PARSER_CHECK(check_operations(buffer, transaction->operations_count))
 1261|       |    // buffer->offset = offset;
 1262|       |
 1263|  1.13k|    return true;
 1264|  1.13k|}
parser.c:parse_transaction_source:
 1203|  1.19k|static bool parse_transaction_source(buffer_t *buffer, muxed_account_t *source) {
 1204|  1.19k|    return parse_muxed_account(buffer, source);
 1205|  1.19k|}
parser.c:parse_muxed_account:
  205|  3.34k|static bool parse_muxed_account(buffer_t *buffer, muxed_account_t *muxed_account) {
  206|  3.34k|    PARSER_CHECK(parse_uint32(buffer, &muxed_account->type))
  ------------------
  |  |   15|  3.34k|    {                           \
  |  |   16|  3.34k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 3.34k]
  |  |  ------------------
  |  |   17|  3.34k|    }
  ------------------
  207|       |
  208|  3.34k|    switch (muxed_account->type) {
  209|  3.01k|        case KEY_TYPE_ED25519:
  ------------------
  |  Branch (209:9): [True: 3.01k, False: 323]
  ------------------
  210|  3.01k|            PARSER_CHECK(
  ------------------
  |  |   15|  3.01k|    {                           \
  |  |   16|  3.01k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 3.01k]
  |  |  ------------------
  |  |   17|  3.01k|    }
  ------------------
  211|  3.01k|                buffer_read_bytes(buffer, &muxed_account->ed25519, RAW_ED25519_PUBLIC_KEY_SIZE))
  212|  3.01k|            return true;
  213|    322|        case KEY_TYPE_MUXED_ED25519:
  ------------------
  |  Branch (213:9): [True: 322, False: 3.01k]
  ------------------
  214|    322|            PARSER_CHECK(parse_uint64(buffer, &muxed_account->med25519.id))
  ------------------
  |  |   15|    322|    {                           \
  |  |   16|    322|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 320]
  |  |  ------------------
  |  |   17|    322|    }
  ------------------
  215|    320|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|    320|    {                           \
  |  |   16|    320|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 318]
  |  |  ------------------
  |  |   17|    320|    }
  ------------------
  216|    320|                                           &muxed_account->med25519.ed25519,
  217|    320|                                           RAW_ED25519_PUBLIC_KEY_SIZE))
  218|    318|            return true;
  219|      1|        default:
  ------------------
  |  Branch (219:9): [True: 1, False: 3.34k]
  ------------------
  220|      1|            return false;
  221|  3.34k|    }
  222|  3.34k|}
parser.c:parse_transaction_fee:
 1207|  1.19k|static bool parse_transaction_fee(buffer_t *buffer, uint32_t *fee) {
 1208|  1.19k|    return parse_uint32(buffer, fee);
 1209|  1.19k|}
parser.c:parse_transaction_sequence:
 1211|  1.19k|static bool parse_transaction_sequence(buffer_t *buffer, sequence_number_t *sequence_number) {
 1212|  1.19k|    return parse_int64(buffer, sequence_number);
 1213|  1.19k|}
parser.c:parse_transaction_preconditions:
 1215|  1.18k|static bool parse_transaction_preconditions(buffer_t *buffer, preconditions_t *preconditions) {
 1216|  1.18k|    return parse_preconditions(buffer, preconditions);
 1217|  1.18k|}
parser.c:parse_preconditions:
  249|  1.18k|static bool parse_preconditions(buffer_t *buffer, preconditions_t *cond) {
  250|  1.18k|    uint32_t precondition_type;
  251|  1.18k|    PARSER_CHECK(parse_uint32(buffer, &precondition_type))
  ------------------
  |  |   15|  1.18k|    {                           \
  |  |   16|  1.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 1.18k]
  |  |  ------------------
  |  |   17|  1.18k|    }
  ------------------
  252|  1.18k|    switch (precondition_type) {
  253|  1.12k|        case PRECOND_NONE:
  ------------------
  |  Branch (253:9): [True: 1.12k, False: 62]
  ------------------
  254|  1.12k|            cond->time_bounds_present = false;
  255|  1.12k|            cond->min_seq_num_present = false;
  256|  1.12k|            cond->ledger_bounds_present = false;
  257|  1.12k|            cond->min_seq_ledger_gap = 0;
  258|  1.12k|            cond->min_seq_age = 0;
  259|  1.12k|            return true;
  260|     23|        case PRECOND_TIME:
  ------------------
  |  Branch (260:9): [True: 23, False: 1.16k]
  ------------------
  261|     23|            cond->time_bounds_present = true;
  262|     23|            PARSER_CHECK(parse_time_bounds(buffer, &cond->time_bounds))
  ------------------
  |  |   15|     23|    {                           \
  |  |   16|     23|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 21]
  |  |  ------------------
  |  |   17|     23|    }
  ------------------
  263|     21|            cond->min_seq_num_present = false;
  264|     21|            cond->ledger_bounds_present = false;
  265|     21|            cond->min_seq_ledger_gap = 0;
  266|     21|            cond->min_seq_age = 0;
  267|     21|            return true;
  268|     37|        case PRECOND_V2:
  ------------------
  |  Branch (268:9): [True: 37, False: 1.15k]
  ------------------
  269|     37|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|     37|    {                           \
  |  |   16|     37|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 35]
  |  |  ------------------
  |  |   17|     37|    }
  ------------------
  270|     37|                                             (xdr_type_reader) parse_time_bounds,
  271|     37|                                             &cond->time_bounds,
  272|     37|                                             &cond->time_bounds_present))
  273|     35|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|     35|    {                           \
  |  |   16|     35|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 31]
  |  |  ------------------
  |  |   17|     35|    }
  ------------------
  274|     35|                                             (xdr_type_reader) parse_ledger_bounds,
  275|     35|                                             &cond->ledger_bounds,
  276|     35|                                             &cond->ledger_bounds_present))
  277|     31|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|     31|    {                           \
  |  |   16|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 28]
  |  |  ------------------
  |  |   17|     31|    }
  ------------------
  278|     31|                                             (xdr_type_reader) parse_int64,
  279|     31|                                             &cond->min_seq_num,
  280|     31|                                             &cond->min_seq_num_present))
  281|     28|            PARSER_CHECK(parse_int64(buffer, &cond->min_seq_age))
  ------------------
  |  |   15|     28|    {                           \
  |  |   16|     28|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 27]
  |  |  ------------------
  |  |   17|     28|    }
  ------------------
  282|     27|            PARSER_CHECK(parse_uint32(buffer, &cond->min_seq_ledger_gap))
  ------------------
  |  |   15|     27|    {                           \
  |  |   16|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 26]
  |  |  ------------------
  |  |   17|     27|    }
  ------------------
  283|     26|            PARSER_CHECK(parse_extra_signers(buffer))
  ------------------
  |  |   15|     26|    {                           \
  |  |   16|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 16, False: 10]
  |  |  ------------------
  |  |   17|     26|    }
  ------------------
  284|     10|            return true;
  285|      2|        default:
  ------------------
  |  Branch (285:9): [True: 2, False: 1.18k]
  ------------------
  286|      2|            return false;
  287|  1.18k|    }
  288|  1.18k|}
parser.c:parse_time_bounds:
  224|     24|static bool parse_time_bounds(buffer_t *buffer, time_bounds_t *bounds) {
  225|     24|    PARSER_CHECK(parse_uint64(buffer, &bounds->min_time))
  ------------------
  |  |   15|     24|    {                           \
  |  |   16|     24|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 23]
  |  |  ------------------
  |  |   17|     24|    }
  ------------------
  226|     23|    PARSER_CHECK(parse_uint64(buffer, &bounds->max_time))
  ------------------
  |  |   15|     23|    {                           \
  |  |   16|     23|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 22]
  |  |  ------------------
  |  |   17|     23|    }
  ------------------
  227|     22|    return true;
  228|     23|}
parser.c:parse_optional_type:
  135|  63.9k|static bool parse_optional_type(buffer_t *buffer, xdr_type_reader reader, void *dst, bool *opted) {
  136|  63.9k|    bool is_present;
  137|       |
  138|  63.9k|    PARSER_CHECK(parse_bool(buffer, &is_present))
  ------------------
  |  |   15|  63.9k|    {                           \
  |  |   16|  63.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 59, False: 63.9k]
  |  |  ------------------
  |  |   17|  63.9k|    }
  ------------------
  139|  63.9k|    if (is_present) {
  ------------------
  |  Branch (139:9): [True: 1.86k, False: 62.0k]
  ------------------
  140|  1.86k|        if (opted) {
  ------------------
  |  Branch (140:13): [True: 1.86k, False: 0]
  ------------------
  141|  1.86k|            *opted = true;
  142|  1.86k|        }
  143|  1.86k|        return reader(buffer, dst);
  144|  62.0k|    } else {
  145|  62.0k|        if (opted) {
  ------------------
  |  Branch (145:13): [True: 62.0k, False: 0]
  ------------------
  146|  62.0k|            *opted = false;
  147|  62.0k|        }
  148|  62.0k|        return true;
  149|  62.0k|    }
  150|  63.9k|}
parser.c:parse_ledger_bounds:
  230|     11|static bool parse_ledger_bounds(buffer_t *buffer, ledger_bounds_t *ledger_bounds) {
  231|     11|    PARSER_CHECK(parse_uint32(buffer, &ledger_bounds->min_ledger))
  ------------------
  |  |   15|     11|    {                           \
  |  |   16|     11|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 9]
  |  |  ------------------
  |  |   17|     11|    }
  ------------------
  232|      9|    PARSER_CHECK(parse_uint32(buffer, &ledger_bounds->max_ledger))
  ------------------
  |  |   15|      9|    {                           \
  |  |   16|      9|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 8]
  |  |  ------------------
  |  |   17|      9|    }
  ------------------
  233|      8|    return true;
  234|      9|}
parser.c:parse_extra_signers:
  236|     26|static bool parse_extra_signers(buffer_t *buffer) {
  237|     26|    uint32_t length;
  238|     26|    PARSER_CHECK(parse_uint32(buffer, &length))
  ------------------
  |  |   15|     26|    {                           \
  |  |   16|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 25]
  |  |  ------------------
  |  |   17|     26|    }
  ------------------
  239|     25|    if (length > 2) {  // maximum length is 2
  ------------------
  |  Branch (239:9): [True: 1, False: 24]
  ------------------
  240|      1|        return false;
  241|      1|    }
  242|     24|    signer_key_t signer_key;
  243|     32|    for (uint32_t i = 0; i < length; i++) {
  ------------------
  |  Branch (243:26): [True: 22, False: 10]
  ------------------
  244|     22|        PARSER_CHECK(parse_signer_key(buffer, &signer_key))
  ------------------
  |  |   15|     22|    {                           \
  |  |   16|     22|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 8]
  |  |  ------------------
  |  |   17|     22|    }
  ------------------
  245|     22|    }
  246|     10|    return true;
  247|     24|}
parser.c:parse_signer_key:
  163|  2.39k|static bool parse_signer_key(buffer_t *buffer, signer_key_t *key) {
  164|  2.39k|    PARSER_CHECK(parse_uint32(buffer, &key->type))
  ------------------
  |  |   15|  2.39k|    {                           \
  |  |   16|  2.39k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 2.38k]
  |  |  ------------------
  |  |   17|  2.39k|    }
  ------------------
  165|  2.38k|    switch (key->type) {
  166|    198|        case SIGNER_KEY_TYPE_ED25519:
  ------------------
  |  Branch (166:9): [True: 198, False: 2.18k]
  ------------------
  167|    198|            PARSER_CHECK(buffer_read_bytes(buffer, &key->ed25519, RAW_ED25519_PUBLIC_KEY_SIZE))
  ------------------
  |  |   15|    198|    {                           \
  |  |   16|    198|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 196]
  |  |  ------------------
  |  |   17|    198|    }
  ------------------
  168|    196|            return true;
  169|    405|        case SIGNER_KEY_TYPE_PRE_AUTH_TX:
  ------------------
  |  Branch (169:9): [True: 405, False: 1.97k]
  ------------------
  170|    405|            PARSER_CHECK(buffer_read_bytes(buffer, &key->pre_auth_tx, RAW_PRE_AUTH_TX_KEY_SIZE))
  ------------------
  |  |   15|    405|    {                           \
  |  |   16|    405|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 404]
  |  |  ------------------
  |  |   17|    405|    }
  ------------------
  171|    404|            return true;
  172|    145|        case SIGNER_KEY_TYPE_HASH_X:
  ------------------
  |  Branch (172:9): [True: 145, False: 2.23k]
  ------------------
  173|    145|            PARSER_CHECK(buffer_read_bytes(buffer, &key->hash_x, RAW_HASH_X_KEY_SIZE))
  ------------------
  |  |   15|    145|    {                           \
  |  |   16|    145|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 144]
  |  |  ------------------
  |  |   17|    145|    }
  ------------------
  174|    144|            return true;
  175|  1.63k|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:
  ------------------
  |  Branch (175:9): [True: 1.63k, False: 749]
  ------------------
  176|  1.63k|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|  1.63k|    {                           \
  |  |   16|  1.63k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.63k]
  |  |  ------------------
  |  |   17|  1.63k|    }
  ------------------
  177|  1.63k|                                           &key->ed25519_signed_payload.ed25519,
  178|  1.63k|                                           RAW_ED25519_PUBLIC_KEY_SIZE))
  179|  1.63k|            PARSER_CHECK(parse_uint32(buffer, &key->ed25519_signed_payload.payload_len))
  ------------------
  |  |   15|  1.63k|    {                           \
  |  |   16|  1.63k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.63k]
  |  |  ------------------
  |  |   17|  1.63k|    }
  ------------------
  180|       |            // valid length [1, 64]
  181|  1.63k|            if (key->ed25519_signed_payload.payload_len == 0 ||
  ------------------
  |  Branch (181:17): [True: 1, False: 1.63k]
  ------------------
  182|  1.63k|                key->ed25519_signed_payload.payload_len > 64) {
  ------------------
  |  Branch (182:17): [True: 1, False: 1.63k]
  ------------------
  183|      2|                return false;
  184|      2|            }
  185|  1.63k|            size_t data_size = 0;
  186|  1.63k|            PARSER_CHECK(num_bytes(key->ed25519_signed_payload.payload_len, &data_size))
  ------------------
  |  |   15|  1.63k|    {                           \
  |  |   16|  1.63k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 1.63k]
  |  |  ------------------
  |  |   17|  1.63k|    }
  ------------------
  187|  1.63k|            PARSER_CHECK(buffer_read_bytes(buffer, &key->ed25519_signed_payload.payload, data_size))
  ------------------
  |  |   15|  1.63k|    {                           \
  |  |   16|  1.63k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.63k]
  |  |  ------------------
  |  |   17|  1.63k|    }
  ------------------
  188|  1.63k|            return true;
  189|      1|        default:
  ------------------
  |  Branch (189:9): [True: 1, False: 2.38k]
  ------------------
  190|      1|            return false;
  191|  2.38k|    }
  192|  2.38k|}
parser.c:parse_transaction_memo:
 1219|  1.15k|static bool parse_transaction_memo(buffer_t *buffer, memo_t *memo) {
 1220|  1.15k|    return parse_memo(buffer, memo);
 1221|  1.15k|}
parser.c:parse_memo:
  290|  1.15k|static bool parse_memo(buffer_t *buffer, memo_t *memo) {
  291|  1.15k|    PARSER_CHECK(parse_uint32(buffer, &memo->type))
  ------------------
  |  |   15|  1.15k|    {                           \
  |  |   16|  1.15k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.15k]
  |  |  ------------------
  |  |   17|  1.15k|    }
  ------------------
  292|  1.15k|    switch (memo->type) {
  293|  1.10k|        case MEMO_NONE:
  ------------------
  |  Branch (293:9): [True: 1.10k, False: 42]
  ------------------
  294|  1.10k|            return true;
  295|      4|        case MEMO_ID:
  ------------------
  |  Branch (295:9): [True: 4, False: 1.14k]
  ------------------
  296|      4|            return parse_uint64(buffer, &memo->id);
  297|     24|        case MEMO_TEXT: {
  ------------------
  |  Branch (297:9): [True: 24, False: 1.12k]
  ------------------
  298|     24|            PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|     24|    {                           \
  |  |   16|     24|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 20]
  |  |  ------------------
  |  |   17|     24|    }
  ------------------
  299|     24|                                                 &memo->text.text,
  300|     24|                                                 &memo->text.text_size,
  301|     24|                                                 MEMO_TEXT_MAX_SIZE))
  302|     20|            return true;
  303|     24|        }
  304|      2|        case MEMO_HASH:
  ------------------
  |  Branch (304:9): [True: 2, False: 1.14k]
  ------------------
  305|      2|            return buffer_read_bytes(buffer, &memo->hash, HASH_SIZE);
  ------------------
  |  |   46|      2|#define HASH_SIZE                 32
  ------------------
  306|      2|        case MEMO_RETURN:
  ------------------
  |  Branch (306:9): [True: 2, False: 1.14k]
  ------------------
  307|      2|            return buffer_read_bytes(buffer, &memo->return_hash, HASH_SIZE);
  ------------------
  |  |   46|      2|#define HASH_SIZE                 32
  ------------------
  308|     10|        default:
  ------------------
  |  Branch (308:9): [True: 10, False: 1.14k]
  ------------------
  309|     10|            return false;  // unknown memo type
  310|  1.15k|    }
  311|  1.15k|}
parser.c:parse_transaction_operation_len:
 1223|  1.13k|static bool parse_transaction_operation_len(buffer_t *buffer, uint8_t *operations_count) {
 1224|  1.13k|    uint32_t len;
 1225|  1.13k|    PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  1.13k|    {                           \
  |  |   16|  1.13k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 1.13k]
  |  |  ------------------
  |  |   17|  1.13k|    }
  ------------------
 1226|  1.13k|    if (len > MAX_OPS) {
  ------------------
  |  |   39|  1.13k|#define MAX_OPS 35
  ------------------
  |  Branch (1226:9): [True: 1, False: 1.13k]
  ------------------
 1227|      1|        return false;
 1228|      1|    }
 1229|  1.13k|    *operations_count = len;
 1230|  1.13k|    return true;
 1231|  1.13k|}
parser.c:parse_fee_bump_transaction_details:
 1276|     21|    fee_bump_transaction_details_t *fee_bump_transaction) {
 1277|     21|    PARSER_CHECK(parse_fee_bump_transaction_fee_source(buffer, &fee_bump_transaction->fee_source))
  ------------------
  |  |   15|     21|    {                           \
  |  |   16|     21|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 15]
  |  |  ------------------
  |  |   17|     21|    }
  ------------------
 1278|     15|    PARSER_CHECK(parse_fee_bump_transaction_fee(buffer, &fee_bump_transaction->fee))
  ------------------
  |  |   15|     15|    {                           \
  |  |   16|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 13]
  |  |  ------------------
  |  |   17|     15|    }
  ------------------
 1279|     13|    return true;
 1280|     15|}
parser.c:parse_fee_bump_transaction_fee_source:
 1266|     21|static bool parse_fee_bump_transaction_fee_source(buffer_t *buffer, muxed_account_t *fee_source) {
 1267|     21|    return parse_muxed_account(buffer, fee_source);
 1268|     21|}
parser.c:parse_fee_bump_transaction_fee:
 1270|     15|static bool parse_fee_bump_transaction_fee(buffer_t *buffer, int64_t *fee) {
 1271|     15|    return parse_int64(buffer, fee);
 1272|     15|}
parser.c:check_operations:
 1233|  1.13k|static bool check_operations(buffer_t *buffer, uint8_t op_count) {
 1234|  1.13k|    PRINTF("check_operations: op_count=%d, offset=%d\n", op_count, buffer->offset);
 1235|  1.13k|    operation_t op;
 1236|  6.91k|    for (uint8_t i = 0; i < op_count; i++) {
  ------------------
  |  Branch (1236:25): [True: 6.09k, False: 815]
  ------------------
 1237|  6.09k|        PARSER_CHECK(parse_operation(buffer, &op))
  ------------------
  |  |   15|  6.09k|    {                           \
  |  |   16|  6.09k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 316, False: 5.78k]
  |  |  ------------------
  |  |   17|  6.09k|    }
  ------------------
 1238|  6.09k|    }
 1239|    815|    return true;
 1240|  1.13k|}
parser.c:parse_operation:
 1101|  48.9k|static bool parse_operation(buffer_t *buffer, operation_t *operation) {
 1102|  48.9k|    PRINTF("parse_operation: offset=%d\n", buffer->offset);
 1103|  48.9k|    explicit_bzero(operation, sizeof(operation_t));
 1104|       |
 1105|  48.9k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  48.9k|    {                           \
  |  |   16|  48.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 45, False: 48.9k]
  |  |  ------------------
  |  |   17|  48.9k|    }
  ------------------
 1106|  48.9k|                                     (xdr_type_reader) parse_muxed_account,
 1107|  48.9k|                                     &operation->source_account,
 1108|  48.9k|                                     &operation->source_account_present))
 1109|  48.9k|    PRINTF("operation->source_account_present: %d\n", operation->source_account_present);
 1110|       |
 1111|  48.9k|    PARSER_CHECK(parse_uint32(buffer, &operation->type))
  ------------------
  |  |   15|  48.9k|    {                           \
  |  |   16|  48.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 48.9k]
  |  |  ------------------
  |  |   17|  48.9k|    }
  ------------------
 1112|  48.9k|    PRINTF("sizeof operation->type: %d\n", sizeof(operation->type));
 1113|       |
 1114|  48.9k|    switch (operation->type) {
 1115|  33.3k|        case OPERATION_TYPE_CREATE_ACCOUNT: {
  ------------------
  |  Branch (1115:9): [True: 33.3k, False: 15.6k]
  ------------------
 1116|  33.3k|            return parse_create_account(buffer, &operation->create_account_op);
 1117|      0|        }
 1118|    462|        case OPERATION_TYPE_PAYMENT: {
  ------------------
  |  Branch (1118:9): [True: 462, False: 48.4k]
  ------------------
 1119|    462|            return parse_payment(buffer, &operation->payment_op);
 1120|      0|        }
 1121|    120|        case OPERATION_TYPE_PATH_PAYMENT_STRICT_RECEIVE: {
  ------------------
  |  Branch (1121:9): [True: 120, False: 48.8k]
  ------------------
 1122|    120|            return parse_path_payment_strict_receive(buffer,
 1123|    120|                                                     &operation->path_payment_strict_receive_op);
 1124|      0|        }
 1125|    288|        case OPERATION_TYPE_CREATE_PASSIVE_SELL_OFFER: {
  ------------------
  |  Branch (1125:9): [True: 288, False: 48.6k]
  ------------------
 1126|    288|            return parse_create_passive_sell_offer(buffer,
 1127|    288|                                                   &operation->create_passive_sell_offer_op);
 1128|      0|        }
 1129|    165|        case OPERATION_TYPE_MANAGE_SELL_OFFER: {
  ------------------
  |  Branch (1129:9): [True: 165, False: 48.7k]
  ------------------
 1130|    165|            return parse_manage_sell_offer(buffer, &operation->manage_sell_offer_op);
 1131|      0|        }
 1132|  1.86k|        case OPERATION_TYPE_SET_OPTIONS: {
  ------------------
  |  Branch (1132:9): [True: 1.86k, False: 47.0k]
  ------------------
 1133|  1.86k|            return parse_set_options(buffer, &operation->set_options_op);
 1134|      0|        }
 1135|    884|        case OPERATION_TYPE_CHANGE_TRUST: {
  ------------------
  |  Branch (1135:9): [True: 884, False: 48.0k]
  ------------------
 1136|    884|            return parse_change_trust(buffer, &operation->change_trust_op);
 1137|      0|        }
 1138|    128|        case OPERATION_TYPE_ALLOW_TRUST: {
  ------------------
  |  Branch (1138:9): [True: 128, False: 48.7k]
  ------------------
 1139|    128|            return parse_allow_trust(buffer, &operation->allow_trust_op);
 1140|      0|        }
 1141|    418|        case OPERATION_TYPE_ACCOUNT_MERGE: {
  ------------------
  |  Branch (1141:9): [True: 418, False: 48.5k]
  ------------------
 1142|    418|            return parse_account_merge(buffer, &operation->account_merge_op);
 1143|      0|        }
 1144|    512|        case OPERATION_TYPE_INFLATION: {
  ------------------
  |  Branch (1144:9): [True: 512, False: 48.4k]
  ------------------
 1145|    512|            return true;
 1146|      0|        }
 1147|  1.32k|        case OPERATION_TYPE_MANAGE_DATA: {
  ------------------
  |  Branch (1147:9): [True: 1.32k, False: 47.5k]
  ------------------
 1148|  1.32k|            return parse_manage_data(buffer, &operation->manage_data_op);
 1149|      0|        }
 1150|    105|        case OPERATION_TYPE_BUMP_SEQUENCE: {
  ------------------
  |  Branch (1150:9): [True: 105, False: 48.8k]
  ------------------
 1151|    105|            return parse_bump_sequence(buffer, &operation->bump_sequence_op);
 1152|      0|        }
 1153|    205|        case OPERATION_TYPE_MANAGE_BUY_OFFER: {
  ------------------
  |  Branch (1153:9): [True: 205, False: 48.7k]
  ------------------
 1154|    205|            return parse_manage_buy_offer(buffer, &operation->manage_buy_offer_op);
 1155|      0|        }
 1156|    415|        case OPERATION_TYPE_PATH_PAYMENT_STRICT_SEND: {
  ------------------
  |  Branch (1156:9): [True: 415, False: 48.5k]
  ------------------
 1157|    415|            return parse_path_payment_strict_send(buffer, &operation->path_payment_strict_send_op);
 1158|      0|        }
 1159|    539|        case OPERATION_TYPE_CREATE_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1159:9): [True: 539, False: 48.3k]
  ------------------
 1160|    539|            return parse_create_claimable_balance(buffer, &operation->create_claimable_balance_op);
 1161|      0|        }
 1162|    585|        case OPERATION_TYPE_CLAIM_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1162:9): [True: 585, False: 48.3k]
  ------------------
 1163|    585|            return parse_claim_claimable_balance(buffer, &operation->claim_claimable_balance_op);
 1164|      0|        }
 1165|    628|        case OPERATION_TYPE_BEGIN_SPONSORING_FUTURE_RESERVES: {
  ------------------
  |  Branch (1165:9): [True: 628, False: 48.2k]
  ------------------
 1166|    628|            return parse_begin_sponsoring_future_reserves(
 1167|    628|                buffer,
 1168|    628|                &operation->begin_sponsoring_future_reserves_op);
 1169|      0|        }
 1170|    265|        case OPERATION_TYPE_END_SPONSORING_FUTURE_RESERVES: {
  ------------------
  |  Branch (1170:9): [True: 265, False: 48.6k]
  ------------------
 1171|    265|            return true;
 1172|      0|        }
 1173|  4.54k|        case OPERATION_TYPE_REVOKE_SPONSORSHIP: {
  ------------------
  |  Branch (1173:9): [True: 4.54k, False: 44.3k]
  ------------------
 1174|  4.54k|            return parse_revoke_sponsorship(buffer, &operation->revoke_sponsorship_op);
 1175|      0|        }
 1176|     57|        case OPERATION_TYPE_CLAWBACK: {
  ------------------
  |  Branch (1176:9): [True: 57, False: 48.8k]
  ------------------
 1177|     57|            return parse_clawback(buffer, &operation->clawback_op);
 1178|      0|        }
 1179|    103|        case OPERATION_TYPE_CLAWBACK_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1179:9): [True: 103, False: 48.8k]
  ------------------
 1180|    103|            return parse_clawback_claimable_balance(buffer,
 1181|    103|                                                    &operation->clawback_claimable_balance_op);
 1182|      0|        }
 1183|    591|        case OPERATION_TYPE_SET_TRUST_LINE_FLAGS: {
  ------------------
  |  Branch (1183:9): [True: 591, False: 48.3k]
  ------------------
 1184|    591|            return parse_set_trust_line_flags(buffer, &operation->set_trust_line_flags_op);
 1185|      0|        }
 1186|    108|        case OPERATION_TYPE_LIQUIDITY_POOL_DEPOSIT:
  ------------------
  |  Branch (1186:9): [True: 108, False: 48.8k]
  ------------------
 1187|    108|            return parse_liquidity_pool_deposit(buffer, &operation->liquidity_pool_deposit_op);
 1188|    147|        case OPERATION_TYPE_LIQUIDITY_POOL_WITHDRAW:
  ------------------
  |  Branch (1188:9): [True: 147, False: 48.7k]
  ------------------
 1189|    147|            return parse_liquidity_pool_withdraw(buffer, &operation->liquidity_pool_withdraw_op);
 1190|    632|        case OPERATION_INVOKE_HOST_FUNCTION: {
  ------------------
  |  Branch (1190:9): [True: 632, False: 48.2k]
  ------------------
 1191|    632|            return parse_invoke_host_function(buffer, &operation->invoke_host_function_op);
 1192|      0|        }
 1193|    177|        case OPERATION_EXTEND_FOOTPRINT_TTL:
  ------------------
  |  Branch (1193:9): [True: 177, False: 48.7k]
  ------------------
 1194|    177|            return parse_extend_footprint_ttl(buffer, &operation->extend_footprint_ttl_op);
 1195|    347|        case OPERATION_RESTORE_FOOTPRINT:
  ------------------
  |  Branch (1195:9): [True: 347, False: 48.5k]
  ------------------
 1196|    347|            return parse_restore_footprint(buffer, &operation->restore_footprint_op);
 1197|      1|        default:
  ------------------
  |  Branch (1197:9): [True: 1, False: 48.9k]
  ------------------
 1198|      1|            return false;
 1199|  48.9k|    }
 1200|      0|    return false;
 1201|  48.9k|}
parser.c:parse_create_account:
  401|  33.3k|static bool parse_create_account(buffer_t *buffer, create_account_op_t *create_account_op) {
  402|  33.3k|    PARSER_CHECK(parse_account_id(buffer, &create_account_op->destination))
  ------------------
  |  |   15|  33.3k|    {                           \
  |  |   16|  33.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 33.3k]
  |  |  ------------------
  |  |   17|  33.3k|    }
  ------------------
  403|  33.3k|    PARSER_CHECK(parse_int64(buffer, &create_account_op->starting_balance))
  ------------------
  |  |   15|  33.3k|    {                           \
  |  |   16|  33.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 33.3k]
  |  |  ------------------
  |  |   17|  33.3k|    }
  ------------------
  404|  33.3k|    return true;
  405|  33.3k|}
parser.c:parse_payment:
  407|    462|static bool parse_payment(buffer_t *buffer, payment_op_t *payment_op) {
  408|    462|    PARSER_CHECK(parse_muxed_account(buffer, &payment_op->destination))
  ------------------
  |  |   15|    462|    {                           \
  |  |   16|    462|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 461]
  |  |  ------------------
  |  |   17|    462|    }
  ------------------
  409|    461|    PARSER_CHECK(parse_asset(buffer, &payment_op->asset))
  ------------------
  |  |   15|    461|    {                           \
  |  |   16|    461|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 460]
  |  |  ------------------
  |  |   17|    461|    }
  ------------------
  410|    460|    PARSER_CHECK(parse_int64(buffer, &payment_op->amount))
  ------------------
  |  |   15|    460|    {                           \
  |  |   16|    460|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 459]
  |  |  ------------------
  |  |   17|    460|    }
  ------------------
  411|    459|    return true;
  412|    460|}
parser.c:parse_asset:
  325|  6.00k|static bool parse_asset(buffer_t *buffer, asset_t *asset) {
  326|  6.00k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  6.00k|    {                           \
  |  |   16|  6.00k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 23, False: 5.98k]
  |  |  ------------------
  |  |   17|  6.00k|    }
  ------------------
  327|  5.98k|    switch (asset->type) {
  328|  5.75k|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (328:9): [True: 5.75k, False: 228]
  ------------------
  329|  5.75k|            return true;
  330|      0|        }
  331|     84|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (331:9): [True: 84, False: 5.89k]
  ------------------
  332|     84|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  333|      0|        }
  334|    141|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (334:9): [True: 141, False: 5.84k]
  ------------------
  335|    141|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  336|      0|        }
  337|      3|        default:
  ------------------
  |  Branch (337:9): [True: 3, False: 5.97k]
  ------------------
  338|      3|            return false;  // unknown asset type
  339|  5.98k|    }
  340|  5.98k|}
parser.c:parse_alpha_num4_asset:
  313|    198|static bool parse_alpha_num4_asset(buffer_t *buffer, alpha_num4_t *asset) {
  314|    198|    PARSER_CHECK(buffer_read_bytes(buffer, &asset->asset_code, 4))
  ------------------
  |  |   15|    198|    {                           \
  |  |   16|    198|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 193]
  |  |  ------------------
  |  |   17|    198|    }
  ------------------
  315|    193|    PARSER_CHECK(parse_account_id(buffer, &asset->issuer))
  ------------------
  |  |   15|    193|    {                           \
  |  |   16|    193|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 190]
  |  |  ------------------
  |  |   17|    193|    }
  ------------------
  316|    190|    return true;
  317|    193|}
parser.c:parse_alpha_num12_asset:
  319|    307|static bool parse_alpha_num12_asset(buffer_t *buffer, alpha_num12_t *asset) {
  320|    307|    PARSER_CHECK(buffer_read_bytes(buffer, &asset->asset_code, 12))
  ------------------
  |  |   15|    307|    {                           \
  |  |   16|    307|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 302]
  |  |  ------------------
  |  |   17|    307|    }
  ------------------
  321|    302|    PARSER_CHECK(parse_account_id(buffer, &asset->issuer))
  ------------------
  |  |   15|    302|    {                           \
  |  |   16|    302|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 299]
  |  |  ------------------
  |  |   17|    302|    }
  ------------------
  322|    299|    return true;
  323|    302|}
parser.c:parse_path_payment_strict_receive:
  415|    120|                                              path_payment_strict_receive_op_t *op) {
  416|    120|    uint32_t path_len;
  417|       |
  418|    120|    PARSER_CHECK(parse_asset(buffer, &op->send_asset))
  ------------------
  |  |   15|    120|    {                           \
  |  |   16|    120|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 118]
  |  |  ------------------
  |  |   17|    120|    }
  ------------------
  419|    118|    PARSER_CHECK(parse_int64(buffer, &op->send_max))
  ------------------
  |  |   15|    118|    {                           \
  |  |   16|    118|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 115]
  |  |  ------------------
  |  |   17|    118|    }
  ------------------
  420|    115|    PARSER_CHECK(parse_muxed_account(buffer, &op->destination))
  ------------------
  |  |   15|    115|    {                           \
  |  |   16|    115|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 114]
  |  |  ------------------
  |  |   17|    115|    }
  ------------------
  421|    114|    PARSER_CHECK(parse_asset(buffer, &op->dest_asset))
  ------------------
  |  |   15|    114|    {                           \
  |  |   16|    114|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 113]
  |  |  ------------------
  |  |   17|    114|    }
  ------------------
  422|    113|    PARSER_CHECK(parse_int64(buffer, &op->dest_amount))
  ------------------
  |  |   15|    113|    {                           \
  |  |   16|    113|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 112]
  |  |  ------------------
  |  |   17|    113|    }
  ------------------
  423|       |
  424|    112|    PARSER_CHECK(parse_uint32(buffer, &path_len))
  ------------------
  |  |   15|    112|    {                           \
  |  |   16|    112|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 111]
  |  |  ------------------
  |  |   17|    112|    }
  ------------------
  425|    111|    if (path_len > PATH_PAYMENT_MAX_PATH_LENGTH) {
  ------------------
  |  |   35|    111|#define PATH_PAYMENT_MAX_PATH_LENGTH  5
  ------------------
  |  Branch (425:9): [True: 1, False: 110]
  ------------------
  426|      1|        return false;
  427|      1|    }
  428|    184|    for (uint32_t i = 0; i < path_len; i++) {
  ------------------
  |  Branch (428:26): [True: 76, False: 108]
  ------------------
  429|     76|        asset_t tmp_asset;
  430|     76|        PARSER_CHECK(parse_asset(buffer, &tmp_asset))
  ------------------
  |  |   15|     76|    {                           \
  |  |   16|     76|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 74]
  |  |  ------------------
  |  |   17|     76|    }
  ------------------
  431|     76|    }
  432|    108|    return true;
  433|    110|}
parser.c:parse_create_passive_sell_offer:
  500|    288|static bool parse_create_passive_sell_offer(buffer_t *buffer, create_passive_sell_offer_op_t *op) {
  501|    288|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|    288|    {                           \
  |  |   16|    288|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 287]
  |  |  ------------------
  |  |   17|    288|    }
  ------------------
  502|    287|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|    287|    {                           \
  |  |   16|    287|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 286]
  |  |  ------------------
  |  |   17|    287|    }
  ------------------
  503|    286|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    286|    {                           \
  |  |   16|    286|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 285]
  |  |  ------------------
  |  |   17|    286|    }
  ------------------
  504|    285|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|    285|    {                           \
  |  |   16|    285|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 284]
  |  |  ------------------
  |  |   17|    285|    }
  ------------------
  505|    284|    return true;
  506|    285|}
parser.c:parse_price:
  475|    857|static bool parse_price(buffer_t *buffer, price_t *price) {
  476|    857|    PARSER_CHECK(parse_int32(buffer, &price->n))
  ------------------
  |  |   15|    857|    {                           \
  |  |   16|    857|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 852]
  |  |  ------------------
  |  |   17|    857|    }
  ------------------
  477|    852|    PARSER_CHECK(parse_int32(buffer, &price->d))
  ------------------
  |  |   15|    852|    {                           \
  |  |   16|    852|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 850]
  |  |  ------------------
  |  |   17|    852|    }
  ------------------
  478|       |    // Denominator cannot be null, as it would lead to a division by zero.
  479|    850|    return price->d != 0;
  480|    852|}
parser.c:parse_manage_sell_offer:
  482|    165|static bool parse_manage_sell_offer(buffer_t *buffer, manage_sell_offer_op_t *op) {
  483|    165|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|    165|    {                           \
  |  |   16|    165|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 164]
  |  |  ------------------
  |  |   17|    165|    }
  ------------------
  484|    164|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|    164|    {                           \
  |  |   16|    164|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 163]
  |  |  ------------------
  |  |   17|    164|    }
  ------------------
  485|    163|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    163|    {                           \
  |  |   16|    163|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 162]
  |  |  ------------------
  |  |   17|    163|    }
  ------------------
  486|    162|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|    162|    {                           \
  |  |   16|    162|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 160]
  |  |  ------------------
  |  |   17|    162|    }
  ------------------
  487|    160|    PARSER_CHECK(parse_int64(buffer, &op->offer_id))
  ------------------
  |  |   15|    160|    {                           \
  |  |   16|    160|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 159]
  |  |  ------------------
  |  |   17|    160|    }
  ------------------
  488|    159|    return true;
  489|    160|}
parser.c:parse_set_options:
  521|  1.86k|static bool parse_set_options(buffer_t *buffer, set_options_op_t *set_options) {
  522|  1.86k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.86k|    {                           \
  |  |   16|  1.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.86k]
  |  |  ------------------
  |  |   17|  1.86k|    }
  ------------------
  523|  1.86k|                                     (xdr_type_reader) parse_account_id,
  524|  1.86k|                                     &set_options->inflation_destination,
  525|  1.86k|                                     &set_options->inflation_destination_present))
  526|       |
  527|  1.86k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.86k|    {                           \
  |  |   16|  1.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.86k]
  |  |  ------------------
  |  |   17|  1.86k|    }
  ------------------
  528|  1.86k|                                     (xdr_type_reader) parse_uint32,
  529|  1.86k|                                     &set_options->clear_flags,
  530|  1.86k|                                     &set_options->clear_flags_present))
  531|  1.86k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.86k|    {                           \
  |  |   16|  1.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.86k]
  |  |  ------------------
  |  |   17|  1.86k|    }
  ------------------
  532|  1.86k|                                     (xdr_type_reader) parse_uint32,
  533|  1.86k|                                     &set_options->set_flags,
  534|  1.86k|                                     &set_options->set_flags_present))
  535|  1.86k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.86k|    {                           \
  |  |   16|  1.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.86k]
  |  |  ------------------
  |  |   17|  1.86k|    }
  ------------------
  536|  1.86k|                                     (xdr_type_reader) parse_uint32,
  537|  1.86k|                                     &set_options->master_weight,
  538|  1.86k|                                     &set_options->master_weight_present))
  539|  1.86k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.86k|    {                           \
  |  |   16|  1.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.86k]
  |  |  ------------------
  |  |   17|  1.86k|    }
  ------------------
  540|  1.86k|                                     (xdr_type_reader) parse_uint32,
  541|  1.86k|                                     &set_options->low_threshold,
  542|  1.86k|                                     &set_options->low_threshold_present))
  543|  1.86k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.86k|    {                           \
  |  |   16|  1.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.86k]
  |  |  ------------------
  |  |   17|  1.86k|    }
  ------------------
  544|  1.86k|                                     (xdr_type_reader) parse_uint32,
  545|  1.86k|                                     &set_options->medium_threshold,
  546|  1.86k|                                     &set_options->medium_threshold_present))
  547|  1.86k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.86k|    {                           \
  |  |   16|  1.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.86k]
  |  |  ------------------
  |  |   17|  1.86k|    }
  ------------------
  548|  1.86k|                                     (xdr_type_reader) parse_uint32,
  549|  1.86k|                                     &set_options->high_threshold,
  550|  1.86k|                                     &set_options->high_threshold_present))
  551|       |
  552|  1.86k|    uint32_t home_domain_present;
  553|  1.86k|    PARSER_CHECK(parse_uint32(buffer, &home_domain_present))
  ------------------
  |  |   15|  1.86k|    {                           \
  |  |   16|  1.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.86k]
  |  |  ------------------
  |  |   17|  1.86k|    }
  ------------------
  554|  1.86k|    set_options->home_domain_present = home_domain_present ? true : false;
  ------------------
  |  Branch (554:40): [True: 469, False: 1.39k]
  ------------------
  555|  1.86k|    if (set_options->home_domain_present) {
  ------------------
  |  Branch (555:9): [True: 469, False: 1.39k]
  ------------------
  556|    469|        PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|    469|    {                           \
  |  |   16|    469|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 468]
  |  |  ------------------
  |  |   17|    469|    }
  ------------------
  557|    469|                                             &set_options->home_domain,
  558|    469|                                             &set_options->home_domain_size,
  559|    469|                                             HOME_DOMAIN_MAX_SIZE))
  560|  1.39k|    } else {
  561|  1.39k|        set_options->home_domain_size = 0;
  562|  1.39k|    }
  563|       |
  564|  1.85k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.85k|    {                           \
  |  |   16|  1.85k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.85k]
  |  |  ------------------
  |  |   17|  1.85k|    }
  ------------------
  565|  1.85k|                                     (xdr_type_reader) parse_signer,
  566|  1.85k|                                     &set_options->signer,
  567|  1.85k|                                     &set_options->signer_present))
  568|  1.85k|    return true;
  569|  1.85k|}
parser.c:parse_signer:
  515|    255|static bool parse_signer(buffer_t *buffer, signer_t *signer) {
  516|    255|    PARSER_CHECK(parse_signer_key(buffer, &signer->key))
  ------------------
  |  |   15|    255|    {                           \
  |  |   16|    255|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 254]
  |  |  ------------------
  |  |   17|    255|    }
  ------------------
  517|    254|    PARSER_CHECK(parse_uint32(buffer, &signer->weight))
  ------------------
  |  |   15|    254|    {                           \
  |  |   16|    254|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 253]
  |  |  ------------------
  |  |   17|    254|    }
  ------------------
  518|    253|    return true;
  519|    254|}
parser.c:parse_change_trust:
  508|    884|static bool parse_change_trust(buffer_t *buffer, change_trust_op_t *op) {
  509|    884|    PARSER_CHECK(parse_change_trust_asset(buffer, &op->line))
  ------------------
  |  |   15|    884|    {                           \
  |  |   16|    884|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 874]
  |  |  ------------------
  |  |   17|    884|    }
  ------------------
  510|    874|    PARSER_CHECK(parse_int64(buffer, &op->limit));
  ------------------
  |  |   15|    874|    {                           \
  |  |   16|    874|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 872]
  |  |  ------------------
  |  |   17|    874|    }
  ------------------
  511|       |    // Limit cannot be negative
  512|    872|    return op->limit >= 0;
  513|    874|}
parser.c:parse_change_trust_asset:
  381|    884|static bool parse_change_trust_asset(buffer_t *buffer, change_trust_asset_t *asset) {
  382|    884|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|    884|    {                           \
  |  |   16|    884|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 883]
  |  |  ------------------
  |  |   17|    884|    }
  ------------------
  383|    883|    switch (asset->type) {
  384|     66|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (384:9): [True: 66, False: 817]
  ------------------
  385|     66|            return true;
  386|      0|        }
  387|     95|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (387:9): [True: 95, False: 788]
  ------------------
  388|     95|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  389|      0|        }
  390|    145|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (390:9): [True: 145, False: 738]
  ------------------
  391|    145|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  392|      0|        }
  393|    576|        case ASSET_TYPE_POOL_SHARE: {
  ------------------
  |  Branch (393:9): [True: 576, False: 307]
  ------------------
  394|    576|            return parse_liquidity_pool_parameters(buffer, &asset->liquidity_pool);
  395|      0|        }
  396|      1|        default:
  ------------------
  |  Branch (396:9): [True: 1, False: 882]
  ------------------
  397|      1|            return false;  // unknown asset type
  398|    883|    }
  399|    883|}
parser.c:parse_liquidity_pool_parameters:
  366|    576|    liquidity_pool_parameters_t *liquidity_pool_parameters) {
  367|    576|    uint32_t liquidity_pool_type;
  368|    576|    PARSER_CHECK(parse_uint32(buffer, &liquidity_pool_type))
  ------------------
  |  |   15|    576|    {                           \
  |  |   16|    576|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 575]
  |  |  ------------------
  |  |   17|    576|    }
  ------------------
  369|    575|    switch (liquidity_pool_type) {
  370|    574|        case LIQUIDITY_POOL_CONSTANT_PRODUCT: {
  ------------------
  |  Branch (370:9): [True: 574, False: 1]
  ------------------
  371|    574|            PARSER_CHECK(parse_asset(buffer, &liquidity_pool_parameters->constant_product.asset_a))
  ------------------
  |  |   15|    574|    {                           \
  |  |   16|    574|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 573]
  |  |  ------------------
  |  |   17|    574|    }
  ------------------
  372|    573|            PARSER_CHECK(parse_asset(buffer, &liquidity_pool_parameters->constant_product.asset_b))
  ------------------
  |  |   15|    573|    {                           \
  |  |   16|    573|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 572]
  |  |  ------------------
  |  |   17|    573|    }
  ------------------
  373|    572|            PARSER_CHECK(parse_int32(buffer, &liquidity_pool_parameters->constant_product.fee))
  ------------------
  |  |   15|    572|    {                           \
  |  |   16|    572|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 571]
  |  |  ------------------
  |  |   17|    572|    }
  ------------------
  374|    571|            return true;
  375|    572|        }
  376|      1|        default:
  ------------------
  |  Branch (376:9): [True: 1, False: 574]
  ------------------
  377|      1|            return false;
  378|    575|    }
  379|    575|}
parser.c:parse_allow_trust:
  435|    128|static bool parse_allow_trust(buffer_t *buffer, allow_trust_op_t *op) {
  436|    128|    PARSER_CHECK(parse_account_id(buffer, &op->trustor))
  ------------------
  |  |   15|    128|    {                           \
  |  |   16|    128|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 127]
  |  |  ------------------
  |  |   17|    128|    }
  ------------------
  437|    127|    PARSER_CHECK(parse_uint32(buffer, &op->asset_type))
  ------------------
  |  |   15|    127|    {                           \
  |  |   16|    127|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 126]
  |  |  ------------------
  |  |   17|    127|    }
  ------------------
  438|       |
  439|    126|    switch (op->asset_type) {
  440|    105|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (440:9): [True: 105, False: 21]
  ------------------
  441|    105|            PARSER_CHECK(buffer_read_bytes(buffer, &op->asset_code, 4))
  ------------------
  |  |   15|    105|    {                           \
  |  |   16|    105|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 104]
  |  |  ------------------
  |  |   17|    105|    }
  ------------------
  442|    104|            break;
  443|    104|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (443:9): [True: 20, False: 106]
  ------------------
  444|     20|            PARSER_CHECK(buffer_read_bytes(buffer, &op->asset_code, 12))
  ------------------
  |  |   15|     20|    {                           \
  |  |   16|     20|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 19]
  |  |  ------------------
  |  |   17|     20|    }
  ------------------
  445|     19|            break;
  446|     19|        default:
  ------------------
  |  Branch (446:9): [True: 1, False: 125]
  ------------------
  447|      1|            return false;  // unknown asset type
  448|    126|    }
  449|       |
  450|    123|    PARSER_CHECK(parse_uint32(buffer, &op->authorize))
  ------------------
  |  |   15|    123|    {                           \
  |  |   16|    123|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 121]
  |  |  ------------------
  |  |   17|    123|    }
  ------------------
  451|    121|    return true;
  452|    123|}
parser.c:parse_account_merge:
  454|    418|static bool parse_account_merge(buffer_t *buffer, account_merge_op_t *op) {
  455|    418|    return parse_muxed_account(buffer, &op->destination);
  456|    418|}
parser.c:parse_manage_data:
  458|  1.32k|static bool parse_manage_data(buffer_t *buffer, manage_data_op_t *op) {
  459|  1.32k|    PARSER_CHECK(
  ------------------
  |  |   15|  1.32k|    {                           \
  |  |   16|  1.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.32k]
  |  |  ------------------
  |  |   17|  1.32k|    }
  ------------------
  460|  1.32k|        parse_binary_string_ptr(buffer, &op->data_name, &op->data_name_size, DATA_NAME_MAX_SIZE))
  461|       |
  462|  1.32k|    bool has_value;
  463|  1.32k|    PARSER_CHECK(parse_bool(buffer, &has_value))
  ------------------
  |  |   15|  1.32k|    {                           \
  |  |   16|  1.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.32k]
  |  |  ------------------
  |  |   17|  1.32k|    }
  ------------------
  464|  1.32k|    if (has_value) {
  ------------------
  |  Branch (464:9): [True: 314, False: 1.01k]
  ------------------
  465|    314|        PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|    314|    {                           \
  |  |   16|    314|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 313]
  |  |  ------------------
  |  |   17|    314|    }
  ------------------
  466|    314|                                             &op->data_value,
  467|    314|                                             &op->data_value_size,
  468|    314|                                             DATA_VALUE_MAX_SIZE))
  469|  1.01k|    } else {
  470|  1.01k|        op->data_value_size = 0;
  471|  1.01k|    }
  472|  1.32k|    return true;
  473|  1.32k|}
parser.c:parse_bump_sequence:
  571|    105|static bool parse_bump_sequence(buffer_t *buffer, bump_sequence_op_t *op) {
  572|    105|    return parse_int64(buffer, &op->bump_to);
  573|    105|}
parser.c:parse_manage_buy_offer:
  491|    205|static bool parse_manage_buy_offer(buffer_t *buffer, manage_buy_offer_op_t *op) {
  492|    205|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|    205|    {                           \
  |  |   16|    205|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 203]
  |  |  ------------------
  |  |   17|    205|    }
  ------------------
  493|    203|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|    203|    {                           \
  |  |   16|    203|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 202]
  |  |  ------------------
  |  |   17|    203|    }
  ------------------
  494|    202|    PARSER_CHECK(parse_int64(buffer, &op->buy_amount))
  ------------------
  |  |   15|    202|    {                           \
  |  |   16|    202|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 201]
  |  |  ------------------
  |  |   17|    202|    }
  ------------------
  495|    201|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|    201|    {                           \
  |  |   16|    201|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 200]
  |  |  ------------------
  |  |   17|    201|    }
  ------------------
  496|    200|    PARSER_CHECK(parse_int64(buffer, &op->offer_id))
  ------------------
  |  |   15|    200|    {                           \
  |  |   16|    200|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 199]
  |  |  ------------------
  |  |   17|    200|    }
  ------------------
  497|    199|    return true;
  498|    200|}
parser.c:parse_path_payment_strict_send:
  575|    415|static bool parse_path_payment_strict_send(buffer_t *buffer, path_payment_strict_send_op_t *op) {
  576|    415|    uint32_t path_len;
  577|       |
  578|    415|    PARSER_CHECK(parse_asset(buffer, &op->send_asset))
  ------------------
  |  |   15|    415|    {                           \
  |  |   16|    415|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 414]
  |  |  ------------------
  |  |   17|    415|    }
  ------------------
  579|    414|    PARSER_CHECK(parse_int64(buffer, &op->send_amount))
  ------------------
  |  |   15|    414|    {                           \
  |  |   16|    414|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 413]
  |  |  ------------------
  |  |   17|    414|    }
  ------------------
  580|    413|    PARSER_CHECK(parse_muxed_account(buffer, &op->destination))
  ------------------
  |  |   15|    413|    {                           \
  |  |   16|    413|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 412]
  |  |  ------------------
  |  |   17|    413|    }
  ------------------
  581|    412|    PARSER_CHECK(parse_asset(buffer, &op->dest_asset))
  ------------------
  |  |   15|    412|    {                           \
  |  |   16|    412|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 411]
  |  |  ------------------
  |  |   17|    412|    }
  ------------------
  582|    411|    PARSER_CHECK(parse_int64(buffer, &op->dest_min))
  ------------------
  |  |   15|    411|    {                           \
  |  |   16|    411|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 410]
  |  |  ------------------
  |  |   17|    411|    }
  ------------------
  583|    410|    PARSER_CHECK(parse_uint32(buffer, &path_len))
  ------------------
  |  |   15|    410|    {                           \
  |  |   16|    410|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 409]
  |  |  ------------------
  |  |   17|    410|    }
  ------------------
  584|    409|    if (path_len > PATH_PAYMENT_MAX_PATH_LENGTH) {
  ------------------
  |  |   35|    409|#define PATH_PAYMENT_MAX_PATH_LENGTH  5
  ------------------
  |  Branch (584:9): [True: 1, False: 408]
  ------------------
  585|      1|        return false;
  586|      1|    }
  587|  1.04k|    for (uint32_t i = 0; i < path_len; i++) {
  ------------------
  |  Branch (587:26): [True: 637, False: 406]
  ------------------
  588|    637|        asset_t tmp_asset;
  589|    637|        PARSER_CHECK(parse_asset(buffer, &tmp_asset))
  ------------------
  |  |   15|    637|    {                           \
  |  |   16|    637|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 635]
  |  |  ------------------
  |  |   17|    637|    }
  ------------------
  590|    637|    }
  591|    406|    return true;
  592|    408|}
parser.c:parse_create_claimable_balance:
  645|    539|static bool parse_create_claimable_balance(buffer_t *buffer, create_claimable_balance_op_t *op) {
  646|    539|    uint32_t claimant_len;
  647|    539|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|    539|    {                           \
  |  |   16|    539|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 538]
  |  |  ------------------
  |  |   17|    539|    }
  ------------------
  648|    538|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    538|    {                           \
  |  |   16|    538|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 537]
  |  |  ------------------
  |  |   17|    538|    }
  ------------------
  649|    537|    PARSER_CHECK(parse_uint32(buffer, &claimant_len))
  ------------------
  |  |   15|    537|    {                           \
  |  |   16|    537|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 536]
  |  |  ------------------
  |  |   17|    537|    }
  ------------------
  650|    536|    if (claimant_len > CLAIMANTS_MAX_LENGTH) {
  ------------------
  |  |   34|    536|#define CLAIMANTS_MAX_LENGTH          10
  ------------------
  |  Branch (650:9): [True: 1, False: 535]
  ------------------
  651|      1|        return false;
  652|      1|    }
  653|    535|    op->claimant_len = claimant_len;
  654|  1.48k|    for (int i = 0; i < op->claimant_len; i++) {
  ------------------
  |  Branch (654:21): [True: 989, False: 495]
  ------------------
  655|    989|        PARSER_CHECK(parse_claimant(buffer, &op->claimants[i]))
  ------------------
  |  |   15|    989|    {                           \
  |  |   16|    989|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 40, False: 949]
  |  |  ------------------
  |  |   17|    989|    }
  ------------------
  656|    989|    }
  657|    495|    return true;
  658|    535|}
parser.c:parse_claimant:
  633|    989|static bool parse_claimant(buffer_t *buffer, claimant_t *claimant) {
  634|    989|    PARSER_CHECK(parse_uint32(buffer, &claimant->type))
  ------------------
  |  |   15|    989|    {                           \
  |  |   16|    989|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 977]
  |  |  ------------------
  |  |   17|    989|    }
  ------------------
  635|    977|    switch (claimant->type) {
  636|    976|        case CLAIMANT_TYPE_V0:
  ------------------
  |  Branch (636:9): [True: 976, False: 1]
  ------------------
  637|    976|            PARSER_CHECK(parse_account_id(buffer, &claimant->v0.destination))
  ------------------
  |  |   15|    976|    {                           \
  |  |   16|    976|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 975]
  |  |  ------------------
  |  |   17|    976|    }
  ------------------
  638|    975|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|    975|    {                           \
  |  |   16|    975|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 26, False: 949]
  |  |  ------------------
  |  |   17|    975|    }
  ------------------
  639|    949|            return true;
  640|      1|        default:
  ------------------
  |  Branch (640:9): [True: 1, False: 976]
  ------------------
  641|      1|            return false;
  642|    977|    }
  643|    977|}
parser.c:parse_claimant_predicate:
  594|  1.82k|static bool parse_claimant_predicate(buffer_t *buffer) {
  595|       |    // Currently, does not support displaying claimant details.
  596|       |    // So here we will not store the parsed data, just to ensure that the data can be parsed
  597|       |    // correctly.
  598|  1.82k|    uint32_t claim_predicate_type;
  599|  1.82k|    uint32_t predicates_len;
  600|  1.82k|    bool not_predicate_present;
  601|  1.82k|    int64_t abs_before;
  602|  1.82k|    int64_t rel_before;
  603|  1.82k|    PARSER_CHECK(parse_uint32(buffer, &claim_predicate_type))
  ------------------
  |  |   15|  1.82k|    {                           \
  |  |   16|  1.82k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 1.81k]
  |  |  ------------------
  |  |   17|  1.82k|    }
  ------------------
  604|  1.81k|    switch (claim_predicate_type) {
  605|  1.23k|        case CLAIM_PREDICATE_UNCONDITIONAL:
  ------------------
  |  Branch (605:9): [True: 1.23k, False: 580]
  ------------------
  606|  1.23k|            return true;
  607|    389|        case CLAIM_PREDICATE_AND:
  ------------------
  |  Branch (607:9): [True: 389, False: 1.42k]
  ------------------
  608|    410|        case CLAIM_PREDICATE_OR:
  ------------------
  |  Branch (608:9): [True: 21, False: 1.78k]
  ------------------
  609|    410|            PARSER_CHECK(parse_uint32(buffer, &predicates_len))
  ------------------
  |  |   15|    410|    {                           \
  |  |   16|    410|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 402]
  |  |  ------------------
  |  |   17|    410|    }
  ------------------
  610|    402|            if (predicates_len != 2) {
  ------------------
  |  Branch (610:17): [True: 1, False: 401]
  ------------------
  611|      1|                return false;
  612|      1|            }
  613|    401|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|    401|    {                           \
  |  |   16|    401|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 23, False: 378]
  |  |  ------------------
  |  |   17|    401|    }
  ------------------
  614|    378|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|    378|    {                           \
  |  |   16|    378|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 368]
  |  |  ------------------
  |  |   17|    378|    }
  ------------------
  615|    368|            return true;
  616|    104|        case CLAIM_PREDICATE_NOT:
  ------------------
  |  Branch (616:9): [True: 104, False: 1.70k]
  ------------------
  617|    104|            PARSER_CHECK(parse_bool(buffer, &not_predicate_present))
  ------------------
  |  |   15|    104|    {                           \
  |  |   16|    104|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 103]
  |  |  ------------------
  |  |   17|    104|    }
  ------------------
  618|    103|            if (not_predicate_present) {
  ------------------
  |  Branch (618:17): [True: 69, False: 34]
  ------------------
  619|     69|                PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|     69|    {                           \
  |  |   16|     69|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 19, False: 50]
  |  |  ------------------
  |  |   17|     69|    }
  ------------------
  620|     69|            }
  621|     84|            return true;
  622|     22|        case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:
  ------------------
  |  Branch (622:9): [True: 22, False: 1.78k]
  ------------------
  623|     22|            PARSER_CHECK(parse_int64(buffer, &abs_before))
  ------------------
  |  |   15|     22|    {                           \
  |  |   16|     22|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 21]
  |  |  ------------------
  |  |   17|     22|    }
  ------------------
  624|     21|            return true;
  625|     43|        case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:
  ------------------
  |  Branch (625:9): [True: 43, False: 1.76k]
  ------------------
  626|     43|            PARSER_CHECK(parse_int64(buffer, &rel_before))
  ------------------
  |  |   15|     43|    {                           \
  |  |   16|     43|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 42]
  |  |  ------------------
  |  |   17|     43|    }
  ------------------
  627|     42|            return true;
  628|      1|        default:
  ------------------
  |  Branch (628:9): [True: 1, False: 1.80k]
  ------------------
  629|      1|            return false;
  630|  1.81k|    }
  631|  1.81k|}
parser.c:parse_claim_claimable_balance:
  673|    585|static bool parse_claim_claimable_balance(buffer_t *buffer, claim_claimable_balance_op_t *op) {
  674|    585|    PARSER_CHECK(parse_claimable_balance_id(buffer, &op->balance_id))
  ------------------
  |  |   15|    585|    {                           \
  |  |   16|    585|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 583]
  |  |  ------------------
  |  |   17|    585|    }
  ------------------
  675|    583|    return true;
  676|    585|}
parser.c:parse_claimable_balance_id:
  661|    756|                                       claimable_balance_id_t *claimable_balance_id_t) {
  662|    756|    PARSER_CHECK(parse_uint32(buffer, &claimable_balance_id_t->type))
  ------------------
  |  |   15|    756|    {                           \
  |  |   16|    756|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 753]
  |  |  ------------------
  |  |   17|    756|    }
  ------------------
  663|    753|    switch (claimable_balance_id_t->type) {
  664|    752|        case CLAIMABLE_BALANCE_ID_TYPE_V0:
  ------------------
  |  Branch (664:9): [True: 752, False: 1]
  ------------------
  665|    752|            PARSER_CHECK(
  ------------------
  |  |   15|    752|    {                           \
  |  |   16|    752|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 751]
  |  |  ------------------
  |  |   17|    752|    }
  ------------------
  666|    752|                buffer_read_bytes(buffer, &claimable_balance_id_t->v0, CLAIMABLE_BALANCE_ID_SIZE))
  667|    751|            return true;
  668|      1|        default:
  ------------------
  |  Branch (668:9): [True: 1, False: 752]
  ------------------
  669|      1|            return false;
  670|    753|    }
  671|    753|}
parser.c:parse_begin_sponsoring_future_reserves:
  679|    628|                                                   begin_sponsoring_future_reserves_op_t *op) {
  680|    628|    PARSER_CHECK(parse_account_id(buffer, &op->sponsored_id))
  ------------------
  |  |   15|    628|    {                           \
  |  |   16|    628|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 626]
  |  |  ------------------
  |  |   17|    628|    }
  ------------------
  681|    626|    return true;
  682|    628|}
parser.c:parse_revoke_sponsorship:
  849|  4.54k|static bool parse_revoke_sponsorship(buffer_t *buffer, revoke_sponsorship_op_t *op) {
  850|  4.54k|    PARSER_CHECK(parse_uint32(buffer, &op->type))
  ------------------
  |  |   15|  4.54k|    {                           \
  |  |   16|  4.54k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 4.54k]
  |  |  ------------------
  |  |   17|  4.54k|    }
  ------------------
  851|  4.54k|    switch (op->type) {
  852|  2.42k|        case REVOKE_SPONSORSHIP_LEDGER_ENTRY:
  ------------------
  |  Branch (852:9): [True: 2.42k, False: 2.11k]
  ------------------
  853|  2.42k|            PARSER_CHECK(parse_ledger_key(buffer, &op->ledger_key))
  ------------------
  |  |   15|  2.42k|    {                           \
  |  |   16|  2.42k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 2.41k]
  |  |  ------------------
  |  |   17|  2.42k|    }
  ------------------
  854|  2.41k|            return true;
  855|  2.11k|        case REVOKE_SPONSORSHIP_SIGNER:
  ------------------
  |  Branch (855:9): [True: 2.11k, False: 2.42k]
  ------------------
  856|  2.11k|            PARSER_CHECK(parse_account_id(buffer, &op->signer.account_id))
  ------------------
  |  |   15|  2.11k|    {                           \
  |  |   16|  2.11k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 2.11k]
  |  |  ------------------
  |  |   17|  2.11k|    }
  ------------------
  857|  2.11k|            PARSER_CHECK(parse_signer_key(buffer, &op->signer.signer_key))
  ------------------
  |  |   15|  2.11k|    {                           \
  |  |   16|  2.11k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 2.11k]
  |  |  ------------------
  |  |   17|  2.11k|    }
  ------------------
  858|  2.11k|            return true;
  859|      1|        default:
  ------------------
  |  Branch (859:9): [True: 1, False: 4.54k]
  ------------------
  860|      1|            return false;
  861|  4.54k|    }
  862|  4.54k|}
parser.c:parse_ledger_key:
  813|  2.42k|static bool parse_ledger_key(buffer_t *buffer, ledger_key_t *ledger_key) {
  814|  2.42k|    PARSER_CHECK(parse_uint32(buffer, &ledger_key->type))
  ------------------
  |  |   15|  2.42k|    {                           \
  |  |   16|  2.42k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 2.42k]
  |  |  ------------------
  |  |   17|  2.42k|    }
  ------------------
  815|  2.42k|    switch (ledger_key->type) {
  816|    711|        case ACCOUNT:
  ------------------
  |  Branch (816:9): [True: 711, False: 1.71k]
  ------------------
  817|    711|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->account.account_id))
  ------------------
  |  |   15|    711|    {                           \
  |  |   16|    711|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 710]
  |  |  ------------------
  |  |   17|    711|    }
  ------------------
  818|    710|            return true;
  819|    633|        case TRUSTLINE:
  ------------------
  |  Branch (819:9): [True: 633, False: 1.79k]
  ------------------
  820|    633|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->trust_line.account_id))
  ------------------
  |  |   15|    633|    {                           \
  |  |   16|    633|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 632]
  |  |  ------------------
  |  |   17|    633|    }
  ------------------
  821|    632|            PARSER_CHECK(parse_trust_line_asset(buffer, &ledger_key->trust_line.asset))
  ------------------
  |  |   15|    632|    {                           \
  |  |   16|    632|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 627]
  |  |  ------------------
  |  |   17|    632|    }
  ------------------
  822|    627|            return true;
  823|     74|        case OFFER:
  ------------------
  |  Branch (823:9): [True: 74, False: 2.35k]
  ------------------
  824|     74|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->offer.seller_id))
  ------------------
  |  |   15|     74|    {                           \
  |  |   16|     74|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 73]
  |  |  ------------------
  |  |   17|     74|    }
  ------------------
  825|     73|            PARSER_CHECK(parse_int64(buffer, &ledger_key->offer.offer_id))
  ------------------
  |  |   15|     73|    {                           \
  |  |   16|     73|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 72]
  |  |  ------------------
  |  |   17|     73|    }
  ------------------
  826|     72|            return true;
  827|    326|        case DATA:
  ------------------
  |  Branch (827:9): [True: 326, False: 2.09k]
  ------------------
  828|    326|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->data.account_id))
  ------------------
  |  |   15|    326|    {                           \
  |  |   16|    326|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 325]
  |  |  ------------------
  |  |   17|    326|    }
  ------------------
  829|    325|            PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|    325|    {                           \
  |  |   16|    325|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 324]
  |  |  ------------------
  |  |   17|    325|    }
  ------------------
  830|    325|                                                 &ledger_key->data.data_name,
  831|    325|                                                 &ledger_key->data.data_name_size,
  832|    325|                                                 DATA_NAME_MAX_SIZE))
  833|    324|            return true;
  834|     68|        case CLAIMABLE_BALANCE:
  ------------------
  |  Branch (834:9): [True: 68, False: 2.35k]
  ------------------
  835|     68|            PARSER_CHECK(
  ------------------
  |  |   15|     68|    {                           \
  |  |   16|     68|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 67]
  |  |  ------------------
  |  |   17|     68|    }
  ------------------
  836|     68|                parse_claimable_balance_id(buffer, &ledger_key->claimable_balance.balance_id))
  837|     67|            return true;
  838|    611|        case LIQUIDITY_POOL:
  ------------------
  |  Branch (838:9): [True: 611, False: 1.81k]
  ------------------
  839|    611|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|    611|    {                           \
  |  |   16|    611|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 610]
  |  |  ------------------
  |  |   17|    611|    }
  ------------------
  840|    611|                                           &ledger_key->liquidity_pool.liquidity_pool_id,
  841|    611|                                           LIQUIDITY_POOL_ID_SIZE))
  842|       |
  843|    610|            return true;
  844|      1|        default:
  ------------------
  |  Branch (844:9): [True: 1, False: 2.42k]
  ------------------
  845|      1|            return false;
  846|  2.42k|    }
  847|  2.42k|}
parser.c:parse_trust_line_asset:
  342|    632|static bool parse_trust_line_asset(buffer_t *buffer, trust_line_asset_t *asset) {
  343|    632|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|    632|    {                           \
  |  |   16|    632|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 631]
  |  |  ------------------
  |  |   17|    632|    }
  ------------------
  344|    631|    switch (asset->type) {
  345|    557|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (345:9): [True: 557, False: 74]
  ------------------
  346|    557|            return true;
  347|      0|        }
  348|     19|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (348:9): [True: 19, False: 612]
  ------------------
  349|     19|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  350|      0|        }
  351|     21|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (351:9): [True: 21, False: 610]
  ------------------
  352|     21|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  353|      0|        }
  354|     33|        case ASSET_TYPE_POOL_SHARE: {
  ------------------
  |  Branch (354:9): [True: 33, False: 598]
  ------------------
  355|     33|            PARSER_CHECK(
  ------------------
  |  |   15|     33|    {                           \
  |  |   16|     33|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 32]
  |  |  ------------------
  |  |   17|     33|    }
  ------------------
  356|     33|                buffer_read_bytes(buffer, &asset->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  357|     32|            return true;
  358|     33|        }
  359|      1|        default:
  ------------------
  |  Branch (359:9): [True: 1, False: 630]
  ------------------
  360|      1|            return false;  // unknown asset type
  361|    631|    }
  362|    631|}
parser.c:parse_clawback:
  864|     57|static bool parse_clawback(buffer_t *buffer, clawback_op_t *op) {
  865|     57|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|     57|    {                           \
  |  |   16|     57|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 56]
  |  |  ------------------
  |  |   17|     57|    }
  ------------------
  866|     56|    PARSER_CHECK(parse_muxed_account(buffer, &op->from))
  ------------------
  |  |   15|     56|    {                           \
  |  |   16|     56|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 55]
  |  |  ------------------
  |  |   17|     56|    }
  ------------------
  867|     55|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|     55|    {                           \
  |  |   16|     55|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 54]
  |  |  ------------------
  |  |   17|     55|    }
  ------------------
  868|     54|    return true;
  869|     55|}
parser.c:parse_clawback_claimable_balance:
  872|    103|                                             clawback_claimable_balance_op_t *op) {
  873|    103|    PARSER_CHECK(parse_claimable_balance_id(buffer, &op->balance_id))
  ------------------
  |  |   15|    103|    {                           \
  |  |   16|    103|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 101]
  |  |  ------------------
  |  |   17|    103|    }
  ------------------
  874|    101|    return true;
  875|    103|}
parser.c:parse_set_trust_line_flags:
  877|    591|static bool parse_set_trust_line_flags(buffer_t *buffer, set_trust_line_flags_op_t *op) {
  878|    591|    PARSER_CHECK(parse_account_id(buffer, &op->trustor))
  ------------------
  |  |   15|    591|    {                           \
  |  |   16|    591|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 590]
  |  |  ------------------
  |  |   17|    591|    }
  ------------------
  879|    590|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|    590|    {                           \
  |  |   16|    590|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 588]
  |  |  ------------------
  |  |   17|    590|    }
  ------------------
  880|    588|    PARSER_CHECK(parse_uint32(buffer, &op->clear_flags))
  ------------------
  |  |   15|    588|    {                           \
  |  |   16|    588|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 587]
  |  |  ------------------
  |  |   17|    588|    }
  ------------------
  881|    587|    PARSER_CHECK(parse_uint32(buffer, &op->set_flags))
  ------------------
  |  |   15|    587|    {                           \
  |  |   16|    587|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 586]
  |  |  ------------------
  |  |   17|    587|    }
  ------------------
  882|    586|    return true;
  883|    587|}
parser.c:parse_liquidity_pool_deposit:
  885|    108|static bool parse_liquidity_pool_deposit(buffer_t *buffer, liquidity_pool_deposit_op_t *op) {
  886|    108|    PARSER_CHECK(buffer_read_bytes(buffer, &op->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  ------------------
  |  |   15|    108|    {                           \
  |  |   16|    108|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 107]
  |  |  ------------------
  |  |   17|    108|    }
  ------------------
  887|    107|    PARSER_CHECK(parse_int64(buffer, &op->max_amount_a))
  ------------------
  |  |   15|    107|    {                           \
  |  |   16|    107|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 106]
  |  |  ------------------
  |  |   17|    107|    }
  ------------------
  888|    106|    PARSER_CHECK(parse_int64(buffer, &op->max_amount_b))
  ------------------
  |  |   15|    106|    {                           \
  |  |   16|    106|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 105]
  |  |  ------------------
  |  |   17|    106|    }
  ------------------
  889|    105|    PARSER_CHECK(parse_price(buffer, &op->min_price))
  ------------------
  |  |   15|    105|    {                           \
  |  |   16|    105|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 104]
  |  |  ------------------
  |  |   17|    105|    }
  ------------------
  890|    104|    PARSER_CHECK(parse_price(buffer, &op->max_price))
  ------------------
  |  |   15|    104|    {                           \
  |  |   16|    104|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 102]
  |  |  ------------------
  |  |   17|    104|    }
  ------------------
  891|    102|    return true;
  892|    104|}
parser.c:parse_liquidity_pool_withdraw:
  894|    147|static bool parse_liquidity_pool_withdraw(buffer_t *buffer, liquidity_pool_withdraw_op_t *op) {
  895|    147|    PARSER_CHECK(buffer_read_bytes(buffer, &op->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  ------------------
  |  |   15|    147|    {                           \
  |  |   16|    147|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 146]
  |  |  ------------------
  |  |   17|    147|    }
  ------------------
  896|    146|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    146|    {                           \
  |  |   16|    146|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 145]
  |  |  ------------------
  |  |   17|    146|    }
  ------------------
  897|    145|    PARSER_CHECK(parse_int64(buffer, &op->min_amount_a))
  ------------------
  |  |   15|    145|    {                           \
  |  |   16|    145|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 144]
  |  |  ------------------
  |  |   17|    145|    }
  ------------------
  898|    144|    PARSER_CHECK(parse_int64(buffer, &op->min_amount_b))
  ------------------
  |  |   15|    144|    {                           \
  |  |   16|    144|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 143]
  |  |  ------------------
  |  |   17|    144|    }
  ------------------
  899|    143|    return true;
  900|    144|}
parser.c:parse_invoke_host_function:
 1035|    632|static bool parse_invoke_host_function(buffer_t *buffer, invoke_host_function_op_t *op) {
 1036|       |    // hostFunction
 1037|    632|    PARSER_CHECK(parse_uint32(buffer, &op->host_function_type));
  ------------------
  |  |   15|    632|    {                           \
  |  |   16|    632|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 631]
  |  |  ------------------
  |  |   17|    632|    }
  ------------------
 1038|    631|    PRINTF("host_function_type=%d\n", op->host_function_type);
 1039|    631|    switch (op->host_function_type) {
 1040|    323|        case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:
  ------------------
  |  Branch (1040:9): [True: 323, False: 308]
  ------------------
 1041|    323|            PARSER_CHECK(parse_invoke_contract_args(buffer, &op->invoke_contract_args))
  ------------------
  |  |   15|    323|    {                           \
  |  |   16|    323|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 299]
  |  |  ------------------
  |  |   17|    323|    }
  ------------------
 1042|    299|            break;
 1043|    299|        case HOST_FUNCTION_TYPE_CREATE_CONTRACT:
  ------------------
  |  Branch (1043:9): [True: 198, False: 433]
  ------------------
 1044|    198|            PARSER_CHECK(read_create_contract_args_advance(buffer))
  ------------------
  |  |   15|    198|    {                           \
  |  |   16|    198|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 183]
  |  |  ------------------
  |  |   17|    198|    }
  ------------------
 1045|    183|            break;
 1046|    183|        case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM: {
  ------------------
  |  Branch (1046:9): [True: 109, False: 522]
  ------------------
 1047|    109|            size_t data_size = 0;
 1048|    109|            PARSER_CHECK(parse_uint32(buffer, &data_size))
  ------------------
  |  |   15|    109|    {                           \
  |  |   16|    109|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 108]
  |  |  ------------------
  |  |   17|    109|    }
  ------------------
 1049|    108|            PARSER_CHECK(num_bytes(data_size, &data_size))
  ------------------
  |  |   15|    108|    {                           \
  |  |   16|    108|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 108]
  |  |  ------------------
  |  |   17|    108|    }
  ------------------
 1050|    108|            PARSER_CHECK(buffer_advance(buffer, data_size))
  ------------------
  |  |   15|    108|    {                           \
  |  |   16|    108|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 107]
  |  |  ------------------
  |  |   17|    108|    }
  ------------------
 1051|    107|            break;
 1052|    108|        }
 1053|    107|        default:
  ------------------
  |  Branch (1053:9): [True: 1, False: 630]
  ------------------
 1054|      1|            return false;
 1055|    631|    }
 1056|       |
 1057|       |    // auth<>
 1058|    589|    uint32_t auth_len;
 1059|    589|    uint8_t sub_invocations_count = 0;
 1060|    589|    PARSER_CHECK(parse_uint32(buffer, &auth_len))
  ------------------
  |  |   15|    589|    {                           \
  |  |   16|    589|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 586]
  |  |  ------------------
  |  |   17|    589|    }
  ------------------
 1061|    825|    for (uint32_t i = 0; i < auth_len; i++) {
  ------------------
  |  Branch (1061:26): [True: 288, False: 537]
  ------------------
 1062|       |        // PARSER_CHECK(read_soroban_authorization_entry_advance(buffer,
 1063|       |        //                                                       &sub_invocations_count,
 1064|       |        //                                                       op->sub_invocation_positions))
 1065|       |        // PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, count, positions))
 1066|       |        // 1. read credentials
 1067|    288|        uint32_t credentials_type;
 1068|    288|        PARSER_CHECK(read_parse_soroban_credentials_advance(buffer, &credentials_type))
  ------------------
  |  |   15|    288|    {                           \
  |  |   16|    288|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 17, False: 271]
  |  |  ------------------
  |  |   17|    288|    }
  ------------------
 1069|       |        // 2. read rootInvocation.function
 1070|    271|        PARSER_CHECK(read_soroban_authorized_function_advance(buffer))
  ------------------
  |  |   15|    271|    {                           \
  |  |   16|    271|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 261]
  |  |  ------------------
  |  |   17|    271|    }
  ------------------
 1071|       |        // 3. read rootInvocation.subInvocations
 1072|       |        // subInvocations
 1073|    261|        uint32_t len;
 1074|    261|        PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|    261|    {                           \
  |  |   16|    261|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 259]
  |  |  ------------------
  |  |   17|    261|    }
  ------------------
 1075|    477|        for (uint32_t j = 0; j < len; j++) {
  ------------------
  |  Branch (1075:30): [True: 238, False: 239]
  ------------------
 1076|    238|            if (credentials_type == SOROBAN_CREDENTIALS_SOURCE_ACCOUNT) {
  ------------------
  |  Branch (1076:17): [True: 115, False: 123]
  ------------------
 1077|    115|                PARSER_CHECK(
  ------------------
  |  |   15|    115|    {                           \
  |  |   16|    115|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 106]
  |  |  ------------------
  |  |   17|    115|    }
  ------------------
 1078|    115|                    read_soroban_authorized_invocation_advance(buffer,
 1079|    115|                                                               &sub_invocations_count,
 1080|    115|                                                               op->sub_invocation_positions))
 1081|    123|            } else {
 1082|    123|                PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, NULL, NULL))
  ------------------
  |  |   15|    123|    {                           \
  |  |   16|    123|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 112]
  |  |  ------------------
  |  |   17|    123|    }
  ------------------
 1083|    123|            }
 1084|    238|        }
 1085|    259|    }
 1086|    537|    op->sub_invocations_count = sub_invocations_count;
 1087|       |
 1088|    537|    PRINTF("sub_invocations_count=%d\n", sub_invocations_count);
 1089|       |    // for (uint8_t i = 0; i < 16; i++) {
 1090|       |    //     PRINTF("sub_invocation_positions[%d]=%d\n", i, op->sub_invocation_positions[i]);
 1091|       |    // }
 1092|    537|    return true;
 1093|    586|}
parser.c:read_parse_soroban_credentials_advance:
  917|    288|static bool read_parse_soroban_credentials_advance(buffer_t *buffer, uint32_t *credentials_type) {
  918|    288|    PARSER_CHECK(parse_uint32(buffer, credentials_type))
  ------------------
  |  |   15|    288|    {                           \
  |  |   16|    288|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 276]
  |  |  ------------------
  |  |   17|    288|    }
  ------------------
  919|    276|    switch (*credentials_type) {
  920|    196|        case SOROBAN_CREDENTIALS_SOURCE_ACCOUNT:
  ------------------
  |  Branch (920:9): [True: 196, False: 80]
  ------------------
  921|       |            // void
  922|    196|            break;
  923|     79|        case SOROBAN_CREDENTIALS_ADDRESS: {
  ------------------
  |  Branch (923:9): [True: 79, False: 197]
  ------------------
  924|     79|            sc_address_t address;
  925|     79|            PARSER_CHECK(parse_sc_address(buffer, &address))
  ------------------
  |  |   15|     79|    {                           \
  |  |   16|     79|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 78]
  |  |  ------------------
  |  |   17|     79|    }
  ------------------
  926|       |            PARSER_CHECK(buffer_advance(buffer, 8))   // nonce
  ------------------
  |  |   15|     78|    {                           \
  |  |   16|     78|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 77]
  |  |  ------------------
  |  |   17|     78|    }
  ------------------
  927|       |            PARSER_CHECK(buffer_advance(buffer, 4))   // signatureExpirationLedger
  ------------------
  |  |   15|     77|    {                           \
  |  |   16|     77|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 76]
  |  |  ------------------
  |  |   17|     77|    }
  ------------------
  928|       |            PARSER_CHECK(read_scval_advance(buffer))  // signature
  ------------------
  |  |   15|     76|    {                           \
  |  |   16|     76|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 75]
  |  |  ------------------
  |  |   17|     76|    }
  ------------------
  929|     75|            break;
  930|     76|        }
  931|     75|        default:
  ------------------
  |  Branch (931:9): [True: 1, False: 275]
  ------------------
  932|      1|            return false;
  933|    276|    }
  934|    271|    return true;
  935|    276|}
parser.c:read_soroban_authorized_function_advance:
  994|  1.47k|static bool read_soroban_authorized_function_advance(buffer_t *buffer) {
  995|  1.47k|    uint32_t type;
  996|  1.47k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  1.47k|    {                           \
  |  |   16|  1.47k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 40, False: 1.43k]
  |  |  ------------------
  |  |   17|  1.47k|    }
  ------------------
  997|  1.43k|    switch (type) {
  998|  1.33k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN: {
  ------------------
  |  Branch (998:9): [True: 1.33k, False: 101]
  ------------------
  999|       |            // contractFn
 1000|  1.33k|            invoke_contract_args_t args;
 1001|  1.33k|            PARSER_CHECK(parse_invoke_contract_args(buffer, &args));
  ------------------
  |  |   15|  1.33k|    {                           \
  |  |   16|  1.33k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 44, False: 1.29k]
  |  |  ------------------
  |  |   17|  1.33k|    }
  ------------------
 1002|  1.29k|            break;
 1003|  1.33k|        }
 1004|     94|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1004:9): [True: 94, False: 1.34k]
  ------------------
 1005|       |            // createContractHostFn
 1006|     94|            PARSER_CHECK(read_create_contract_args_advance(buffer));
  ------------------
  |  |   15|     94|    {                           \
  |  |   16|     94|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 17, False: 77]
  |  |  ------------------
  |  |   17|     94|    }
  ------------------
 1007|     77|            break;
 1008|      7|        default:
  ------------------
  |  Branch (1008:9): [True: 7, False: 1.43k]
  ------------------
 1009|      7|            return false;
 1010|  1.43k|    }
 1011|  1.37k|    return true;
 1012|  1.43k|}
parser.c:parse_extend_footprint_ttl:
 1095|    177|static bool parse_extend_footprint_ttl(buffer_t *buffer, extend_footprint_ttl_op_t *op) {
 1096|    177|    PARSER_CHECK(parse_extension_point_v0(buffer))
  ------------------
  |  |   15|    177|    {                           \
  |  |   16|    177|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 175]
  |  |  ------------------
  |  |   17|    177|    }
  ------------------
 1097|    175|    PARSER_CHECK(parse_uint32(buffer, &op->extend_to))
  ------------------
  |  |   15|    175|    {                           \
  |  |   16|    175|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 174]
  |  |  ------------------
  |  |   17|    175|    }
  ------------------
 1098|    174|    return true;
 1099|    175|}
parser.c:parse_extension_point_v0:
  902|    524|static bool parse_extension_point_v0(buffer_t *buffer) {
  903|    524|    uint32_t v;
  904|    524|    PARSER_CHECK(parse_uint32(buffer, &v))
  ------------------
  |  |   15|    524|    {                           \
  |  |   16|    524|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 522]
  |  |  ------------------
  |  |   17|    524|    }
  ------------------
  905|    522|    if (v != 0) {
  ------------------
  |  Branch (905:9): [True: 1, False: 521]
  ------------------
  906|      1|        return false;
  907|      1|    }
  908|    521|    return true;
  909|    522|}
parser.c:parse_restore_footprint:
  911|    347|static bool parse_restore_footprint(buffer_t *buffer, restore_footprint_op_t *op) {
  912|    347|    (void) op;
  913|    347|    PARSER_CHECK(parse_extension_point_v0(buffer))
  ------------------
  |  |   15|    347|    {                           \
  |  |   16|    347|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 346]
  |  |  ------------------
  |  |   17|    347|    }
  ------------------
  914|    346|    return true;
  915|    347|}
parser.c:parse_invoke_contract_args:
  962|  4.25k|static bool parse_invoke_contract_args(buffer_t *buffer, invoke_contract_args_t *args) {
  963|       |    // contractAddress
  964|  4.25k|    PARSER_CHECK(parse_sc_address(buffer, &args->address))
  ------------------
  |  |   15|  4.25k|    {                           \
  |  |   16|  4.25k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 168, False: 4.08k]
  |  |  ------------------
  |  |   17|  4.25k|    }
  ------------------
  965|       |    // functionName
  966|  4.08k|    PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  4.08k|    {                           \
  |  |   16|  4.08k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 190, False: 3.89k]
  |  |  ------------------
  |  |   17|  4.08k|    }
  ------------------
  967|  4.08k|                                         &args->function.name,
  968|  4.08k|                                         &args->function.name_size,
  969|  4.08k|                                         SCV_SYMBOL_MAX_SIZE))
  970|       |
  971|       |    // args
  972|  3.89k|    uint32_t args_len;
  973|  3.89k|    PARSER_CHECK(parse_uint32(buffer, &args_len))
  ------------------
  |  |   15|  3.89k|    {                           \
  |  |   16|  3.89k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 3.88k]
  |  |  ------------------
  |  |   17|  3.89k|    }
  ------------------
  974|       |
  975|  3.88k|    args->parameters_length = args_len;
  976|  3.88k|    args->parameters_position = buffer->offset;
  977|       |
  978|  3.88k|    if (args_len > HOST_FUNCTION_ARGS_MAX_LENGTH) {
  ------------------
  |  |   36|  3.88k|#define HOST_FUNCTION_ARGS_MAX_LENGTH 10
  ------------------
  |  Branch (978:9): [True: 64, False: 3.82k]
  ------------------
  979|       |        // We dont support more than 10 arguments
  980|     64|        return false;
  981|     64|    }
  982|       |
  983|       |    // PRINTF("function_name.text_size=%d, function_name.text=%s, args->parameters_length=%d\n",
  984|       |    //        args->function.name_size,
  985|       |    //        args->function.name,
  986|       |    //        args->parameters_length);
  987|       |
  988|  9.93k|    for (uint32_t i = 0; i < args_len; i++) {
  ------------------
  |  Branch (988:26): [True: 7.13k, False: 2.80k]
  ------------------
  989|  7.13k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  7.13k|    {                           \
  |  |   16|  7.13k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.01k, False: 6.11k]
  |  |  ------------------
  |  |   17|  7.13k|    }
  ------------------
  990|  7.13k|    }
  991|  2.80k|    return true;
  992|  3.82k|}
parser.c:read_create_contract_args_advance:
  937|    349|static bool read_create_contract_args_advance(buffer_t *buffer) {
  938|       |    // contract_id_preimage
  939|    349|    uint32_t type;
  940|    349|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|    349|    {                           \
  |  |   16|    349|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 342]
  |  |  ------------------
  |  |   17|    349|    }
  ------------------
  941|    342|    switch (type) {
  942|    214|        case CONTRACT_ID_PREIMAGE_FROM_ADDRESS: {
  ------------------
  |  |  489|    214|#define CONTRACT_ID_PREIMAGE_FROM_ADDRESS 0
  ------------------
  |  Branch (942:9): [True: 214, False: 128]
  ------------------
  943|    214|            sc_address_t address;
  944|    214|            PARSER_CHECK(parse_sc_address(buffer, &address))
  ------------------
  |  |   15|    214|    {                           \
  |  |   16|    214|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 209]
  |  |  ------------------
  |  |   17|    214|    }
  ------------------
  945|       |            PARSER_CHECK(buffer_advance(buffer, 32))  // salt
  ------------------
  |  |   15|    209|    {                           \
  |  |   16|    209|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 206]
  |  |  ------------------
  |  |   17|    209|    }
  ------------------
  946|    206|            break;
  947|    209|        }
  948|    206|        case CONTRACT_ID_PREIMAGE_FROM_ASSET: {
  ------------------
  |  |  490|    125|#define CONTRACT_ID_PREIMAGE_FROM_ASSET   1
  ------------------
  |  Branch (948:9): [True: 125, False: 217]
  ------------------
  949|    125|            asset_t asset;
  950|    125|            PARSER_CHECK(parse_asset(buffer, &asset))
  ------------------
  |  |   15|    125|    {                           \
  |  |   16|    125|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 111]
  |  |  ------------------
  |  |   17|    125|    }
  ------------------
  951|    111|            break;
  952|    125|        }
  953|    111|        default:
  ------------------
  |  Branch (953:9): [True: 3, False: 339]
  ------------------
  954|      3|            return false;
  955|    342|    }
  956|       |
  957|       |    // executable
  958|    317|    PARSER_CHECK(read_contract_executable_advance(buffer))
  ------------------
  |  |   15|    317|    {                           \
  |  |   16|    317|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 307]
  |  |  ------------------
  |  |   17|    317|    }
  ------------------
  959|    307|    return true;
  960|    317|}
parser.c:read_soroban_authorized_invocation_advance:
 1016|  1.21k|                                                       size_t *positions) {
 1017|  1.21k|    if (count != NULL && positions != NULL) {
  ------------------
  |  Branch (1017:9): [True: 1.08k, False: 130]
  |  Branch (1017:26): [True: 1.08k, False: 0]
  ------------------
 1018|  1.08k|        if (*count >= MAX_SUB_INVOCATIONS_SIZE) {
  ------------------
  |  |   44|  1.08k|#define MAX_SUB_INVOCATIONS_SIZE 16
  ------------------
  |  Branch (1018:13): [True: 3, False: 1.07k]
  ------------------
 1019|      3|            return false;
 1020|      3|        }
 1021|  1.07k|        positions[(*count)++] = buffer->offset;
 1022|  1.07k|    }
 1023|       |    // function
 1024|  1.20k|    PARSER_CHECK(read_soroban_authorized_function_advance(buffer))
  ------------------
  |  |   15|  1.20k|    {                           \
  |  |   16|  1.20k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 98, False: 1.11k]
  |  |  ------------------
  |  |   17|  1.20k|    }
  ------------------
 1025|       |
 1026|       |    // subInvocations
 1027|  1.11k|    uint32_t len;
 1028|  1.11k|    PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  1.11k|    {                           \
  |  |   16|  1.11k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.10k]
  |  |  ------------------
  |  |   17|  1.11k|    }
  ------------------
 1029|  1.55k|    for (uint32_t i = 0; i < len; i++) {
  ------------------
  |  Branch (1029:26): [True: 501, False: 1.05k]
  ------------------
 1030|    501|        PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, count, positions))
  ------------------
  |  |   15|    501|    {                           \
  |  |   16|    501|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 53, False: 448]
  |  |  ------------------
  |  |   17|    501|    }
  ------------------
 1031|    501|    }
 1032|  1.05k|    return true;
 1033|  1.10k|}

crc16:
   15|  6.48k|uint16_t crc16(const uint8_t *input_str, uint32_t num_bytes) {
   16|  6.48k|    uint16_t crc = 0;
   17|   228k|    while (num_bytes-- > 0) {
  ------------------
  |  Branch (17:12): [True: 221k, False: 6.48k]
  ------------------
   18|   221k|        crc = crc ^ (uint32_t) *input_str++ << 8;
   19|   221k|        int i = 8;
   20|  1.77M|        do {
   21|  1.77M|            if (crc & 0x8000)
  ------------------
  |  Branch (21:17): [True: 870k, False: 902k]
  ------------------
   22|   870k|                crc = crc << 1 ^ 0x1021;
   23|   902k|            else
   24|   902k|                crc = crc << 1;
   25|  1.77M|        } while (--i);
  ------------------
  |  Branch (25:18): [True: 1.55M, False: 221k]
  ------------------
   26|   221k|    }
   27|  6.48k|    return crc;
   28|  6.48k|}
encode_key:
   30|  6.24k|bool encode_key(const uint8_t *in, uint8_t version_byte, char *out, uint8_t out_len) {
   31|  6.24k|    if (in == NULL || out_len < 56 + 1) {
  ------------------
  |  Branch (31:9): [True: 0, False: 6.24k]
  |  Branch (31:23): [True: 0, False: 6.24k]
  ------------------
   32|      0|        return false;
   33|      0|    }
   34|  6.24k|    uint8_t buffer[35] = {0};
   35|  6.24k|    buffer[0] = version_byte;
   36|   206k|    for (uint8_t i = 0; i < 32; i++) {
  ------------------
  |  Branch (36:25): [True: 199k, False: 6.24k]
  ------------------
   37|   199k|        buffer[i + 1] = in[i];
   38|   199k|    }
   39|  6.24k|    uint16_t crc = crc16(buffer, 33);  // checksum
   40|  6.24k|    buffer[33] = crc;
   41|  6.24k|    buffer[34] = crc >> 8;
   42|  6.24k|    if (base32_encode(buffer, 35, (uint8_t *) out, 56) == -1) {
  ------------------
  |  Branch (42:9): [True: 0, False: 6.24k]
  ------------------
   43|      0|        return false;
   44|      0|    }
   45|  6.24k|    out[56] = '\0';
   46|  6.24k|    return true;
   47|  6.24k|}
encode_ed25519_public_key:
   51|  5.76k|                               size_t out_len) {
   52|  5.76k|    return encode_key(raw_public_key, VERSION_BYTE_ED25519_PUBLIC_KEY, out, out_len);
  ------------------
  |  |   25|  5.76k|#define VERSION_BYTE_ED25519_PUBLIC_KEY     6 << 3
  ------------------
   53|  5.76k|}
encode_hash_x_key:
   57|     33|                       size_t out_len) {
   58|     33|    return encode_key(raw_hash_x, VERSION_BYTE_HASH_X, out, out_len);
  ------------------
  |  |   28|     33|#define VERSION_BYTE_HASH_X                 23 << 3
  ------------------
   59|     33|}
encode_pre_auth_x_key:
   63|     76|                           size_t out_len) {
   64|     76|    return encode_key(raw_pre_auth_tx, VERSION_BYTE_PRE_AUTH_TX_KEY, out, out_len);
  ------------------
  |  |   27|     76|#define VERSION_BYTE_PRE_AUTH_TX_KEY        19 << 3
  ------------------
   65|     76|}
encode_contract:
   69|    374|                     size_t out_len) {
   70|    374|    return encode_key(raw_contract, VERSION_BYTE_CONTRACT, out, out_len);
  ------------------
  |  |   31|    374|#define VERSION_BYTE_CONTRACT               2 << 3
  ------------------
   71|    374|}
encode_ed25519_signed_payload:
   75|    183|                                   size_t out_len) {
   76|    183|    if (out_len < ED25519_SIGNED_PAYLOAD_MAX_LENGTH) {  // (103 * 8 + 4) / 5
  ------------------
  |  |   12|    183|#define ED25519_SIGNED_PAYLOAD_MAX_LENGTH 166  // include the null terminator
  ------------------
  |  Branch (76:9): [True: 0, False: 183]
  ------------------
   77|      0|        return false;
   78|      0|    }
   79|    183|    if (signed_payload->payload_len > 64 || signed_payload->payload_len <= 0) {
  ------------------
  |  Branch (79:9): [True: 0, False: 183]
  |  Branch (79:45): [True: 0, False: 183]
  ------------------
   80|      0|        return false;
   81|      0|    }
   82|    183|    uint8_t data_len = RAW_ED25519_PUBLIC_KEY_SIZE + 4 + signed_payload->payload_len +
  ------------------
  |  |   18|    183|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
   83|    183|                       ((4 - signed_payload->payload_len % 4) % 4);
   84|    183|    uint8_t buffer[1 + 32 + 4 + 64 + 2] = {0};
   85|    183|    buffer[0] = VERSION_BYTE_ED25519_SIGNED_PAYLOAD;
  ------------------
  |  |   30|    183|#define VERSION_BYTE_ED25519_SIGNED_PAYLOAD 15 << 3
  ------------------
   86|  6.03k|    for (uint8_t i = 0; i < 32; i++) {
  ------------------
  |  Branch (86:25): [True: 5.85k, False: 183]
  ------------------
   87|  5.85k|        buffer[i + 1] = signed_payload->ed25519[i];
   88|  5.85k|    }
   89|    183|    buffer[36] = signed_payload->payload_len;
   90|  6.09k|    for (uint32_t i = 0; i < signed_payload->payload_len; i++) {
  ------------------
  |  Branch (90:26): [True: 5.91k, False: 183]
  ------------------
   91|  5.91k|        buffer[i + 37] = signed_payload->payload[i];
   92|  5.91k|    }
   93|    183|    uint16_t crc = crc16(buffer, data_len + 1);  // checksum
   94|    183|    buffer[1 + data_len] = crc;
   95|    183|    buffer[1 + data_len + 1] = crc >> 8;
   96|    183|    int ret = base32_encode(buffer, data_len + 3, (uint8_t *) out, out_len);
   97|    183|    if (ret == -1) {
  ------------------
  |  Branch (97:9): [True: 0, False: 183]
  ------------------
   98|      0|        return false;
   99|      0|    }
  100|    183|    out[ret] = '\0';
  101|    183|    return true;
  102|    183|}
encode_muxed_account:
  104|  1.16k|bool encode_muxed_account(const muxed_account_t *raw_muxed_account, char *out, size_t out_len) {
  105|  1.16k|    if (raw_muxed_account == NULL) {
  ------------------
  |  Branch (105:9): [True: 0, False: 1.16k]
  ------------------
  106|      0|        return false;
  107|      0|    }
  108|  1.16k|    if (raw_muxed_account->type == KEY_TYPE_ED25519) {
  ------------------
  |  Branch (108:9): [True: 1.11k, False: 57]
  ------------------
  109|  1.11k|        return encode_ed25519_public_key(raw_muxed_account->ed25519, out, out_len);
  110|  1.11k|    } else {
  111|     57|        if (out_len < ENCODED_MUXED_ACCOUNT_KEY_LENGTH) {
  ------------------
  |  |   16|     57|#define ENCODED_MUXED_ACCOUNT_KEY_LENGTH   70
  ------------------
  |  Branch (111:13): [True: 0, False: 57]
  ------------------
  112|      0|            return false;
  113|      0|        }
  114|     57|        uint8_t buffer[MUXED_ACCOUNT_MED_25519_SIZE] = {0};
  115|     57|        buffer[0] = VERSION_BYTE_MUXED_ACCOUNT;
  ------------------
  |  |   29|     57|#define VERSION_BYTE_MUXED_ACCOUNT          12 << 3
  ------------------
  116|     57|        memcpy(buffer + 1, raw_muxed_account->med25519.ed25519, RAW_ED25519_PUBLIC_KEY_SIZE);
  ------------------
  |  |   18|     57|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  117|    513|        for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (117:25): [True: 456, False: 57]
  ------------------
  118|    456|            buffer[33 + i] = raw_muxed_account->med25519.id >> 8 * (7 - i);
  119|    456|        }
  120|     57|        uint16_t crc = crc16(buffer, MUXED_ACCOUNT_MED_25519_SIZE - 2);  // checksum
  ------------------
  |  |   10|     57|#define MUXED_ACCOUNT_MED_25519_SIZE      43
  ------------------
  121|     57|        buffer[41] = crc;
  122|     57|        buffer[42] = crc >> 8;
  123|     57|        if (base32_encode(buffer,
  ------------------
  |  Branch (123:13): [True: 0, False: 57]
  ------------------
  124|     57|                          MUXED_ACCOUNT_MED_25519_SIZE,
  ------------------
  |  |   10|     57|#define MUXED_ACCOUNT_MED_25519_SIZE      43
  ------------------
  125|     57|                          (uint8_t *) out,
  126|     57|                          ENCODED_MUXED_ACCOUNT_KEY_LENGTH) == -1) {
  ------------------
  |  |   16|     57|#define ENCODED_MUXED_ACCOUNT_KEY_LENGTH   70
  ------------------
  127|      0|            return false;
  128|      0|        }
  129|     57|        out[69] = '\0';
  130|     57|        return true;
  131|     57|    }
  132|  1.16k|}
print_binary:
  162|    219|                  uint8_t num_chars_r) {
  163|    219|    if (num_chars_l > 0) {
  ------------------
  |  Branch (163:9): [True: 50, False: 169]
  ------------------
  164|     50|        char buffer[BINARY_MAX_SIZE * 2 + 1];
  165|     50|        if (!format_hex(in, in_len, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (165:13): [True: 0, False: 50]
  ------------------
  166|      0|            return false;
  167|      0|        }
  168|     50|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  169|     50|    }
  170|    169|    return format_hex(in, in_len, out, out_len);
  171|    219|}
print_account_id:
  177|  4.65k|                      uint8_t num_chars_r) {
  178|  4.65k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (178:9): [True: 107, False: 4.54k]
  ------------------
  179|    107|        char buffer[ENCODED_ED25519_PUBLIC_KEY_LENGTH];
  180|    107|        if (!encode_ed25519_public_key(account_id, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (180:13): [True: 0, False: 107]
  ------------------
  181|      0|            return false;
  182|      0|        }
  183|    107|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  184|    107|    }
  185|  4.54k|    return encode_ed25519_public_key(account_id, out, out_len);
  186|  4.65k|}
print_contract_id:
  192|    374|                       uint8_t num_chars_r) {
  193|    374|    if (num_chars_l > 0) {
  ------------------
  |  Branch (193:9): [True: 0, False: 374]
  ------------------
  194|      0|        char buffer[ENCODED_CONTRACT_KEY_LENGTH];
  195|      0|        if (!encode_contract(contract_id, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (195:13): [True: 0, False: 0]
  ------------------
  196|      0|            return false;
  197|      0|        }
  198|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  199|      0|    }
  200|    374|    return encode_contract(contract_id, out, out_len);
  201|    374|}
print_hash_x_key:
  207|     33|                      uint8_t num_chars_r) {
  208|     33|    if (num_chars_l > 0) {
  ------------------
  |  Branch (208:9): [True: 0, False: 33]
  ------------------
  209|      0|        char buffer[ENCODED_HASH_X_KEY_LENGTH];
  210|      0|        if (!encode_hash_x_key(raw_hash_x, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|            return false;
  212|      0|        }
  213|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  214|      0|    }
  215|     33|    return encode_hash_x_key(raw_hash_x, out, out_len);
  216|     33|}
print_pre_auth_x_key:
  222|     76|                          uint8_t num_chars_r) {
  223|     76|    if (num_chars_l > 0) {
  ------------------
  |  Branch (223:9): [True: 0, False: 76]
  ------------------
  224|      0|        char buffer[ENCODED_PRE_AUTH_TX_KEY_LENGTH];
  225|      0|        if (!encode_pre_auth_x_key(raw_pre_auth_tx, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (225:13): [True: 0, False: 0]
  ------------------
  226|      0|            return false;
  227|      0|        }
  228|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  229|      0|    }
  230|     76|    return encode_pre_auth_x_key(raw_pre_auth_tx, out, out_len);
  231|     76|}
print_ed25519_signed_payload:
  237|    183|                                  uint8_t num_chars_r) {
  238|    183|    char tmp[ED25519_SIGNED_PAYLOAD_MAX_LENGTH];
  239|    183|    if (!encode_ed25519_signed_payload(signed_payload, tmp, sizeof(tmp))) {
  ------------------
  |  Branch (239:9): [True: 0, False: 183]
  ------------------
  240|      0|        return false;
  241|    183|    };
  242|       |
  243|    183|    if (num_chars_l > 0) {
  ------------------
  |  Branch (243:9): [True: 183, False: 0]
  ------------------
  244|    183|        if (out_len < num_chars_l + num_chars_r + 2 + 1) {
  ------------------
  |  Branch (244:13): [True: 0, False: 183]
  ------------------
  245|      0|            return false;
  246|      0|        }
  247|    183|        return print_summary(tmp, out, out_len, num_chars_l, num_chars_r);
  248|    183|    } else {
  249|      0|        if (strlcpy(out, tmp, out_len) >= out_len) {
  ------------------
  |  Branch (249:13): [True: 0, False: 0]
  ------------------
  250|      0|            return false;
  251|      0|        }
  252|      0|    }
  253|      0|    return true;
  254|    183|}
print_sc_address:
  260|    835|                      uint8_t num_chars_r) {
  261|    835|    if (sc_address->type == SC_ADDRESS_TYPE_ACCOUNT) {
  ------------------
  |  Branch (261:9): [True: 461, False: 374]
  ------------------
  262|    461|        return print_account_id(sc_address->address, out, out_len, num_chars_l, num_chars_r);
  263|    461|    } else {
  264|    374|        return print_contract_id(sc_address->address, out, out_len, num_chars_l, num_chars_r);
  265|    374|    }
  266|      0|    return true;
  267|    835|}
print_muxed_account:
  273|  1.16k|                         uint8_t num_chars_r) {
  274|  1.16k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (274:9): [True: 61, False: 1.10k]
  ------------------
  275|     61|        char buffer[ENCODED_MUXED_ACCOUNT_KEY_LENGTH];
  276|     61|        if (!encode_muxed_account(muxed_account, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (276:13): [True: 0, False: 61]
  ------------------
  277|      0|            return false;
  278|      0|        }
  279|     61|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  280|     61|    }
  281|  1.10k|    return encode_muxed_account(muxed_account, out, out_len);
  282|  1.16k|}
print_claimable_balance_id:
  288|     83|                                uint8_t num_chars_r) {
  289|     83|    if (out_len < (4 + CLAIMABLE_BALANCE_ID_SIZE) * 2 + 1) {
  ------------------
  |  |   48|     83|#define CLAIMABLE_BALANCE_ID_SIZE 32
  ------------------
  |  Branch (289:9): [True: 0, False: 83]
  ------------------
  290|      0|        return false;
  291|      0|    }
  292|     83|    uint8_t data[(4 + CLAIMABLE_BALANCE_ID_SIZE)];
  293|    415|    for (uint8_t i = 0; i < 4; i++) {
  ------------------
  |  Branch (293:25): [True: 332, False: 83]
  ------------------
  294|    332|        data[i] = claimable_balance_id_t->type >> (8 * (3 - i));
  295|    332|    }
  296|     83|    memcpy(data + 4, claimable_balance_id_t->v0, CLAIMABLE_BALANCE_ID_SIZE);
  ------------------
  |  |   48|     83|#define CLAIMABLE_BALANCE_ID_SIZE 32
  ------------------
  297|     83|    return print_binary(data, sizeof(data), out, out_len, num_chars_l, num_chars_r);
  298|     83|}
print_uint64_num:
  300|  16.8k|bool print_uint64_num(uint64_t num, char *out, size_t out_len) {
  301|  16.8k|    uint8_t data[8] = {0};
  302|   151k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (302:21): [True: 134k, False: 16.8k]
  ------------------
  303|   134k|        data[i] = num >> (8 * (7 - i));
  304|   134k|    }
  305|  16.8k|    return print_uint64(data, 0, out, out_len, false);
  306|  16.8k|}
print_int64_num:
  308|     20|bool print_int64_num(int64_t num, char *out, size_t out_len) {
  309|     20|    uint8_t data[8] = {0};
  310|    180|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (310:21): [True: 160, False: 20]
  ------------------
  311|    160|        data[i] = num >> (8 * (7 - i));
  312|    160|    }
  313|     20|    return print_int64(data, 0, out, out_len, false);
  314|     20|}
print_time:
  316|     50|bool print_time(uint64_t seconds, char *out, size_t out_len) {
  317|     50|    if (seconds > 253402300799) {
  ------------------
  |  Branch (317:9): [True: 15, False: 35]
  ------------------
  318|       |        // valid range 1970-01-01 00:00:00 - 9999-12-31 23:59:59
  319|     15|        return false;
  320|     15|    }
  321|     35|    char time_str[20] = {0};  // 1970-01-01 00:00:00
  322|       |
  323|     35|    if (out_len < sizeof(time_str)) {
  ------------------
  |  Branch (323:9): [True: 0, False: 35]
  ------------------
  324|      0|        return false;
  325|      0|    }
  326|     35|    struct tm tm;
  327|     35|    if (!gmtime_r((time_t *) &seconds, &tm)) {
  ------------------
  |  Branch (327:9): [True: 0, False: 35]
  ------------------
  328|      0|        return false;
  329|     35|    };
  330|       |
  331|     35|    if (snprintf(time_str,
  ------------------
  |  Branch (331:9): [True: 0, False: 35]
  ------------------
  332|     35|                 sizeof(time_str),
  333|     35|                 "%04d-%02d-%02d %02d:%02d:%02d",
  334|     35|                 tm.tm_year + 1900,
  335|     35|                 tm.tm_mon + 1,
  336|     35|                 tm.tm_mday,
  337|     35|                 tm.tm_hour,
  338|     35|                 tm.tm_min,
  339|     35|                 tm.tm_sec) < 0) {
  340|      0|        return false;
  341|     35|    };
  342|     35|    if (strlcpy(out, time_str, out_len) >= out_len) {
  ------------------
  |  Branch (342:9): [True: 0, False: 35]
  ------------------
  343|      0|        return false;
  344|      0|    }
  345|     35|    return true;
  346|     35|}
print_asset_name:
  348|  5.20k|bool print_asset_name(const asset_t *asset, uint8_t network_id, char *out, size_t out_len) {
  349|  5.20k|    switch (asset->type) {
  350|  5.09k|        case ASSET_TYPE_NATIVE:
  ------------------
  |  Branch (350:9): [True: 5.09k, False: 112]
  ------------------
  351|  5.09k|            if (network_id == NETWORK_TYPE_UNKNOWN) {
  ------------------
  |  |   59|  5.09k|#define NETWORK_TYPE_UNKNOWN 2
  ------------------
  |  Branch (351:17): [True: 4.98k, False: 108]
  ------------------
  352|  4.98k|                if (strlcpy(out, "native", out_len) >= out_len) {
  ------------------
  |  Branch (352:21): [True: 0, False: 4.98k]
  ------------------
  353|      0|                    return false;
  354|      0|                }
  355|  4.98k|            } else {
  356|    108|                if (strlcpy(out, "XLM", out_len) >= out_len) {
  ------------------
  |  Branch (356:21): [True: 0, False: 108]
  ------------------
  357|      0|                    return false;
  358|      0|                }
  359|    108|            }
  360|  5.09k|            return true;
  361|     51|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (361:9): [True: 51, False: 5.15k]
  ------------------
  362|    189|            for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (362:29): [True: 161, False: 28]
  ------------------
  363|    161|                out[i] = asset->alpha_num4.asset_code[i];
  364|    161|                if (out[i] == 0) {
  ------------------
  |  Branch (364:21): [True: 23, False: 138]
  ------------------
  365|     23|                    break;
  366|     23|                }
  367|    161|            }
  368|     51|            out[4] = 0;
  369|     51|            return true;
  370|     61|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (370:9): [True: 61, False: 5.14k]
  ------------------
  371|    173|            for (int i = 0; i < 12; i++) {
  ------------------
  |  Branch (371:29): [True: 166, False: 7]
  ------------------
  372|    166|                out[i] = asset->alpha_num12.asset_code[i];
  373|    166|                if (out[i] == 0) {
  ------------------
  |  Branch (373:21): [True: 54, False: 112]
  ------------------
  374|     54|                    break;
  375|     54|                }
  376|    166|            }
  377|     61|            out[12] = 0;
  378|     61|            return true;
  379|      0|        default:
  ------------------
  |  Branch (379:9): [True: 0, False: 5.20k]
  ------------------
  380|      0|            return false;
  381|  5.20k|    }
  382|  5.20k|}
print_asset:
  384|  5.04k|bool print_asset(const asset_t *asset, uint8_t network_id, char *out, size_t out_len) {
  385|  5.04k|    char asset_code[12 + 1];
  386|  5.04k|    char asset_issuer[3 + 2 + 4 + 1];
  387|  5.04k|    print_asset_name(asset, network_id, asset_code, sizeof(asset_code));
  388|       |
  389|  5.04k|    switch (asset->type) {
  390|     50|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (390:9): [True: 50, False: 4.99k]
  ------------------
  391|     50|            print_account_id(asset->alpha_num4.issuer, asset_issuer, sizeof(asset_issuer), 3, 4);
  392|     50|            break;
  393|     57|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (393:9): [True: 57, False: 4.98k]
  ------------------
  394|     57|            print_account_id(asset->alpha_num12.issuer, asset_issuer, sizeof(asset_issuer), 3, 4);
  395|     57|            break;
  396|  4.93k|        default:
  ------------------
  |  Branch (396:9): [True: 4.93k, False: 107]
  ------------------
  397|  4.93k|            break;
  398|  5.04k|    }
  399|  5.04k|    if (strlcpy(out, asset_code, out_len) >= out_len) {
  ------------------
  |  Branch (399:9): [True: 0, False: 5.04k]
  ------------------
  400|      0|        return false;
  401|      0|    }
  402|  5.04k|    if (asset->type != ASSET_TYPE_NATIVE) {
  ------------------
  |  Branch (402:9): [True: 107, False: 4.93k]
  ------------------
  403|    107|        if (strlcat(out, "@", out_len) >= out_len) {
  ------------------
  |  Branch (403:13): [True: 0, False: 107]
  ------------------
  404|      0|            return false;
  405|      0|        }
  406|    107|        if (strlcat(out, asset_issuer, out_len) >= out_len) {
  ------------------
  |  Branch (406:13): [True: 0, False: 107]
  ------------------
  407|      0|            return false;
  408|      0|        }
  409|    107|    }
  410|  5.04k|    return true;
  411|  5.04k|}
print_flag:
  413|    331|bool print_flag(const char *flag, char *out, size_t out_len) {
  414|    331|    if (out[0]) {
  ------------------
  |  Branch (414:9): [True: 180, False: 151]
  ------------------
  415|    180|        if (strlcat(out, ", ", out_len) >= out_len) {
  ------------------
  |  Branch (415:13): [True: 0, False: 180]
  ------------------
  416|      0|            return false;
  417|      0|        }
  418|    180|    }
  419|    331|    if (strlcat(out, flag, out_len) >= out_len) {
  ------------------
  |  Branch (419:9): [True: 0, False: 331]
  ------------------
  420|      0|        return false;
  421|      0|    }
  422|    331|    return true;
  423|    331|}
print_account_flags:
  425|    111|bool print_account_flags(uint32_t flags, char *out, size_t out_len) {
  426|    111|    explicit_bzero(out, out_len);
  427|    111|    if (flags & 0x01u) {
  ------------------
  |  Branch (427:9): [True: 43, False: 68]
  ------------------
  428|     43|        if (!print_flag("AUTH_REQUIRED", out, out_len)) {
  ------------------
  |  Branch (428:13): [True: 0, False: 43]
  ------------------
  429|      0|            return false;
  430|      0|        }
  431|     43|    }
  432|    111|    if (flags & 0x02u) {
  ------------------
  |  Branch (432:9): [True: 78, False: 33]
  ------------------
  433|     78|        if (!print_flag("AUTH_REVOCABLE", out, out_len)) {
  ------------------
  |  Branch (433:13): [True: 0, False: 78]
  ------------------
  434|      0|            return false;
  435|      0|        }
  436|     78|    }
  437|    111|    if (flags & 0x04u) {
  ------------------
  |  Branch (437:9): [True: 58, False: 53]
  ------------------
  438|     58|        if (!print_flag("AUTH_IMMUTABLE", out, out_len)) {
  ------------------
  |  Branch (438:13): [True: 0, False: 58]
  ------------------
  439|      0|            return false;
  440|      0|        }
  441|     58|    }
  442|    111|    if (flags & 0x08u) {
  ------------------
  |  Branch (442:9): [True: 41, False: 70]
  ------------------
  443|     41|        if (!print_flag("AUTH_CLAWBACK_ENABLED", out, out_len)) {
  ------------------
  |  Branch (443:13): [True: 0, False: 41]
  ------------------
  444|      0|            return false;
  445|      0|        }
  446|     41|    }
  447|    111|    return true;
  448|    111|}
print_trust_line_flags:
  450|     91|bool print_trust_line_flags(uint32_t flags, char *out, size_t out_len) {
  451|     91|    explicit_bzero(out, out_len);
  452|     91|    if (flags & AUTHORIZED_FLAG) {
  ------------------
  |  Branch (452:9): [True: 43, False: 48]
  ------------------
  453|     43|        if (!print_flag("AUTHORIZED", out, out_len)) {
  ------------------
  |  Branch (453:13): [True: 0, False: 43]
  ------------------
  454|      0|            return false;
  455|      0|        }
  456|     43|    }
  457|     91|    if (flags & AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG) {
  ------------------
  |  Branch (457:9): [True: 44, False: 47]
  ------------------
  458|     44|        if (!print_flag("AUTHORIZED_TO_MAINTAIN_LIABILITIES", out, out_len)) {
  ------------------
  |  Branch (458:13): [True: 0, False: 44]
  ------------------
  459|      0|            return false;
  460|      0|        }
  461|     44|    }
  462|     91|    if (flags & TRUSTLINE_CLAWBACK_ENABLED_FLAG) {
  ------------------
  |  Branch (462:9): [True: 24, False: 67]
  ------------------
  463|     24|        if (!print_flag("TRUSTLINE_CLAWBACK_ENABLED", out, out_len)) {
  ------------------
  |  Branch (463:13): [True: 0, False: 24]
  ------------------
  464|      0|            return false;
  465|      0|        }
  466|     24|    }
  467|     91|    return true;
  468|     91|}
print_allow_trust_flags:
  470|     32|bool print_allow_trust_flags(uint32_t flag, char *out, size_t out_len) {
  471|     32|    explicit_bzero(out, out_len);
  472|     32|    if (flag & AUTHORIZED_FLAG) {
  ------------------
  |  Branch (472:9): [True: 14, False: 18]
  ------------------
  473|     14|        if (strlcpy(out, "AUTHORIZED", out_len) >= out_len) {
  ------------------
  |  Branch (473:13): [True: 0, False: 14]
  ------------------
  474|      0|            return false;
  475|      0|        }
  476|     18|    } else if (flag & AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG) {
  ------------------
  |  Branch (476:16): [True: 4, False: 14]
  ------------------
  477|      4|        if (strlcpy(out, "AUTHORIZED_TO_MAINTAIN_LIABILITIES", out_len) >= out_len) {
  ------------------
  |  Branch (477:13): [True: 0, False: 4]
  ------------------
  478|      0|            return false;
  479|      0|        }
  480|     14|    } else {
  481|     14|        if (strlcpy(out, "UNAUTHORIZED", out_len) >= out_len) {
  ------------------
  |  Branch (481:13): [True: 0, False: 14]
  ------------------
  482|      0|            return false;
  483|      0|        }
  484|     14|    }
  485|     32|    return true;
  486|     32|}
print_amount:
  492|  4.98k|                  size_t out_len) {
  493|  4.98k|    uint8_t data[8] = {0};
  494|  44.8k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (494:21): [True: 39.8k, False: 4.98k]
  ------------------
  495|  39.8k|        data[i] = amount >> (8 * (7 - i));
  496|  39.8k|    }
  497|       |
  498|  4.98k|    if (!print_uint64(data, 7, out, out_len, true)) {
  ------------------
  |  Branch (498:9): [True: 0, False: 4.98k]
  ------------------
  499|      0|        return false;
  500|      0|    }
  501|       |
  502|  4.98k|    if (asset) {
  ------------------
  |  Branch (502:9): [True: 4.61k, False: 365]
  ------------------
  503|  4.61k|        if (strlcat(out, " ", out_len) >= out_len) {
  ------------------
  |  Branch (503:13): [True: 0, False: 4.61k]
  ------------------
  504|      0|            return false;
  505|      0|        }
  506|  4.61k|        size_t length = strlen(out);
  507|  4.61k|        if (!print_asset(asset, network_id, out + length, out_len - length)) {
  ------------------
  |  Branch (507:13): [True: 0, False: 4.61k]
  ------------------
  508|      0|            return false;
  509|  4.61k|        };
  510|  4.61k|    }
  511|  4.98k|    return true;
  512|  4.98k|}
is_printable_binary:
  514|     68|bool is_printable_binary(const uint8_t *str, size_t str_len) {
  515|  1.54k|    for (size_t i = 0; i < str_len; i++) {
  ------------------
  |  Branch (515:24): [True: 1.51k, False: 27]
  ------------------
  516|  1.51k|        if (str[i] > 0x7e || str[i] < 0x20) {
  ------------------
  |  Branch (516:13): [True: 13, False: 1.50k]
  |  Branch (516:30): [True: 28, False: 1.47k]
  ------------------
  517|     41|            return false;
  518|     41|        }
  519|  1.51k|    }
  520|     27|    return true;
  521|     68|}
add_decimal_point:
  661|  22.1k|bool add_decimal_point(char *out, size_t out_len, uint8_t decimals) {
  662|  22.1k|    if (out == NULL || out_len == 0) {
  ------------------
  |  Branch (662:9): [True: 0, False: 22.1k]
  |  Branch (662:24): [True: 0, False: 22.1k]
  ------------------
  663|      0|        return false;
  664|      0|    }
  665|  22.1k|    if (decimals == 0) {
  ------------------
  |  Branch (665:9): [True: 17.1k, False: 5.05k]
  ------------------
  666|  17.1k|        return true;
  667|  17.1k|    }
  668|       |
  669|  5.05k|    bool is_negative = out[0] == '-';
  670|  5.05k|    char *start = is_negative ? out + 1 : out;
  ------------------
  |  Branch (670:19): [True: 17, False: 5.03k]
  ------------------
  671|       |
  672|  5.05k|    size_t len = strlen(start);
  673|  5.05k|    if (len == 0) {
  ------------------
  |  Branch (673:9): [True: 0, False: 5.05k]
  ------------------
  674|      0|        return true;
  675|      0|    }
  676|       |
  677|  5.05k|    if (is_negative) {
  ------------------
  |  Branch (677:9): [True: 17, False: 5.03k]
  ------------------
  678|     17|        if (decimals >= out_len - 2) {
  ------------------
  |  Branch (678:13): [True: 0, False: 17]
  ------------------
  679|       |            // Not enough space to add decimal point and leading zero.
  680|      0|            return false;
  681|      0|        }
  682|  5.03k|    } else {
  683|  5.03k|        if (decimals >= out_len - 1) {
  ------------------
  |  Branch (683:13): [True: 0, False: 5.03k]
  ------------------
  684|       |            // Not enough space to add decimal point.
  685|      0|            return false;
  686|      0|        }
  687|  5.03k|    }
  688|       |
  689|  5.05k|    if (len <= decimals) {
  ------------------
  |  Branch (689:9): [True: 3.71k, False: 1.34k]
  ------------------
  690|       |        // Shift the number to the right and add leading zeros
  691|  3.71k|        memmove(start + decimals - len + 2, start, len + 1);
  692|  3.71k|        start[0] = '0';
  693|  3.71k|        start[1] = '.';
  694|  3.71k|        memset(start + 2, '0', decimals - len);
  695|  3.71k|    } else {
  696|       |        // Insert the decimal point at the appropriate position
  697|  1.34k|        memmove(start + len - decimals + 1, start + len - decimals, decimals + 1);
  698|  1.34k|        start[len - decimals] = '.';
  699|  1.34k|    }
  700|       |
  701|       |    // Remove trailing zeros after decimal point
  702|  5.05k|    char *p = start + strlen(start) - 1;
  703|  24.0k|    while (p > start && *p == '0') {
  ------------------
  |  Branch (703:12): [True: 24.0k, False: 0]
  |  Branch (703:25): [True: 18.9k, False: 5.05k]
  ------------------
  704|  18.9k|        *p-- = '\0';
  705|  18.9k|    }
  706|       |
  707|       |    // Remove decimal point if it's the last character
  708|  5.05k|    if (p > start && *p == '.') {
  ------------------
  |  Branch (708:9): [True: 5.05k, False: 0]
  |  Branch (708:22): [True: 2.64k, False: 2.40k]
  ------------------
  709|  2.64k|        *p = '\0';
  710|  2.64k|    }
  711|       |
  712|       |    // Add the negative sign back if necessary
  713|  5.05k|    if (is_negative && out[0] != '-') {
  ------------------
  |  Branch (713:9): [True: 17, False: 5.03k]
  |  Branch (713:24): [True: 0, False: 17]
  ------------------
  714|      0|        memmove(out + 1, out, strlen(out) + 1);
  715|      0|        out[0] = '-';
  716|      0|    }
  717|       |
  718|  5.05k|    return true;
  719|  5.05k|}
add_separator_to_number:
  721|  5.29k|bool add_separator_to_number(char *out, size_t out_len) {
  722|  5.29k|    if (out == NULL || out_len == 0) {
  ------------------
  |  Branch (722:9): [True: 0, False: 5.29k]
  |  Branch (722:24): [True: 0, False: 5.29k]
  ------------------
  723|      0|        return false;
  724|      0|    }
  725|       |
  726|  5.29k|    size_t length = strlen(out);
  727|  5.29k|    uint8_t negative = (out[0] == '-') ? 1 : 0;  // Check if the number is negative
  ------------------
  |  Branch (727:24): [True: 67, False: 5.23k]
  ------------------
  728|       |
  729|       |    // Find the position of the decimal point
  730|  5.29k|    char *decimal_point = strchr(out, '.');
  731|  5.29k|    size_t decimal_index = decimal_point ? decimal_point - out : length;
  ------------------
  |  Branch (731:28): [True: 2.36k, False: 2.93k]
  ------------------
  732|       |
  733|       |    // Calculate the new length of the string with the commas
  734|  5.29k|    size_t new_length = 0;
  735|  5.29k|    if (negative) {
  ------------------
  |  Branch (735:9): [True: 67, False: 5.23k]
  ------------------
  736|     67|        if (decimal_index < 2) {
  ------------------
  |  Branch (736:13): [True: 0, False: 67]
  ------------------
  737|       |            // The string is too short to have a negative number
  738|      0|            return false;
  739|      0|        }
  740|     67|        new_length = decimal_index + (decimal_index - 2) / 3;
  741|  5.23k|    } else {
  742|  5.23k|        if (decimal_index < 1) {
  ------------------
  |  Branch (742:13): [True: 0, False: 5.23k]
  ------------------
  743|       |            // The string is too short to have a positive number
  744|      0|            return false;
  745|      0|        }
  746|  5.23k|        new_length = decimal_index + (decimal_index - 1) / 3;
  747|  5.23k|    }
  748|       |
  749|       |    // If the new length is greater than the maximum length, return false
  750|  5.29k|    if (new_length >= out_len || new_length >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  5.29k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (750:9): [True: 0, False: 5.29k]
  |  Branch (750:34): [True: 0, False: 5.29k]
  ------------------
  751|      0|        return false;
  752|      0|    }
  753|       |
  754|  5.29k|    char temp[NUMBER_WITH_COMMAS_MAX_LENGTH];
  755|  5.29k|    if (strlcpy(temp, out, NUMBER_WITH_COMMAS_MAX_LENGTH) >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  5.29k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
                  if (strlcpy(temp, out, NUMBER_WITH_COMMAS_MAX_LENGTH) >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  5.29k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (755:9): [True: 0, False: 5.29k]
  ------------------
  756|      0|        return false;
  757|      0|    }
  758|       |
  759|  5.29k|    temp[new_length] = '\0';  // Set the end of the new string
  760|       |
  761|       |    // Start from the end of the string and move the digits to their new positions
  762|  27.3k|    for (int i = decimal_index - 1, j = new_length - 1; i >= 0; i--, j--) {
  ------------------
  |  Branch (762:57): [True: 22.0k, False: 5.29k]
  ------------------
  763|  22.0k|        temp[j] = out[i];
  764|       |
  765|       |        // If the current position is a multiple of 3 and it's not the first digit, add a comma
  766|  22.0k|        if ((decimal_index - i) % 3 == 0 && i != negative && j > 0) {
  ------------------
  |  Branch (766:13): [True: 5.71k, False: 16.3k]
  |  Branch (766:45): [True: 5.03k, False: 674]
  |  Branch (766:62): [True: 4.99k, False: 44]
  ------------------
  767|  4.99k|            temp[--j] = ',';
  768|  4.99k|        }
  769|  22.0k|    }
  770|       |
  771|       |    // If there is a decimal point, append the part after the decimal point
  772|  5.29k|    if (decimal_point) {
  ------------------
  |  Branch (772:9): [True: 2.36k, False: 2.93k]
  ------------------
  773|  2.36k|        if (strlcpy(temp + new_length, decimal_point, NUMBER_WITH_COMMAS_MAX_LENGTH - new_length) >=
  ------------------
  |  |   13|  2.36k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (773:13): [True: 0, False: 2.36k]
  ------------------
  774|  2.36k|            NUMBER_WITH_COMMAS_MAX_LENGTH - new_length) {
  ------------------
  |  |   13|  2.36k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  775|      0|            return false;
  776|      0|        }
  777|  2.36k|    }
  778|       |
  779|  5.29k|    if (strlcpy(out, temp, out_len) >= out_len) {
  ------------------
  |  Branch (779:9): [True: 0, False: 5.29k]
  ------------------
  780|      0|        return false;
  781|      0|    }
  782|       |
  783|  5.29k|    return true;
  784|  5.29k|}
print_int32:
  790|    105|                 bool add_separator) {
  791|    105|    return int256_to_decimal(value, 4, out, out_len) && add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (791:12): [True: 105, False: 0]
  |  Branch (791:57): [True: 105, False: 0]
  ------------------
  792|    105|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (792:13): [True: 69, False: 36]
  |  Branch (792:31): [True: 36, False: 0]
  ------------------
  793|    105|}
print_uint32:
  799|     17|                  bool add_separator) {
  800|     17|    return uint256_to_decimal(value, 4, out, out_len) &&
  ------------------
  |  Branch (800:12): [True: 17, False: 0]
  ------------------
  801|     17|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (801:12): [True: 17, False: 0]
  ------------------
  802|     17|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (802:13): [True: 0, False: 17]
  |  Branch (802:31): [True: 17, False: 0]
  ------------------
  803|     17|}
print_int64:
  809|     59|                 bool add_separator) {
  810|     59|    return int256_to_decimal(value, 8, out, out_len) && add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (810:12): [True: 59, False: 0]
  |  Branch (810:57): [True: 59, False: 0]
  ------------------
  811|     59|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (811:13): [True: 20, False: 39]
  |  Branch (811:31): [True: 39, False: 0]
  ------------------
  812|     59|}
print_uint64:
  818|  21.8k|                  bool add_separator) {
  819|  21.8k|    return uint256_to_decimal(value, 8, out, out_len) &&
  ------------------
  |  Branch (819:12): [True: 21.8k, False: 0]
  ------------------
  820|  21.8k|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (820:12): [True: 21.8k, False: 0]
  ------------------
  821|  21.8k|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (821:13): [True: 16.8k, False: 5.01k]
  |  Branch (821:31): [True: 5.01k, False: 0]
  ------------------
  822|  21.8k|}
print_int128:
  828|     83|                  bool add_separator) {
  829|     83|    return int256_to_decimal(value, 16, out, out_len) &&
  ------------------
  |  Branch (829:12): [True: 83, False: 0]
  ------------------
  830|     83|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (830:12): [True: 83, False: 0]
  ------------------
  831|     83|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (831:13): [True: 0, False: 83]
  |  Branch (831:31): [True: 83, False: 0]
  ------------------
  832|     83|}
print_uint128:
  838|     28|                   bool add_separator) {
  839|     28|    return uint256_to_decimal(value, 16, out, out_len) &&
  ------------------
  |  Branch (839:12): [True: 28, False: 0]
  ------------------
  840|     28|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (840:12): [True: 28, False: 0]
  ------------------
  841|     28|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (841:13): [True: 0, False: 28]
  |  Branch (841:31): [True: 28, False: 0]
  ------------------
  842|     28|}
print_int256:
  848|     52|                  bool add_separator) {
  849|     52|    return int256_to_decimal(value, 32, out, out_len) &&
  ------------------
  |  Branch (849:12): [True: 52, False: 0]
  ------------------
  850|     52|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (850:12): [True: 52, False: 0]
  ------------------
  851|     52|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (851:13): [True: 0, False: 52]
  |  Branch (851:31): [True: 52, False: 0]
  ------------------
  852|     52|}
print_uint256:
  858|     32|                   bool add_separator) {
  859|     32|    return uint256_to_decimal(value, 32, out, out_len) &&
  ------------------
  |  Branch (859:12): [True: 32, False: 0]
  ------------------
  860|     32|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (860:12): [True: 32, False: 0]
  ------------------
  861|     32|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (861:13): [True: 0, False: 32]
  |  Branch (861:31): [True: 32, False: 0]
  ------------------
  862|     32|}
print_scv_symbol:
  864|     25|bool print_scv_symbol(const scv_symbol_t *scv_symbol, char *out, size_t out_len) {
  865|     25|    if (scv_symbol == NULL || out == NULL) {
  ------------------
  |  Branch (865:9): [True: 0, False: 25]
  |  Branch (865:31): [True: 0, False: 25]
  ------------------
  866|      0|        return false;
  867|      0|    }
  868|     25|    if (scv_symbol->size > SCV_SYMBOL_MAX_SIZE || scv_symbol->size > out_len - 1) {
  ------------------
  |  |   55|     50|#define SCV_SYMBOL_MAX_SIZE     32
  ------------------
  |  Branch (868:9): [True: 0, False: 25]
  |  Branch (868:51): [True: 0, False: 25]
  ------------------
  869|      0|        return false;
  870|      0|    }
  871|     25|    if (scv_symbol->size == 0) {
  ------------------
  |  Branch (871:9): [True: 12, False: 13]
  ------------------
  872|       |        // print empty symbol
  873|     12|        if (strlcpy(out, "[empty symbol]", out_len) >= out_len) {
  ------------------
  |  Branch (873:13): [True: 0, False: 12]
  ------------------
  874|      0|            return false;
  875|      0|        }
  876|     12|        return true;
  877|     12|    }
  878|     13|    if (!is_printable_binary(scv_symbol->symbol, scv_symbol->size)) {
  ------------------
  |  Branch (878:9): [True: 1, False: 12]
  ------------------
  879|      1|        return false;
  880|      1|    }
  881|     12|    if (!print_string(out, out_len, scv_symbol->symbol, scv_symbol->size)) {
  ------------------
  |  Branch (881:9): [True: 0, False: 12]
  ------------------
  882|      0|        return false;
  883|      0|    }
  884|     12|    return true;
  885|     12|}
print_scv_string:
  887|    114|bool print_scv_string(const scv_string_t *scv_string, char *out, size_t out_len) {
  888|    114|    if (scv_string == NULL || out == NULL) {
  ------------------
  |  Branch (888:9): [True: 0, False: 114]
  |  Branch (888:31): [True: 0, False: 114]
  ------------------
  889|      0|        return false;
  890|      0|    }
  891|       |
  892|    114|    if (scv_string->size == 0) {
  ------------------
  |  Branch (892:9): [True: 82, False: 32]
  ------------------
  893|       |        // print empty symbol
  894|     82|        if (strlcpy(out, "[empty string]", out_len) >= out_len) {
  ------------------
  |  Branch (894:13): [True: 0, False: 82]
  ------------------
  895|      0|            return false;
  896|      0|        }
  897|     82|        return true;
  898|     82|    }
  899|       |
  900|       |    // if the string is not printable, print [unprintable string]
  901|     32|    if (!is_printable_binary(scv_string->string, scv_string->size)) {
  ------------------
  |  Branch (901:9): [True: 22, False: 10]
  ------------------
  902|     22|        if (strlcpy(out, "[unprintable string]", out_len) >= out_len) {
  ------------------
  |  Branch (902:13): [True: 0, False: 22]
  ------------------
  903|      0|            return false;
  904|      0|        }
  905|     22|        return true;
  906|     22|    }
  907|       |
  908|     10|    size_t copy_len = scv_string->size;
  909|       |
  910|       |    // If the output buffer is large enough to hold the entire scv_string, copy it directly and
  911|       |    // append a null terminator.
  912|     10|    if (out_len > copy_len) {
  ------------------
  |  Branch (912:9): [True: 1, False: 9]
  ------------------
  913|      1|        memcpy(out, scv_string->string, copy_len);
  914|      1|        out[copy_len] = '\0';  // Ensure the string is null-terminated.
  915|      9|    } else {
  916|      9|        if (out_len < 3) {
  ------------------
  |  Branch (916:13): [True: 0, False: 9]
  ------------------
  917|      0|            return false;
  918|      0|        }
  919|       |        // Calculate the lengths of the beginning and end parts that can be displayed.
  920|      9|        size_t dots_len = 2;                 // The length of two dots.
  921|      9|        size_t available_len = out_len - 1;  // Subtract 1 to reserve space for the null terminator.
  922|      9|        size_t start_copy_len = available_len / 2;
  923|      9|        size_t end_copy_len = available_len - start_copy_len - dots_len;
  924|       |
  925|       |        // Copy the beginning part of the string.
  926|      9|        memcpy(out, scv_string->string, start_copy_len);
  927|      9|        out[start_copy_len] = '.';
  928|      9|        out[start_copy_len + 1] = '.';
  929|       |
  930|       |        // Copy the end part of the string if there is space for it after the dots.
  931|      9|        if (end_copy_len > 0) {
  ------------------
  |  Branch (931:13): [True: 9, False: 0]
  ------------------
  932|      9|            memcpy(out + start_copy_len + dots_len,
  933|      9|                   scv_string->string + copy_len - end_copy_len,
  934|      9|                   end_copy_len);
  935|      9|        }
  936|       |
  937|       |        // Ensure the output string is null-terminated by placing a null character at the end of the
  938|       |        // buffer.
  939|      9|        out[out_len - 1] = '\0';
  940|      9|    }
  941|       |
  942|     10|    return true;
  943|     10|}
print_string:
  945|  1.05k|bool print_string(char *out, size_t out_len, const uint8_t *src, size_t src_size) {
  946|  1.05k|    if (out == NULL || src == NULL || out_len == 0) {
  ------------------
  |  Branch (946:9): [True: 0, False: 1.05k]
  |  Branch (946:24): [True: 0, False: 1.05k]
  |  Branch (946:39): [True: 0, False: 1.05k]
  ------------------
  947|      0|        return false;
  948|      0|    }
  949|  1.05k|    if (src_size + 1 > out_len) {
  ------------------
  |  Branch (949:9): [True: 0, False: 1.05k]
  ------------------
  950|      0|        return false;
  951|      0|    }
  952|  1.05k|    memcpy(out, src, src_size);
  953|  1.05k|    out[src_size] = '\0';
  954|  1.05k|    return true;
  955|  1.05k|}
print_price:
  962|    147|                 size_t out_len) {
  963|    147|    uint64_t scaled_price = ((uint64_t) price->n * 10000000) / price->d;
  964|    147|    if (!print_amount(scaled_price, NULL, network_id, out, out_len)) {
  ------------------
  |  Branch (964:9): [True: 0, False: 147]
  ------------------
  965|      0|        return false;
  966|      0|    }
  967|       |
  968|    147|    if (asset_a != NULL && asset_b != NULL) {
  ------------------
  |  Branch (968:9): [True: 83, False: 64]
  |  Branch (968:28): [True: 83, False: 0]
  ------------------
  969|     83|        char tmp_asset_code[ASSET_CODE_MAX_LENGTH] = {0};
  970|     83|        if (strlcat(out, " ", out_len) >= out_len ||
  ------------------
  |  Branch (970:13): [True: 0, False: 83]
  ------------------
  971|     83|            !print_asset_name(asset_a, network_id, tmp_asset_code, sizeof(tmp_asset_code)) ||
  ------------------
  |  Branch (971:13): [True: 0, False: 83]
  ------------------
  972|     83|            strlcat(out, tmp_asset_code, out_len) >= out_len ||
  ------------------
  |  Branch (972:13): [True: 0, False: 83]
  ------------------
  973|     83|            strlcat(out, "/", out_len) >= out_len ||
  ------------------
  |  Branch (973:13): [True: 0, False: 83]
  ------------------
  974|     83|            !print_asset_name(asset_b, network_id, tmp_asset_code, sizeof(tmp_asset_code)) ||
  ------------------
  |  Branch (974:13): [True: 0, False: 83]
  ------------------
  975|     83|            strlcat(out, tmp_asset_code, out_len) >= out_len) {
  ------------------
  |  Branch (975:13): [True: 0, False: 83]
  ------------------
  976|      0|            return false;
  977|      0|        }
  978|     83|    }
  979|    147|    return true;
  980|    147|}
printer.c:print_summary:
  138|    401|                          uint8_t num_chars_r) {
  139|    401|    uint8_t result_len = num_chars_l + num_chars_r + 2;
  140|    401|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (140:9): [True: 0, False: 401]
  ------------------
  141|      0|        return false;
  142|      0|    }
  143|    401|    uint16_t in_len = strlen(in);
  144|    401|    if (in_len > result_len) {
  ------------------
  |  Branch (144:9): [True: 401, False: 0]
  ------------------
  145|    401|        memcpy(out, in, num_chars_l);
  146|    401|        out[num_chars_l] = '.';
  147|    401|        out[num_chars_l + 1] = '.';
  148|    401|        memcpy(out + num_chars_l + 2, in + in_len - num_chars_r, num_chars_r);
  149|    401|        out[result_len] = '\0';
  150|    401|    } else {
  151|      0|        memcpy(out, in, in_len);
  152|      0|        out[in_len] = '\0';
  153|      0|    }
  154|    401|    return true;
  155|    401|}
printer.c:int256_to_decimal:
  595|    299|static bool int256_to_decimal(const uint8_t *value, size_t value_len, char *out, size_t out_len) {
  596|    299|    if (value_len > INT256_LENGTH) {
  ------------------
  |  |    9|    299|#define INT256_LENGTH                     32
  ------------------
  |  Branch (596:9): [True: 0, False: 299]
  ------------------
  597|       |        // Value length is bigger than INT256_LENGTH
  598|      0|        return false;
  599|      0|    }
  600|       |
  601|    299|    bool is_negative = (value[0] & 0x80) != 0;
  602|    299|    uint8_t n[INT256_LENGTH] = {0};
  603|       |
  604|    299|    if (is_negative) {
  ------------------
  |  Branch (604:9): [True: 84, False: 215]
  ------------------
  605|       |        // Compute the absolute value using two's complement
  606|     84|        bool carry = true;
  607|  1.80k|        for (size_t i = value_len; i-- > 0;) {
  ------------------
  |  Branch (607:36): [True: 1.71k, False: 84]
  ------------------
  608|  1.71k|            n[INT256_LENGTH - value_len + i] = ~value[i] + carry;
  ------------------
  |  |    9|  1.71k|#define INT256_LENGTH                     32
  ------------------
  609|  1.71k|            carry = carry && (value[i] == 0);
  ------------------
  |  Branch (609:21): [True: 958, False: 758]
  |  Branch (609:30): [True: 874, False: 84]
  ------------------
  610|  1.71k|        }
  611|    215|    } else {
  612|    215|        memcpy(n + INT256_LENGTH - value_len, value, value_len);
  ------------------
  |  |    9|    215|#define INT256_LENGTH                     32
  ------------------
  613|    215|    }
  614|       |
  615|    299|    char *p = out + out_len;
  616|    299|    size_t result_len = 0;
  617|       |
  618|  6.29k|    do {
  619|  6.29k|        if (p == out) {
  ------------------
  |  Branch (619:13): [True: 0, False: 6.29k]
  ------------------
  620|       |            // Not enough space in the output buffer
  621|      0|            return false;
  622|      0|        }
  623|       |
  624|  6.29k|        uint32_t remainder = 0;
  625|   207k|        for (size_t i = 0; i < INT256_LENGTH; ++i) {
  ------------------
  |  |    9|   207k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (625:28): [True: 201k, False: 6.29k]
  ------------------
  626|   201k|            uint32_t temp = (remainder << 8) | n[i];
  627|   201k|            n[i] = temp / 10;
  628|   201k|            remainder = temp % 10;
  629|   201k|        }
  630|       |
  631|  6.29k|        *--p = '0' + remainder;
  632|  6.29k|        result_len++;
  633|  6.29k|    } while (!allzeroes(n, INT256_LENGTH));
  ------------------
  |  |    9|  6.29k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (633:14): [True: 5.99k, False: 299]
  ------------------
  634|       |
  635|    299|    if (is_negative) {
  ------------------
  |  Branch (635:9): [True: 84, False: 215]
  ------------------
  636|     84|        if (p == out) {
  ------------------
  |  Branch (636:13): [True: 0, False: 84]
  ------------------
  637|       |            // Not enough space in the output buffer
  638|      0|            return false;
  639|      0|        }
  640|     84|        *--p = '-';
  641|     84|        result_len++;
  642|     84|    }
  643|       |
  644|    299|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (644:9): [True: 0, False: 299]
  ------------------
  645|       |        // Not enough space to hold the result and \0.
  646|      0|        return false;
  647|      0|    }
  648|       |
  649|    299|    memmove(out, p, result_len);
  650|    299|    out[result_len] = '\0';
  651|       |
  652|       |    // Clear the rest of the 'out' array
  653|       |    // Generally speaking, this is unnecessary,
  654|       |    // but handler_get_app_configuration requires that it must be followed by `\0`.
  655|    299|    if (result_len + 1 < out_len) {
  ------------------
  |  Branch (655:9): [True: 299, False: 0]
  ------------------
  656|    299|        memset(out + result_len + 1, 0, out_len - result_len - 1);
  657|    299|    }
  658|    299|    return true;
  659|    299|}
printer.c:allzeroes:
  523|   110k|static int allzeroes(const void *buf, size_t n) {
  524|   110k|    uint8_t *p = (uint8_t *) buf;
  525|  3.29M|    for (size_t i = 0; i < n; ++i) {
  ------------------
  |  Branch (525:24): [True: 3.27M, False: 22.1k]
  ------------------
  526|  3.27M|        if (p[i]) {
  ------------------
  |  Branch (526:13): [True: 88.0k, False: 3.18M]
  ------------------
  527|  88.0k|            return 0;
  528|  88.0k|        }
  529|  3.27M|    }
  530|  22.1k|    return 1;
  531|   110k|}
printer.c:uint256_to_decimal:
  533|  21.8k|static bool uint256_to_decimal(const uint8_t *value, size_t value_len, char *out, size_t out_len) {
  534|  21.8k|    if (value_len > INT256_LENGTH) {
  ------------------
  |  |    9|  21.8k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (534:9): [True: 0, False: 21.8k]
  ------------------
  535|      0|        return false;
  536|      0|    }
  537|       |
  538|  21.8k|    uint16_t n[16] = {0};
  539|       |    // Copy and right-align the number
  540|  21.8k|    memcpy((uint8_t *) n + INT256_LENGTH - value_len, value, value_len);
  ------------------
  |  |    9|  21.8k|#define INT256_LENGTH                     32
  ------------------
  541|       |
  542|       |    // Special case when value is 0
  543|  21.8k|    if (allzeroes(n, sizeof(n))) {
  ------------------
  |  Branch (543:9): [True: 3.14k, False: 18.7k]
  ------------------
  544|  3.14k|        if (out_len < 2) {
  ------------------
  |  Branch (544:13): [True: 0, False: 3.14k]
  ------------------
  545|       |            // Not enough space to hold "0" and \0.
  546|      0|            return false;
  547|      0|        }
  548|  3.14k|        out[0] = '0';
  549|  3.14k|        out[1] = '\0';
  550|  3.14k|        return true;
  551|  3.14k|    }
  552|       |
  553|       |    // Swap the byte order of each uint16_t element in the array
  554|   318k|    for (int i = 0; i < 16; i++) {
  ------------------
  |  Branch (554:21): [True: 300k, False: 18.7k]
  ------------------
  555|   300k|        n[i] = __builtin_bswap16(n[i]);
  556|   300k|    }
  557|       |
  558|  18.7k|    size_t result_len = 0;
  559|  18.7k|    int pos = out_len;
  560|       |
  561|  82.0k|    while (!allzeroes(n, sizeof(n))) {
  ------------------
  |  Branch (561:12): [True: 63.2k, False: 18.7k]
  ------------------
  562|  63.2k|        if (pos == 0) {
  ------------------
  |  Branch (562:13): [True: 0, False: 63.2k]
  ------------------
  563|      0|            return false;
  564|      0|        }
  565|  63.2k|        pos--;
  566|  63.2k|        result_len++;
  567|       |
  568|  63.2k|        uint32_t carry = 0;
  569|  1.07M|        for (int i = 0; i < 16; i++) {
  ------------------
  |  Branch (569:25): [True: 1.01M, False: 63.2k]
  ------------------
  570|  1.01M|            uint32_t digit = ((carry << 16) | n[i]);
  571|  1.01M|            n[i] = digit / 10;
  572|  1.01M|            carry = digit % 10;
  573|  1.01M|        }
  574|  63.2k|        out[pos] = '0' + carry;
  575|  63.2k|    }
  576|       |
  577|  18.7k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (577:9): [True: 0, False: 18.7k]
  ------------------
  578|       |        // Not enough space to hold the result and \0.
  579|      0|        return false;
  580|      0|    }
  581|       |
  582|       |    // Move the result to the beginning of the output buffer
  583|  18.7k|    memmove(out, out + pos, result_len);
  584|  18.7k|    out[result_len] = '\0';
  585|       |
  586|       |    // Clear the rest of the 'out' array
  587|       |    // Generally speaking, this is unnecessary,
  588|       |    // but handler_get_app_configuration requires that it must be followed by `\0`.
  589|  18.7k|    if (result_len + 1 < out_len) {
  ------------------
  |  Branch (589:9): [True: 18.7k, False: 0]
  ------------------
  590|  18.7k|        memset(out + result_len + 1, 0, out_len - result_len - 1);
  591|  18.7k|    }
  592|  18.7k|    return true;
  593|  18.7k|}

