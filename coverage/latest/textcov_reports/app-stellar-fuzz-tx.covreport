buffer_can_read:
   28|  42.2M|{
   29|  42.2M|    return buffer->size - buffer->offset >= n;
   30|  42.2M|}
buffer_seek_cur:
   44|  74.3M|{
   45|  74.3M|    if (buffer->offset + offset < buffer->offset ||  // overflow
  ------------------
  |  Branch (45:9): [True: 0, False: 74.3M]
  ------------------
   46|  74.3M|        buffer->offset + offset > buffer->size) {    // exceed buffer size
  ------------------
  |  Branch (46:9): [True: 561, False: 74.3M]
  ------------------
   47|    561|        return false;
   48|    561|    }
   49|       |
   50|  74.3M|    buffer->offset += offset;
   51|       |
   52|  74.3M|    return true;
   53|  74.3M|}
buffer_read_u32:
   97|  41.4M|{
   98|  41.4M|    if (!buffer_can_read(buffer, 4)) {
  ------------------
  |  Branch (98:9): [True: 2.24k, False: 41.4M]
  ------------------
   99|  2.24k|        *value = 0;
  100|       |
  101|  2.24k|        return false;
  102|  2.24k|    }
  103|       |
  104|  41.4M|    *value = ((endianness == BE) ? read_u32_be(buffer->ptr, buffer->offset)
  ------------------
  |  Branch (104:15): [True: 41.4M, False: 0]
  ------------------
  105|  41.4M|                                 : read_u32_le(buffer->ptr, buffer->offset));
  106|       |
  107|  41.4M|    buffer_seek_cur(buffer, 4);
  108|       |
  109|  41.4M|    return true;
  110|  41.4M|}
buffer_read_u64:
  113|  27.0k|{
  114|  27.0k|    if (!buffer_can_read(buffer, 8)) {
  ------------------
  |  Branch (114:9): [True: 29, False: 27.0k]
  ------------------
  115|     29|        *value = 0;
  116|       |
  117|     29|        return false;
  118|     29|    }
  119|       |
  120|  27.0k|    *value = ((endianness == BE) ? read_u64_be(buffer->ptr, buffer->offset)
  ------------------
  |  Branch (120:15): [True: 27.0k, False: 0]
  ------------------
  121|  27.0k|                                 : read_u64_le(buffer->ptr, buffer->offset));
  122|       |
  123|  27.0k|    buffer_seek_cur(buffer, 8);
  124|       |
  125|  27.0k|    return true;
  126|  27.0k|}

format_hex:
  157|  1.32k|{
  158|  1.32k|    if (out_len < 2 * in_len + 1) {
  ------------------
  |  Branch (158:9): [True: 0, False: 1.32k]
  ------------------
  159|      0|        return -1;
  160|      0|    }
  161|       |
  162|  1.32k|    const char hex[]   = "0123456789ABCDEF";
  163|  1.32k|    size_t     i       = 0;
  164|  1.32k|    int        written = 0;
  165|       |
  166|  45.6k|    while (i < in_len && (i * 2 + (2 + 1)) <= out_len) {
  ------------------
  |  Branch (166:12): [True: 44.2k, False: 1.32k]
  |  Branch (166:26): [True: 44.2k, False: 0]
  ------------------
  167|  44.2k|        uint8_t high_nibble = (in[i] & 0xF0) >> 4;
  168|  44.2k|        *out                = hex[high_nibble];
  169|  44.2k|        out++;
  170|       |
  171|  44.2k|        uint8_t low_nibble = in[i] & 0x0F;
  172|  44.2k|        *out               = hex[low_nibble];
  173|  44.2k|        out++;
  174|       |
  175|  44.2k|        i++;
  176|  44.2k|        written += 2;
  177|  44.2k|    }
  178|       |
  179|  1.32k|    *out = '\0';
  180|       |
  181|  1.32k|    return written + 1;
  182|  1.32k|}

read_u32_be:
   27|  41.4M|{
   28|  41.4M|    return (uint32_t) ptr[offset + 0] << 24 |  //
   29|  41.4M|           (uint32_t) ptr[offset + 1] << 16 |  //
   30|  41.4M|           (uint32_t) ptr[offset + 2] << 8 |   //
   31|  41.4M|           (uint32_t) ptr[offset + 3] << 0;
   32|  41.4M|}
read_u64_be:
   35|  27.0k|{
   36|  27.0k|    return (uint64_t) ptr[offset + 0] << 56 |  //
   37|  27.0k|           (uint64_t) ptr[offset + 1] << 48 |  //
   38|  27.0k|           (uint64_t) ptr[offset + 2] << 40 |  //
   39|  27.0k|           (uint64_t) ptr[offset + 3] << 32 |  //
   40|  27.0k|           (uint64_t) ptr[offset + 4] << 24 |  //
   41|  27.0k|           (uint64_t) ptr[offset + 5] << 16 |  //
   42|  27.0k|           (uint64_t) ptr[offset + 6] << 8 |   //
   43|  27.0k|           (uint64_t) ptr[offset + 7] << 0;
   44|  27.0k|}

LLVMFuzzerTestOneInput:
   23|  22.0k|int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   24|  22.0k|    envelope_t envelope;
   25|  22.0k|    bool data_exists = true;
   26|  22.0k|    bool is_op_header = false;
   27|  22.0k|    char detail_caption[DETAIL_CAPTION_MAX_LENGTH];
   28|  22.0k|    char detail_value[DETAIL_VALUE_MAX_LENGTH];
   29|  22.0k|    uint8_t signing_key[] = {0xe9, 0x33, 0x88, 0xbb, 0xfd, 0x2f, 0xbd, 0x11, 0x80, 0x6d, 0xd0,
   30|  22.0k|                             0xbd, 0x59, 0xce, 0xa9, 0x7,  0x9e, 0x7c, 0xc7, 0xc,  0xe7, 0xb1,
   31|  22.0k|                             0xe1, 0x54, 0xf1, 0x14, 0xcd, 0xfe, 0x4e, 0x46, 0x6e, 0xcd};
   32|       |
   33|  22.0k|    memset(&envelope, 0, sizeof(envelope_t));
   34|  22.0k|    if (parse_transaction_envelope(data, size, &envelope)) {
  ------------------
  |  Branch (34:9): [True: 6.44k, False: 15.6k]
  ------------------
   35|  6.44k|        formatter_data_t tx_fdata = {
   36|  6.44k|            .raw_data = data,
   37|  6.44k|            .raw_data_len = size,
   38|  6.44k|            .envelope = &envelope,
   39|  6.44k|            .caption = detail_caption,
   40|  6.44k|            .value = detail_value,
   41|  6.44k|            .signing_key = signing_key,
   42|  6.44k|            .caption_len = DETAIL_CAPTION_MAX_LENGTH,
  ------------------
  |  |    9|  6.44k|#define DETAIL_CAPTION_MAX_LENGTH 21
  ------------------
   43|  6.44k|            .value_len = DETAIL_VALUE_MAX_LENGTH,
  ------------------
  |  |   10|  6.44k|#define DETAIL_VALUE_MAX_LENGTH   105
  ------------------
   44|  6.44k|            .display_sequence = true,
   45|  6.44k|        };
   46|  6.44k|        reset_formatter();
   47|       |
   48|   196k|        while (true) {
   49|   196k|            if (!get_next_data(&tx_fdata, true, &data_exists, &is_op_header)) {
  ------------------
  |  Branch (49:17): [True: 324, False: 196k]
  ------------------
   50|    324|                break;
   51|    324|            }
   52|       |
   53|   196k|            if (!data_exists) {
  ------------------
  |  Branch (53:17): [True: 6.12k, False: 190k]
  ------------------
   54|  6.12k|                break;
   55|  6.12k|            }
   56|   196k|        }
   57|  6.44k|    }
   58|       |
   59|  22.0k|    memset(&envelope, 0, sizeof(envelope_t));
   60|  22.0k|    if (parse_soroban_authorization_envelope(data, size, &envelope)) {
  ------------------
  |  Branch (60:9): [True: 4.18k, False: 17.9k]
  ------------------
   61|  4.18k|        formatter_data_t auth_fdata = {
   62|  4.18k|            .raw_data = data,
   63|  4.18k|            .raw_data_len = size,
   64|  4.18k|            .envelope = &envelope,
   65|  4.18k|            .caption = detail_caption,
   66|  4.18k|            .value = detail_value,
   67|  4.18k|            .signing_key = signing_key,
   68|  4.18k|            .caption_len = DETAIL_CAPTION_MAX_LENGTH,
  ------------------
  |  |    9|  4.18k|#define DETAIL_CAPTION_MAX_LENGTH 21
  ------------------
   69|  4.18k|            .value_len = DETAIL_VALUE_MAX_LENGTH,
  ------------------
  |  |   10|  4.18k|#define DETAIL_VALUE_MAX_LENGTH   105
  ------------------
   70|  4.18k|            .display_sequence = true,
   71|  4.18k|            .plugin_check_presence = &plugin_check_presence,
   72|  4.18k|            .plugin_init_contract = &plugin_init_contract,
   73|  4.18k|            .plugin_query_data_pair_count = &plugin_query_data_pair_count,
   74|  4.18k|            .plugin_query_data_pair = &plugin_query_data_pair,
   75|  4.18k|        };
   76|       |
   77|  4.18k|        reset_formatter();
   78|       |
   79|  80.8k|        while (true) {
   80|  80.8k|            if (!get_next_data(&auth_fdata, true, &data_exists, &is_op_header)) {
  ------------------
  |  Branch (80:17): [True: 1.02k, False: 79.8k]
  ------------------
   81|  1.02k|                break;
   82|  1.02k|            }
   83|       |
   84|  79.8k|            if (!data_exists) {
  ------------------
  |  Branch (84:17): [True: 3.15k, False: 76.6k]
  ------------------
   85|  3.15k|                break;
   86|  3.15k|            }
   87|  79.8k|        }
   88|  4.18k|    }
   89|       |
   90|  22.0k|    return 0;
   91|  22.0k|}
fuzz_tx.c:plugin_check_presence:
   93|  29.4k|static bool plugin_check_presence(const uint8_t *contract_address) {
   94|  29.4k|    uint8_t expected[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   95|  29.4k|                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   96|  29.4k|                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
   97|  29.4k|    return memcmp(contract_address, expected, 32) == 0;
   98|  29.4k|}
fuzz_tx.c:plugin_init_contract:
  100|  3.86k|stellar_plugin_result_t plugin_init_contract(const uint8_t *contract_address) {
  101|       |    // Build-in token plugin
  102|  3.86k|    if (plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (102:9): [True: 3.86k, False: 0]
  ------------------
  103|  3.86k|        return STELLAR_PLUGIN_RESULT_OK;
  104|  3.86k|    }
  105|      0|    return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  106|  3.86k|}
fuzz_tx.c:plugin_query_data_pair_count:
  109|  3.86k|                                                     uint8_t *data_pair_count) {
  110|       |    // Build-in token plugin
  111|  3.86k|    if (plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (111:9): [True: 3.86k, False: 0]
  ------------------
  112|  3.86k|        *data_pair_count = 3;
  113|  3.86k|        return STELLAR_PLUGIN_RESULT_OK;
  114|  3.86k|    }
  115|      0|    return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  116|  3.86k|}
fuzz_tx.c:plugin_query_data_pair:
  123|  11.5k|                                               uint8_t value_len) {
  124|  11.5k|    if (!plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (124:9): [True: 0, False: 11.5k]
  ------------------
  125|      0|        return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  126|      0|    }
  127|  11.5k|    switch (data_pair_index) {
  128|  3.86k|        case 0:
  ------------------
  |  Branch (128:9): [True: 3.86k, False: 7.73k]
  ------------------
  129|  3.86k|            strncpy(caption, "caption 0", caption_len);
  130|  3.86k|            strncpy(value, "value 0", value_len);
  131|  3.86k|            break;
  132|  3.86k|        case 1:
  ------------------
  |  Branch (132:9): [True: 3.86k, False: 7.73k]
  ------------------
  133|  3.86k|            strncpy(caption, "caption 1", caption_len);
  134|  3.86k|            strncpy(value, "value 1", value_len);
  135|  3.86k|            break;
  136|  3.86k|        case 2:
  ------------------
  |  Branch (136:9): [True: 3.86k, False: 7.73k]
  ------------------
  137|  3.86k|            strncpy(caption, "caption 2", caption_len);
  138|  3.86k|            strncpy(value, "value 2", value_len);
  139|  3.86k|            break;
  140|      0|        default:
  ------------------
  |  Branch (140:9): [True: 0, False: 11.5k]
  ------------------
  141|      0|            return STELLAR_PLUGIN_RESULT_ERROR;
  142|  11.5k|    }
  143|  11.5k|    return STELLAR_PLUGIN_RESULT_OK;
  144|  11.5k|}

base32_encode:
   64|  54.3k|int base32_encode(const uint8_t *data, int length, uint8_t *result, int buf_size) {
   65|  54.3k|    if (length < 0 || length > (1 << 28)) {
  ------------------
  |  Branch (65:9): [True: 0, False: 54.3k]
  |  Branch (65:23): [True: 0, False: 54.3k]
  ------------------
   66|      0|        return -1;
   67|      0|    }
   68|  54.3k|    int count = 0;
   69|  54.3k|    if (length > 0) {
  ------------------
  |  Branch (69:9): [True: 54.3k, False: 0]
  ------------------
   70|  54.3k|        uint32_t buffer = data[0];
   71|  54.3k|        int next = 1;
   72|  54.3k|        int bits_left = 8;
   73|  3.12M|        while (count < buf_size && (bits_left > 0 || next < length)) {
  ------------------
  |  Branch (73:16): [True: 3.07M, False: 53.5k]
  |  Branch (73:37): [True: 2.74M, False: 330k]
  |  Branch (73:54): [True: 330k, False: 847]
  ------------------
   74|  3.07M|            if (bits_left < 5) {
  ------------------
  |  Branch (74:17): [True: 1.86M, False: 1.20M]
  ------------------
   75|  1.86M|                if (next < length) {
  ------------------
  |  Branch (75:21): [True: 1.86M, False: 832]
  ------------------
   76|  1.86M|                    buffer <<= 8;
   77|  1.86M|                    buffer |= data[next++] & 0xFF;
   78|  1.86M|                    bits_left += 8;
   79|  1.86M|                } else {
   80|    832|                    int pad = 5 - bits_left;
   81|    832|                    buffer <<= pad;
   82|    832|                    bits_left += pad;
   83|    832|                }
   84|  1.86M|            }
   85|  3.07M|            int index = 0x1F & (buffer >> (bits_left - 5));
   86|  3.07M|            bits_left -= 5;
   87|  3.07M|            result[count++] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"[index];
   88|  3.07M|        }
   89|  54.3k|    }
   90|  54.3k|    if (count < buf_size) {
  ------------------
  |  Branch (90:9): [True: 847, False: 53.5k]
  ------------------
   91|    847|        result[count] = '\000';
   92|    847|    }
   93|  54.3k|    return count;
   94|  54.3k|}

base64_encode:
   11|    147|bool base64_encode(const uint8_t *data, size_t in_len, char *out, size_t out_len) {
   12|    147|    size_t encoded_len = 4 * ((in_len + 2) / 3);
   13|    147|    if (encoded_len > out_len) {
  ------------------
  |  Branch (13:9): [True: 0, False: 147]
  ------------------
   14|      0|        return false;
   15|      0|    }
   16|       |
   17|    854|    for (unsigned int i = 0, j = 0; i < in_len;) {
  ------------------
  |  Branch (17:37): [True: 707, False: 147]
  ------------------
   18|    707|        uint32_t octet_a = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (18:28): [True: 707, False: 0]
  ------------------
   19|    707|        uint32_t octet_b = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (19:28): [True: 645, False: 62]
  ------------------
   20|    707|        uint32_t octet_c = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (20:28): [True: 604, False: 103]
  ------------------
   21|       |
   22|    707|        uint32_t triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;
   23|       |
   24|    707|        out[j++] = BASE64_ALPHABET[(triple >> 3 * 6) & 0x3F];
   25|    707|        out[j++] = BASE64_ALPHABET[(triple >> 2 * 6) & 0x3F];
   26|    707|        out[j++] = BASE64_ALPHABET[(triple >> 1 * 6) & 0x3F];
   27|    707|        out[j++] = BASE64_ALPHABET[(triple >> 0 * 6) & 0x3F];
   28|    707|    }
   29|       |
   30|    312|    for (int i = 0; i < BASE64_MOD_TABLE[in_len % 3]; i++) {
  ------------------
  |  Branch (30:21): [True: 165, False: 147]
  ------------------
   31|    165|        out[encoded_len - 1 - i] = '=';
   32|    165|    }
   33|       |
   34|    147|    out[encoded_len] = '\0';
   35|    147|    return true;
   36|    147|}

reset_formatter:
 2428|  10.6k|void reset_formatter(void) {
 2429|  10.6k|    explicit_bzero(formatter_stack, sizeof(formatter_stack));
 2430|  10.6k|    formatter_index = 0;
 2431|  10.6k|    current_data_index = 0;
 2432|  10.6k|}
get_next_data:
 2434|   277k|bool get_next_data(formatter_data_t *fdata, bool forward, bool *data_exists, bool *is_op_header) {
 2435|   277k|    if (current_data_index == 0 && formatter_index == 0 && !forward) {
  ------------------
  |  Branch (2435:9): [True: 114k, False: 163k]
  |  Branch (2435:36): [True: 10.6k, False: 103k]
  |  Branch (2435:60): [True: 0, False: 10.6k]
  ------------------
 2436|      0|        return false;
 2437|      0|    }
 2438|   277k|    explicit_bzero(fdata->caption, fdata->caption_len);
 2439|   277k|    explicit_bzero(fdata->value, fdata->value_len);
 2440|   277k|    *is_op_header = false;
 2441|   277k|    uint8_t total_data = get_data_count(fdata);
 2442|       |    // printf("current_data_index: %d, formatter_index: %d\n", current_data_index,
 2443|       |    // formatter_index);
 2444|   277k|    if (forward) {
  ------------------
  |  Branch (2444:9): [True: 277k, False: 0]
  ------------------
 2445|   277k|        if (current_data_index == 0 && formatter_index == 0) {
  ------------------
  |  Branch (2445:13): [True: 114k, False: 163k]
  |  Branch (2445:40): [True: 10.6k, False: 103k]
  ------------------
 2446|  10.6k|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|  10.6k|    {                           \
  |  |   31|  10.6k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10.6k]
  |  |  ------------------
  |  |   32|  10.6k|    }
  ------------------
 2447|  10.6k|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2447:17): [True: 0, False: 10.6k]
  ------------------
 2448|      0|                return false;
 2449|      0|            }
 2450|  10.6k|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|  10.6k|    {                           \
  |  |   31|  10.6k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10.6k]
  |  |  ------------------
  |  |   32|  10.6k|    }
  ------------------
 2451|  10.6k|            *data_exists = true;
 2452|   266k|        } else if (current_data_index < total_data - 1 &&
  ------------------
  |  Branch (2452:20): [True: 162k, False: 104k]
  ------------------
 2453|   266k|                   formatter_stack[formatter_index - 1] == NULL) {
  ------------------
  |  Branch (2453:20): [True: 40.7k, False: 121k]
  ------------------
 2454|  40.7k|            current_data_index++;
 2455|  40.7k|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|  40.7k|    {                           \
  |  |   31|  40.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 40.7k]
  |  |  ------------------
  |  |   32|  40.7k|    }
  ------------------
 2456|  40.7k|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2456:17): [True: 0, False: 40.7k]
  ------------------
 2457|      0|                return false;
 2458|      0|            }
 2459|  40.7k|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|  40.7k|    {                           \
  |  |   31|  40.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 10, False: 40.7k]
  |  |  ------------------
  |  |   32|  40.7k|    }
  ------------------
 2460|  40.7k|            *is_op_header = true;
 2461|  40.7k|            *data_exists = true;
 2462|   226k|        } else if (current_data_index == total_data - 1 &&
  ------------------
  |  Branch (2462:20): [True: 104k, False: 121k]
  ------------------
 2463|   226k|                   formatter_stack[formatter_index - 1] == NULL) {
  ------------------
  |  Branch (2463:20): [True: 9.27k, False: 95.3k]
  ------------------
 2464|  9.27k|            formatter_index++;  // we can back from the approve page
 2465|  9.27k|            *data_exists = false;
 2466|   216k|        } else {
 2467|   216k|            FORMATTER_CHECK(formatter_stack[formatter_index - 1](fdata));
  ------------------
  |  |   30|   216k|    {                           \
  |  |   31|   216k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1.34k, False: 215k]
  |  |  ------------------
  |  |   32|   216k|    }
  ------------------
 2468|   215k|            *data_exists = true;
 2469|   215k|        }
 2470|   277k|    } else {
 2471|      0|        if (current_data_index == 0 && formatter_index == 2) {
  ------------------
  |  Branch (2471:13): [True: 0, False: 0]
  |  Branch (2471:40): [True: 0, False: 0]
  ------------------
 2472|      0|            formatter_index = 0;
 2473|      0|            *data_exists = false;
 2474|      0|        } else if (current_data_index > 0 && formatter_index == 2) {
  ------------------
  |  Branch (2474:20): [True: 0, False: 0]
  |  Branch (2474:46): [True: 0, False: 0]
  ------------------
 2475|      0|            current_data_index -= 1;
 2476|      0|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2477|      0|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2477:17): [True: 0, False: 0]
  ------------------
 2478|      0|                return false;
 2479|      0|            }
 2480|      0|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2481|      0|            *data_exists = true;
 2482|      0|            if (current_data_index > 0) {
  ------------------
  |  Branch (2482:17): [True: 0, False: 0]
  ------------------
 2483|      0|                *is_op_header = true;
 2484|      0|            }
 2485|      0|        } else {
 2486|      0|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2487|      0|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2487:17): [True: 0, False: 0]
  ------------------
 2488|      0|                return false;
 2489|      0|            }
 2490|      0|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2491|      0|            *data_exists = true;
 2492|      0|            if (current_data_index > 0) {
  ------------------
  |  Branch (2492:17): [True: 0, False: 0]
  ------------------
 2493|      0|                *is_op_header = true;
 2494|      0|            }
 2495|      0|        }
 2496|      0|    }
 2497|       |
 2498|   276k|    return true;
 2499|   277k|}
formatter.c:get_data_count:
 2420|   277k|static uint8_t get_data_count(formatter_data_t *fdata) {
 2421|   277k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2421:9): [True: 80.8k, False: 196k]
  ------------------
 2422|  80.8k|        return 1;
 2423|  80.8k|    }
 2424|   196k|    uint8_t op_cnt = fdata->envelope->tx_details.tx.operations_count;
 2425|   196k|    return op_cnt + 1;
 2426|   277k|}
formatter.c:format:
 2398|  51.3k|static bool format(formatter_data_t *fdata, uint8_t data_index) {
 2399|  51.3k|    explicit_bzero(formatter_stack, sizeof(formatter_stack));
 2400|  51.3k|    formatter_index = 0;
 2401|  51.3k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2401:9): [True: 4.18k, False: 47.1k]
  ------------------
 2402|  4.18k|        return format_soroban_authorization(fdata);
 2403|  47.1k|    } else {
 2404|  47.1k|        if (data_index == 0) {
  ------------------
  |  Branch (2404:13): [True: 6.44k, False: 40.7k]
  ------------------
 2405|  6.44k|            return format_transaction_info(fdata);
 2406|  40.7k|        } else {
 2407|  40.7k|            uint8_t op_index = data_index - 1;
 2408|  40.7k|            if (!parse_transaction_operation(fdata->raw_data,
  ------------------
  |  Branch (2408:17): [True: 0, False: 40.7k]
  ------------------
 2409|  40.7k|                                             fdata->raw_data_len,
 2410|  40.7k|                                             fdata->envelope,
 2411|  40.7k|                                             op_index)) {
 2412|      0|                return false;
 2413|  40.7k|            };
 2414|  40.7k|            FORMATTER_CHECK(push_to_formatter_stack(&format_confirm_operation))
  ------------------
  |  |   30|  40.7k|    {                           \
  |  |   31|  40.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 40.7k]
  |  |  ------------------
  |  |   32|  40.7k|    }
  ------------------
 2415|  40.7k|        }
 2416|  47.1k|    }
 2417|  40.7k|    return true;
 2418|  51.3k|}
formatter.c:format_soroban_authorization:
 2389|  4.18k|static bool format_soroban_authorization(formatter_data_t *fdata) {
 2390|  4.18k|    if (fdata->envelope->network != 0) {
  ------------------
  |  Branch (2390:9): [True: 3.84k, False: 338]
  ------------------
 2391|  3.84k|        FORMATTER_CHECK(push_to_formatter_stack(&format_network))
  ------------------
  |  |   30|  3.84k|    {                           \
  |  |   31|  3.84k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.84k]
  |  |  ------------------
  |  |   32|  3.84k|    }
  ------------------
 2392|  3.84k|    } else {
 2393|    338|        FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_nonce))
  ------------------
  |  |   30|    338|    {                           \
  |  |   31|    338|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 338]
  |  |  ------------------
  |  |   32|    338|    }
  ------------------
 2394|    338|    }
 2395|  4.18k|    return true;
 2396|  4.18k|}
formatter.c:format_network:
 2369|  9.91k|static bool format_network(formatter_data_t *fdata) {
 2370|  9.91k|    STRLCPY(fdata->caption, "Network", fdata->caption_len);
  ------------------
  |  |   35|  9.91k|    {                                         \
  |  |   36|  9.91k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  9.91k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 9.91k]
  |  |  ------------------
  |  |   38|  9.91k|    }
  ------------------
 2371|  9.91k|    STRLCPY(fdata->value, (char *) PIC(NETWORK_NAMES[fdata->envelope->network]), fdata->value_len);
  ------------------
  |  |   35|  9.91k|    {                                         \
  |  |   36|  9.91k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  9.91k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 9.91k]
  |  |  ------------------
  |  |   38|  9.91k|    }
  ------------------
 2372|  9.91k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2372:9): [True: 3.84k, False: 6.07k]
  ------------------
 2373|  3.84k|        FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_nonce))
  ------------------
  |  |   30|  3.84k|    {                           \
  |  |   31|  3.84k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.84k]
  |  |  ------------------
  |  |   32|  3.84k|    }
  ------------------
 2374|  6.07k|    } else {
 2375|  6.07k|        return get_tx_details_formatter(fdata);
 2376|  6.07k|    }
 2377|  3.84k|    return true;
 2378|  9.91k|}
formatter.c:get_tx_details_formatter:
 2328|  6.44k|static bool get_tx_details_formatter(formatter_data_t *fdata) {
 2329|  6.44k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX_FEE_BUMP) {
  ------------------
  |  Branch (2329:9): [True: 84, False: 6.36k]
  ------------------
 2330|     84|        FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_details))
  ------------------
  |  |   30|     84|    {                           \
  |  |   31|     84|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   32|     84|    }
  ------------------
 2331|     84|    }
 2332|       |
 2333|  6.44k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX) {
  ------------------
  |  Branch (2333:9): [True: 6.36k, False: 84]
  ------------------
 2334|  6.36k|        if (fdata->envelope->tx_details.tx.memo.type != MEMO_NONE) {
  ------------------
  |  Branch (2334:13): [True: 495, False: 5.86k]
  ------------------
 2335|    495|            FORMATTER_CHECK(push_to_formatter_stack(&format_memo))
  ------------------
  |  |   30|    495|    {                           \
  |  |   31|    495|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 495]
  |  |  ------------------
  |  |   32|    495|    }
  ------------------
 2336|  5.86k|        } else {
 2337|  5.86k|            FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|  5.86k|    {                           \
  |  |   31|  5.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.86k]
  |  |  ------------------
  |  |   32|  5.86k|    }
  ------------------
 2338|  5.86k|        }
 2339|  6.36k|    }
 2340|       |
 2341|  6.44k|    return true;
 2342|  6.44k|}
formatter.c:format_fee_bump_transaction_details:
 2320|     84|static bool format_fee_bump_transaction_details(formatter_data_t *fdata) {
 2321|     84|    (void) fdata;
 2322|     84|    STRLCPY(fdata->caption, "Fee Bump", fdata->caption_len);
  ------------------
  |  |   35|     84|    {                                         \
  |  |   36|     84|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     84|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   38|     84|    }
  ------------------
 2323|     84|    STRLCPY(fdata->value, "Transaction Details", fdata->value_len);
  ------------------
  |  |   35|     84|    {                                         \
  |  |   36|     84|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     84|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   38|     84|    }
  ------------------
 2324|     84|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_source))
  ------------------
  |  |   30|     84|    {                           \
  |  |   31|     84|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   32|     84|    }
  ------------------
 2325|     84|    return true;
 2326|     84|}
formatter.c:format_fee_bump_transaction_source:
 2297|     84|static bool format_fee_bump_transaction_source(formatter_data_t *fdata) {
 2298|     84|    STRLCPY(fdata->caption, "Fee Source", fdata->caption_len);
  ------------------
  |  |   35|     84|    {                                         \
  |  |   36|     84|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     84|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   38|     84|    }
  ------------------
 2299|     84|    if (fdata->envelope->type == ENVELOPE_TYPE_TX_FEE_BUMP &&
  ------------------
  |  Branch (2299:9): [True: 84, False: 0]
  ------------------
 2300|     84|        fdata->envelope->tx_details.fee_bump_tx.fee_source.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (2300:9): [True: 80, False: 4]
  ------------------
 2301|     84|        memcmp(fdata->envelope->tx_details.fee_bump_tx.fee_source.ed25519,
  ------------------
  |  Branch (2301:9): [True: 35, False: 45]
  ------------------
 2302|     80|               fdata->signing_key,
 2303|     80|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|     80|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 2304|     35|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.fee_bump_tx.fee_source,
  ------------------
  |  |   30|     35|    {                           \
  |  |   31|     35|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 35]
  |  |  ------------------
  |  |   32|     35|    }
  ------------------
 2305|     35|                                            fdata->value,
 2306|     35|                                            fdata->value_len,
 2307|     35|                                            6,
 2308|     35|                                            6))
 2309|     49|    } else {
 2310|     49|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.fee_bump_tx.fee_source,
  ------------------
  |  |   30|     49|    {                           \
  |  |   31|     49|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 49]
  |  |  ------------------
  |  |   32|     49|    }
  ------------------
 2311|     49|                                            fdata->value,
 2312|     49|                                            fdata->value_len,
 2313|     49|                                            0,
 2314|     49|                                            0))
 2315|     49|    }
 2316|     84|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_fee))
  ------------------
  |  |   30|     84|    {                           \
  |  |   31|     84|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   32|     84|    }
  ------------------
 2317|     84|    return true;
 2318|     84|}
formatter.c:format_fee_bump_transaction_fee:
 2285|     84|static bool format_fee_bump_transaction_fee(formatter_data_t *fdata) {
 2286|     84|    STRLCPY(fdata->caption, "Max Fee", fdata->caption_len);
  ------------------
  |  |   35|     84|    {                                         \
  |  |   36|     84|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     84|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   38|     84|    }
  ------------------
 2287|     84|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
 2288|     84|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.fee_bump_tx.fee,
  ------------------
  |  |   30|     84|    {                           \
  |  |   31|     84|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   32|     84|    }
  ------------------
 2289|     84|                                 &asset,
 2290|     84|                                 fdata->envelope->network,
 2291|     84|                                 fdata->value,
 2292|     84|                                 fdata->value_len))
 2293|     84|    FORMATTER_CHECK(push_to_formatter_stack(&format_transaction_details))
  ------------------
  |  |   30|     84|    {                           \
  |  |   31|     84|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   32|     84|    }
  ------------------
 2294|     84|    return true;
 2295|     84|}
formatter.c:format_transaction_details:
  285|     84|static bool format_transaction_details(formatter_data_t *fdata) {
  286|     84|    switch (fdata->envelope->type) {
  287|     84|        case ENVELOPE_TYPE_TX_FEE_BUMP:
  ------------------
  |  Branch (287:9): [True: 84, False: 0]
  ------------------
  288|     84|            STRLCPY(fdata->caption, "InnerTx", fdata->caption_len);
  ------------------
  |  |   35|     84|    {                                         \
  |  |   36|     84|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     84|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   38|     84|    }
  ------------------
  289|     84|            break;
  290|      0|        case ENVELOPE_TYPE_TX:
  ------------------
  |  Branch (290:9): [True: 0, False: 84]
  ------------------
  291|      0|            STRLCPY(fdata->caption, "Transaction", fdata->caption_len);
  ------------------
  |  |   35|      0|    {                                         \
  |  |   36|      0|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      0|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   38|      0|    }
  ------------------
  292|      0|            break;
  293|      0|        default:
  ------------------
  |  Branch (293:9): [True: 0, False: 84]
  ------------------
  294|      0|            return false;
  295|     84|    }
  296|     84|    STRLCPY(fdata->value, "Details", fdata->value_len);
  ------------------
  |  |   35|     84|    {                                         \
  |  |   36|     84|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     84|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   38|     84|    }
  ------------------
  297|     84|    if (fdata->envelope->tx_details.tx.memo.type != MEMO_NONE) {
  ------------------
  |  Branch (297:9): [True: 43, False: 41]
  ------------------
  298|     43|        FORMATTER_CHECK(push_to_formatter_stack(&format_memo))
  ------------------
  |  |   30|     43|    {                           \
  |  |   31|     43|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   32|     43|    }
  ------------------
  299|     43|    } else {
  300|     41|        FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|     41|    {                           \
  |  |   31|     41|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   32|     41|    }
  ------------------
  301|     41|    }
  302|     84|    return true;
  303|     84|}
formatter.c:format_memo:
  242|    538|static bool format_memo(formatter_data_t *fdata) {
  243|    538|    memo_t *memo = &fdata->envelope->tx_details.tx.memo;
  244|    538|    switch (memo->type) {
  245|     26|        case MEMO_ID: {
  ------------------
  |  Branch (245:9): [True: 26, False: 512]
  ------------------
  246|     26|            STRLCPY(fdata->caption, "Memo ID", fdata->caption_len);
  ------------------
  |  |   35|     26|    {                                         \
  |  |   36|     26|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     26|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   38|     26|    }
  ------------------
  247|     26|            FORMATTER_CHECK(print_uint64_num(memo->id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     26|    {                           \
  |  |   31|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   32|     26|    }
  ------------------
  248|     26|            break;
  249|     26|        }
  250|    500|        case MEMO_TEXT: {
  ------------------
  |  Branch (250:9): [True: 500, False: 38]
  ------------------
  251|    500|            STRLCPY(fdata->caption, "Memo Text", fdata->caption_len);
  ------------------
  |  |   35|    500|    {                                         \
  |  |   36|    500|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    500|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 500]
  |  |  ------------------
  |  |   38|    500|    }
  ------------------
  252|    500|            if (is_printable_binary(memo->text.text, memo->text.text_size)) {
  ------------------
  |  Branch (252:17): [True: 373, False: 127]
  ------------------
  253|    373|                FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|    373|    {                           \
  |  |   31|    373|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 373]
  |  |  ------------------
  |  |   32|    373|    }
  ------------------
  254|    373|                                             fdata->value_len,
  255|    373|                                             memo->text.text,
  256|    373|                                             memo->text.text_size))
  257|    373|            } else {
  258|    127|                STRLCPY(fdata->value, "Base64: ", fdata->value_len)
  ------------------
  |  |   35|    127|    {                                         \
  |  |   36|    127|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    127|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 127]
  |  |  ------------------
  |  |   38|    127|    }
  ------------------
  259|    127|                FORMATTER_CHECK(base64_encode(memo->text.text,
  ------------------
  |  |   30|    127|    {                           \
  |  |   31|    127|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 127]
  |  |  ------------------
  |  |   32|    127|    }
  ------------------
  260|    127|                                              memo->text.text_size,
  261|    127|                                              fdata->value + strlen(fdata->value),
  262|    127|                                              fdata->value_len - strlen(fdata->value)))
  263|    127|            }
  264|    500|            break;
  265|    500|        }
  266|    500|        case MEMO_HASH: {
  ------------------
  |  Branch (266:9): [True: 6, False: 532]
  ------------------
  267|      6|            STRLCPY(fdata->caption, "Memo Hash", fdata->caption_len);
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
  268|      6|            FORMATTER_CHECK(
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
  269|      6|                print_binary(memo->hash, HASH_SIZE, fdata->value, fdata->value_len, 0, 0))
  270|      6|            break;
  271|      6|        }
  272|      6|        case MEMO_RETURN: {
  ------------------
  |  Branch (272:9): [True: 6, False: 532]
  ------------------
  273|      6|            STRLCPY(fdata->caption, "Memo Return", fdata->caption_len);
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
  274|      6|            FORMATTER_CHECK(
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
  275|      6|                print_binary(memo->hash, HASH_SIZE, fdata->value, fdata->value_len, 0, 0))
  276|      6|            break;
  277|      6|        }
  278|      6|        default:
  ------------------
  |  Branch (278:9): [True: 0, False: 538]
  ------------------
  279|      0|            return false;
  280|    538|    }
  281|    538|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|    538|    {                           \
  |  |   31|    538|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 538]
  |  |  ------------------
  |  |   32|    538|    }
  ------------------
  282|    538|    return true;
  283|    538|}
formatter.c:format_fee:
  226|  6.44k|static bool format_fee(formatter_data_t *fdata) {
  227|  6.44k|    STRLCPY(fdata->caption, "Max Fee", fdata->caption_len);
  ------------------
  |  |   35|  6.44k|    {                                         \
  |  |   36|  6.44k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.44k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.44k]
  |  |  ------------------
  |  |   38|  6.44k|    }
  ------------------
  228|  6.44k|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
  229|  6.44k|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.fee,
  ------------------
  |  |   30|  6.44k|    {                           \
  |  |   31|  6.44k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.44k]
  |  |  ------------------
  |  |   32|  6.44k|    }
  ------------------
  230|  6.44k|                                 &asset,
  231|  6.44k|                                 fdata->envelope->network,
  232|  6.44k|                                 fdata->value,
  233|  6.44k|                                 fdata->value_len))
  234|  6.44k|    if (fdata->display_sequence) {
  ------------------
  |  Branch (234:9): [True: 6.44k, False: 0]
  ------------------
  235|  6.44k|        FORMATTER_CHECK(push_to_formatter_stack(&format_sequence))
  ------------------
  |  |   30|  6.44k|    {                           \
  |  |   31|  6.44k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.44k]
  |  |  ------------------
  |  |   32|  6.44k|    }
  ------------------
  236|  6.44k|    } else {
  237|      0|        FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds))
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
  238|      0|    }
  239|  6.44k|    return true;
  240|  6.44k|}
formatter.c:format_sequence:
  217|  6.44k|static bool format_sequence(formatter_data_t *fdata) {
  218|  6.44k|    STRLCPY(fdata->caption, "Sequence Num", fdata->caption_len);
  ------------------
  |  |   35|  6.44k|    {                                         \
  |  |   36|  6.44k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.44k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.44k]
  |  |  ------------------
  |  |   38|  6.44k|    }
  ------------------
  219|  6.44k|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.sequence_number,
  ------------------
  |  |   30|  6.44k|    {                           \
  |  |   31|  6.44k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.44k]
  |  |  ------------------
  |  |   32|  6.44k|    }
  ------------------
  220|  6.44k|                                     fdata->value,
  221|  6.44k|                                     fdata->value_len))
  222|  6.44k|    FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds))
  ------------------
  |  |   30|  6.44k|    {                           \
  |  |   31|  6.44k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.44k]
  |  |  ------------------
  |  |   32|  6.44k|    }
  ------------------
  223|  6.44k|    return true;
  224|  6.44k|}
formatter.c:format_time_bounds:
  204|  6.44k|static bool format_time_bounds(formatter_data_t *fdata) {
  205|  6.44k|    if (!fdata->envelope->tx_details.tx.cond.time_bounds_present ||
  ------------------
  |  Branch (205:9): [True: 5.89k, False: 552]
  ------------------
  206|  6.44k|        (fdata->envelope->tx_details.tx.cond.time_bounds.min_time == 0 &&
  ------------------
  |  Branch (206:10): [True: 453, False: 99]
  ------------------
  207|  6.03k|         fdata->envelope->tx_details.tx.cond.time_bounds.max_time == 0)) {
  ------------------
  |  Branch (207:10): [True: 139, False: 314]
  ------------------
  208|  6.03k|        return format_ledger_bounds(fdata);
  209|  6.03k|    } else if (fdata->envelope->tx_details.tx.cond.time_bounds.min_time != 0) {
  ------------------
  |  Branch (209:16): [True: 99, False: 314]
  ------------------
  210|     99|        return format_time_bounds_min_time(fdata);
  211|    314|    } else {
  212|    314|        return format_time_bounds_max_time(fdata);
  213|    314|    }
  214|      0|    return true;
  215|  6.44k|}
formatter.c:format_ledger_bounds:
  168|  6.40k|static bool format_ledger_bounds(formatter_data_t *fdata) {
  169|  6.40k|    if (!fdata->envelope->tx_details.tx.cond.ledger_bounds_present ||
  ------------------
  |  Branch (169:9): [True: 6.35k, False: 49]
  ------------------
  170|  6.40k|        (fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger == 0 &&
  ------------------
  |  Branch (170:10): [True: 20, False: 29]
  ------------------
  171|  6.36k|         fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger == 0)) {
  ------------------
  |  Branch (171:10): [True: 12, False: 8]
  ------------------
  172|  6.36k|        return format_min_seq_num_prepare(fdata);
  173|  6.36k|    } else if (fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger != 0) {
  ------------------
  |  Branch (173:16): [True: 29, False: 8]
  ------------------
  174|     29|        return format_ledger_bounds_min_ledger(fdata);
  175|     29|    } else {
  176|      8|        return format_ledger_bounds_max_ledger(fdata);
  177|      8|    }
  178|      0|    return true;
  179|  6.40k|}
formatter.c:format_min_seq_num_prepare:
  137|  6.40k|static bool format_min_seq_num_prepare(formatter_data_t *fdata) {
  138|  6.40k|    if (!fdata->envelope->tx_details.tx.cond.min_seq_num_present ||
  ------------------
  |  Branch (138:9): [True: 6.37k, False: 26]
  ------------------
  139|  6.40k|        fdata->envelope->tx_details.tx.cond.min_seq_num == 0) {
  ------------------
  |  Branch (139:9): [True: 19, False: 7]
  ------------------
  140|  6.39k|        return format_min_seq_age_prepare(fdata);
  141|  6.39k|    } else {
  142|      7|        return format_min_seq_num(fdata);
  143|      7|    }
  144|  6.40k|}
formatter.c:format_min_seq_age_prepare:
  119|  6.40k|static bool format_min_seq_age_prepare(formatter_data_t *fdata) {
  120|  6.40k|    if (fdata->envelope->tx_details.tx.cond.min_seq_age == 0) {
  ------------------
  |  Branch (120:9): [True: 6.37k, False: 34]
  ------------------
  121|  6.37k|        format_min_seq_ledger_gap_prepare(fdata);
  122|  6.37k|    } else {
  123|     34|        format_min_seq_age(fdata);
  124|     34|    }
  125|  6.40k|    return true;
  126|  6.40k|}
formatter.c:format_min_seq_ledger_gap_prepare:
  102|  6.40k|static bool format_min_seq_ledger_gap_prepare(formatter_data_t *fdata) {
  103|  6.40k|    if (fdata->envelope->tx_details.tx.cond.min_seq_ledger_gap == 0) {
  ------------------
  |  Branch (103:9): [True: 6.39k, False: 14]
  ------------------
  104|  6.39k|        return format_transaction_source(fdata);
  105|  6.39k|    } else {
  106|     14|        return format_min_seq_ledger_gap(fdata);
  107|     14|    }
  108|  6.40k|}
formatter.c:format_transaction_source:
   70|  6.40k|static bool format_transaction_source(formatter_data_t *fdata) {
   71|  6.40k|    STRLCPY(fdata->caption, "Tx Source", fdata->caption_len);
  ------------------
  |  |   35|  6.40k|    {                                         \
  |  |   36|  6.40k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.40k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.40k]
  |  |  ------------------
  |  |   38|  6.40k|    }
  ------------------
   72|  6.40k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (72:9): [True: 6.32k, False: 84]
  ------------------
   73|  6.40k|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (73:9): [True: 6.22k, False: 91]
  ------------------
   74|  6.40k|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (74:9): [True: 669, False: 5.56k]
  ------------------
   75|  6.22k|               fdata->signing_key,
   76|  6.22k|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|  6.22k|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
   77|    669|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.source_account,
  ------------------
  |  |   30|    669|    {                           \
  |  |   31|    669|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 669]
  |  |  ------------------
  |  |   32|    669|    }
  ------------------
   78|    669|                                            fdata->value,
   79|    669|                                            fdata->value_len,
   80|    669|                                            6,
   81|    669|                                            6))
   82|  5.73k|    } else {
   83|  5.73k|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.source_account,
  ------------------
  |  |   30|  5.73k|    {                           \
  |  |   31|  5.73k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.73k]
  |  |  ------------------
  |  |   32|  5.73k|    }
  ------------------
   84|  5.73k|                                            fdata->value,
   85|  5.73k|                                            fdata->value_len,
   86|  5.73k|                                            0,
   87|  5.73k|                                            0))
   88|  5.73k|    }
   89|  6.40k|    FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  6.40k|    {                           \
  |  |   31|  6.40k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.40k]
  |  |  ------------------
  |  |   32|  6.40k|    }
  ------------------
   90|  6.40k|    return true;
   91|  6.40k|}
formatter.c:format_min_seq_ledger_gap:
   93|     14|static bool format_min_seq_ledger_gap(formatter_data_t *fdata) {
   94|     14|    STRLCPY(fdata->caption, "Min Seq Ledger Gap", fdata->caption_len);
  ------------------
  |  |   35|     14|    {                                         \
  |  |   36|     14|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     14|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   38|     14|    }
  ------------------
   95|     14|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_ledger_gap,
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
   96|     14|                                     fdata->value,
   97|     14|                                     fdata->value_len))
   98|     14|    FORMATTER_CHECK(push_to_formatter_stack(&format_transaction_source))
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
   99|     14|    return true;
  100|     14|}
formatter.c:format_min_seq_age:
  110|     34|static bool format_min_seq_age(formatter_data_t *fdata) {
  111|     34|    STRLCPY(fdata->caption, "Min Seq Age", fdata->caption_len);
  ------------------
  |  |   35|     34|    {                                         \
  |  |   36|     34|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     34|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   38|     34|    }
  ------------------
  112|     34|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_age,
  ------------------
  |  |   30|     34|    {                           \
  |  |   31|     34|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   32|     34|    }
  ------------------
  113|     34|                                     fdata->value,
  114|     34|                                     fdata->value_len))
  115|     34|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_ledger_gap_prepare))
  ------------------
  |  |   30|     34|    {                           \
  |  |   31|     34|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   32|     34|    }
  ------------------
  116|     34|    return true;
  117|     34|}
formatter.c:format_min_seq_num:
  128|      7|static bool format_min_seq_num(formatter_data_t *fdata) {
  129|      7|    STRLCPY(fdata->caption, "Min Seq Num", fdata->caption_len);
  ------------------
  |  |   35|      7|    {                                         \
  |  |   36|      7|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      7|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   38|      7|    }
  ------------------
  130|      7|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_num,
  ------------------
  |  |   30|      7|    {                           \
  |  |   31|      7|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   32|      7|    }
  ------------------
  131|      7|                                     fdata->value,
  132|      7|                                     fdata->value_len))
  133|      7|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_age_prepare))
  ------------------
  |  |   30|      7|    {                           \
  |  |   31|      7|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   32|      7|    }
  ------------------
  134|      7|    return true;
  135|      7|}
formatter.c:format_ledger_bounds_min_ledger:
  155|     29|static bool format_ledger_bounds_min_ledger(formatter_data_t *fdata) {
  156|     29|    STRLCPY(fdata->caption, "Ledger Bounds Min", fdata->caption_len);
  ------------------
  |  |   35|     29|    {                                         \
  |  |   36|     29|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     29|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   38|     29|    }
  ------------------
  157|     29|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger,
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  158|     29|                                     fdata->value,
  159|     29|                                     fdata->value_len))
  160|     29|    if (fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger != 0) {
  ------------------
  |  Branch (160:9): [True: 17, False: 12]
  ------------------
  161|     17|        FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds_max_ledger))
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
  162|     17|    } else {
  163|     12|        FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_num_prepare))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  164|     12|    }
  165|     29|    return true;
  166|     29|}
formatter.c:format_ledger_bounds_max_ledger:
  146|     25|static bool format_ledger_bounds_max_ledger(formatter_data_t *fdata) {
  147|     25|    STRLCPY(fdata->caption, "Ledger Bounds Max", fdata->caption_len);
  ------------------
  |  |   35|     25|    {                                         \
  |  |   36|     25|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     25|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   38|     25|    }
  ------------------
  148|     25|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger,
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  149|     25|                                     fdata->value,
  150|     25|                                     fdata->value_len))
  151|     25|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_num_prepare))
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  152|     25|    return true;
  153|     25|}
formatter.c:format_time_bounds_min_time:
  190|     99|static bool format_time_bounds_min_time(formatter_data_t *fdata) {
  191|     99|    STRLCPY(fdata->caption, "Valid After (UTC)", fdata->caption_len);
  ------------------
  |  |   35|     99|    {                                         \
  |  |   36|     99|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     99|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 99]
  |  |  ------------------
  |  |   38|     99|    }
  ------------------
  192|     99|    FORMATTER_CHECK(print_time(fdata->envelope->tx_details.tx.cond.time_bounds.min_time,
  ------------------
  |  |   30|     99|    {                           \
  |  |   31|     99|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 29, False: 70]
  |  |  ------------------
  |  |   32|     99|    }
  ------------------
  193|     99|                               fdata->value,
  194|     99|                               fdata->value_len))
  195|       |
  196|     70|    if (fdata->envelope->tx_details.tx.cond.time_bounds.max_time != 0) {
  ------------------
  |  Branch (196:9): [True: 58, False: 12]
  ------------------
  197|     58|        FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds_max_time))
  ------------------
  |  |   30|     58|    {                           \
  |  |   31|     58|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 58]
  |  |  ------------------
  |  |   32|     58|    }
  ------------------
  198|     58|    } else {
  199|     12|        FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  200|     12|    }
  201|     70|    return true;
  202|     70|}
formatter.c:format_time_bounds_max_time:
  181|    372|static bool format_time_bounds_max_time(formatter_data_t *fdata) {
  182|    372|    STRLCPY(fdata->caption, "Valid Before (UTC)", fdata->caption_len);
  ------------------
  |  |   35|    372|    {                                         \
  |  |   36|    372|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    372|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 372]
  |  |  ------------------
  |  |   38|    372|    }
  ------------------
  183|    372|    FORMATTER_CHECK(print_time(fdata->envelope->tx_details.tx.cond.time_bounds.max_time,
  ------------------
  |  |   30|    372|    {                           \
  |  |   31|    372|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 14, False: 358]
  |  |  ------------------
  |  |   32|    372|    }
  ------------------
  184|    372|                               fdata->value,
  185|    372|                               fdata->value_len))
  186|    358|    FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds))
  ------------------
  |  |   30|    358|    {                           \
  |  |   31|    358|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 358]
  |  |  ------------------
  |  |   32|    358|    }
  ------------------
  187|    358|    return true;
  188|    358|}
formatter.c:format_soroban_authorization_nonce:
 2354|  4.18k|static bool format_soroban_authorization_nonce(formatter_data_t *fdata) {
 2355|       |    // avoid the root invoke_contract_args be overwritten by the sub-invocation
 2356|  4.18k|    if (!parse_soroban_authorization_envelope(fdata->raw_data,
  ------------------
  |  Branch (2356:9): [True: 0, False: 4.18k]
  ------------------
 2357|  4.18k|                                              fdata->raw_data_len,
 2358|  4.18k|                                              fdata->envelope)) {
 2359|      0|        return false;
 2360|  4.18k|    };
 2361|  4.18k|    STRLCPY(fdata->caption, "Nonce", fdata->caption_len);
  ------------------
  |  |   35|  4.18k|    {                                         \
  |  |   36|  4.18k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  4.18k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4.18k]
  |  |  ------------------
  |  |   38|  4.18k|    }
  ------------------
 2362|  4.18k|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->soroban_authorization.nonce,
  ------------------
  |  |   30|  4.18k|    {                           \
  |  |   31|  4.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.18k]
  |  |  ------------------
  |  |   32|  4.18k|    }
  ------------------
 2363|  4.18k|                                     fdata->value,
 2364|  4.18k|                                     fdata->value_len))
 2365|  4.18k|    FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_sig_exp))
  ------------------
  |  |   30|  4.18k|    {                           \
  |  |   31|  4.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.18k]
  |  |  ------------------
  |  |   32|  4.18k|    }
  ------------------
 2366|  4.18k|    return true;
 2367|  4.18k|}
formatter.c:format_soroban_authorization_sig_exp:
 2344|  4.18k|static bool format_soroban_authorization_sig_exp(formatter_data_t *fdata) {
 2345|  4.18k|    STRLCPY(fdata->caption, "Sig Exp Ledger", fdata->caption_len);
  ------------------
  |  |   35|  4.18k|    {                                         \
  |  |   36|  4.18k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  4.18k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4.18k]
  |  |  ------------------
  |  |   38|  4.18k|    }
  ------------------
 2346|  4.18k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  4.18k|    {                           \
  |  |   31|  4.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.18k]
  |  |  ------------------
  |  |   32|  4.18k|    }
  ------------------
 2347|  4.18k|        print_uint64_num(fdata->envelope->soroban_authorization.signature_expiration_ledger,
 2348|  4.18k|                         fdata->value,
 2349|  4.18k|                         fdata->value_len))
 2350|  4.18k|    FORMATTER_CHECK(push_to_formatter_stack(&format_auth_function));
  ------------------
  |  |   30|  4.18k|    {                           \
  |  |   31|  4.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.18k]
  |  |  ------------------
  |  |   32|  4.18k|    }
  ------------------
 2351|  4.18k|    return true;
 2352|  4.18k|}
formatter.c:format_auth_function:
 2203|  4.18k|static bool format_auth_function(formatter_data_t *fdata) {
 2204|  4.18k|    switch (fdata->envelope->soroban_authorization.auth_function_type) {
 2205|  4.07k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
  ------------------
  |  Branch (2205:9): [True: 4.07k, False: 108]
  ------------------
 2206|  4.07k|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|  4.07k|    {                                         \
  |  |   36|  4.07k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  4.07k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4.07k]
  |  |  ------------------
  |  |   38|  4.07k|    }
  ------------------
 2207|  4.07k|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|  4.07k|    {                                         \
  |  |   36|  4.07k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  4.07k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4.07k]
  |  |  ------------------
  |  |   38|  4.07k|    }
  ------------------
 2208|  4.07k|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_contract_id));
  ------------------
  |  |   30|  4.07k|    {                           \
  |  |   31|  4.07k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.07k]
  |  |  ------------------
  |  |   32|  4.07k|    }
  ------------------
 2209|  4.07k|            break;
 2210|    108|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (2210:9): [True: 108, False: 4.07k]
  ------------------
 2211|    108|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    108|    {                                         \
  |  |   36|    108|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    108|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 108]
  |  |  ------------------
  |  |   38|    108|    }
  ------------------
 2212|    108|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|    108|    {                                         \
  |  |   36|    108|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    108|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 108]
  |  |  ------------------
  |  |   38|    108|    }
  ------------------
 2213|       |            // we dont need to care the sub-invocation here
 2214|    108|            FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|    108|    {                           \
  |  |   31|    108|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 108]
  |  |  ------------------
  |  |   32|    108|    }
  ------------------
 2215|    108|            break;
 2216|    108|        default:
  ------------------
  |  Branch (2216:9): [True: 0, False: 4.18k]
  ------------------
 2217|      0|            return false;
 2218|  4.18k|    }
 2219|  4.18k|    return true;
 2220|  4.18k|}
formatter.c:format_invoke_host_function_contract_id:
 2156|  4.83k|static bool format_invoke_host_function_contract_id(formatter_data_t *fdata) {
 2157|  4.83k|    sc_address_t *address =
 2158|  4.83k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2158:9): [True: 4.07k, False: 758]
  ------------------
 2159|  4.83k|            ? &fdata->envelope->soroban_authorization.invoke_contract_args.address
 2160|  4.83k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2161|    758|                   .invoke_contract_args.address;
 2162|       |
 2163|  4.83k|    STRLCPY(fdata->caption, "Contract ID", fdata->caption_len);
  ------------------
  |  |   35|  4.83k|    {                                         \
  |  |   36|  4.83k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  4.83k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4.83k]
  |  |  ------------------
  |  |   38|  4.83k|    }
  ------------------
 2164|       |
 2165|  4.83k|    FORMATTER_CHECK(print_sc_address(address, fdata->value, fdata->value_len, 0, 0))
  ------------------
  |  |   30|  4.83k|    {                           \
  |  |   31|  4.83k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.83k]
  |  |  ------------------
  |  |   32|  4.83k|    }
  ------------------
 2166|  4.83k|    push_to_formatter_stack(&format_invoke_host_function_func_name);
 2167|  4.83k|    return true;
 2168|  4.83k|}
formatter.c:format_invoke_host_function_func_name:
 2124|  4.83k|static bool format_invoke_host_function_func_name(formatter_data_t *fdata) {
 2125|  4.83k|    invoke_contract_args_t invoke_contract_args;
 2126|  4.83k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2126:9): [True: 4.07k, False: 758]
  ------------------
 2127|  4.07k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2128|  4.07k|    } else {
 2129|    758|        invoke_contract_args =
 2130|    758|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2131|    758|    }
 2132|  4.83k|    STRLCPY(fdata->caption, "Function", fdata->caption_len);
  ------------------
  |  |   35|  4.83k|    {                                         \
  |  |   36|  4.83k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  4.83k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4.83k]
  |  |  ------------------
  |  |   38|  4.83k|    }
  ------------------
 2133|  4.83k|    FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|  4.83k|    {                           \
  |  |   31|  4.83k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.83k]
  |  |  ------------------
  |  |   32|  4.83k|    }
  ------------------
 2134|  4.83k|                                 fdata->value_len,
 2135|  4.83k|                                 invoke_contract_args.function.name,
 2136|  4.83k|                                 invoke_contract_args.function.name_size))
 2137|       |
 2138|  4.83k|    uint8_t data_count = should_move_control_to_plugin(fdata);
 2139|  4.83k|    if (data_count == 0) {
  ------------------
  |  Branch (2139:9): [True: 4.49k, False: 334]
  ------------------
 2140|       |        // we should not move control to plugin
 2141|  4.49k|        if (invoke_contract_args.parameters_length == 0) {
  ------------------
  |  Branch (2141:13): [True: 1.64k, False: 2.84k]
  ------------------
 2142|  1.64k|            return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2143|  2.84k|        } else {
 2144|  2.84k|            parameters_index = 0;
 2145|  2.84k|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args))
  ------------------
  |  |   30|  2.84k|    {                           \
  |  |   31|  2.84k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.84k]
  |  |  ------------------
  |  |   32|  2.84k|    }
  ------------------
 2146|  2.84k|        }
 2147|  4.49k|    } else {
 2148|    334|        PRINTF("we should move control to plugin\n");
 2149|    334|        parameters_index = 0;
 2150|    334|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args_with_plugin))
  ------------------
  |  |   30|    334|    {                           \
  |  |   31|    334|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 334]
  |  |  ------------------
  |  |   32|    334|    }
  ------------------
 2151|    334|    }
 2152|       |
 2153|  3.18k|    return true;
 2154|  4.83k|}
formatter.c:should_move_control_to_plugin:
 1662|  11.4k|static bool should_move_control_to_plugin(formatter_data_t *fdata) {
 1663|  11.4k|    if (fdata->plugin_check_presence == NULL || fdata->plugin_init_contract == NULL ||
  ------------------
  |  Branch (1663:9): [True: 1.32k, False: 10.1k]
  |  Branch (1663:49): [True: 0, False: 10.1k]
  ------------------
 1664|  11.4k|        fdata->plugin_query_data_pair_count == NULL || fdata->plugin_query_data_pair == NULL) {
  ------------------
  |  Branch (1664:9): [True: 0, False: 10.1k]
  |  Branch (1664:56): [True: 0, False: 10.1k]
  ------------------
 1665|  1.32k|        return false;
 1666|  1.32k|    }
 1667|       |
 1668|  10.1k|    invoke_contract_args_t invoke_contract_args;
 1669|  10.1k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1669:9): [True: 10.1k, False: 0]
  ------------------
 1670|  10.1k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1671|  10.1k|    } else {
 1672|      0|        invoke_contract_args =
 1673|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1674|      0|    }
 1675|       |
 1676|  10.1k|    const uint8_t *contract_address = invoke_contract_args.address.address;
 1677|       |
 1678|       |    // check if plugin exists
 1679|  10.1k|    if (!fdata->plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (1679:9): [True: 6.25k, False: 3.86k]
  ------------------
 1680|  6.25k|        return false;
 1681|  6.25k|    }
 1682|       |
 1683|       |    // init plugin
 1684|  3.86k|    if (fdata->plugin_init_contract(contract_address) != STELLAR_PLUGIN_RESULT_OK) {
  ------------------
  |  Branch (1684:9): [True: 0, False: 3.86k]
  ------------------
 1685|      0|        return false;
 1686|      0|    }
 1687|       |
 1688|       |    // get data count
 1689|  3.86k|    if (fdata->plugin_query_data_pair_count(contract_address, &plugin_data_pair_count) !=
  ------------------
  |  Branch (1689:9): [True: 0, False: 3.86k]
  ------------------
 1690|  3.86k|        STELLAR_PLUGIN_RESULT_OK) {
 1691|      0|        return false;
 1692|      0|    }
 1693|       |
 1694|  3.86k|    return plugin_data_pair_count != 0;
 1695|  3.86k|}
formatter.c:format_operation_source_prepare_for_invoke_host_function_op:
 2025|  3.79k|static bool format_operation_source_prepare_for_invoke_host_function_op(formatter_data_t *fdata) {
 2026|  3.79k|    if (fdata->envelope->type != ENVELOPE_TYPE_SOROBAN_AUTHORIZATION &&
  ------------------
  |  Branch (2026:9): [True: 632, False: 3.15k]
  ------------------
 2027|  3.79k|        fdata->envelope->tx_details.tx.op_details.source_account_present) {
  ------------------
  |  Branch (2027:9): [True: 254, False: 378]
  ------------------
 2028|       |        // If the source exists, when the user clicks the next button,
 2029|       |        // it will jump to the page showing the source
 2030|    254|        FORMATTER_CHECK(
  ------------------
  |  |   30|    254|    {                           \
  |  |   31|    254|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 254]
  |  |  ------------------
  |  |   32|    254|    }
  ------------------
 2031|    254|            push_to_formatter_stack(&format_operation_source_for_invoke_host_function_op))
 2032|  3.53k|    } else {
 2033|  3.53k|        uint8_t sub_invocations_count =
 2034|  3.53k|            fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2034:13): [True: 3.15k, False: 378]
  ------------------
 2035|  3.53k|                ? fdata->envelope->soroban_authorization.sub_invocations_count
 2036|  3.53k|                : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2037|    378|                      .sub_invocations_count;
 2038|  3.53k|        if (sub_invocations_count > 0) {
  ------------------
  |  Branch (2038:13): [True: 1.12k, False: 2.41k]
  ------------------
 2039|  1.12k|            formatter_index = 0;
 2040|  1.12k|            FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_start))
  ------------------
  |  |   30|  1.12k|    {                           \
  |  |   31|  1.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.12k]
  |  |  ------------------
  |  |   32|  1.12k|    }
  ------------------
 2041|  2.41k|        } else {
 2042|  2.41k|            FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  2.41k|    {                           \
  |  |   31|  2.41k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 31, False: 2.38k]
  |  |  ------------------
  |  |   32|  2.41k|    }
  ------------------
 2043|  2.41k|        }
 2044|  3.53k|    }
 2045|  3.75k|    return true;
 2046|  3.79k|}
formatter.c:format_operation_source_for_invoke_host_function_op:
 1986|    254|static bool format_operation_source_for_invoke_host_function_op(formatter_data_t *fdata) {
 1987|    254|    STRLCPY(fdata->caption, "Op Source", fdata->caption_len);
  ------------------
  |  |   35|    254|    {                                         \
  |  |   36|    254|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    254|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 254]
  |  |  ------------------
  |  |   38|    254|    }
  ------------------
 1988|    254|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (1988:9): [True: 244, False: 10]
  ------------------
 1989|    254|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (1989:9): [True: 236, False: 8]
  ------------------
 1990|    254|        fdata->envelope->tx_details.tx.op_details.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (1990:9): [True: 234, False: 2]
  ------------------
 1991|    254|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (1991:9): [True: 164, False: 70]
  ------------------
 1992|    234|               fdata->signing_key,
 1993|    234|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0 &&
  ------------------
  |  |   18|    234|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 1994|    254|        memcmp(fdata->envelope->tx_details.tx.op_details.source_account.ed25519,
  ------------------
  |  Branch (1994:9): [True: 121, False: 43]
  ------------------
 1995|    164|               fdata->signing_key,
 1996|    164|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|    164|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 1997|    121|        FORMATTER_CHECK(
  ------------------
  |  |   30|    121|    {                           \
  |  |   31|    121|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 121]
  |  |  ------------------
  |  |   32|    121|    }
  ------------------
 1998|    121|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
 1999|    121|                                fdata->value,
 2000|    121|                                fdata->value_len,
 2001|    121|                                6,
 2002|    121|                                6))
 2003|    133|    } else {
 2004|    133|        FORMATTER_CHECK(
  ------------------
  |  |   30|    133|    {                           \
  |  |   31|    133|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 133]
  |  |  ------------------
  |  |   32|    133|    }
  ------------------
 2005|    133|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
 2006|    133|                                fdata->value,
 2007|    133|                                fdata->value_len,
 2008|    133|                                0,
 2009|    133|                                0))
 2010|    133|    }
 2011|    254|    uint8_t sub_invocations_count =
 2012|    254|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2012:9): [True: 0, False: 254]
  ------------------
 2013|    254|            ? fdata->envelope->soroban_authorization.sub_invocations_count
 2014|    254|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2015|    254|                  .sub_invocations_count;
 2016|    254|    if (sub_invocations_count > 0) {
  ------------------
  |  Branch (2016:9): [True: 127, False: 127]
  ------------------
 2017|    127|        formatter_index = 0;
 2018|    127|        FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_start))
  ------------------
  |  |   30|    127|    {                           \
  |  |   31|    127|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 127]
  |  |  ------------------
  |  |   32|    127|    }
  ------------------
 2019|    127|    } else {
 2020|    127|        FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|    127|    {                           \
  |  |   31|    127|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 127]
  |  |  ------------------
  |  |   32|    127|    }
  ------------------
 2021|    127|    }
 2022|    254|    return true;
 2023|    254|}
formatter.c:format_sub_invocation_start:
 1939|  6.85k|static bool format_sub_invocation_start(formatter_data_t *fdata) {
 1940|  6.85k|    uint8_t sub_invocation_index = 0;
 1941|  6.85k|    uint8_t sub_invocations_count = 0;
 1942|  6.85k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1942:9): [True: 6.23k, False: 614]
  ------------------
 1943|  6.23k|        sub_invocation_index = fdata->envelope->soroban_authorization.sub_invocation_index;
 1944|  6.23k|        sub_invocations_count = fdata->envelope->soroban_authorization.sub_invocations_count;
 1945|  6.23k|    } else {
 1946|    614|        sub_invocation_index =
 1947|    614|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocation_index;
 1948|    614|        sub_invocations_count =
 1949|    614|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocations_count;
 1950|    614|    }
 1951|       |
 1952|  6.85k|    STRLCPY(fdata->caption, "Nested Authorization", fdata->caption_len);
  ------------------
  |  |   35|  6.85k|    {                                         \
  |  |   36|  6.85k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.85k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.85k]
  |  |  ------------------
  |  |   38|  6.85k|    }
  ------------------
 1953|       |
 1954|  6.85k|    FORMATTER_CHECK(print_uint64_num(sub_invocation_index + 1, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  6.85k|    {                           \
  |  |   31|  6.85k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.85k]
  |  |  ------------------
  |  |   32|  6.85k|    }
  ------------------
 1955|  6.85k|    STRLCAT(fdata->value, " of ", fdata->value_len)
  ------------------
  |  |   41|  6.85k|    {                                         \
  |  |   42|  6.85k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  6.85k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 6.85k]
  |  |  ------------------
  |  |   44|  6.85k|    }
  ------------------
 1956|  6.85k|    FORMATTER_CHECK(print_uint64_num(sub_invocations_count,
  ------------------
  |  |   30|  6.85k|    {                           \
  |  |   31|  6.85k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.85k]
  |  |  ------------------
  |  |   32|  6.85k|    }
  ------------------
 1957|  6.85k|                                     fdata->value + strlen(fdata->value),
 1958|  6.85k|                                     fdata->value_len - strlen(fdata->value)))
 1959|       |
 1960|  6.85k|    buffer_t buffer = {
 1961|  6.85k|        .ptr = fdata->raw_data,
 1962|  6.85k|        .size = fdata->raw_data_len,
 1963|  6.85k|        .offset = fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1963:19): [True: 6.23k, False: 614]
  ------------------
 1964|  6.85k|                      ? fdata->envelope->soroban_authorization
 1965|  6.23k|                            .sub_invocation_positions[sub_invocation_index]
 1966|  6.85k|                      : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1967|    614|                            .sub_invocation_positions[sub_invocation_index]};
 1968|       |
 1969|       |    // here we parse the sub-invocation, and store it in the invoke_contract_args
 1970|  6.85k|    FORMATTER_CHECK(parse_auth_function(
  ------------------
  |  |   30|  6.85k|    {                           \
  |  |   31|  27.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.85k]
  |  |  |  Branch (31:15): [True: 6.23k, False: 614]
  |  |  |  Branch (31:15): [True: 6.23k, False: 614]
  |  |  ------------------
  |  |   32|  6.85k|    }
  ------------------
 1971|  6.85k|        &buffer,
 1972|  6.85k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
 1973|  6.85k|            ? &fdata->envelope->soroban_authorization.auth_function_type
 1974|  6.85k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.auth_function_type,
 1975|  6.85k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
 1976|  6.85k|            ? &fdata->envelope->soroban_authorization.invoke_contract_args
 1977|  6.85k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1978|  6.85k|                   .invoke_contract_args))
 1979|       |
 1980|  6.85k|    FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_auth_function))
  ------------------
  |  |   30|  6.85k|    {                           \
  |  |   31|  6.85k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.85k]
  |  |  ------------------
  |  |   32|  6.85k|    }
  ------------------
 1981|  6.85k|    return true;
 1982|  6.85k|}
formatter.c:format_sub_invocation_auth_function:
 1915|  6.85k|static bool format_sub_invocation_auth_function(formatter_data_t *fdata) {
 1916|  6.85k|    soroban_authorization_function_type_t auth_function_type =
 1917|  6.85k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1917:9): [True: 6.23k, False: 614]
  ------------------
 1918|  6.85k|            ? fdata->envelope->soroban_authorization.auth_function_type
 1919|  6.85k|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.auth_function_type;
 1920|  6.85k|    PRINTF("auth_function_type: %d\n", auth_function_type);
 1921|  6.85k|    switch (auth_function_type) {
 1922|  6.60k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
  ------------------
  |  Branch (1922:9): [True: 6.60k, False: 244]
  ------------------
 1923|  6.60k|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|  6.60k|    {                                         \
  |  |   36|  6.60k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.60k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.60k]
  |  |  ------------------
  |  |   38|  6.60k|    }
  ------------------
 1924|  6.60k|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|  6.60k|    {                                         \
  |  |   36|  6.60k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.60k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.60k]
  |  |  ------------------
  |  |   38|  6.60k|    }
  ------------------
 1925|  6.60k|            FORMATTER_CHECK(
  ------------------
  |  |   30|  6.60k|    {                           \
  |  |   31|  6.60k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.60k]
  |  |  ------------------
  |  |   32|  6.60k|    }
  ------------------
 1926|  6.60k|                push_to_formatter_stack(&format_sub_invocation_invoke_host_function_contract_id));
 1927|  6.60k|            break;
 1928|    244|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1928:9): [True: 244, False: 6.60k]
  ------------------
 1929|    244|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    244|    {                                         \
  |  |   36|    244|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    244|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 244]
  |  |  ------------------
  |  |   38|    244|    }
  ------------------
 1930|    244|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|    244|    {                                         \
  |  |   36|    244|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    244|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 244]
  |  |  ------------------
  |  |   38|    244|    }
  ------------------
 1931|    244|            FORMATTER_CHECK(format_next_sub_invocation(fdata));
  ------------------
  |  |   30|    244|    {                           \
  |  |   31|    244|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 244]
  |  |  ------------------
  |  |   32|    244|    }
  ------------------
 1932|    244|            break;
 1933|      0|        default:
  ------------------
  |  Branch (1933:9): [True: 0, False: 6.85k]
  ------------------
 1934|      0|            return false;
 1935|  6.85k|    }
 1936|  6.85k|    return true;
 1937|  6.85k|}
formatter.c:format_sub_invocation_invoke_host_function_contract_id:
 1898|  6.60k|static bool format_sub_invocation_invoke_host_function_contract_id(formatter_data_t *fdata) {
 1899|  6.60k|    invoke_contract_args_t invoke_contract_args;
 1900|  6.60k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1900:9): [True: 6.04k, False: 564]
  ------------------
 1901|  6.04k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1902|  6.04k|    } else {
 1903|    564|        invoke_contract_args =
 1904|    564|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1905|    564|    }
 1906|       |
 1907|  6.60k|    STRLCPY(fdata->caption, "Contract ID", fdata->caption_len);
  ------------------
  |  |   35|  6.60k|    {                                         \
  |  |   36|  6.60k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.60k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.60k]
  |  |  ------------------
  |  |   38|  6.60k|    }
  ------------------
 1908|       |
 1909|  6.60k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  6.60k|    {                           \
  |  |   31|  6.60k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.60k]
  |  |  ------------------
  |  |   32|  6.60k|    }
  ------------------
 1910|  6.60k|        print_sc_address(&invoke_contract_args.address, fdata->value, fdata->value_len, 0, 0))
 1911|  6.60k|    push_to_formatter_stack(&format_sub_invocation_invoke_host_function_func_name);
 1912|  6.60k|    return true;
 1913|  6.60k|}
formatter.c:format_sub_invocation_invoke_host_function_func_name:
 1864|  6.60k|static bool format_sub_invocation_invoke_host_function_func_name(formatter_data_t *fdata) {
 1865|  6.60k|    invoke_contract_args_t invoke_contract_args;
 1866|  6.60k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1866:9): [True: 6.04k, False: 564]
  ------------------
 1867|  6.04k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1868|  6.04k|    } else {
 1869|    564|        invoke_contract_args =
 1870|    564|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1871|    564|    }
 1872|  6.60k|    STRLCPY(fdata->caption, "Function", fdata->caption_len);
  ------------------
  |  |   35|  6.60k|    {                                         \
  |  |   36|  6.60k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.60k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.60k]
  |  |  ------------------
  |  |   38|  6.60k|    }
  ------------------
 1873|  6.60k|    FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|  6.60k|    {                           \
  |  |   31|  6.60k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.60k]
  |  |  ------------------
  |  |   32|  6.60k|    }
  ------------------
 1874|  6.60k|                                 fdata->value_len,
 1875|  6.60k|                                 invoke_contract_args.function.name,
 1876|  6.60k|                                 invoke_contract_args.function.name_size))
 1877|       |
 1878|  6.60k|    uint8_t data_count = should_move_control_to_plugin(fdata);
 1879|  6.60k|    if (data_count == 0) {
  ------------------
  |  Branch (1879:9): [True: 3.07k, False: 3.53k]
  ------------------
 1880|       |        // we should not move control to plugin
 1881|  3.07k|        if (invoke_contract_args.parameters_length == 0) {
  ------------------
  |  Branch (1881:13): [True: 1.86k, False: 1.21k]
  ------------------
 1882|  1.86k|            return format_next_sub_invocation(fdata);
 1883|  1.86k|        } else {
 1884|  1.21k|            parameters_index = 0;
 1885|  1.21k|            FORMATTER_CHECK(
  ------------------
  |  |   30|  1.21k|    {                           \
  |  |   31|  1.21k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.21k]
  |  |  ------------------
  |  |   32|  1.21k|    }
  ------------------
 1886|  1.21k|                push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args))
 1887|  1.21k|        }
 1888|  3.53k|    } else {
 1889|  3.53k|        PRINTF("we should move control to plugin\n");
 1890|  3.53k|        parameters_index = 0;
 1891|  3.53k|        FORMATTER_CHECK(
  ------------------
  |  |   30|  3.53k|    {                           \
  |  |   31|  3.53k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.53k]
  |  |  ------------------
  |  |   32|  3.53k|    }
  ------------------
 1892|  3.53k|            push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args_with_plugin))
 1893|  3.53k|    }
 1894|       |
 1895|  4.74k|    return true;
 1896|  6.60k|}
formatter.c:format_sub_invocation_invoke_host_function_args:
 1792|  3.55k|static bool format_sub_invocation_invoke_host_function_args(formatter_data_t *fdata) {
 1793|  3.55k|    invoke_contract_args_t invoke_contract_args;
 1794|  3.55k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1794:9): [True: 3.13k, False: 417]
  ------------------
 1795|  3.13k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1796|  3.13k|    } else {
 1797|    417|        invoke_contract_args =
 1798|    417|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1799|    417|    }
 1800|       |
 1801|  3.55k|    size_t length;
 1802|  3.55k|    STRLCPY(fdata->caption, "Arg ", fdata->caption_len);
  ------------------
  |  |   35|  3.55k|    {                                         \
  |  |   36|  3.55k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  3.55k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3.55k]
  |  |  ------------------
  |  |   38|  3.55k|    }
  ------------------
 1803|  3.55k|    length = strlen(fdata->caption);
 1804|  3.55k|    FORMATTER_CHECK(print_uint64_num(parameters_index + 1,
  ------------------
  |  |   30|  3.55k|    {                           \
  |  |   31|  3.55k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.55k]
  |  |  ------------------
  |  |   32|  3.55k|    }
  ------------------
 1805|  3.55k|                                     fdata->caption + length,
 1806|  3.55k|                                     fdata->caption_len - length))
 1807|       |
 1808|  3.55k|    STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  3.55k|    {                                         \
  |  |   42|  3.55k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  3.55k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 3.55k]
  |  |  ------------------
  |  |   44|  3.55k|    }
  ------------------
 1809|  3.55k|    length = strlen(fdata->caption);
 1810|  3.55k|    FORMATTER_CHECK(print_uint64_num(invoke_contract_args.parameters_length,
  ------------------
  |  |   30|  3.55k|    {                           \
  |  |   31|  3.55k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.55k]
  |  |  ------------------
  |  |   32|  3.55k|    }
  ------------------
 1811|  3.55k|                                     fdata->caption + length,
 1812|  3.55k|                                     fdata->caption_len - length))
 1813|       |
 1814|  3.55k|    buffer_t buffer = {.ptr = fdata->raw_data,
 1815|  3.55k|                       .size = fdata->raw_data_len,
 1816|  3.55k|                       .offset = invoke_contract_args.parameters_position};
 1817|       |    // Content
 1818|  12.6k|    for (uint8_t i = 0; i < parameters_index; i++) {
  ------------------
  |  Branch (1818:25): [True: 9.07k, False: 3.55k]
  ------------------
 1819|  9.07k|        FORMATTER_CHECK(read_scval_advance(&buffer))
  ------------------
  |  |   30|  9.07k|    {                           \
  |  |   31|  9.07k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 9.07k]
  |  |  ------------------
  |  |   32|  9.07k|    }
  ------------------
 1820|  9.07k|    }
 1821|       |
 1822|  3.55k|    FORMATTER_CHECK(print_scval(buffer, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  3.55k|    {                           \
  |  |   31|  3.55k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 92, False: 3.46k]
  |  |  ------------------
  |  |   32|  3.55k|    }
  ------------------
 1823|       |
 1824|  3.46k|    parameters_index++;
 1825|  3.46k|    if (parameters_index == invoke_contract_args.parameters_length) {
  ------------------
  |  Branch (1825:9): [True: 1.12k, False: 2.33k]
  ------------------
 1826|  1.12k|        return format_next_sub_invocation(fdata);
 1827|  2.33k|    } else {
 1828|  2.33k|        FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args))
  ------------------
  |  |   30|  2.33k|    {                           \
  |  |   31|  2.33k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.33k]
  |  |  ------------------
  |  |   32|  2.33k|    }
  ------------------
 1829|  2.33k|    }
 1830|  2.33k|    return true;
 1831|  3.46k|}
formatter.c:print_scval:
 1697|  18.8k|static bool print_scval(buffer_t buffer, char *value, uint8_t value_len) {
 1698|  18.8k|    uint32_t sc_type;
 1699|  18.8k|    FORMATTER_CHECK(parse_uint32(&buffer, &sc_type))
  ------------------
  |  |   30|  18.8k|    {                           \
  |  |   31|  18.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 18.8k]
  |  |  ------------------
  |  |   32|  18.8k|    }
  ------------------
 1700|       |
 1701|  18.8k|    switch (sc_type) {
 1702|  10.9k|        case SCV_BOOL: {
  ------------------
  |  Branch (1702:9): [True: 10.9k, False: 7.92k]
  ------------------
 1703|  10.9k|            bool b;
 1704|  10.9k|            FORMATTER_CHECK(parse_bool(&buffer, &b))
  ------------------
  |  |   30|  10.9k|    {                           \
  |  |   31|  10.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1.08k, False: 9.86k]
  |  |  ------------------
  |  |   32|  10.9k|    }
  ------------------
 1705|  9.86k|            STRLCPY(value, b ? "true" : "false", value_len);
  ------------------
  |  |   35|  9.86k|    {                                         \
  |  |   36|  19.7k|        size_t len = strlcpy(dst, src, size); \
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 145, False: 9.72k]
  |  |  ------------------
  |  |   37|  9.86k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 9.86k]
  |  |  ------------------
  |  |   38|  9.86k|    }
  ------------------
 1706|  9.86k|            break;
 1707|  9.86k|        }
 1708|  1.07k|        case SCV_VOID:
  ------------------
  |  Branch (1708:9): [True: 1.07k, False: 17.8k]
  ------------------
 1709|  1.07k|            STRLCPY(value, "[void]", value_len);
  ------------------
  |  |   35|  1.07k|    {                                         \
  |  |   36|  1.07k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.07k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.07k]
  |  |  ------------------
  |  |   38|  1.07k|    }
  ------------------
 1710|  1.07k|            break;  // void
 1711|    177|        case SCV_U32:
  ------------------
  |  Branch (1711:9): [True: 177, False: 18.7k]
  ------------------
 1712|    177|            FORMATTER_CHECK(print_uint32(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    177|    {                           \
  |  |   31|    177|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 177]
  |  |  ------------------
  |  |   32|    177|    }
  ------------------
 1713|    177|            break;
 1714|    334|        case SCV_I32:
  ------------------
  |  Branch (1714:9): [True: 334, False: 18.5k]
  ------------------
 1715|    334|            FORMATTER_CHECK(print_int32(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    334|    {                           \
  |  |   31|    334|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 334]
  |  |  ------------------
  |  |   32|    334|    }
  ------------------
 1716|    334|            break;
 1717|    158|        case SCV_U64:
  ------------------
  |  Branch (1717:9): [True: 158, False: 18.7k]
  ------------------
 1718|    158|            FORMATTER_CHECK(print_uint64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    158|    {                           \
  |  |   31|    158|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 158]
  |  |  ------------------
  |  |   32|    158|    }
  ------------------
 1719|    158|            break;
 1720|    198|        case SCV_I64:
  ------------------
  |  Branch (1720:9): [True: 198, False: 18.6k]
  ------------------
 1721|    198|            FORMATTER_CHECK(print_int64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    198|    {                           \
  |  |   31|    198|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 198]
  |  |  ------------------
  |  |   32|    198|    }
  ------------------
 1722|    198|            break;
 1723|    284|        case SCV_TIMEPOINT: {
  ------------------
  |  Branch (1723:9): [True: 284, False: 18.5k]
  ------------------
 1724|    284|            uint64_t timepoint;
 1725|    284|            FORMATTER_CHECK(parse_uint64(&buffer, &timepoint));
  ------------------
  |  |   30|    284|    {                           \
  |  |   31|    284|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 284]
  |  |  ------------------
  |  |   32|    284|    }
  ------------------
 1726|    284|            FORMATTER_CHECK(print_time(timepoint, value, value_len));
  ------------------
  |  |   30|    284|    {                           \
  |  |   31|    284|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 29, False: 255]
  |  |  ------------------
  |  |   32|    284|    }
  ------------------
 1727|    255|            break;
 1728|    284|        }
 1729|    349|        case SCV_DURATION:
  ------------------
  |  Branch (1729:9): [True: 349, False: 18.5k]
  ------------------
 1730|    349|            FORMATTER_CHECK(print_int64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    349|    {                           \
  |  |   31|    349|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 349]
  |  |  ------------------
  |  |   32|    349|    }
  ------------------
 1731|    349|            break;
 1732|    334|        case SCV_U128:
  ------------------
  |  Branch (1732:9): [True: 334, False: 18.5k]
  ------------------
 1733|    334|            FORMATTER_CHECK(print_uint128(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    334|    {                           \
  |  |   31|    334|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 334]
  |  |  ------------------
  |  |   32|    334|    }
  ------------------
 1734|    334|            break;
 1735|  1.67k|        case SCV_I128:
  ------------------
  |  Branch (1735:9): [True: 1.67k, False: 17.2k]
  ------------------
 1736|  1.67k|            FORMATTER_CHECK(print_int128(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|  1.67k|    {                           \
  |  |   31|  1.67k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.67k]
  |  |  ------------------
  |  |   32|  1.67k|    }
  ------------------
 1737|  1.67k|            break;
 1738|    303|        case SCV_U256:
  ------------------
  |  Branch (1738:9): [True: 303, False: 18.5k]
  ------------------
 1739|    303|            FORMATTER_CHECK(print_uint256(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    303|    {                           \
  |  |   31|    303|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 303]
  |  |  ------------------
  |  |   32|    303|    }
  ------------------
 1740|    303|            break;
 1741|    429|        case SCV_I256:
  ------------------
  |  Branch (1741:9): [True: 429, False: 18.4k]
  ------------------
 1742|    429|            FORMATTER_CHECK(print_int256(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    429|    {                           \
  |  |   31|    429|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 429]
  |  |  ------------------
  |  |   32|    429|    }
  ------------------
 1743|    429|            break;
 1744|    323|        case SCV_BYTES:
  ------------------
  |  Branch (1744:9): [True: 323, False: 18.5k]
  ------------------
 1745|    323|            STRLCPY(value, "[Bytes Data]", value_len);
  ------------------
  |  |   35|    323|    {                                         \
  |  |   36|    323|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    323|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 323]
  |  |  ------------------
  |  |   38|    323|    }
  ------------------
 1746|    323|            break;
 1747|    719|        case SCV_STRING: {
  ------------------
  |  Branch (1747:9): [True: 719, False: 18.1k]
  ------------------
 1748|    719|            scv_string_t scv_string;
 1749|    719|            FORMATTER_CHECK(parse_scv_string(&buffer, &scv_string));
  ------------------
  |  |   30|    719|    {                           \
  |  |   31|    719|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 4, False: 715]
  |  |  ------------------
  |  |   32|    719|    }
  ------------------
 1750|    715|            FORMATTER_CHECK(print_scv_string(&scv_string, value, value_len));
  ------------------
  |  |   30|    715|    {                           \
  |  |   31|    715|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 715]
  |  |  ------------------
  |  |   32|    715|    }
  ------------------
 1751|    715|            break;
 1752|    715|        }
 1753|    318|        case SCV_SYMBOL: {
  ------------------
  |  Branch (1753:9): [True: 318, False: 18.5k]
  ------------------
 1754|    318|            scv_symbol_t scv_symbol;
 1755|    318|            FORMATTER_CHECK(parse_scv_symbol(&buffer, &scv_symbol));
  ------------------
  |  |   30|    318|    {                           \
  |  |   31|    318|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 10, False: 308]
  |  |  ------------------
  |  |   32|    318|    }
  ------------------
 1756|    308|            FORMATTER_CHECK(print_scv_symbol(&scv_symbol, value, value_len));
  ------------------
  |  |   30|    308|    {                           \
  |  |   31|    308|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 7, False: 301]
  |  |  ------------------
  |  |   32|    308|    }
  ------------------
 1757|    301|            break;
 1758|    308|        }
 1759|    527|        case SCV_ADDRESS: {
  ------------------
  |  Branch (1759:9): [True: 527, False: 18.3k]
  ------------------
 1760|    527|            sc_address_t sc_address;
 1761|    527|            FORMATTER_CHECK(parse_sc_address(&buffer, &sc_address));
  ------------------
  |  |   30|    527|    {                           \
  |  |   31|    527|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 527]
  |  |  ------------------
  |  |   32|    527|    }
  ------------------
 1762|    527|            FORMATTER_CHECK(print_sc_address(&sc_address, value, value_len, 0, 0));
  ------------------
  |  |   30|    527|    {                           \
  |  |   31|    527|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 527]
  |  |  ------------------
  |  |   32|    527|    }
  ------------------
 1763|    527|            break;
 1764|    527|        }
 1765|    731|        default:
  ------------------
  |  Branch (1765:9): [True: 731, False: 18.1k]
  ------------------
 1766|    731|            STRLCPY(value, "[unable to display]", value_len);
  ------------------
  |  |   35|    731|    {                                         \
  |  |   36|    731|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    731|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 731]
  |  |  ------------------
  |  |   38|    731|    }
  ------------------
 1767|  18.8k|    }
 1768|  17.7k|    return true;
 1769|  18.8k|}
formatter.c:format_sub_invocation_invoke_host_function_args_with_plugin:
 1833|  10.5k|static bool format_sub_invocation_invoke_host_function_args_with_plugin(formatter_data_t *fdata) {
 1834|  10.5k|    invoke_contract_args_t invoke_contract_args;
 1835|  10.5k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1835:9): [True: 10.5k, False: 0]
  ------------------
 1836|  10.5k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1837|  10.5k|    } else {
 1838|      0|        invoke_contract_args =
 1839|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1840|      0|    }
 1841|       |
 1842|  10.5k|    const uint8_t *contract_address = invoke_contract_args.address.address;
 1843|       |
 1844|       |    // get data pair
 1845|  10.5k|    if (fdata->plugin_query_data_pair(contract_address,
  ------------------
  |  Branch (1845:9): [True: 0, False: 10.5k]
  ------------------
 1846|  10.5k|                                      parameters_index,
 1847|  10.5k|                                      fdata->caption,
 1848|  10.5k|                                      fdata->caption_len,
 1849|  10.5k|                                      fdata->value,
 1850|  10.5k|                                      fdata->value_len) != STELLAR_PLUGIN_RESULT_OK) {
 1851|      0|        return false;
 1852|      0|    }
 1853|       |
 1854|  10.5k|    parameters_index++;
 1855|  10.5k|    if (parameters_index == plugin_data_pair_count) {
  ------------------
  |  Branch (1855:9): [True: 3.53k, False: 7.06k]
  ------------------
 1856|  3.53k|        return format_next_sub_invocation(fdata);
 1857|  7.06k|    } else {
 1858|  7.06k|        FORMATTER_CHECK(
  ------------------
  |  |   30|  7.06k|    {                           \
  |  |   31|  7.06k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.06k]
  |  |  ------------------
  |  |   32|  7.06k|    }
  ------------------
 1859|  7.06k|            push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args_with_plugin))
 1860|  7.06k|    }
 1861|  7.06k|    return true;
 1862|  10.5k|}
formatter.c:format_next_sub_invocation:
 1772|  6.76k|static bool format_next_sub_invocation(formatter_data_t *fdata) {
 1773|  6.76k|    uint8_t sub_invocations_count =
 1774|  6.76k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1774:9): [True: 6.15k, False: 606]
  ------------------
 1775|  6.76k|            ? fdata->envelope->soroban_authorization.sub_invocations_count
 1776|  6.76k|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1777|    606|                  .sub_invocations_count;
 1778|  6.76k|    uint8_t *sub_invocation_index =
 1779|  6.76k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1779:9): [True: 6.15k, False: 606]
  ------------------
 1780|  6.76k|            ? &fdata->envelope->soroban_authorization.sub_invocation_index
 1781|  6.76k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1782|    606|                   .sub_invocation_index;
 1783|  6.76k|    (*sub_invocation_index)++;
 1784|  6.76k|    if (*sub_invocation_index == sub_invocations_count) {
  ------------------
  |  Branch (1784:9): [True: 1.15k, False: 5.60k]
  ------------------
 1785|  1.15k|        return push_to_formatter_stack(NULL);
 1786|  5.60k|    } else {
 1787|  5.60k|        formatter_index = 0;
 1788|  5.60k|        return push_to_formatter_stack(format_sub_invocation_start);
 1789|  5.60k|    }
 1790|  6.76k|}
formatter.c:format_invoke_host_function_args:
 2048|  15.3k|static bool format_invoke_host_function_args(formatter_data_t *fdata) {
 2049|  15.3k|    invoke_contract_args_t invoke_contract_args;
 2050|  15.3k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2050:9): [True: 13.8k, False: 1.46k]
  ------------------
 2051|  13.8k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2052|  13.8k|    } else {
 2053|  1.46k|        invoke_contract_args =
 2054|  1.46k|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2055|  1.46k|    }
 2056|       |
 2057|  15.3k|    size_t length;
 2058|  15.3k|    STRLCPY(fdata->caption, "Arg ", fdata->caption_len);
  ------------------
  |  |   35|  15.3k|    {                                         \
  |  |   36|  15.3k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  15.3k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 15.3k]
  |  |  ------------------
  |  |   38|  15.3k|    }
  ------------------
 2059|  15.3k|    length = strlen(fdata->caption);
 2060|  15.3k|    FORMATTER_CHECK(print_uint64_num(parameters_index + 1,
  ------------------
  |  |   30|  15.3k|    {                           \
  |  |   31|  15.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 15.3k]
  |  |  ------------------
  |  |   32|  15.3k|    }
  ------------------
 2061|  15.3k|                                     fdata->caption + length,
 2062|  15.3k|                                     fdata->caption_len - length))
 2063|       |
 2064|  15.3k|    STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  15.3k|    {                                         \
  |  |   42|  15.3k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  15.3k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 15.3k]
  |  |  ------------------
  |  |   44|  15.3k|    }
  ------------------
 2065|  15.3k|    length = strlen(fdata->caption);
 2066|  15.3k|    FORMATTER_CHECK(print_uint64_num(invoke_contract_args.parameters_length,
  ------------------
  |  |   30|  15.3k|    {                           \
  |  |   31|  15.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 15.3k]
  |  |  ------------------
  |  |   32|  15.3k|    }
  ------------------
 2067|  15.3k|                                     fdata->caption + length,
 2068|  15.3k|                                     fdata->caption_len - length))
 2069|       |
 2070|  15.3k|    buffer_t buffer = {.ptr = fdata->raw_data,
 2071|  15.3k|                       .size = fdata->raw_data_len,
 2072|  15.3k|                       .offset = invoke_contract_args.parameters_position};
 2073|       |    // Content
 2074|  60.5k|    for (uint8_t i = 0; i < parameters_index; i++) {
  ------------------
  |  Branch (2074:25): [True: 45.2k, False: 15.3k]
  ------------------
 2075|  45.2k|        FORMATTER_CHECK(read_scval_advance(&buffer))
  ------------------
  |  |   30|  45.2k|    {                           \
  |  |   31|  45.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 45.2k]
  |  |  ------------------
  |  |   32|  45.2k|    }
  ------------------
 2076|  45.2k|    }
 2077|       |
 2078|  15.3k|    FORMATTER_CHECK(print_scval(buffer, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  15.3k|    {                           \
  |  |   31|  15.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1.04k, False: 14.2k]
  |  |  ------------------
  |  |   32|  15.3k|    }
  ------------------
 2079|       |
 2080|  14.2k|    parameters_index++;
 2081|  14.2k|    if (parameters_index == invoke_contract_args.parameters_length) {
  ------------------
  |  Branch (2081:9): [True: 1.80k, False: 12.4k]
  ------------------
 2082|  1.80k|        return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2083|  12.4k|    } else {
 2084|  12.4k|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args))
  ------------------
  |  |   30|  12.4k|    {                           \
  |  |   31|  12.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12.4k]
  |  |  ------------------
  |  |   32|  12.4k|    }
  ------------------
 2085|  12.4k|    }
 2086|  12.4k|    return true;
 2087|  14.2k|}
formatter.c:format_invoke_host_function_args_with_plugin:
 2089|  1.00k|static bool format_invoke_host_function_args_with_plugin(formatter_data_t *fdata) {
 2090|  1.00k|    invoke_contract_args_t invoke_contract_args;
 2091|  1.00k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2091:9): [True: 1.00k, False: 0]
  ------------------
 2092|  1.00k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2093|  1.00k|    } else {
 2094|      0|        invoke_contract_args =
 2095|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2096|      0|    }
 2097|       |
 2098|  1.00k|    const uint8_t *contract_address = invoke_contract_args.address.address;
 2099|       |
 2100|       |    // get data pair
 2101|  1.00k|    if (fdata->plugin_query_data_pair(contract_address,
  ------------------
  |  Branch (2101:9): [True: 0, False: 1.00k]
  ------------------
 2102|  1.00k|                                      parameters_index,
 2103|  1.00k|                                      fdata->caption,
 2104|  1.00k|                                      fdata->caption_len,
 2105|  1.00k|                                      fdata->value,
 2106|  1.00k|                                      fdata->value_len) != STELLAR_PLUGIN_RESULT_OK) {
 2107|      0|        return false;
 2108|      0|    }
 2109|       |
 2110|  1.00k|    parameters_index++;
 2111|  1.00k|    if (parameters_index == plugin_data_pair_count) {
  ------------------
  |  Branch (2111:9): [True: 334, False: 668]
  ------------------
 2112|       |        // if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
 2113|       |        //     FORMATTER_CHECK(push_to_formatter_stack(NULL))
 2114|       |        // } else {
 2115|       |        //     return format_operation_source_prepare(fdata);
 2116|       |        // }
 2117|    334|        return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2118|    668|    } else {
 2119|    668|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args_with_plugin))
  ------------------
  |  |   30|    668|    {                           \
  |  |   31|    668|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 668]
  |  |  ------------------
  |  |   32|    668|    }
  ------------------
 2120|    668|    }
 2121|    668|    return true;
 2122|  1.00k|}
formatter.c:format_transaction_info:
 2380|  6.44k|static bool format_transaction_info(formatter_data_t *fdata) {
 2381|  6.44k|    if (fdata->envelope->network != 0) {
  ------------------
  |  Branch (2381:9): [True: 6.07k, False: 373]
  ------------------
 2382|  6.07k|        FORMATTER_CHECK(push_to_formatter_stack(&format_network))
  ------------------
  |  |   30|  6.07k|    {                           \
  |  |   31|  6.07k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.07k]
  |  |  ------------------
  |  |   32|  6.07k|    }
  ------------------
 2383|  6.07k|    } else {
 2384|    373|        return get_tx_details_formatter(fdata);
 2385|    373|    }
 2386|  6.07k|    return true;
 2387|  6.44k|}
formatter.c:push_to_formatter_stack:
   59|   318k|static bool push_to_formatter_stack(format_function_t formatter) {
   60|   318k|    if (formatter_index >= MAX_FORMATTERS_PER_OPERATION) {
  ------------------
  |  |   47|   318k|#define MAX_FORMATTERS_PER_OPERATION 16
  ------------------
  |  Branch (60:9): [True: 31, False: 318k]
  ------------------
   61|     31|        PRINTF("Formatter stack overflow\n");
   62|     31|        return false;
   63|     31|    }
   64|       |
   65|   318k|    formatter_stack[formatter_index++] = formatter;
   66|       |
   67|   318k|    return true;
   68|   318k|}
formatter.c:format_confirm_operation:
 2262|  40.7k|static bool format_confirm_operation(formatter_data_t *fdata) {
 2263|  40.7k|    if (fdata->envelope->tx_details.tx.operations_count > 1) {
  ------------------
  |  Branch (2263:9): [True: 39.3k, False: 1.34k]
  ------------------
 2264|  39.3k|        size_t length;
 2265|  39.3k|        STRLCPY(fdata->caption, "Operation ", fdata->caption_len);
  ------------------
  |  |   35|  39.3k|    {                                         \
  |  |   36|  39.3k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  39.3k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 39.3k]
  |  |  ------------------
  |  |   38|  39.3k|    }
  ------------------
 2266|  39.3k|        length = strlen(fdata->caption);
 2267|  39.3k|        FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.operation_index + 1,
  ------------------
  |  |   30|  39.3k|    {                           \
  |  |   31|  39.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 39.3k]
  |  |  ------------------
  |  |   32|  39.3k|    }
  ------------------
 2268|  39.3k|                                         fdata->caption + length,
 2269|  39.3k|                                         fdata->caption_len - length))
 2270|  39.3k|        STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  39.3k|    {                                         \
  |  |   42|  39.3k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  39.3k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 39.3k]
  |  |  ------------------
  |  |   44|  39.3k|    }
  ------------------
 2271|  39.3k|        length = strlen(fdata->caption);
 2272|  39.3k|        FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.operations_count,
  ------------------
  |  |   30|  39.3k|    {                           \
  |  |   31|  39.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 39.3k]
  |  |  ------------------
  |  |   32|  39.3k|    }
  ------------------
 2273|  39.3k|                                         fdata->caption + length,
 2274|  39.3k|                                         fdata->caption_len - length))
 2275|       |
 2276|  39.3k|        FORMATTER_CHECK(push_to_formatter_stack(
  ------------------
  |  |   30|  39.3k|    {                           \
  |  |   31|  39.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 39.3k]
  |  |  ------------------
  |  |   32|  39.3k|    }
  ------------------
 2277|  39.3k|            ((format_function_t) PIC(formatters[fdata->envelope->tx_details.tx.op_details.type]))));
 2278|  39.3k|    } else {
 2279|  1.34k|        format_function_t func = PIC(formatters[fdata->envelope->tx_details.tx.op_details.type]);
  ------------------
  |  |    6|  1.34k|#define PIC(x) x
  ------------------
 2280|  1.34k|        FORMATTER_CHECK(func(fdata));
  ------------------
  |  |   30|  1.34k|    {                           \
  |  |   31|  1.34k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 10, False: 1.33k]
  |  |  ------------------
  |  |   32|  1.34k|    }
  ------------------
 2281|  1.33k|    }
 2282|  40.7k|    return true;
 2283|  40.7k|}
formatter.c:format_create_account:
 1134|  26.1k|static bool format_create_account(formatter_data_t *fdata) {
 1135|  26.1k|    (void) fdata;
 1136|  26.1k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  26.1k|    {                                         \
  |  |   36|  26.1k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  26.1k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26.1k]
  |  |  ------------------
  |  |   38|  26.1k|    }
  ------------------
 1137|  26.1k|    STRLCPY(fdata->value, "Create Account", fdata->value_len);
  ------------------
  |  |   35|  26.1k|    {                                         \
  |  |   36|  26.1k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  26.1k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26.1k]
  |  |  ------------------
  |  |   38|  26.1k|    }
  ------------------
 1138|  26.1k|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_account_destination))
  ------------------
  |  |   30|  26.1k|    {                           \
  |  |   31|  26.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26.1k]
  |  |  ------------------
  |  |   32|  26.1k|    }
  ------------------
 1139|  26.1k|    return true;
 1140|  26.1k|}
formatter.c:format_create_account_destination:
 1122|  26.1k|static bool format_create_account_destination(formatter_data_t *fdata) {
 1123|  26.1k|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|  26.1k|    {                                         \
  |  |   36|  26.1k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  26.1k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26.1k]
  |  |  ------------------
  |  |   38|  26.1k|    }
  ------------------
 1124|  26.1k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  26.1k|    {                           \
  |  |   31|  26.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26.1k]
  |  |  ------------------
  |  |   32|  26.1k|    }
  ------------------
 1125|  26.1k|        print_account_id(fdata->envelope->tx_details.tx.op_details.create_account_op.destination,
 1126|  26.1k|                         fdata->value,
 1127|  26.1k|                         fdata->value_len,
 1128|  26.1k|                         0,
 1129|  26.1k|                         0))
 1130|  26.1k|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_account_amount))
  ------------------
  |  |   30|  26.1k|    {                           \
  |  |   31|  26.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26.1k]
  |  |  ------------------
  |  |   32|  26.1k|    }
  ------------------
 1131|  26.1k|    return true;
 1132|  26.1k|}
formatter.c:format_create_account_amount:
 1110|  26.1k|static bool format_create_account_amount(formatter_data_t *fdata) {
 1111|  26.1k|    STRLCPY(fdata->caption, "Starting Balance", fdata->caption_len);
  ------------------
  |  |   35|  26.1k|    {                                         \
  |  |   36|  26.1k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  26.1k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26.1k]
  |  |  ------------------
  |  |   38|  26.1k|    }
  ------------------
 1112|  26.1k|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
 1113|  26.1k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  26.1k|    {                           \
  |  |   31|  26.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26.1k]
  |  |  ------------------
  |  |   32|  26.1k|    }
  ------------------
 1114|  26.1k|        print_amount(fdata->envelope->tx_details.tx.op_details.create_account_op.starting_balance,
 1115|  26.1k|                     &asset,
 1116|  26.1k|                     fdata->envelope->network,
 1117|  26.1k|                     fdata->value,
 1118|  26.1k|                     fdata->value_len))
 1119|  26.1k|    return format_operation_source_prepare(fdata);
 1120|  26.1k|}
formatter.c:format_operation_source_prepare:
  334|  39.8k|static bool format_operation_source_prepare(formatter_data_t *fdata) {
  335|  39.8k|    if (fdata->envelope->tx_details.tx.op_details.source_account_present) {
  ------------------
  |  Branch (335:9): [True: 1.25k, False: 38.5k]
  ------------------
  336|       |        // If the source exists, when the user clicks the next button,
  337|       |        // it will jump to the page showing the source
  338|  1.25k|        FORMATTER_CHECK(push_to_formatter_stack(&format_operation_source))
  ------------------
  |  |   30|  1.25k|    {                           \
  |  |   31|  1.25k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.25k]
  |  |  ------------------
  |  |   32|  1.25k|    }
  ------------------
  339|  38.5k|    } else {
  340|  38.5k|        FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  38.5k|    {                           \
  |  |   31|  38.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 38.5k]
  |  |  ------------------
  |  |   32|  38.5k|    }
  ------------------
  341|  38.5k|    }
  342|  39.8k|    return true;
  343|  39.8k|}
formatter.c:format_operation_source:
  305|  1.25k|static bool format_operation_source(formatter_data_t *fdata) {
  306|  1.25k|    STRLCPY(fdata->caption, "Op Source", fdata->caption_len);
  ------------------
  |  |   35|  1.25k|    {                                         \
  |  |   36|  1.25k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.25k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.25k]
  |  |  ------------------
  |  |   38|  1.25k|    }
  ------------------
  307|  1.25k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (307:9): [True: 1.17k, False: 81]
  ------------------
  308|  1.25k|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (308:9): [True: 1.06k, False: 114]
  ------------------
  309|  1.25k|        fdata->envelope->tx_details.tx.op_details.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (309:9): [True: 907, False: 156]
  ------------------
  310|  1.25k|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (310:9): [True: 576, False: 331]
  ------------------
  311|    907|               fdata->signing_key,
  312|    907|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0 &&
  ------------------
  |  |   18|    907|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  313|  1.25k|        memcmp(fdata->envelope->tx_details.tx.op_details.source_account.ed25519,
  ------------------
  |  Branch (313:9): [True: 351, False: 225]
  ------------------
  314|    576|               fdata->signing_key,
  315|    576|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|    576|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  316|    351|        FORMATTER_CHECK(
  ------------------
  |  |   30|    351|    {                           \
  |  |   31|    351|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 351]
  |  |  ------------------
  |  |   32|    351|    }
  ------------------
  317|    351|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
  318|    351|                                fdata->value,
  319|    351|                                fdata->value_len,
  320|    351|                                6,
  321|    351|                                6))
  322|    907|    } else {
  323|    907|        FORMATTER_CHECK(
  ------------------
  |  |   30|    907|    {                           \
  |  |   31|    907|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 907]
  |  |  ------------------
  |  |   32|    907|    }
  ------------------
  324|    907|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
  325|    907|                                fdata->value,
  326|    907|                                fdata->value_len,
  327|    907|                                0,
  328|    907|                                0))
  329|    907|    }
  330|  1.25k|    FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  1.25k|    {                           \
  |  |   31|  1.25k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.25k]
  |  |  ------------------
  |  |   32|  1.25k|    }
  ------------------
  331|  1.25k|    return true;
  332|  1.25k|}
formatter.c:format_payment:
 1099|    651|static bool format_payment(formatter_data_t *fdata) {
 1100|    651|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|    651|    {                                         \
  |  |   36|    651|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    651|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 651]
  |  |  ------------------
  |  |   38|    651|    }
  ------------------
 1101|    651|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.payment_op.amount,
  ------------------
  |  |   30|    651|    {                           \
  |  |   31|    651|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 651]
  |  |  ------------------
  |  |   32|    651|    }
  ------------------
 1102|    651|                                 &fdata->envelope->tx_details.tx.op_details.payment_op.asset,
 1103|    651|                                 fdata->envelope->network,
 1104|    651|                                 fdata->value,
 1105|    651|                                 fdata->value_len))
 1106|    651|    FORMATTER_CHECK(push_to_formatter_stack(&format_payment_destination))
  ------------------
  |  |   30|    651|    {                           \
  |  |   31|    651|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 651]
  |  |  ------------------
  |  |   32|    651|    }
  ------------------
 1107|    651|    return true;
 1108|    651|}
formatter.c:format_payment_destination:
 1088|    651|static bool format_payment_destination(formatter_data_t *fdata) {
 1089|    651|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    651|    {                                         \
  |  |   36|    651|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    651|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 651]
  |  |  ------------------
  |  |   38|    651|    }
  ------------------
 1090|    651|    FORMATTER_CHECK(
  ------------------
  |  |   30|    651|    {                           \
  |  |   31|    651|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 651]
  |  |  ------------------
  |  |   32|    651|    }
  ------------------
 1091|    651|        print_muxed_account(&fdata->envelope->tx_details.tx.op_details.payment_op.destination,
 1092|    651|                            fdata->value,
 1093|    651|                            fdata->value_len,
 1094|    651|                            0,
 1095|    651|                            0))
 1096|    651|    return format_operation_source_prepare(fdata);
 1097|    651|}
formatter.c:format_path_payment_strict_receive:
 1041|    327|static bool format_path_payment_strict_receive(formatter_data_t *fdata) {
 1042|    327|    STRLCPY(fdata->caption, "Send Max", fdata->caption_len);
  ------------------
  |  |   35|    327|    {                                         \
  |  |   36|    327|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    327|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 327]
  |  |  ------------------
  |  |   38|    327|    }
  ------------------
 1043|    327|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    327|    {                           \
  |  |   31|    327|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 327]
  |  |  ------------------
  |  |   32|    327|    }
  ------------------
 1044|    327|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.send_max,
 1045|    327|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.send_asset,
 1046|    327|        fdata->envelope->network,
 1047|    327|        fdata->value,
 1048|    327|        fdata->value_len))
 1049|    327|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_receive_destination))
  ------------------
  |  |   30|    327|    {                           \
  |  |   31|    327|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 327]
  |  |  ------------------
  |  |   32|    327|    }
  ------------------
 1050|    327|    return true;
 1051|    327|}
formatter.c:format_path_payment_strict_receive_destination:
 1029|    327|static bool format_path_payment_strict_receive_destination(formatter_data_t *fdata) {
 1030|    327|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    327|    {                                         \
  |  |   36|    327|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    327|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 327]
  |  |  ------------------
  |  |   38|    327|    }
  ------------------
 1031|    327|    FORMATTER_CHECK(print_muxed_account(
  ------------------
  |  |   30|    327|    {                           \
  |  |   31|    327|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 327]
  |  |  ------------------
  |  |   32|    327|    }
  ------------------
 1032|    327|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.destination,
 1033|    327|        fdata->value,
 1034|    327|        fdata->value_len,
 1035|    327|        0,
 1036|    327|        0))
 1037|    327|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_receive_receive))
  ------------------
  |  |   30|    327|    {                           \
  |  |   31|    327|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 327]
  |  |  ------------------
  |  |   32|    327|    }
  ------------------
 1038|    327|    return true;
 1039|    327|}
formatter.c:format_path_payment_strict_receive_receive:
 1018|    327|static bool format_path_payment_strict_receive_receive(formatter_data_t *fdata) {
 1019|    327|    STRLCPY(fdata->caption, "Receive", fdata->caption_len);
  ------------------
  |  |   35|    327|    {                                         \
  |  |   36|    327|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    327|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 327]
  |  |  ------------------
  |  |   38|    327|    }
  ------------------
 1020|    327|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    327|    {                           \
  |  |   31|    327|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 327]
  |  |  ------------------
  |  |   32|    327|    }
  ------------------
 1021|    327|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.dest_amount,
 1022|    327|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.dest_asset,
 1023|    327|        fdata->envelope->network,
 1024|    327|        fdata->value,
 1025|    327|        fdata->value_len))
 1026|    327|    return format_operation_source_prepare(fdata);
 1027|    327|}
formatter.c:format_manage_sell_offer:
  897|    266|static bool format_manage_sell_offer(formatter_data_t *fdata) {
  898|    266|    if (!fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.amount) {
  ------------------
  |  Branch (898:9): [True: 45, False: 221]
  ------------------
  899|     45|        STRLCPY(fdata->caption, "Remove Offer", fdata->caption_len);
  ------------------
  |  |   35|     45|    {                                         \
  |  |   36|     45|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     45|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 45]
  |  |  ------------------
  |  |   38|     45|    }
  ------------------
  900|     45|        FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|     45|    {                           \
  |  |   31|     45|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 45]
  |  |  ------------------
  |  |   32|     45|    }
  ------------------
  901|     45|            fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id,
  902|     45|            fdata->value,
  903|     45|            fdata->value_len))
  904|     45|        return format_operation_source_prepare(fdata);
  905|    221|    } else {
  906|    221|        if (fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id) {
  ------------------
  |  Branch (906:13): [True: 167, False: 54]
  ------------------
  907|    167|            STRLCPY(fdata->caption, "Change Offer", fdata->caption_len);
  ------------------
  |  |   35|    167|    {                                         \
  |  |   36|    167|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    167|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 167]
  |  |  ------------------
  |  |   38|    167|    }
  ------------------
  908|    167|            FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|    167|    {                           \
  |  |   31|    167|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 167]
  |  |  ------------------
  |  |   32|    167|    }
  ------------------
  909|    167|                fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id,
  910|    167|                fdata->value,
  911|    167|                fdata->value_len))
  912|    167|        } else {
  913|     54|            STRLCPY(fdata->caption, "Create Offer", fdata->caption_len);
  ------------------
  |  |   35|     54|    {                                         \
  |  |   36|     54|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     54|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 54]
  |  |  ------------------
  |  |   38|     54|    }
  ------------------
  914|     54|        }
  915|    221|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_buy))
  ------------------
  |  |   30|    221|    {                           \
  |  |   31|    221|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 221]
  |  |  ------------------
  |  |   32|    221|    }
  ------------------
  916|    221|    }
  917|    221|    return true;
  918|    266|}
formatter.c:format_manage_sell_offer_buy:
  886|    221|static bool format_manage_sell_offer_buy(formatter_data_t *fdata) {
  887|    221|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|    221|    {                                         \
  |  |   36|    221|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    221|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 221]
  |  |  ------------------
  |  |   38|    221|    }
  ------------------
  888|    221|    FORMATTER_CHECK(
  ------------------
  |  |   30|    221|    {                           \
  |  |   31|    221|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 221]
  |  |  ------------------
  |  |   32|    221|    }
  ------------------
  889|    221|        print_asset(&fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.buying,
  890|    221|                    fdata->envelope->network,
  891|    221|                    fdata->value,
  892|    221|                    fdata->value_len))
  893|    221|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_sell))
  ------------------
  |  |   30|    221|    {                           \
  |  |   31|    221|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 221]
  |  |  ------------------
  |  |   32|    221|    }
  ------------------
  894|    221|    return true;
  895|    221|}
formatter.c:format_manage_sell_offer_sell:
  874|    221|static bool format_manage_sell_offer_sell(formatter_data_t *fdata) {
  875|    221|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|    221|    {                                         \
  |  |   36|    221|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    221|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 221]
  |  |  ------------------
  |  |   38|    221|    }
  ------------------
  876|    221|    FORMATTER_CHECK(
  ------------------
  |  |   30|    221|    {                           \
  |  |   31|    221|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 221]
  |  |  ------------------
  |  |   32|    221|    }
  ------------------
  877|    221|        print_amount(fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.amount,
  878|    221|                     &fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.selling,
  879|    221|                     fdata->envelope->network,
  880|    221|                     fdata->value,
  881|    221|                     fdata->value_len))
  882|    221|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_price))
  ------------------
  |  |   30|    221|    {                           \
  |  |   31|    221|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 221]
  |  |  ------------------
  |  |   32|    221|    }
  ------------------
  883|    221|    return true;
  884|    221|}
formatter.c:format_manage_sell_offer_price:
  862|    221|static bool format_manage_sell_offer_price(formatter_data_t *fdata) {
  863|    221|    manage_sell_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op;
  864|    221|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|    221|    {                                         \
  |  |   36|    221|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    221|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 221]
  |  |  ------------------
  |  |   38|    221|    }
  ------------------
  865|    221|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|    221|    {                           \
  |  |   31|    221|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 221]
  |  |  ------------------
  |  |   32|    221|    }
  ------------------
  866|    221|                                &op->buying,
  867|    221|                                &op->selling,
  868|    221|                                fdata->envelope->network,
  869|    221|                                fdata->value,
  870|    221|                                fdata->value_len))
  871|    221|    return format_operation_source_prepare(fdata);
  872|    221|}
formatter.c:format_create_passive_sell_offer:
 1010|    376|static bool format_create_passive_sell_offer(formatter_data_t *fdata) {
 1011|    376|    (void) fdata;
 1012|    376|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    376|    {                                         \
  |  |   36|    376|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    376|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 376]
  |  |  ------------------
  |  |   38|    376|    }
  ------------------
 1013|    376|    STRLCPY(fdata->value, "Create Passive Sell Offer", fdata->value_len);
  ------------------
  |  |   35|    376|    {                                         \
  |  |   36|    376|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    376|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 376]
  |  |  ------------------
  |  |   38|    376|    }
  ------------------
 1014|    376|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_buy))
  ------------------
  |  |   30|    376|    {                           \
  |  |   31|    376|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 376]
  |  |  ------------------
  |  |   32|    376|    }
  ------------------
 1015|    376|    return true;
 1016|    376|}
formatter.c:format_create_passive_sell_offer_buy:
  999|    376|static bool format_create_passive_sell_offer_buy(formatter_data_t *fdata) {
 1000|    376|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|    376|    {                                         \
  |  |   36|    376|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    376|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 376]
  |  |  ------------------
  |  |   38|    376|    }
  ------------------
 1001|    376|    FORMATTER_CHECK(
  ------------------
  |  |   30|    376|    {                           \
  |  |   31|    376|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 376]
  |  |  ------------------
  |  |   32|    376|    }
  ------------------
 1002|    376|        print_asset(&fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.buying,
 1003|    376|                    fdata->envelope->network,
 1004|    376|                    fdata->value,
 1005|    376|                    fdata->value_len))
 1006|    376|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_sell))
  ------------------
  |  |   30|    376|    {                           \
  |  |   31|    376|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 376]
  |  |  ------------------
  |  |   32|    376|    }
  ------------------
 1007|    376|    return true;
 1008|    376|}
formatter.c:format_create_passive_sell_offer_sell:
  987|    376|static bool format_create_passive_sell_offer_sell(formatter_data_t *fdata) {
  988|    376|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|    376|    {                                         \
  |  |   36|    376|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    376|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 376]
  |  |  ------------------
  |  |   38|    376|    }
  ------------------
  989|    376|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    376|    {                           \
  |  |   31|    376|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 376]
  |  |  ------------------
  |  |   32|    376|    }
  ------------------
  990|    376|        fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.amount,
  991|    376|        &fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.selling,
  992|    376|        fdata->envelope->network,
  993|    376|        fdata->value,
  994|    376|        fdata->value_len))
  995|    376|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_price))
  ------------------
  |  |   30|    376|    {                           \
  |  |   31|    376|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 376]
  |  |  ------------------
  |  |   32|    376|    }
  ------------------
  996|    376|    return true;
  997|    376|}
formatter.c:format_create_passive_sell_offer_price:
  974|    376|static bool format_create_passive_sell_offer_price(formatter_data_t *fdata) {
  975|    376|    create_passive_sell_offer_op_t *op =
  976|    376|        &fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op;
  977|    376|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|    376|    {                                         \
  |  |   36|    376|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    376|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 376]
  |  |  ------------------
  |  |   38|    376|    }
  ------------------
  978|    376|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|    376|    {                           \
  |  |   31|    376|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 376]
  |  |  ------------------
  |  |   32|    376|    }
  ------------------
  979|    376|                                &op->buying,
  980|    376|                                &op->selling,
  981|    376|                                fdata->envelope->network,
  982|    376|                                fdata->value,
  983|    376|                                fdata->value_len))
  984|    376|    return format_operation_source_prepare(fdata);
  985|    376|}
formatter.c:format_set_options:
  763|  2.14k|static bool format_set_options(formatter_data_t *fdata) {
  764|       |    // this operation is a special one among all operations, because all its
  765|       |    // fields are optional.
  766|  2.14k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  2.14k|    {                                         \
  |  |   36|  2.14k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.14k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.14k]
  |  |  ------------------
  |  |   38|  2.14k|    }
  ------------------
  767|  2.14k|    STRLCPY(fdata->value, "Set Options", fdata->value_len);
  ------------------
  |  |   35|  2.14k|    {                                         \
  |  |   36|  2.14k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.14k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.14k]
  |  |  ------------------
  |  |   38|  2.14k|    }
  ------------------
  768|  2.14k|    if (is_empty_set_options_body(fdata)) {
  ------------------
  |  Branch (768:9): [True: 604, False: 1.54k]
  ------------------
  769|    604|        FORMATTER_CHECK(push_to_formatter_stack(format_set_options_empty_body))
  ------------------
  |  |   30|    604|    {                           \
  |  |   31|    604|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 604]
  |  |  ------------------
  |  |   32|    604|    }
  ------------------
  770|  1.54k|    } else {
  771|  1.54k|        format_set_option_inflation_destination_prepare(fdata);
  772|  1.54k|    }
  773|  2.14k|    return true;
  774|  2.14k|}
formatter.c:is_empty_set_options_body:
  750|  2.14k|static bool is_empty_set_options_body(formatter_data_t *fdata) {
  751|  2.14k|    return !(
  752|  2.14k|        fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination_present ||
  ------------------
  |  Branch (752:9): [True: 63, False: 2.08k]
  ------------------
  753|  2.14k|        fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags_present ||
  ------------------
  |  Branch (753:9): [True: 286, False: 1.79k]
  ------------------
  754|  2.14k|        fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags_present ||
  ------------------
  |  Branch (754:9): [True: 65, False: 1.73k]
  ------------------
  755|  2.14k|        fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight_present ||
  ------------------
  |  Branch (755:9): [True: 101, False: 1.62k]
  ------------------
  756|  2.14k|        fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold_present ||
  ------------------
  |  Branch (756:9): [True: 346, False: 1.28k]
  ------------------
  757|  2.14k|        fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold_present ||
  ------------------
  |  Branch (757:9): [True: 286, False: 997]
  ------------------
  758|  2.14k|        fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold_present ||
  ------------------
  |  Branch (758:9): [True: 30, False: 967]
  ------------------
  759|  2.14k|        fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_present ||
  ------------------
  |  Branch (759:9): [True: 309, False: 658]
  ------------------
  760|  2.14k|        fdata->envelope->tx_details.tx.op_details.set_options_op.signer_present);
  ------------------
  |  Branch (760:9): [True: 54, False: 604]
  ------------------
  761|  2.14k|}
formatter.c:format_set_options_empty_body:
  743|    604|static bool format_set_options_empty_body(formatter_data_t *fdata) {
  744|    604|    (void) fdata;
  745|    604|    STRLCPY(fdata->caption, "SET OPTIONS", fdata->caption_len);
  ------------------
  |  |   35|    604|    {                                         \
  |  |   36|    604|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    604|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 604]
  |  |  ------------------
  |  |   38|    604|    }
  ------------------
  746|    604|    STRLCPY(fdata->value, "[BODY IS EMPTY]", fdata->value_len);
  ------------------
  |  |   35|    604|    {                                         \
  |  |   36|    604|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    604|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 604]
  |  |  ------------------
  |  |   38|    604|    }
  ------------------
  747|    604|    return format_operation_source_prepare(fdata);
  748|    604|}
formatter.c:format_set_option_inflation_destination_prepare:
  734|  1.54k|static bool format_set_option_inflation_destination_prepare(formatter_data_t *fdata) {
  735|  1.54k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination_present) {
  ------------------
  |  Branch (735:9): [True: 63, False: 1.47k]
  ------------------
  736|     63|        FORMATTER_CHECK(push_to_formatter_stack(format_set_option_inflation_destination))
  ------------------
  |  |   30|     63|    {                           \
  |  |   31|     63|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 63]
  |  |  ------------------
  |  |   32|     63|    }
  ------------------
  737|  1.47k|    } else {
  738|  1.47k|        format_set_option_clear_flags_prepare(fdata);
  739|  1.47k|    }
  740|  1.54k|    return true;
  741|  1.54k|}
formatter.c:format_set_option_inflation_destination:
  722|     63|static bool format_set_option_inflation_destination(formatter_data_t *fdata) {
  723|     63|    STRLCPY(fdata->caption, "Inflation Dest", fdata->caption_len);
  ------------------
  |  |   35|     63|    {                                         \
  |  |   36|     63|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     63|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 63]
  |  |  ------------------
  |  |   38|     63|    }
  ------------------
  724|     63|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|     63|    {                           \
  |  |   31|     63|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 63]
  |  |  ------------------
  |  |   32|     63|    }
  ------------------
  725|     63|        fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination,
  726|     63|        fdata->value,
  727|     63|        fdata->value_len,
  728|     63|        0,
  729|     63|        0))
  730|     63|    format_set_option_clear_flags_prepare(fdata);
  731|     63|    return true;
  732|     63|}
formatter.c:format_set_option_clear_flags_prepare:
  713|  1.54k|static bool format_set_option_clear_flags_prepare(formatter_data_t *fdata) {
  714|  1.54k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags_present) {
  ------------------
  |  Branch (714:9): [True: 345, False: 1.19k]
  ------------------
  715|    345|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_clear_flags))
  ------------------
  |  |   30|    345|    {                           \
  |  |   31|    345|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 345]
  |  |  ------------------
  |  |   32|    345|    }
  ------------------
  716|  1.19k|    } else {
  717|  1.19k|        format_set_option_set_flags_prepare(fdata);
  718|  1.19k|    }
  719|  1.54k|    return true;
  720|  1.54k|}
formatter.c:format_set_option_clear_flags:
  703|    345|static bool format_set_option_clear_flags(formatter_data_t *fdata) {
  704|    345|    STRLCPY(fdata->caption, "Clear Flags", fdata->caption_len);
  ------------------
  |  |   35|    345|    {                                         \
  |  |   36|    345|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    345|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 345]
  |  |  ------------------
  |  |   38|    345|    }
  ------------------
  705|    345|    FORMATTER_CHECK(
  ------------------
  |  |   30|    345|    {                           \
  |  |   31|    345|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 345]
  |  |  ------------------
  |  |   32|    345|    }
  ------------------
  706|    345|        print_account_flags(fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags,
  707|    345|                            fdata->value,
  708|    345|                            fdata->value_len))
  709|    345|    format_set_option_set_flags_prepare(fdata);
  710|    345|    return true;
  711|    345|}
formatter.c:format_set_option_set_flags_prepare:
  694|  1.54k|static bool format_set_option_set_flags_prepare(formatter_data_t *fdata) {
  695|  1.54k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags_present) {
  ------------------
  |  Branch (695:9): [True: 379, False: 1.16k]
  ------------------
  696|    379|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_set_flags))
  ------------------
  |  |   30|    379|    {                           \
  |  |   31|    379|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 379]
  |  |  ------------------
  |  |   32|    379|    }
  ------------------
  697|  1.16k|    } else {
  698|  1.16k|        format_set_option_master_weight_prepare(fdata);
  699|  1.16k|    }
  700|  1.54k|    return true;
  701|  1.54k|}
formatter.c:format_set_option_set_flags:
  684|    379|static bool format_set_option_set_flags(formatter_data_t *fdata) {
  685|    379|    STRLCPY(fdata->caption, "Set Flags", fdata->caption_len);
  ------------------
  |  |   35|    379|    {                                         \
  |  |   36|    379|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    379|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 379]
  |  |  ------------------
  |  |   38|    379|    }
  ------------------
  686|    379|    FORMATTER_CHECK(
  ------------------
  |  |   30|    379|    {                           \
  |  |   31|    379|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 379]
  |  |  ------------------
  |  |   32|    379|    }
  ------------------
  687|    379|        print_account_flags(fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags,
  688|    379|                            fdata->value,
  689|    379|                            fdata->value_len))
  690|    379|    format_set_option_master_weight_prepare(fdata);
  691|    379|    return true;
  692|    379|}
formatter.c:format_set_option_master_weight_prepare:
  675|  1.54k|static bool format_set_option_master_weight_prepare(formatter_data_t *fdata) {
  676|  1.54k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight_present) {
  ------------------
  |  Branch (676:9): [True: 154, False: 1.38k]
  ------------------
  677|    154|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_master_weight))
  ------------------
  |  |   30|    154|    {                           \
  |  |   31|    154|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 154]
  |  |  ------------------
  |  |   32|    154|    }
  ------------------
  678|  1.38k|    } else {
  679|  1.38k|        format_set_option_low_threshold_prepare(fdata);
  680|  1.38k|    }
  681|  1.54k|    return true;
  682|  1.54k|}
formatter.c:format_set_option_master_weight:
  665|    154|static bool format_set_option_master_weight(formatter_data_t *fdata) {
  666|    154|    STRLCPY(fdata->caption, "Master Weight", fdata->caption_len);
  ------------------
  |  |   35|    154|    {                                         \
  |  |   36|    154|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    154|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 154]
  |  |  ------------------
  |  |   38|    154|    }
  ------------------
  667|    154|    FORMATTER_CHECK(
  ------------------
  |  |   30|    154|    {                           \
  |  |   31|    154|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 154]
  |  |  ------------------
  |  |   32|    154|    }
  ------------------
  668|    154|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight,
  669|    154|                         fdata->value,
  670|    154|                         fdata->value_len))
  671|    154|    format_set_option_low_threshold_prepare(fdata);
  672|    154|    return true;
  673|    154|}
formatter.c:format_set_option_low_threshold_prepare:
  656|  1.54k|static bool format_set_option_low_threshold_prepare(formatter_data_t *fdata) {
  657|  1.54k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold_present) {
  ------------------
  |  Branch (657:9): [True: 399, False: 1.14k]
  ------------------
  658|    399|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_low_threshold))
  ------------------
  |  |   30|    399|    {                           \
  |  |   31|    399|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 399]
  |  |  ------------------
  |  |   32|    399|    }
  ------------------
  659|  1.14k|    } else {
  660|  1.14k|        format_set_option_medium_threshold_prepare(fdata);
  661|  1.14k|    }
  662|  1.54k|    return true;
  663|  1.54k|}
formatter.c:format_set_option_low_threshold:
  646|    399|static bool format_set_option_low_threshold(formatter_data_t *fdata) {
  647|    399|    STRLCPY(fdata->caption, "Low Threshold", fdata->caption_len);
  ------------------
  |  |   35|    399|    {                                         \
  |  |   36|    399|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    399|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 399]
  |  |  ------------------
  |  |   38|    399|    }
  ------------------
  648|    399|    FORMATTER_CHECK(
  ------------------
  |  |   30|    399|    {                           \
  |  |   31|    399|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 399]
  |  |  ------------------
  |  |   32|    399|    }
  ------------------
  649|    399|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold,
  650|    399|                         fdata->value,
  651|    399|                         fdata->value_len))
  652|    399|    format_set_option_medium_threshold_prepare(fdata);
  653|    399|    return true;
  654|    399|}
formatter.c:format_set_option_medium_threshold_prepare:
  637|  1.54k|static bool format_set_option_medium_threshold_prepare(formatter_data_t *fdata) {
  638|  1.54k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold_present) {
  ------------------
  |  Branch (638:9): [True: 332, False: 1.20k]
  ------------------
  639|    332|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_medium_threshold))
  ------------------
  |  |   30|    332|    {                           \
  |  |   31|    332|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 332]
  |  |  ------------------
  |  |   32|    332|    }
  ------------------
  640|  1.20k|    } else {
  641|  1.20k|        format_set_option_high_threshold_prepare(fdata);
  642|  1.20k|    }
  643|  1.54k|    return true;
  644|  1.54k|}
formatter.c:format_set_option_medium_threshold:
  627|    332|static bool format_set_option_medium_threshold(formatter_data_t *fdata) {
  628|    332|    STRLCPY(fdata->caption, "Medium Threshold", fdata->caption_len);
  ------------------
  |  |   35|    332|    {                                         \
  |  |   36|    332|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    332|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 332]
  |  |  ------------------
  |  |   38|    332|    }
  ------------------
  629|    332|    FORMATTER_CHECK(
  ------------------
  |  |   30|    332|    {                           \
  |  |   31|    332|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 332]
  |  |  ------------------
  |  |   32|    332|    }
  ------------------
  630|    332|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold,
  631|    332|                         fdata->value,
  632|    332|                         fdata->value_len))
  633|    332|    format_set_option_high_threshold_prepare(fdata);
  634|    332|    return true;
  635|    332|}
formatter.c:format_set_option_high_threshold_prepare:
  618|  1.54k|static bool format_set_option_high_threshold_prepare(formatter_data_t *fdata) {
  619|  1.54k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold_present) {
  ------------------
  |  Branch (619:9): [True: 70, False: 1.47k]
  ------------------
  620|     70|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_high_threshold))
  ------------------
  |  |   30|     70|    {                           \
  |  |   31|     70|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 70]
  |  |  ------------------
  |  |   32|     70|    }
  ------------------
  621|  1.47k|    } else {
  622|  1.47k|        format_set_option_home_domain_prepare(fdata);
  623|  1.47k|    }
  624|  1.54k|    return true;
  625|  1.54k|}
formatter.c:format_set_option_high_threshold:
  608|     70|static bool format_set_option_high_threshold(formatter_data_t *fdata) {
  609|     70|    STRLCPY(fdata->caption, "High Threshold", fdata->caption_len);
  ------------------
  |  |   35|     70|    {                                         \
  |  |   36|     70|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     70|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 70]
  |  |  ------------------
  |  |   38|     70|    }
  ------------------
  610|     70|    FORMATTER_CHECK(
  ------------------
  |  |   30|     70|    {                           \
  |  |   31|     70|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 70]
  |  |  ------------------
  |  |   32|     70|    }
  ------------------
  611|     70|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold,
  612|     70|                         fdata->value,
  613|     70|                         fdata->value_len))
  614|     70|    format_set_option_home_domain_prepare(fdata);
  615|     70|    return true;
  616|     70|}
formatter.c:format_set_option_home_domain_prepare:
  599|  1.54k|static bool format_set_option_home_domain_prepare(formatter_data_t *fdata) {
  600|  1.54k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_present) {
  ------------------
  |  Branch (600:9): [True: 357, False: 1.18k]
  ------------------
  601|    357|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_home_domain))
  ------------------
  |  |   30|    357|    {                           \
  |  |   31|    357|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 357]
  |  |  ------------------
  |  |   32|    357|    }
  ------------------
  602|  1.18k|    } else {
  603|  1.18k|        format_set_option_signer_prepare(fdata);
  604|  1.18k|    }
  605|  1.54k|    return true;
  606|  1.54k|}
formatter.c:format_set_option_home_domain:
  584|    357|static bool format_set_option_home_domain(formatter_data_t *fdata) {
  585|    357|    STRLCPY(fdata->caption, "Home Domain", fdata->caption_len);
  ------------------
  |  |   35|    357|    {                                         \
  |  |   36|    357|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    357|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 357]
  |  |  ------------------
  |  |   38|    357|    }
  ------------------
  586|    357|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_size) {
  ------------------
  |  Branch (586:9): [True: 220, False: 137]
  ------------------
  587|    220|        FORMATTER_CHECK(
  ------------------
  |  |   30|    220|    {                           \
  |  |   31|    220|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 220]
  |  |  ------------------
  |  |   32|    220|    }
  ------------------
  588|    220|            print_string(fdata->value,
  589|    220|                         fdata->value_len,
  590|    220|                         fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain,
  591|    220|                         fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_size))
  592|    220|    } else {
  593|    137|        STRLCPY(fdata->value, "[remove home domain from account]", fdata->value_len);
  ------------------
  |  |   35|    137|    {                                         \
  |  |   36|    137|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    137|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 137]
  |  |  ------------------
  |  |   38|    137|    }
  ------------------
  594|    137|    }
  595|    357|    format_set_option_signer_prepare(fdata);
  596|    357|    return true;
  597|    357|}
formatter.c:format_set_option_signer_prepare:
  575|  1.54k|static bool format_set_option_signer_prepare(formatter_data_t *fdata) {
  576|  1.54k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.signer_present) {
  ------------------
  |  Branch (576:9): [True: 291, False: 1.24k]
  ------------------
  577|    291|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer))
  ------------------
  |  |   30|    291|    {                           \
  |  |   31|    291|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 291]
  |  |  ------------------
  |  |   32|    291|    }
  ------------------
  578|  1.24k|    } else {
  579|  1.24k|        return format_operation_source_prepare(fdata);
  580|  1.24k|    }
  581|    291|    return true;
  582|  1.54k|}
formatter.c:format_set_option_signer:
  544|    291|static bool format_set_option_signer(formatter_data_t *fdata) {
  545|    291|    signer_t *signer = &fdata->envelope->tx_details.tx.op_details.set_options_op.signer;
  546|    291|    if (signer->weight) {
  ------------------
  |  Branch (546:9): [True: 154, False: 137]
  ------------------
  547|    154|        STRLCPY(fdata->caption, "Add Signer", fdata->caption_len);
  ------------------
  |  |   35|    154|    {                                         \
  |  |   36|    154|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    154|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 154]
  |  |  ------------------
  |  |   38|    154|    }
  ------------------
  548|    154|    } else {
  549|    137|        STRLCPY(fdata->caption, "Remove Signer", fdata->caption_len);
  ------------------
  |  |   35|    137|    {                                         \
  |  |   36|    137|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    137|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 137]
  |  |  ------------------
  |  |   38|    137|    }
  ------------------
  550|    137|    }
  551|    291|    switch (signer->key.type) {
  552|    267|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (552:9): [True: 267, False: 24]
  ------------------
  553|    267|            STRLCPY(fdata->value, "Type Public Key", fdata->value_len);
  ------------------
  |  |   35|    267|    {                                         \
  |  |   36|    267|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    267|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 267]
  |  |  ------------------
  |  |   38|    267|    }
  ------------------
  554|    267|            break;
  555|    267|        }
  556|      4|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (556:9): [True: 4, False: 287]
  ------------------
  557|      4|            STRLCPY(fdata->value, "Type Hash(x)", fdata->value_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  558|      4|            break;
  559|      4|        }
  560|      4|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (560:9): [True: 4, False: 287]
  ------------------
  561|      4|            STRLCPY(fdata->value, "Type Pre-Auth", fdata->value_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  562|      4|            break;
  563|      4|        }
  564|     16|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (564:9): [True: 16, False: 275]
  ------------------
  565|     16|            STRLCPY(fdata->value, "Type Ed25519 Signed Payload", fdata->value_len);
  ------------------
  |  |   35|     16|    {                                         \
  |  |   36|     16|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     16|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 16]
  |  |  ------------------
  |  |   38|     16|    }
  ------------------
  566|     16|            break;
  567|     16|        }
  568|      0|        default:
  ------------------
  |  Branch (568:9): [True: 0, False: 291]
  ------------------
  569|      0|            return false;
  570|    291|    }
  571|    291|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer_detail))
  ------------------
  |  |   30|    291|    {                           \
  |  |   31|    291|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 291]
  |  |  ------------------
  |  |   32|    291|    }
  ------------------
  572|    291|    return true;
  573|    291|}
formatter.c:format_set_option_signer_detail:
  530|    291|static bool format_set_option_signer_detail(formatter_data_t *fdata) {
  531|    291|    STRLCPY(fdata->caption, "Signer Key", fdata->caption_len);
  ------------------
  |  |   35|    291|    {                                         \
  |  |   36|    291|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    291|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 291]
  |  |  ------------------
  |  |   38|    291|    }
  ------------------
  532|    291|    signer_key_t *key = &fdata->envelope->tx_details.tx.op_details.set_options_op.signer.key;
  533|       |
  534|    291|    FORMATTER_CHECK(print_signer_key_detail(key, fdata->value, fdata->value_len))
  ------------------
  |  |   30|    291|    {                           \
  |  |   31|    291|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 291]
  |  |  ------------------
  |  |   32|    291|    }
  ------------------
  535|       |
  536|    291|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.signer.weight != 0) {
  ------------------
  |  Branch (536:9): [True: 154, False: 137]
  ------------------
  537|    154|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer_weight))
  ------------------
  |  |   30|    154|    {                           \
  |  |   31|    154|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 154]
  |  |  ------------------
  |  |   32|    154|    }
  ------------------
  538|    154|    } else {
  539|    137|        return format_operation_source_prepare(fdata);
  540|    137|    }
  541|    154|    return true;
  542|    291|}
formatter.c:print_signer_key_detail:
  502|  1.38k|static bool print_signer_key_detail(signer_key_t *key, char *value, size_t value_len) {
  503|  1.38k|    switch (key->type) {
  504|    684|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (504:9): [True: 684, False: 701]
  ------------------
  505|    684|            FORMATTER_CHECK(print_account_id(key->ed25519, value, value_len, 0, 0))
  ------------------
  |  |   30|    684|    {                           \
  |  |   31|    684|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 684]
  |  |  ------------------
  |  |   32|    684|    }
  ------------------
  506|    684|            break;
  507|    684|        }
  508|    684|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (508:9): [True: 100, False: 1.28k]
  ------------------
  509|    100|            FORMATTER_CHECK(print_hash_x_key(key->hash_x, value, value_len, 0, 0))
  ------------------
  |  |   30|    100|    {                           \
  |  |   31|    100|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 100]
  |  |  ------------------
  |  |   32|    100|    }
  ------------------
  510|    100|            break;
  511|    100|        }
  512|    253|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (512:9): [True: 253, False: 1.13k]
  ------------------
  513|    253|            FORMATTER_CHECK(print_pre_auth_x_key(key->pre_auth_tx, value, value_len, 0, 0))
  ------------------
  |  |   30|    253|    {                           \
  |  |   31|    253|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 253]
  |  |  ------------------
  |  |   32|    253|    }
  ------------------
  514|    253|            break;
  515|    253|        }
  516|    348|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (516:9): [True: 348, False: 1.03k]
  ------------------
  517|    348|            FORMATTER_CHECK(print_ed25519_signed_payload(&key->ed25519_signed_payload,
  ------------------
  |  |   30|    348|    {                           \
  |  |   31|    348|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 348]
  |  |  ------------------
  |  |   32|    348|    }
  ------------------
  518|    348|                                                         value,
  519|    348|                                                         value_len,
  520|    348|                                                         12,
  521|    348|                                                         12))
  522|    348|            break;
  523|    348|        }
  524|    348|        default:
  ------------------
  |  Branch (524:9): [True: 0, False: 1.38k]
  ------------------
  525|      0|            return false;
  526|  1.38k|    }
  527|  1.38k|    return true;
  528|  1.38k|}
formatter.c:format_set_option_signer_weight:
  493|    154|static bool format_set_option_signer_weight(formatter_data_t *fdata) {
  494|    154|    STRLCPY(fdata->caption, "Weight", fdata->caption_len);
  ------------------
  |  |   35|    154|    {                                         \
  |  |   36|    154|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    154|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 154]
  |  |  ------------------
  |  |   38|    154|    }
  ------------------
  495|    154|    FORMATTER_CHECK(
  ------------------
  |  |   30|    154|    {                           \
  |  |   31|    154|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 154]
  |  |  ------------------
  |  |   32|    154|    }
  ------------------
  496|    154|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.signer.weight,
  497|    154|                         fdata->value,
  498|    154|                         fdata->value_len))
  499|    154|    return format_operation_source_prepare(fdata);
  500|    154|}
formatter.c:format_change_trust:
  829|    602|static bool format_change_trust(formatter_data_t *fdata) {
  830|    602|    if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit) {
  ------------------
  |  Branch (830:9): [True: 407, False: 195]
  ------------------
  831|    407|        STRLCPY(fdata->caption, "Change Trust", fdata->caption_len);
  ------------------
  |  |   35|    407|    {                                         \
  |  |   36|    407|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    407|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 407]
  |  |  ------------------
  |  |   38|    407|    }
  ------------------
  832|    407|    } else {
  833|    195|        STRLCPY(fdata->caption, "Remove Trust", fdata->caption_len);
  ------------------
  |  |   35|    195|    {                                         \
  |  |   36|    195|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    195|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 195]
  |  |  ------------------
  |  |   38|    195|    }
  ------------------
  834|    195|    }
  835|    602|    uint8_t asset_type = fdata->envelope->tx_details.tx.op_details.change_trust_op.line.type;
  836|    602|    switch (asset_type) {
  837|    237|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (837:9): [True: 237, False: 365]
  ------------------
  838|    396|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (838:9): [True: 159, False: 443]
  ------------------
  839|    396|            FORMATTER_CHECK(print_asset(
  ------------------
  |  |   30|    396|    {                           \
  |  |   31|    396|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 396]
  |  |  ------------------
  |  |   32|    396|    }
  ------------------
  840|    396|                (asset_t *) &fdata->envelope->tx_details.tx.op_details.change_trust_op.line,
  841|    396|                fdata->envelope->network,
  842|    396|                fdata->value,
  843|    396|                fdata->value_len))
  844|    396|            if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit &&
  ------------------
  |  Branch (844:17): [True: 270, False: 126]
  ------------------
  845|    396|                fdata->envelope->tx_details.tx.op_details.change_trust_op.limit != INT64_MAX) {
  ------------------
  |  Branch (845:17): [True: 270, False: 0]
  ------------------
  846|    270|                FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_limit))
  ------------------
  |  |   30|    270|    {                           \
  |  |   31|    270|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 270]
  |  |  ------------------
  |  |   32|    270|    }
  ------------------
  847|    270|            } else {
  848|    126|                return format_operation_source_prepare(fdata);
  849|    126|            }
  850|    270|            break;
  851|    270|        case ASSET_TYPE_POOL_SHARE:
  ------------------
  |  Branch (851:9): [True: 59, False: 543]
  ------------------
  852|     59|            STRLCPY(fdata->value, "Liquidity Pool Asset", fdata->value_len);
  ------------------
  |  |   35|     59|    {                                         \
  |  |   36|     59|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     59|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 59]
  |  |  ------------------
  |  |   38|     59|    }
  ------------------
  853|     59|            FORMATTER_CHECK(
  ------------------
  |  |   30|     59|    {                           \
  |  |   31|     59|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 59]
  |  |  ------------------
  |  |   32|     59|    }
  ------------------
  854|     59|                push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_asset_a))
  855|     59|            break;
  856|    147|        default:
  ------------------
  |  Branch (856:9): [True: 147, False: 455]
  ------------------
  857|    147|            return false;
  858|    602|    }
  859|    329|    return true;
  860|    602|}
formatter.c:format_change_trust_limit:
  776|    311|static bool format_change_trust_limit(formatter_data_t *fdata) {
  777|    311|    STRLCPY(fdata->caption, "Trust Limit", fdata->caption_len);
  ------------------
  |  |   35|    311|    {                                         \
  |  |   36|    311|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    311|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 311]
  |  |  ------------------
  |  |   38|    311|    }
  ------------------
  778|    311|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.change_trust_op.limit,
  ------------------
  |  |   30|    311|    {                           \
  |  |   31|    311|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 311]
  |  |  ------------------
  |  |   32|    311|    }
  ------------------
  779|    311|                                 NULL,
  780|    311|                                 fdata->envelope->network,
  781|    311|                                 fdata->value,
  782|    311|                                 fdata->value_len))
  783|    311|    return format_operation_source_prepare(fdata);
  784|    311|}
formatter.c:format_change_trust_detail_liquidity_pool_asset_a:
  818|     59|static bool format_change_trust_detail_liquidity_pool_asset_a(formatter_data_t *fdata) {
  819|     59|    STRLCPY(fdata->caption, "Asset A", fdata->caption_len);
  ------------------
  |  |   35|     59|    {                                         \
  |  |   36|     59|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     59|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 59]
  |  |  ------------------
  |  |   38|     59|    }
  ------------------
  820|     59|    FORMATTER_CHECK(print_asset(&fdata->envelope->tx_details.tx.op_details.change_trust_op.line
  ------------------
  |  |   30|     59|    {                           \
  |  |   31|     59|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 59]
  |  |  ------------------
  |  |   32|     59|    }
  ------------------
  821|     59|                                     .liquidity_pool.constant_product.asset_a,
  822|     59|                                fdata->envelope->network,
  823|     59|                                fdata->value,
  824|     59|                                fdata->value_len))
  825|     59|    FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_asset_b))
  ------------------
  |  |   30|     59|    {                           \
  |  |   31|     59|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 59]
  |  |  ------------------
  |  |   32|     59|    }
  ------------------
  826|     59|    return true;
  827|     59|}
formatter.c:format_change_trust_detail_liquidity_pool_asset_b:
  807|     59|static bool format_change_trust_detail_liquidity_pool_asset_b(formatter_data_t *fdata) {
  808|     59|    STRLCPY(fdata->caption, "Asset B", fdata->caption_len);
  ------------------
  |  |   35|     59|    {                                         \
  |  |   36|     59|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     59|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 59]
  |  |  ------------------
  |  |   38|     59|    }
  ------------------
  809|     59|    FORMATTER_CHECK(print_asset(&fdata->envelope->tx_details.tx.op_details.change_trust_op.line
  ------------------
  |  |   30|     59|    {                           \
  |  |   31|     59|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 59]
  |  |  ------------------
  |  |   32|     59|    }
  ------------------
  810|     59|                                     .liquidity_pool.constant_product.asset_b,
  811|     59|                                fdata->envelope->network,
  812|     59|                                fdata->value,
  813|     59|                                fdata->value_len))
  814|     59|    FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_fee))
  ------------------
  |  |   30|     59|    {                           \
  |  |   31|     59|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 59]
  |  |  ------------------
  |  |   32|     59|    }
  ------------------
  815|     59|    return true;
  816|     59|}
formatter.c:format_change_trust_detail_liquidity_pool_fee:
  786|     59|static bool format_change_trust_detail_liquidity_pool_fee(formatter_data_t *fdata) {
  787|     59|    STRLCPY(fdata->caption, "Pool Fee Rate", fdata->caption_len);
  ------------------
  |  |   35|     59|    {                                         \
  |  |   36|     59|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     59|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 59]
  |  |  ------------------
  |  |   38|     59|    }
  ------------------
  788|       |
  789|     59|    uint8_t fee[4] = {0};
  790|    295|    for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (790:21): [True: 236, False: 59]
  ------------------
  791|    236|        fee[i] = fdata->envelope->tx_details.tx.op_details.change_trust_op.line.liquidity_pool
  792|    236|                     .constant_product.fee >>
  793|    236|                 (8 * (3 - i));
  794|    236|    }
  795|     59|    FORMATTER_CHECK(print_int32(fee, 2, fdata->value, fdata->value_len, false))
  ------------------
  |  |   30|     59|    {                           \
  |  |   31|     59|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 59]
  |  |  ------------------
  |  |   32|     59|    }
  ------------------
  796|       |
  797|     59|    STRLCAT(fdata->value, "%", fdata->value_len);
  ------------------
  |  |   41|     59|    {                                         \
  |  |   42|     59|        size_t len = strlcat(dst, src, size); \
  |  |   43|     59|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 59]
  |  |  ------------------
  |  |   44|     59|    }
  ------------------
  798|     59|    if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit &&
  ------------------
  |  Branch (798:9): [True: 48, False: 11]
  ------------------
  799|     59|        fdata->envelope->tx_details.tx.op_details.change_trust_op.limit != INT64_MAX) {
  ------------------
  |  Branch (799:9): [True: 41, False: 7]
  ------------------
  800|     41|        FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_limit))
  ------------------
  |  |   30|     41|    {                           \
  |  |   31|     41|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   32|     41|    }
  ------------------
  801|     41|    } else {
  802|     18|        return format_operation_source_prepare(fdata);
  803|     18|    }
  804|     41|    return true;
  805|     59|}
formatter.c:format_allow_trust:
  485|    168|static bool format_allow_trust(formatter_data_t *fdata) {
  486|    168|    (void) fdata;
  487|    168|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    168|    {                                         \
  |  |   36|    168|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    168|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 168]
  |  |  ------------------
  |  |   38|    168|    }
  ------------------
  488|    168|    STRLCPY(fdata->value, "Allow Trust", fdata->value_len);
  ------------------
  |  |   35|    168|    {                                         \
  |  |   36|    168|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    168|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 168]
  |  |  ------------------
  |  |   38|    168|    }
  ------------------
  489|    168|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_trustor))
  ------------------
  |  |   30|    168|    {                           \
  |  |   31|    168|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 168]
  |  |  ------------------
  |  |   32|    168|    }
  ------------------
  490|    168|    return true;
  491|    168|}
formatter.c:format_allow_trust_trustor:
  473|    168|static bool format_allow_trust_trustor(formatter_data_t *fdata) {
  474|    168|    STRLCPY(fdata->caption, "Trustor", fdata->caption_len);
  ------------------
  |  |   35|    168|    {                                         \
  |  |   36|    168|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    168|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 168]
  |  |  ------------------
  |  |   38|    168|    }
  ------------------
  475|    168|    FORMATTER_CHECK(
  ------------------
  |  |   30|    168|    {                           \
  |  |   31|    168|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 168]
  |  |  ------------------
  |  |   32|    168|    }
  ------------------
  476|    168|        print_account_id(fdata->envelope->tx_details.tx.op_details.allow_trust_op.trustor,
  477|    168|                         fdata->value,
  478|    168|                         fdata->value_len,
  479|    168|                         0,
  480|    168|                         0))
  481|    168|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_asset_code))
  ------------------
  |  |   30|    168|    {                           \
  |  |   31|    168|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 168]
  |  |  ------------------
  |  |   32|    168|    }
  ------------------
  482|    168|    return true;
  483|    168|}
formatter.c:format_allow_trust_asset_code:
  446|    168|static bool format_allow_trust_asset_code(formatter_data_t *fdata) {
  447|    168|    STRLCPY(fdata->caption, "Asset Code", fdata->caption_len);
  ------------------
  |  |   35|    168|    {                                         \
  |  |   36|    168|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    168|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 168]
  |  |  ------------------
  |  |   38|    168|    }
  ------------------
  448|    168|    switch (fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_type) {
  449|     91|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (449:9): [True: 91, False: 77]
  ------------------
  450|     91|            FORMATTER_CHECK(
  ------------------
  |  |   30|     91|    {                           \
  |  |   31|     91|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 91]
  |  |  ------------------
  |  |   32|     91|    }
  ------------------
  451|     91|                print_string(fdata->value,
  452|     91|                             fdata->value_len,
  453|     91|                             fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_code,
  454|     91|                             4))
  455|       |
  456|     91|            break;
  457|     91|        }
  458|     91|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (458:9): [True: 77, False: 91]
  ------------------
  459|     77|            FORMATTER_CHECK(
  ------------------
  |  |   30|     77|    {                           \
  |  |   31|     77|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 77]
  |  |  ------------------
  |  |   32|     77|    }
  ------------------
  460|     77|                print_string(fdata->value,
  461|     77|                             fdata->value_len,
  462|     77|                             fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_code,
  463|     77|                             12))
  464|     77|            break;
  465|     77|        }
  466|     77|        default:
  ------------------
  |  Branch (466:9): [True: 0, False: 168]
  ------------------
  467|      0|            return false;  // unknown asset type
  468|    168|    }
  469|    168|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_authorize))
  ------------------
  |  |   30|    168|    {                           \
  |  |   31|    168|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 168]
  |  |  ------------------
  |  |   32|    168|    }
  ------------------
  470|    168|    return true;
  471|    168|}
formatter.c:format_allow_trust_authorize:
  437|    168|static bool format_allow_trust_authorize(formatter_data_t *fdata) {
  438|    168|    STRLCPY(fdata->caption, "Authorize Flag", fdata->caption_len);
  ------------------
  |  |   35|    168|    {                                         \
  |  |   36|    168|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    168|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 168]
  |  |  ------------------
  |  |   38|    168|    }
  ------------------
  439|    168|    FORMATTER_CHECK(
  ------------------
  |  |   30|    168|    {                           \
  |  |   31|    168|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 168]
  |  |  ------------------
  |  |   32|    168|    }
  ------------------
  440|    168|        print_allow_trust_flags(fdata->envelope->tx_details.tx.op_details.allow_trust_op.authorize,
  441|    168|                                fdata->value,
  442|    168|                                fdata->value_len))
  443|    168|    return format_operation_source_prepare(fdata);
  444|    168|}
formatter.c:format_account_merge:
  387|    446|static bool format_account_merge(formatter_data_t *fdata) {
  388|    446|    (void) fdata;
  389|    446|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    446|    {                                         \
  |  |   36|    446|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    446|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 446]
  |  |  ------------------
  |  |   38|    446|    }
  ------------------
  390|    446|    STRLCPY(fdata->value, "Account Merge", fdata->value_len);
  ------------------
  |  |   35|    446|    {                                         \
  |  |   36|    446|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    446|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 446]
  |  |  ------------------
  |  |   38|    446|    }
  ------------------
  391|    446|    FORMATTER_CHECK(push_to_formatter_stack(&format_account_merge_detail))
  ------------------
  |  |   30|    446|    {                           \
  |  |   31|    446|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 446]
  |  |  ------------------
  |  |   32|    446|    }
  ------------------
  392|    446|    return true;
  393|    446|}
formatter.c:format_account_merge_detail:
  380|    446|static bool format_account_merge_detail(formatter_data_t *fdata) {
  381|    446|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|    446|    {                                         \
  |  |   36|    446|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    446|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 446]
  |  |  ------------------
  |  |   38|    446|    }
  ------------------
  382|    446|    STRLCPY(fdata->value, "All Funds", fdata->value_len);
  ------------------
  |  |   35|    446|    {                                         \
  |  |   36|    446|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    446|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 446]
  |  |  ------------------
  |  |   38|    446|    }
  ------------------
  383|    446|    FORMATTER_CHECK(push_to_formatter_stack(&format_account_merge_destination))
  ------------------
  |  |   30|    446|    {                           \
  |  |   31|    446|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 446]
  |  |  ------------------
  |  |   32|    446|    }
  ------------------
  384|    446|    return true;
  385|    446|}
formatter.c:format_account_merge_destination:
  369|    446|static bool format_account_merge_destination(formatter_data_t *fdata) {
  370|    446|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    446|    {                                         \
  |  |   36|    446|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    446|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 446]
  |  |  ------------------
  |  |   38|    446|    }
  ------------------
  371|    446|    FORMATTER_CHECK(
  ------------------
  |  |   30|    446|    {                           \
  |  |   31|    446|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 446]
  |  |  ------------------
  |  |   32|    446|    }
  ------------------
  372|    446|        print_muxed_account(&fdata->envelope->tx_details.tx.op_details.account_merge_op.destination,
  373|    446|                            fdata->value,
  374|    446|                            fdata->value_len,
  375|    446|                            0,
  376|    446|                            0))
  377|    446|    return format_operation_source_prepare(fdata);
  378|    446|}
formatter.c:format_inflation:
  362|    794|static bool format_inflation(formatter_data_t *fdata) {
  363|    794|    (void) fdata;
  364|    794|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    794|    {                                         \
  |  |   36|    794|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    794|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 794]
  |  |  ------------------
  |  |   38|    794|    }
  ------------------
  365|    794|    STRLCPY(fdata->value, "Inflation", fdata->value_len);
  ------------------
  |  |   35|    794|    {                                         \
  |  |   36|    794|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    794|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 794]
  |  |  ------------------
  |  |   38|    794|    }
  ------------------
  366|    794|    return format_operation_source_prepare(fdata);
  367|    794|}
formatter.c:format_manage_data:
  420|    499|static bool format_manage_data(formatter_data_t *fdata) {
  421|    499|    FORMATTER_CHECK(
  ------------------
  |  |   30|    499|    {                           \
  |  |   31|    499|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 499]
  |  |  ------------------
  |  |   32|    499|    }
  ------------------
  422|    499|        print_string(fdata->value,
  423|    499|                     fdata->value_len,
  424|    499|                     fdata->envelope->tx_details.tx.op_details.manage_data_op.data_name,
  425|    499|                     fdata->envelope->tx_details.tx.op_details.manage_data_op.data_name_size))
  426|       |
  427|    499|    if (fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size) {
  ------------------
  |  Branch (427:9): [True: 30, False: 469]
  ------------------
  428|     30|        STRLCPY(fdata->caption, "Set Data", fdata->caption_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
  429|     30|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_data_value))
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
  430|    469|    } else {
  431|    469|        STRLCPY(fdata->caption, "Remove Data", fdata->caption_len);
  ------------------
  |  |   35|    469|    {                                         \
  |  |   36|    469|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    469|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 469]
  |  |  ------------------
  |  |   38|    469|    }
  ------------------
  432|    469|        return format_operation_source_prepare(fdata);
  433|    469|    }
  434|     30|    return true;
  435|    499|}
formatter.c:format_manage_data_value:
  395|     30|static bool format_manage_data_value(formatter_data_t *fdata) {
  396|     30|    STRLCPY(fdata->caption, "Data Value", fdata->caption_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
  397|     30|    if (is_printable_binary(
  ------------------
  |  Branch (397:9): [True: 10, False: 20]
  ------------------
  398|     30|            fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  399|     30|            fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size)) {
  400|     10|        if (fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size >=
  ------------------
  |  Branch (400:13): [True: 0, False: 10]
  ------------------
  401|     10|            fdata->value_len) {
  402|      0|            return false;
  403|      0|        }
  404|     10|        FORMATTER_CHECK(
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
  405|     10|            print_string(fdata->value,
  406|     10|                         fdata->value_len,
  407|     10|                         fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  408|     10|                         fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size))
  409|     20|    } else {
  410|     20|        STRLCPY(fdata->value, "Base64: ", fdata->value_len)
  ------------------
  |  |   35|     20|    {                                         \
  |  |   36|     20|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     20|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   38|     20|    }
  ------------------
  411|     20|        FORMATTER_CHECK(
  ------------------
  |  |   30|     20|    {                           \
  |  |   31|     20|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   32|     20|    }
  ------------------
  412|     20|            base64_encode(fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  413|     20|                          fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size,
  414|     20|                          fdata->value + strlen(fdata->value),
  415|     20|                          fdata->value_len - strlen(fdata->value)))
  416|     20|    }
  417|     30|    return format_operation_source_prepare(fdata);
  418|     30|}
formatter.c:format_bump_sequence:
  354|    259|static bool format_bump_sequence(formatter_data_t *fdata) {
  355|    259|    (void) fdata;
  356|    259|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    259|    {                                         \
  |  |   36|    259|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    259|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 259]
  |  |  ------------------
  |  |   38|    259|    }
  ------------------
  357|    259|    STRLCPY(fdata->value, "Bump Sequence", fdata->value_len);
  ------------------
  |  |   35|    259|    {                                         \
  |  |   36|    259|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    259|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 259]
  |  |  ------------------
  |  |   38|    259|    }
  ------------------
  358|    259|    FORMATTER_CHECK(push_to_formatter_stack(&format_bump_sequence_bump_to))
  ------------------
  |  |   30|    259|    {                           \
  |  |   31|    259|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 259]
  |  |  ------------------
  |  |   32|    259|    }
  ------------------
  359|    259|    return true;
  360|    259|}
formatter.c:format_bump_sequence_bump_to:
  345|    259|static bool format_bump_sequence_bump_to(formatter_data_t *fdata) {
  346|    259|    STRLCPY(fdata->caption, "Bump To", fdata->caption_len);
  ------------------
  |  |   35|    259|    {                                         \
  |  |   36|    259|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    259|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 259]
  |  |  ------------------
  |  |   38|    259|    }
  ------------------
  347|    259|    FORMATTER_CHECK(
  ------------------
  |  |   30|    259|    {                           \
  |  |   31|    259|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 259]
  |  |  ------------------
  |  |   32|    259|    }
  ------------------
  348|    259|        print_int64_num(fdata->envelope->tx_details.tx.op_details.bump_sequence_op.bump_to,
  349|    259|                        fdata->value,
  350|    259|                        fdata->value_len))
  351|    259|    return format_operation_source_prepare(fdata);
  352|    259|}
formatter.c:format_manage_buy_offer:
  955|    182|static bool format_manage_buy_offer(formatter_data_t *fdata) {
  956|    182|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  957|       |
  958|    182|    if (op->buy_amount == 0) {
  ------------------
  |  Branch (958:9): [True: 107, False: 75]
  ------------------
  959|    107|        STRLCPY(fdata->caption, "Remove Offer", fdata->caption_len);
  ------------------
  |  |   35|    107|    {                                         \
  |  |   36|    107|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    107|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 107]
  |  |  ------------------
  |  |   38|    107|    }
  ------------------
  960|    107|        FORMATTER_CHECK(print_uint64_num(op->offer_id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|    107|    {                           \
  |  |   31|    107|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 107]
  |  |  ------------------
  |  |   32|    107|    }
  ------------------
  961|    107|        return format_operation_source_prepare(fdata);
  962|    107|    } else {
  963|     75|        if (op->offer_id) {
  ------------------
  |  Branch (963:13): [True: 30, False: 45]
  ------------------
  964|     30|            STRLCPY(fdata->caption, "Change Offer", fdata->caption_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
  965|     30|            FORMATTER_CHECK(print_uint64_num(op->offer_id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
  966|     45|        } else {
  967|     45|            STRLCPY(fdata->caption, "Create Offer", fdata->caption_len);
  ------------------
  |  |   35|     45|    {                                         \
  |  |   36|     45|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     45|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 45]
  |  |  ------------------
  |  |   38|     45|    }
  ------------------
  968|     45|        }
  969|     75|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_sell))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
  970|     75|    }
  971|     75|    return true;
  972|    182|}
formatter.c:format_manage_buy_offer_sell:
  945|     75|static bool format_manage_buy_offer_sell(formatter_data_t *fdata) {
  946|     75|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  947|       |
  948|     75|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
  949|     75|    FORMATTER_CHECK(
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
  950|     75|        print_asset(&op->selling, fdata->envelope->network, fdata->value, fdata->value_len))
  951|     75|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_buy))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
  952|     75|    return true;
  953|     75|}
formatter.c:format_manage_buy_offer_buy:
  932|     75|static bool format_manage_buy_offer_buy(formatter_data_t *fdata) {
  933|     75|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  934|       |
  935|     75|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
  936|     75|    FORMATTER_CHECK(print_amount(op->buy_amount,
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
  937|     75|                                 &op->buying,
  938|     75|                                 fdata->envelope->network,
  939|     75|                                 fdata->value,
  940|     75|                                 fdata->value_len))
  941|     75|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_price))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
  942|     75|    return true;
  943|     75|}
formatter.c:format_manage_buy_offer_price:
  920|     75|static bool format_manage_buy_offer_price(formatter_data_t *fdata) {
  921|     75|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  922|     75|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
  923|     75|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
  924|     75|                                &op->selling,
  925|     75|                                &op->buying,
  926|     75|                                fdata->envelope->network,
  927|     75|                                fdata->value,
  928|     75|                                fdata->value_len))
  929|     75|    return format_operation_source_prepare(fdata);
  930|     75|}
formatter.c:format_path_payment_strict_send:
 1076|     77|static bool format_path_payment_strict_send(formatter_data_t *fdata) {
 1077|     77|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|     77|    {                                         \
  |  |   36|     77|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     77|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 77]
  |  |  ------------------
  |  |   38|     77|    }
  ------------------
 1078|     77|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     77|    {                           \
  |  |   31|     77|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 77]
  |  |  ------------------
  |  |   32|     77|    }
  ------------------
 1079|     77|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.send_amount,
 1080|     77|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.send_asset,
 1081|     77|        fdata->envelope->network,
 1082|     77|        fdata->value,
 1083|     77|        fdata->value_len))
 1084|     77|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_send_destination))
  ------------------
  |  |   30|     77|    {                           \
  |  |   31|     77|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 77]
  |  |  ------------------
  |  |   32|     77|    }
  ------------------
 1085|     77|    return true;
 1086|     77|}
formatter.c:format_path_payment_strict_send_destination:
 1064|     77|static bool format_path_payment_strict_send_destination(formatter_data_t *fdata) {
 1065|     77|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|     77|    {                                         \
  |  |   36|     77|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     77|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 77]
  |  |  ------------------
  |  |   38|     77|    }
  ------------------
 1066|     77|    FORMATTER_CHECK(print_muxed_account(
  ------------------
  |  |   30|     77|    {                           \
  |  |   31|     77|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 77]
  |  |  ------------------
  |  |   32|     77|    }
  ------------------
 1067|     77|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.destination,
 1068|     77|        fdata->value,
 1069|     77|        fdata->value_len,
 1070|     77|        0,
 1071|     77|        0))
 1072|     77|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_send_receive))
  ------------------
  |  |   30|     77|    {                           \
  |  |   31|     77|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 77]
  |  |  ------------------
  |  |   32|     77|    }
  ------------------
 1073|     77|    return true;
 1074|     77|}
formatter.c:format_path_payment_strict_send_receive:
 1053|     77|static bool format_path_payment_strict_send_receive(formatter_data_t *fdata) {
 1054|     77|    STRLCPY(fdata->caption, "Receive Min", fdata->caption_len);
  ------------------
  |  |   35|     77|    {                                         \
  |  |   36|     77|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     77|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 77]
  |  |  ------------------
  |  |   38|     77|    }
  ------------------
 1055|     77|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     77|    {                           \
  |  |   31|     77|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 77]
  |  |  ------------------
  |  |   32|     77|    }
  ------------------
 1056|     77|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.dest_min,
 1057|     77|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.dest_asset,
 1058|     77|        fdata->envelope->network,
 1059|     77|        fdata->value,
 1060|     77|        fdata->value_len))
 1061|     77|    return format_operation_source_prepare(fdata);
 1062|     77|}
formatter.c:format_create_claimable_balance:
 1165|    455|static bool format_create_claimable_balance(formatter_data_t *fdata) {
 1166|    455|    (void) fdata;
 1167|    455|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    455|    {                                         \
  |  |   36|    455|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    455|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 455]
  |  |  ------------------
  |  |   38|    455|    }
  ------------------
 1168|    455|    STRLCPY(fdata->value, "Create Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|    455|    {                                         \
  |  |   36|    455|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    455|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 455]
  |  |  ------------------
  |  |   38|    455|    }
  ------------------
 1169|    455|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_claimable_balance_balance))
  ------------------
  |  |   30|    455|    {                           \
  |  |   31|    455|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 455]
  |  |  ------------------
  |  |   32|    455|    }
  ------------------
 1170|    455|    return true;
 1171|    455|}
formatter.c:format_create_claimable_balance_balance:
 1153|    455|static bool format_create_claimable_balance_balance(formatter_data_t *fdata) {
 1154|    455|    STRLCPY(fdata->caption, "Balance", fdata->caption_len);
  ------------------
  |  |   35|    455|    {                                         \
  |  |   36|    455|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    455|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 455]
  |  |  ------------------
  |  |   38|    455|    }
  ------------------
 1155|    455|    FORMATTER_CHECK(
  ------------------
  |  |   30|    455|    {                           \
  |  |   31|    455|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 455]
  |  |  ------------------
  |  |   32|    455|    }
  ------------------
 1156|    455|        print_amount(fdata->envelope->tx_details.tx.op_details.create_claimable_balance_op.amount,
 1157|    455|                     &fdata->envelope->tx_details.tx.op_details.create_claimable_balance_op.asset,
 1158|    455|                     fdata->envelope->network,
 1159|    455|                     fdata->value,
 1160|    455|                     fdata->value_len))
 1161|    455|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_claimable_balance_warning))
  ------------------
  |  |   30|    455|    {                           \
  |  |   31|    455|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 455]
  |  |  ------------------
  |  |   32|    455|    }
  ------------------
 1162|    455|    return true;
 1163|    455|}
formatter.c:format_create_claimable_balance_warning:
 1142|    455|static bool format_create_claimable_balance_warning(formatter_data_t *fdata) {
 1143|    455|    (void) fdata;
 1144|       |    // The claimant can be very complicated. I haven't figured out how to
 1145|       |    // display it for the time being, so let's display an WARNING here first.
 1146|    455|    STRLCPY(fdata->caption, "WARNING", fdata->caption_len);
  ------------------
  |  |   35|    455|    {                                         \
  |  |   36|    455|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    455|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 455]
  |  |  ------------------
  |  |   38|    455|    }
  ------------------
 1147|    455|    STRLCPY(fdata->value,
  ------------------
  |  |   35|    455|    {                                         \
  |  |   36|    455|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    455|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 455]
  |  |  ------------------
  |  |   38|    455|    }
  ------------------
 1148|    455|            "Currently does not support displaying claimant details",
 1149|    455|            fdata->value_len);
 1150|    455|    return format_operation_source_prepare(fdata);
 1151|    455|}
formatter.c:format_claim_claimable_balance:
 1184|    210|static bool format_claim_claimable_balance(formatter_data_t *fdata) {
 1185|    210|    (void) fdata;
 1186|    210|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    210|    {                                         \
  |  |   36|    210|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    210|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 210]
  |  |  ------------------
  |  |   38|    210|    }
  ------------------
 1187|    210|    STRLCPY(fdata->value, "Claim Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|    210|    {                                         \
  |  |   36|    210|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    210|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 210]
  |  |  ------------------
  |  |   38|    210|    }
  ------------------
 1188|    210|    FORMATTER_CHECK(push_to_formatter_stack(&format_claim_claimable_balance_balance_id))
  ------------------
  |  |   30|    210|    {                           \
  |  |   31|    210|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 210]
  |  |  ------------------
  |  |   32|    210|    }
  ------------------
 1189|    210|    return true;
 1190|    210|}
formatter.c:format_claim_claimable_balance_balance_id:
 1173|    210|static bool format_claim_claimable_balance_balance_id(formatter_data_t *fdata) {
 1174|    210|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|    210|    {                                         \
  |  |   36|    210|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    210|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 210]
  |  |  ------------------
  |  |   38|    210|    }
  ------------------
 1175|    210|    FORMATTER_CHECK(print_claimable_balance_id(
  ------------------
  |  |   30|    210|    {                           \
  |  |   31|    210|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 210]
  |  |  ------------------
  |  |   32|    210|    }
  ------------------
 1176|    210|        &fdata->envelope->tx_details.tx.op_details.claim_claimable_balance_op.balance_id,
 1177|    210|        fdata->value,
 1178|    210|        fdata->value_len,
 1179|    210|        12,
 1180|    210|        12))
 1181|    210|    return format_operation_source_prepare(fdata);
 1182|    210|}
formatter.c:format_begin_sponsoring_future_reserves:
 1203|    586|static bool format_begin_sponsoring_future_reserves(formatter_data_t *fdata) {
 1204|    586|    (void) fdata;
 1205|    586|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    586|    {                                         \
  |  |   36|    586|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    586|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 586]
  |  |  ------------------
  |  |   38|    586|    }
  ------------------
 1206|    586|    STRLCPY(fdata->value, "Begin Sponsoring Future Reserves", fdata->value_len);
  ------------------
  |  |   35|    586|    {                                         \
  |  |   36|    586|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    586|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 586]
  |  |  ------------------
  |  |   38|    586|    }
  ------------------
 1207|    586|    FORMATTER_CHECK(push_to_formatter_stack(&format_claim_claimable_balance_sponsored_id))
  ------------------
  |  |   30|    586|    {                           \
  |  |   31|    586|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 586]
  |  |  ------------------
  |  |   32|    586|    }
  ------------------
 1208|    586|    return true;
 1209|    586|}
formatter.c:format_claim_claimable_balance_sponsored_id:
 1192|    586|static bool format_claim_claimable_balance_sponsored_id(formatter_data_t *fdata) {
 1193|    586|    STRLCPY(fdata->caption, "Sponsored ID", fdata->caption_len);
  ------------------
  |  |   35|    586|    {                                         \
  |  |   36|    586|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    586|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 586]
  |  |  ------------------
  |  |   38|    586|    }
  ------------------
 1194|    586|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|    586|    {                           \
  |  |   31|    586|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 586]
  |  |  ------------------
  |  |   32|    586|    }
  ------------------
 1195|    586|        fdata->envelope->tx_details.tx.op_details.begin_sponsoring_future_reserves_op.sponsored_id,
 1196|    586|        fdata->value,
 1197|    586|        fdata->value_len,
 1198|    586|        0,
 1199|    586|        0))
 1200|    586|    return format_operation_source_prepare(fdata);
 1201|    586|}
formatter.c:format_end_sponsoring_future_reserves:
 1211|    227|static bool format_end_sponsoring_future_reserves(formatter_data_t *fdata) {
 1212|    227|    (void) fdata;
 1213|    227|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    227|    {                                         \
  |  |   36|    227|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    227|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 227]
  |  |  ------------------
  |  |   38|    227|    }
  ------------------
 1214|    227|    STRLCPY(fdata->value, "End Sponsoring Future Reserves", fdata->value_len);
  ------------------
  |  |   35|    227|    {                                         \
  |  |   36|    227|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    227|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 227]
  |  |  ------------------
  |  |   38|    227|    }
  ------------------
 1215|    227|    return format_operation_source_prepare(fdata);
 1216|    227|}
formatter.c:format_revoke_sponsorship:
 1383|  2.49k|static bool format_revoke_sponsorship(formatter_data_t *fdata) {
 1384|  2.49k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  2.49k|    {                                         \
  |  |   36|  2.49k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.49k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.49k]
  |  |  ------------------
  |  |   38|  2.49k|    }
  ------------------
 1385|  2.49k|    if (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.type ==
  ------------------
  |  Branch (1385:9): [True: 1.09k, False: 1.39k]
  ------------------
 1386|  2.49k|        REVOKE_SPONSORSHIP_SIGNER) {
 1387|  1.09k|        STRLCPY(fdata->value, "Revoke Sponsorship (SIGNER_KEY)", fdata->value_len);
  ------------------
  |  |   35|  1.09k|    {                                         \
  |  |   36|  1.09k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.09k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.09k]
  |  |  ------------------
  |  |   38|  1.09k|    }
  ------------------
 1388|  1.09k|        FORMATTER_CHECK(
  ------------------
  |  |   30|  1.09k|    {                           \
  |  |   31|  1.09k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.09k]
  |  |  ------------------
  |  |   32|  1.09k|    }
  ------------------
 1389|  1.09k|            push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_account))
 1390|  1.39k|    } else {
 1391|  1.39k|        switch (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.type) {
 1392|    235|            case ACCOUNT:
  ------------------
  |  Branch (1392:13): [True: 235, False: 1.16k]
  ------------------
 1393|    235|                STRLCPY(fdata->value, "Revoke Sponsorship (ACCOUNT)", fdata->value_len);
  ------------------
  |  |   35|    235|    {                                         \
  |  |   36|    235|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    235|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 235]
  |  |  ------------------
  |  |   38|    235|    }
  ------------------
 1394|    235|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_account))
  ------------------
  |  |   30|    235|    {                           \
  |  |   31|    235|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 235]
  |  |  ------------------
  |  |   32|    235|    }
  ------------------
 1395|    235|                break;
 1396|    235|            case OFFER:
  ------------------
  |  Branch (1396:13): [True: 123, False: 1.27k]
  ------------------
 1397|    123|                STRLCPY(fdata->value, "Revoke Sponsorship (OFFER)", fdata->value_len);
  ------------------
  |  |   35|    123|    {                                         \
  |  |   36|    123|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    123|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 123]
  |  |  ------------------
  |  |   38|    123|    }
  ------------------
 1398|    123|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_offer_seller_id))
  ------------------
  |  |   30|    123|    {                           \
  |  |   31|    123|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 123]
  |  |  ------------------
  |  |   32|    123|    }
  ------------------
 1399|    123|                break;
 1400|    368|            case TRUSTLINE:
  ------------------
  |  Branch (1400:13): [True: 368, False: 1.02k]
  ------------------
 1401|    368|                STRLCPY(fdata->value, "Revoke Sponsorship (TRUSTLINE)", fdata->value_len);
  ------------------
  |  |   35|    368|    {                                         \
  |  |   36|    368|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    368|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 368]
  |  |  ------------------
  |  |   38|    368|    }
  ------------------
 1402|    368|                FORMATTER_CHECK(
  ------------------
  |  |   30|    368|    {                           \
  |  |   31|    368|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 368]
  |  |  ------------------
  |  |   32|    368|    }
  ------------------
 1403|    368|                    push_to_formatter_stack(&format_revoke_sponsorship_trust_line_account))
 1404|    368|                break;
 1405|    368|            case DATA:
  ------------------
  |  Branch (1405:13): [True: 185, False: 1.21k]
  ------------------
 1406|    185|                STRLCPY(fdata->value, "Revoke Sponsorship (DATA)", fdata->value_len);
  ------------------
  |  |   35|    185|    {                                         \
  |  |   36|    185|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    185|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 185]
  |  |  ------------------
  |  |   38|    185|    }
  ------------------
 1407|    185|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_data_account))
  ------------------
  |  |   30|    185|    {                           \
  |  |   31|    185|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 185]
  |  |  ------------------
  |  |   32|    185|    }
  ------------------
 1408|    185|                break;
 1409|    185|            case CLAIMABLE_BALANCE:
  ------------------
  |  Branch (1409:13): [True: 127, False: 1.26k]
  ------------------
 1410|    127|                STRLCPY(fdata->value, "Revoke Sponsorship (CLAIMABLE_BALANCE)", fdata->value_len);
  ------------------
  |  |   35|    127|    {                                         \
  |  |   36|    127|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    127|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 127]
  |  |  ------------------
  |  |   38|    127|    }
  ------------------
 1411|    127|                FORMATTER_CHECK(
  ------------------
  |  |   30|    127|    {                           \
  |  |   31|    127|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 127]
  |  |  ------------------
  |  |   32|    127|    }
  ------------------
 1412|    127|                    push_to_formatter_stack(&format_revoke_sponsorship_claimable_balance))
 1413|    127|                break;
 1414|    358|            case LIQUIDITY_POOL:
  ------------------
  |  Branch (1414:13): [True: 358, False: 1.03k]
  ------------------
 1415|    358|                STRLCPY(fdata->value, "Revoke Sponsorship (LIQUIDITY_POOL)", fdata->value_len);
  ------------------
  |  |   35|    358|    {                                         \
  |  |   36|    358|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    358|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 358]
  |  |  ------------------
  |  |   38|    358|    }
  ------------------
 1416|    358|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_liquidity_pool))
  ------------------
  |  |   30|    358|    {                           \
  |  |   31|    358|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 358]
  |  |  ------------------
  |  |   32|    358|    }
  ------------------
 1417|    358|                break;
 1418|    358|            default:
  ------------------
  |  Branch (1418:13): [True: 0, False: 1.39k]
  ------------------
 1419|      0|                return false;
 1420|  1.39k|        }
 1421|  1.39k|    }
 1422|  2.49k|    return true;
 1423|  2.49k|}
formatter.c:format_revoke_sponsorship_claimable_signer_account:
 1370|  1.09k|static bool format_revoke_sponsorship_claimable_signer_account(formatter_data_t *fdata) {
 1371|  1.09k|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|  1.09k|    {                                         \
  |  |   36|  1.09k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.09k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.09k]
  |  |  ------------------
  |  |   38|  1.09k|    }
  ------------------
 1372|  1.09k|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|  1.09k|    {                           \
  |  |   31|  1.09k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.09k]
  |  |  ------------------
  |  |   32|  1.09k|    }
  ------------------
 1373|  1.09k|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.account_id,
 1374|  1.09k|        fdata->value,
 1375|  1.09k|        fdata->value_len,
 1376|  1.09k|        0,
 1377|  1.09k|        0))
 1378|  1.09k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.09k|    {                           \
  |  |   31|  1.09k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.09k]
  |  |  ------------------
  |  |   32|  1.09k|    }
  ------------------
 1379|  1.09k|        push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_signer_key_type))
 1380|  1.09k|    return true;
 1381|  1.09k|}
formatter.c:format_revoke_sponsorship_claimable_signer_signer_key_type:
 1341|  1.09k|static bool format_revoke_sponsorship_claimable_signer_signer_key_type(formatter_data_t *fdata) {
 1342|  1.09k|    STRLCPY(fdata->caption, "Signer Key Type", fdata->caption_len);
  ------------------
  |  |   35|  1.09k|    {                                         \
  |  |   36|  1.09k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.09k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.09k]
  |  |  ------------------
  |  |   38|  1.09k|    }
  ------------------
 1343|  1.09k|    switch (
 1344|  1.09k|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.signer_key.type) {
 1345|    417|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (1345:9): [True: 417, False: 677]
  ------------------
 1346|    417|            STRLCPY(fdata->value, "Public Key", fdata->value_len);
  ------------------
  |  |   35|    417|    {                                         \
  |  |   36|    417|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    417|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 417]
  |  |  ------------------
  |  |   38|    417|    }
  ------------------
 1347|    417|            break;
 1348|    417|        }
 1349|     96|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (1349:9): [True: 96, False: 998]
  ------------------
 1350|     96|            STRLCPY(fdata->value, "Hash(x)", fdata->value_len);
  ------------------
  |  |   35|     96|    {                                         \
  |  |   36|     96|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     96|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 96]
  |  |  ------------------
  |  |   38|     96|    }
  ------------------
 1351|     96|            break;
 1352|     96|        }
 1353|    249|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (1353:9): [True: 249, False: 845]
  ------------------
 1354|    249|            STRLCPY(fdata->value, "Pre-Auth", fdata->value_len);
  ------------------
  |  |   35|    249|    {                                         \
  |  |   36|    249|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    249|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 249]
  |  |  ------------------
  |  |   38|    249|    }
  ------------------
 1355|    249|            break;
 1356|    249|        }
 1357|    332|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (1357:9): [True: 332, False: 762]
  ------------------
 1358|    332|            STRLCPY(fdata->value, "Ed25519 Signed Payload", fdata->value_len);
  ------------------
  |  |   35|    332|    {                                         \
  |  |   36|    332|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    332|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 332]
  |  |  ------------------
  |  |   38|    332|    }
  ------------------
 1359|    332|            break;
 1360|    332|        }
 1361|      0|        default:
  ------------------
  |  Branch (1361:9): [True: 0, False: 1.09k]
  ------------------
 1362|      0|            return false;
 1363|  1.09k|    }
 1364|       |
 1365|  1.09k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.09k|    {                           \
  |  |   31|  1.09k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.09k]
  |  |  ------------------
  |  |   32|  1.09k|    }
  ------------------
 1366|  1.09k|        push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_signer_key_detail))
 1367|  1.09k|    return true;
 1368|  1.09k|}
formatter.c:format_revoke_sponsorship_claimable_signer_signer_key_detail:
 1332|  1.09k|static bool format_revoke_sponsorship_claimable_signer_signer_key_detail(formatter_data_t *fdata) {
 1333|  1.09k|    STRLCPY(fdata->caption, "Signer Key", fdata->caption_len);
  ------------------
  |  |   35|  1.09k|    {                                         \
  |  |   36|  1.09k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.09k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.09k]
  |  |  ------------------
  |  |   38|  1.09k|    }
  ------------------
 1334|  1.09k|    signer_key_t *key =
 1335|  1.09k|        &fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.signer_key;
 1336|       |
 1337|  1.09k|    FORMATTER_CHECK(print_signer_key_detail(key, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  1.09k|    {                           \
  |  |   31|  1.09k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.09k]
  |  |  ------------------
  |  |   32|  1.09k|    }
  ------------------
 1338|  1.09k|    return format_operation_source_prepare(fdata);
 1339|  1.09k|}
formatter.c:format_revoke_sponsorship_account:
 1218|    235|static bool format_revoke_sponsorship_account(formatter_data_t *fdata) {
 1219|    235|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    235|    {                                         \
  |  |   36|    235|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    235|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 235]
  |  |  ------------------
  |  |   38|    235|    }
  ------------------
 1220|    235|    FORMATTER_CHECK(print_account_id(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|    235|    {                           \
  |  |   31|    235|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 235]
  |  |  ------------------
  |  |   32|    235|    }
  ------------------
 1221|    235|                                         .ledger_key.account.account_id,
 1222|    235|                                     fdata->value,
 1223|    235|                                     fdata->value_len,
 1224|    235|                                     0,
 1225|    235|                                     0))
 1226|    235|    return format_operation_source_prepare(fdata);
 1227|    235|}
formatter.c:format_revoke_sponsorship_offer_seller_id:
 1273|    123|static bool format_revoke_sponsorship_offer_seller_id(formatter_data_t *fdata) {
 1274|    123|    STRLCPY(fdata->caption, "Seller ID", fdata->caption_len);
  ------------------
  |  |   35|    123|    {                                         \
  |  |   36|    123|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    123|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 123]
  |  |  ------------------
  |  |   38|    123|    }
  ------------------
 1275|    123|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|    123|    {                           \
  |  |   31|    123|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 123]
  |  |  ------------------
  |  |   32|    123|    }
  ------------------
 1276|    123|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.offer.seller_id,
 1277|    123|        fdata->value,
 1278|    123|        fdata->value_len,
 1279|    123|        0,
 1280|    123|        0))
 1281|    123|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_offer_offer_id))
  ------------------
  |  |   30|    123|    {                           \
  |  |   31|    123|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 123]
  |  |  ------------------
  |  |   32|    123|    }
  ------------------
 1282|    123|    return true;
 1283|    123|}
formatter.c:format_revoke_sponsorship_offer_offer_id:
 1263|    123|static bool format_revoke_sponsorship_offer_offer_id(formatter_data_t *fdata) {
 1264|    123|    STRLCPY(fdata->caption, "Offer ID", fdata->caption_len);
  ------------------
  |  |   35|    123|    {                                         \
  |  |   36|    123|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    123|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 123]
  |  |  ------------------
  |  |   38|    123|    }
  ------------------
 1265|    123|    FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|    123|    {                           \
  |  |   31|    123|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 123]
  |  |  ------------------
  |  |   32|    123|    }
  ------------------
 1266|    123|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.offer.offer_id,
 1267|    123|        fdata->value,
 1268|    123|        fdata->value_len))
 1269|       |
 1270|    123|    return format_operation_source_prepare(fdata);
 1271|    123|}
formatter.c:format_revoke_sponsorship_trust_line_account:
 1251|    368|static bool format_revoke_sponsorship_trust_line_account(formatter_data_t *fdata) {
 1252|    368|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    368|    {                                         \
  |  |   36|    368|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    368|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 368]
  |  |  ------------------
  |  |   38|    368|    }
  ------------------
 1253|    368|    FORMATTER_CHECK(print_account_id(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|    368|    {                           \
  |  |   31|    368|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 368]
  |  |  ------------------
  |  |   32|    368|    }
  ------------------
 1254|    368|                                         .ledger_key.trust_line.account_id,
 1255|    368|                                     fdata->value,
 1256|    368|                                     fdata->value_len,
 1257|    368|                                     0,
 1258|    368|                                     0))
 1259|    368|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_trust_line_asset))
  ------------------
  |  |   30|    368|    {                           \
  |  |   31|    368|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 368]
  |  |  ------------------
  |  |   32|    368|    }
  ------------------
 1260|    368|    return true;
 1261|    368|}
formatter.c:format_revoke_sponsorship_trust_line_asset:
 1229|    368|static bool format_revoke_sponsorship_trust_line_asset(formatter_data_t *fdata) {
 1230|    368|    if (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.trust_line.asset
  ------------------
  |  Branch (1230:9): [True: 84, False: 284]
  ------------------
 1231|    368|            .type == ASSET_TYPE_POOL_SHARE) {
 1232|     84|        STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     84|    {                                         \
  |  |   36|     84|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     84|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   38|     84|    }
  ------------------
 1233|     84|        FORMATTER_CHECK(print_binary(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|     84|    {                           \
  |  |   31|     84|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   32|     84|    }
  ------------------
 1234|     84|                                         .ledger_key.trust_line.asset.liquidity_pool_id,
 1235|     84|                                     LIQUIDITY_POOL_ID_SIZE,
 1236|     84|                                     fdata->value,
 1237|     84|                                     fdata->value_len,
 1238|     84|                                     0,
 1239|     84|                                     0))
 1240|    284|    } else {
 1241|    284|        STRLCPY(fdata->caption, "Asset", fdata->caption_len);
  ------------------
  |  |   35|    284|    {                                         \
  |  |   36|    284|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    284|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 284]
  |  |  ------------------
  |  |   38|    284|    }
  ------------------
 1242|    284|        FORMATTER_CHECK(print_asset((asset_t *) &fdata->envelope->tx_details.tx.op_details
  ------------------
  |  |   30|    284|    {                           \
  |  |   31|    284|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 284]
  |  |  ------------------
  |  |   32|    284|    }
  ------------------
 1243|    284|                                        .revoke_sponsorship_op.ledger_key.trust_line.asset,
 1244|    284|                                    fdata->envelope->network,
 1245|    284|                                    fdata->value,
 1246|    284|                                    fdata->value_len))
 1247|    284|    }
 1248|    368|    return format_operation_source_prepare(fdata);
 1249|    368|}
formatter.c:format_revoke_sponsorship_data_account:
 1296|    185|static bool format_revoke_sponsorship_data_account(formatter_data_t *fdata) {
 1297|    185|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    185|    {                                         \
  |  |   36|    185|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    185|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 185]
  |  |  ------------------
  |  |   38|    185|    }
  ------------------
 1298|    185|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|    185|    {                           \
  |  |   31|    185|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 185]
  |  |  ------------------
  |  |   32|    185|    }
  ------------------
 1299|    185|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data.account_id,
 1300|    185|        fdata->value,
 1301|    185|        fdata->value_len,
 1302|    185|        0,
 1303|    185|        0))
 1304|    185|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_data_data_name))
  ------------------
  |  |   30|    185|    {                           \
  |  |   31|    185|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 185]
  |  |  ------------------
  |  |   32|    185|    }
  ------------------
 1305|    185|    return true;
 1306|    185|}
formatter.c:format_revoke_sponsorship_data_data_name:
 1285|    185|static bool format_revoke_sponsorship_data_data_name(formatter_data_t *fdata) {
 1286|    185|    STRLCPY(fdata->caption, "Data Name", fdata->caption_len);
  ------------------
  |  |   35|    185|    {                                         \
  |  |   36|    185|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    185|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 185]
  |  |  ------------------
  |  |   38|    185|    }
  ------------------
 1287|    185|    FORMATTER_CHECK(print_string(
  ------------------
  |  |   30|    185|    {                           \
  |  |   31|    185|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 185]
  |  |  ------------------
  |  |   32|    185|    }
  ------------------
 1288|    185|        fdata->value,
 1289|    185|        fdata->value_len,
 1290|    185|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data.data_name,
 1291|    185|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data
 1292|    185|            .data_name_size))
 1293|    185|    return format_operation_source_prepare(fdata);
 1294|    185|}
formatter.c:format_revoke_sponsorship_claimable_balance:
 1308|    127|static bool format_revoke_sponsorship_claimable_balance(formatter_data_t *fdata) {
 1309|    127|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|    127|    {                                         \
  |  |   36|    127|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    127|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 127]
  |  |  ------------------
  |  |   38|    127|    }
  ------------------
 1310|    127|    FORMATTER_CHECK(
  ------------------
  |  |   30|    127|    {                           \
  |  |   31|    127|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 127]
  |  |  ------------------
  |  |   32|    127|    }
  ------------------
 1311|    127|        print_claimable_balance_id(&fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
 1312|    127|                                        .ledger_key.claimable_balance.balance_id,
 1313|    127|                                   fdata->value,
 1314|    127|                                   fdata->value_len,
 1315|    127|                                   0,
 1316|    127|                                   0))
 1317|    127|    return format_operation_source_prepare(fdata);
 1318|    127|}
formatter.c:format_revoke_sponsorship_liquidity_pool:
 1320|    358|static bool format_revoke_sponsorship_liquidity_pool(formatter_data_t *fdata) {
 1321|    358|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|    358|    {                                         \
  |  |   36|    358|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    358|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 358]
  |  |  ------------------
  |  |   38|    358|    }
  ------------------
 1322|    358|    FORMATTER_CHECK(print_binary(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|    358|    {                           \
  |  |   31|    358|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 358]
  |  |  ------------------
  |  |   32|    358|    }
  ------------------
 1323|    358|                                     .ledger_key.liquidity_pool.liquidity_pool_id,
 1324|    358|                                 LIQUIDITY_POOL_ID_SIZE,
 1325|    358|                                 fdata->value,
 1326|    358|                                 fdata->value_len,
 1327|    358|                                 0,
 1328|    358|                                 0))
 1329|    358|    return format_operation_source_prepare(fdata);
 1330|    358|}
formatter.c:format_clawback:
 1446|     98|static bool format_clawback(formatter_data_t *fdata) {
 1447|     98|    (void) fdata;
 1448|     98|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     98|    {                                         \
  |  |   36|     98|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     98|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 98]
  |  |  ------------------
  |  |   38|     98|    }
  ------------------
 1449|     98|    STRLCPY(fdata->value, "Clawback", fdata->value_len);
  ------------------
  |  |   35|     98|    {                                         \
  |  |   36|     98|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     98|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 98]
  |  |  ------------------
  |  |   38|     98|    }
  ------------------
 1450|     98|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_amount))
  ------------------
  |  |   30|     98|    {                           \
  |  |   31|     98|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 98]
  |  |  ------------------
  |  |   32|     98|    }
  ------------------
 1451|     98|    return true;
 1452|     98|}
formatter.c:format_clawback_amount:
 1435|     98|static bool format_clawback_amount(formatter_data_t *fdata) {
 1436|     98|    STRLCPY(fdata->caption, "Clawback Balance", fdata->caption_len);
  ------------------
  |  |   35|     98|    {                                         \
  |  |   36|     98|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     98|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 98]
  |  |  ------------------
  |  |   38|     98|    }
  ------------------
 1437|     98|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.clawback_op.amount,
  ------------------
  |  |   30|     98|    {                           \
  |  |   31|     98|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 98]
  |  |  ------------------
  |  |   32|     98|    }
  ------------------
 1438|     98|                                 &fdata->envelope->tx_details.tx.op_details.clawback_op.asset,
 1439|     98|                                 fdata->envelope->network,
 1440|     98|                                 fdata->value,
 1441|     98|                                 fdata->value_len))
 1442|     98|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_from))
  ------------------
  |  |   30|     98|    {                           \
  |  |   31|     98|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 98]
  |  |  ------------------
  |  |   32|     98|    }
  ------------------
 1443|     98|    return true;
 1444|     98|}
formatter.c:format_clawback_from:
 1425|     98|static bool format_clawback_from(formatter_data_t *fdata) {
 1426|     98|    STRLCPY(fdata->caption, "From", fdata->caption_len);
  ------------------
  |  |   35|     98|    {                                         \
  |  |   36|     98|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     98|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 98]
  |  |  ------------------
  |  |   38|     98|    }
  ------------------
 1427|     98|    FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.op_details.clawback_op.from,
  ------------------
  |  |   30|     98|    {                           \
  |  |   31|     98|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 98]
  |  |  ------------------
  |  |   32|     98|    }
  ------------------
 1428|     98|                                        fdata->value,
 1429|     98|                                        fdata->value_len,
 1430|     98|                                        0,
 1431|     98|                                        0))
 1432|     98|    return format_operation_source_prepare(fdata);
 1433|     98|}
formatter.c:format_clawback_claimable_balance:
 1465|    151|static bool format_clawback_claimable_balance(formatter_data_t *fdata) {
 1466|    151|    (void) fdata;
 1467|    151|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    151|    {                                         \
  |  |   36|    151|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    151|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 151]
  |  |  ------------------
  |  |   38|    151|    }
  ------------------
 1468|    151|    STRLCPY(fdata->value, "Clawback Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|    151|    {                                         \
  |  |   36|    151|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    151|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 151]
  |  |  ------------------
  |  |   38|    151|    }
  ------------------
 1469|    151|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_claimable_balance_balance_id))
  ------------------
  |  |   30|    151|    {                           \
  |  |   31|    151|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 151]
  |  |  ------------------
  |  |   32|    151|    }
  ------------------
 1470|    151|    return true;
 1471|    151|}
formatter.c:format_clawback_claimable_balance_balance_id:
 1454|    151|static bool format_clawback_claimable_balance_balance_id(formatter_data_t *fdata) {
 1455|    151|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|    151|    {                                         \
  |  |   36|    151|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    151|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 151]
  |  |  ------------------
  |  |   38|    151|    }
  ------------------
 1456|    151|    FORMATTER_CHECK(print_claimable_balance_id(
  ------------------
  |  |   30|    151|    {                           \
  |  |   31|    151|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 151]
  |  |  ------------------
  |  |   32|    151|    }
  ------------------
 1457|    151|        &fdata->envelope->tx_details.tx.op_details.clawback_claimable_balance_op.balance_id,
 1458|    151|        fdata->value,
 1459|    151|        fdata->value_len,
 1460|    151|        0,
 1461|    151|        0))
 1462|    151|    return format_operation_source_prepare(fdata);
 1463|    151|}
formatter.c:format_set_trust_line_flags:
 1523|  1.50k|static bool format_set_trust_line_flags(formatter_data_t *fdata) {
 1524|  1.50k|    (void) fdata;
 1525|  1.50k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  1.50k|    {                                         \
  |  |   36|  1.50k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.50k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.50k]
  |  |  ------------------
  |  |   38|  1.50k|    }
  ------------------
 1526|  1.50k|    STRLCPY(fdata->value, "Set Trust Line Flags", fdata->value_len);
  ------------------
  |  |   35|  1.50k|    {                                         \
  |  |   36|  1.50k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.50k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.50k]
  |  |  ------------------
  |  |   38|  1.50k|    }
  ------------------
 1527|  1.50k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_trustor))
  ------------------
  |  |   30|  1.50k|    {                           \
  |  |   31|  1.50k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.50k]
  |  |  ------------------
  |  |   32|  1.50k|    }
  ------------------
 1528|  1.50k|    return true;
 1529|  1.50k|}
formatter.c:format_set_trust_line_trustor:
 1511|  1.50k|static bool format_set_trust_line_trustor(formatter_data_t *fdata) {
 1512|  1.50k|    STRLCPY(fdata->caption, "Trustor", fdata->caption_len);
  ------------------
  |  |   35|  1.50k|    {                                         \
  |  |   36|  1.50k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.50k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.50k]
  |  |  ------------------
  |  |   38|  1.50k|    }
  ------------------
 1513|  1.50k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.50k|    {                           \
  |  |   31|  1.50k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.50k]
  |  |  ------------------
  |  |   32|  1.50k|    }
  ------------------
 1514|  1.50k|        print_account_id(fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.trustor,
 1515|  1.50k|                         fdata->value,
 1516|  1.50k|                         fdata->value_len,
 1517|  1.50k|                         0,
 1518|  1.50k|                         0))
 1519|  1.50k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_asset))
  ------------------
  |  |   30|  1.50k|    {                           \
  |  |   31|  1.50k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.50k]
  |  |  ------------------
  |  |   32|  1.50k|    }
  ------------------
 1520|  1.50k|    return true;
 1521|  1.50k|}
formatter.c:format_set_trust_line_asset:
 1500|  1.50k|static bool format_set_trust_line_asset(formatter_data_t *fdata) {
 1501|  1.50k|    STRLCPY(fdata->caption, "Asset", fdata->caption_len);
  ------------------
  |  |   35|  1.50k|    {                                         \
  |  |   36|  1.50k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.50k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.50k]
  |  |  ------------------
  |  |   38|  1.50k|    }
  ------------------
 1502|  1.50k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.50k|    {                           \
  |  |   31|  1.50k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.50k]
  |  |  ------------------
  |  |   32|  1.50k|    }
  ------------------
 1503|  1.50k|        print_asset(&fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.asset,
 1504|  1.50k|                    fdata->envelope->network,
 1505|  1.50k|                    fdata->value,
 1506|  1.50k|                    fdata->value_len))
 1507|  1.50k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_clear_flags))
  ------------------
  |  |   30|  1.50k|    {                           \
  |  |   31|  1.50k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.50k]
  |  |  ------------------
  |  |   32|  1.50k|    }
  ------------------
 1508|  1.50k|    return true;
 1509|  1.50k|}
formatter.c:format_set_trust_line_clear_flags:
 1486|  1.50k|static bool format_set_trust_line_clear_flags(formatter_data_t *fdata) {
 1487|  1.50k|    STRLCPY(fdata->caption, "Clear Flags", fdata->caption_len);
  ------------------
  |  |   35|  1.50k|    {                                         \
  |  |   36|  1.50k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.50k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.50k]
  |  |  ------------------
  |  |   38|  1.50k|    }
  ------------------
 1488|  1.50k|    if (fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.clear_flags) {
  ------------------
  |  Branch (1488:9): [True: 770, False: 732]
  ------------------
 1489|    770|        FORMATTER_CHECK(print_trust_line_flags(
  ------------------
  |  |   30|    770|    {                           \
  |  |   31|    770|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 770]
  |  |  ------------------
  |  |   32|    770|    }
  ------------------
 1490|    770|            fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.clear_flags,
 1491|    770|            fdata->value,
 1492|    770|            fdata->value_len))
 1493|    770|    } else {
 1494|    732|        STRLCPY(fdata->value, "[none]", fdata->value_len);
  ------------------
  |  |   35|    732|    {                                         \
  |  |   36|    732|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    732|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 732]
  |  |  ------------------
  |  |   38|    732|    }
  ------------------
 1495|    732|    }
 1496|  1.50k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_set_flags))
  ------------------
  |  |   30|  1.50k|    {                           \
  |  |   31|  1.50k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.50k]
  |  |  ------------------
  |  |   32|  1.50k|    }
  ------------------
 1497|  1.50k|    return true;
 1498|  1.50k|}
formatter.c:format_set_trust_line_set_flags:
 1473|  1.50k|static bool format_set_trust_line_set_flags(formatter_data_t *fdata) {
 1474|  1.50k|    STRLCPY(fdata->caption, "Set Flags", fdata->caption_len);
  ------------------
  |  |   35|  1.50k|    {                                         \
  |  |   36|  1.50k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.50k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.50k]
  |  |  ------------------
  |  |   38|  1.50k|    }
  ------------------
 1475|  1.50k|    if (fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.set_flags) {
  ------------------
  |  Branch (1475:9): [True: 734, False: 768]
  ------------------
 1476|    734|        FORMATTER_CHECK(print_trust_line_flags(
  ------------------
  |  |   30|    734|    {                           \
  |  |   31|    734|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 734]
  |  |  ------------------
  |  |   32|    734|    }
  ------------------
 1477|    734|            fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.set_flags,
 1478|    734|            fdata->value,
 1479|    734|            fdata->value_len))
 1480|    768|    } else {
 1481|    768|        STRLCPY(fdata->value, "[none]", fdata->value_len);
  ------------------
  |  |   35|    768|    {                                         \
  |  |   36|    768|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    768|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 768]
  |  |  ------------------
  |  |   38|    768|    }
  ------------------
 1482|    768|    }
 1483|  1.50k|    return format_operation_source_prepare(fdata);
 1484|  1.50k|}
formatter.c:format_liquidity_pool_deposit:
 1595|     73|static bool format_liquidity_pool_deposit(formatter_data_t *fdata) {
 1596|     73|    (void) fdata;
 1597|     73|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     73|    {                                         \
  |  |   36|     73|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     73|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   38|     73|    }
  ------------------
 1598|     73|    STRLCPY(fdata->value, "Liquidity Pool Deposit", fdata->value_len);
  ------------------
  |  |   35|     73|    {                                         \
  |  |   36|     73|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     73|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   38|     73|    }
  ------------------
 1599|     73|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_liquidity_pool_id))
  ------------------
  |  |   30|     73|    {                           \
  |  |   31|     73|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   32|     73|    }
  ------------------
 1600|     73|    return true;
 1601|     73|}
formatter.c:format_liquidity_pool_deposit_liquidity_pool_id:
 1582|     73|static bool format_liquidity_pool_deposit_liquidity_pool_id(formatter_data_t *fdata) {
 1583|     73|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     73|    {                                         \
  |  |   36|     73|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     73|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   38|     73|    }
  ------------------
 1584|     73|    FORMATTER_CHECK(print_binary(
  ------------------
  |  |   30|     73|    {                           \
  |  |   31|     73|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   32|     73|    }
  ------------------
 1585|     73|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.liquidity_pool_id,
 1586|     73|        LIQUIDITY_POOL_ID_SIZE,
 1587|     73|        fdata->value,
 1588|     73|        fdata->value_len,
 1589|     73|        0,
 1590|     73|        0))
 1591|     73|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_amount_a))
  ------------------
  |  |   30|     73|    {                           \
  |  |   31|     73|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   32|     73|    }
  ------------------
 1592|     73|    return true;
 1593|     73|}
formatter.c:format_liquidity_pool_deposit_max_amount_a:
 1570|     73|static bool format_liquidity_pool_deposit_max_amount_a(formatter_data_t *fdata) {
 1571|     73|    STRLCPY(fdata->caption, "Max Amount A", fdata->caption_len);
  ------------------
  |  |   35|     73|    {                                         \
  |  |   36|     73|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     73|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   38|     73|    }
  ------------------
 1572|     73|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     73|    {                           \
  |  |   31|     73|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   32|     73|    }
  ------------------
 1573|     73|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.max_amount_a,
 1574|     73|        NULL,
 1575|     73|        fdata->envelope->network,
 1576|     73|        fdata->value,
 1577|     73|        fdata->value_len))
 1578|     73|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_amount_b))
  ------------------
  |  |   30|     73|    {                           \
  |  |   31|     73|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   32|     73|    }
  ------------------
 1579|     73|    return true;
 1580|     73|}
formatter.c:format_liquidity_pool_deposit_max_amount_b:
 1558|     73|static bool format_liquidity_pool_deposit_max_amount_b(formatter_data_t *fdata) {
 1559|     73|    STRLCPY(fdata->caption, "Max Amount B", fdata->caption_len);
  ------------------
  |  |   35|     73|    {                                         \
  |  |   36|     73|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     73|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   38|     73|    }
  ------------------
 1560|     73|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     73|    {                           \
  |  |   31|     73|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   32|     73|    }
  ------------------
 1561|     73|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.max_amount_b,
 1562|     73|        NULL,
 1563|     73|        fdata->envelope->network,
 1564|     73|        fdata->value,
 1565|     73|        fdata->value_len))
 1566|     73|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_min_price))
  ------------------
  |  |   30|     73|    {                           \
  |  |   31|     73|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   32|     73|    }
  ------------------
 1567|     73|    return true;
 1568|     73|}
formatter.c:format_liquidity_pool_deposit_min_price:
 1544|     73|static bool format_liquidity_pool_deposit_min_price(formatter_data_t *fdata) {
 1545|     73|    liquidity_pool_deposit_op_t *op =
 1546|     73|        &fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op;
 1547|     73|    STRLCPY(fdata->caption, "Min Price", fdata->caption_len);
  ------------------
  |  |   35|     73|    {                                         \
  |  |   36|     73|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     73|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   38|     73|    }
  ------------------
 1548|     73|    FORMATTER_CHECK(print_price(&op->min_price,
  ------------------
  |  |   30|     73|    {                           \
  |  |   31|     73|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   32|     73|    }
  ------------------
 1549|     73|                                NULL,
 1550|     73|                                NULL,
 1551|     73|                                fdata->envelope->network,
 1552|     73|                                fdata->value,
 1553|     73|                                fdata->value_len))
 1554|     73|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_price))
  ------------------
  |  |   30|     73|    {                           \
  |  |   31|     73|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   32|     73|    }
  ------------------
 1555|     73|    return true;
 1556|     73|}
formatter.c:format_liquidity_pool_deposit_max_price:
 1531|     73|static bool format_liquidity_pool_deposit_max_price(formatter_data_t *fdata) {
 1532|     73|    liquidity_pool_deposit_op_t *op =
 1533|     73|        &fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op;
 1534|     73|    STRLCPY(fdata->caption, "Max Price", fdata->caption_len);
  ------------------
  |  |   35|     73|    {                                         \
  |  |   36|     73|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     73|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   38|     73|    }
  ------------------
 1535|     73|    FORMATTER_CHECK(print_price(&op->max_price,
  ------------------
  |  |   30|     73|    {                           \
  |  |   31|     73|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 73]
  |  |  ------------------
  |  |   32|     73|    }
  ------------------
 1536|     73|                                NULL,
 1537|     73|                                NULL,
 1538|     73|                                fdata->envelope->network,
 1539|     73|                                fdata->value,
 1540|     73|                                fdata->value_len))
 1541|     73|    return format_operation_source_prepare(fdata);
 1542|     73|}
formatter.c:format_liquidity_pool_withdraw:
 1651|    308|static bool format_liquidity_pool_withdraw(formatter_data_t *fdata) {
 1652|    308|    (void) fdata;
 1653|    308|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    308|    {                                         \
  |  |   36|    308|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    308|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 308]
  |  |  ------------------
  |  |   38|    308|    }
  ------------------
 1654|    308|    STRLCPY(fdata->value, "Liquidity Pool Withdraw", fdata->value_len);
  ------------------
  |  |   35|    308|    {                                         \
  |  |   36|    308|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    308|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 308]
  |  |  ------------------
  |  |   38|    308|    }
  ------------------
 1655|    308|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_liquidity_pool_id))
  ------------------
  |  |   30|    308|    {                           \
  |  |   31|    308|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 308]
  |  |  ------------------
  |  |   32|    308|    }
  ------------------
 1656|    308|    return true;
 1657|    308|}
formatter.c:format_liquidity_pool_withdraw_liquidity_pool_id:
 1638|    308|static bool format_liquidity_pool_withdraw_liquidity_pool_id(formatter_data_t *fdata) {
 1639|    308|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|    308|    {                                         \
  |  |   36|    308|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    308|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 308]
  |  |  ------------------
  |  |   38|    308|    }
  ------------------
 1640|    308|    FORMATTER_CHECK(print_binary(
  ------------------
  |  |   30|    308|    {                           \
  |  |   31|    308|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 308]
  |  |  ------------------
  |  |   32|    308|    }
  ------------------
 1641|    308|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.liquidity_pool_id,
 1642|    308|        LIQUIDITY_POOL_ID_SIZE,
 1643|    308|        fdata->value,
 1644|    308|        fdata->value_len,
 1645|    308|        0,
 1646|    308|        0))
 1647|    308|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_amount))
  ------------------
  |  |   30|    308|    {                           \
  |  |   31|    308|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 308]
  |  |  ------------------
  |  |   32|    308|    }
  ------------------
 1648|    308|    return true;
 1649|    308|}
formatter.c:format_liquidity_pool_withdraw_amount:
 1626|    308|static bool format_liquidity_pool_withdraw_amount(formatter_data_t *fdata) {
 1627|    308|    STRLCPY(fdata->caption, "Amount", fdata->caption_len);
  ------------------
  |  |   35|    308|    {                                         \
  |  |   36|    308|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    308|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 308]
  |  |  ------------------
  |  |   38|    308|    }
  ------------------
 1628|    308|    FORMATTER_CHECK(
  ------------------
  |  |   30|    308|    {                           \
  |  |   31|    308|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 308]
  |  |  ------------------
  |  |   32|    308|    }
  ------------------
 1629|    308|        print_amount(fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.amount,
 1630|    308|                     NULL,
 1631|    308|                     fdata->envelope->network,
 1632|    308|                     fdata->value,
 1633|    308|                     fdata->value_len))
 1634|    308|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_min_amount_a))
  ------------------
  |  |   30|    308|    {                           \
  |  |   31|    308|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 308]
  |  |  ------------------
  |  |   32|    308|    }
  ------------------
 1635|    308|    return true;
 1636|    308|}
formatter.c:format_liquidity_pool_withdraw_min_amount_a:
 1614|    308|static bool format_liquidity_pool_withdraw_min_amount_a(formatter_data_t *fdata) {
 1615|    308|    STRLCPY(fdata->caption, "Min Amount A", fdata->caption_len);
  ------------------
  |  |   35|    308|    {                                         \
  |  |   36|    308|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    308|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 308]
  |  |  ------------------
  |  |   38|    308|    }
  ------------------
 1616|    308|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    308|    {                           \
  |  |   31|    308|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 308]
  |  |  ------------------
  |  |   32|    308|    }
  ------------------
 1617|    308|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.min_amount_a,
 1618|    308|        NULL,
 1619|    308|        fdata->envelope->network,
 1620|    308|        fdata->value,
 1621|    308|        fdata->value_len))
 1622|    308|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_min_amount_b))
  ------------------
  |  |   30|    308|    {                           \
  |  |   31|    308|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 308]
  |  |  ------------------
  |  |   32|    308|    }
  ------------------
 1623|    308|    return true;
 1624|    308|}
formatter.c:format_liquidity_pool_withdraw_min_amount_b:
 1603|    308|static bool format_liquidity_pool_withdraw_min_amount_b(formatter_data_t *fdata) {
 1604|    308|    STRLCPY(fdata->caption, "Min Amount B", fdata->caption_len);
  ------------------
  |  |   35|    308|    {                                         \
  |  |   36|    308|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    308|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 308]
  |  |  ------------------
  |  |   38|    308|    }
  ------------------
 1605|    308|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    308|    {                           \
  |  |   31|    308|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 308]
  |  |  ------------------
  |  |   32|    308|    }
  ------------------
 1606|    308|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.min_amount_b,
 1607|    308|        NULL,
 1608|    308|        fdata->envelope->network,
 1609|    308|        fdata->value,
 1610|    308|        fdata->value_len))
 1611|    308|    return format_operation_source_prepare(fdata);
 1612|    308|}
formatter.c:format_invoke_host_function:
 2170|  1.11k|static bool format_invoke_host_function(formatter_data_t *fdata) {
 2171|       |    // avoid the host function op be overwritten by the sub-invocation
 2172|  1.11k|    if (fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocations_count) {
  ------------------
  |  Branch (2172:9): [True: 149, False: 968]
  ------------------
 2173|    149|        if (!parse_transaction_operation(fdata->raw_data,
  ------------------
  |  Branch (2173:13): [True: 0, False: 149]
  ------------------
 2174|    149|                                         fdata->raw_data_len,
 2175|    149|                                         fdata->envelope,
 2176|    149|                                         fdata->envelope->tx_details.tx.operation_index)) {
 2177|      0|            return false;
 2178|    149|        };
 2179|    149|    }
 2180|  1.11k|    switch (fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.host_function_type) {
 2181|    758|        case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:
  ------------------
  |  Branch (2181:9): [True: 758, False: 359]
  ------------------
 2182|    758|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    758|    {                                         \
  |  |   36|    758|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    758|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 758]
  |  |  ------------------
  |  |   38|    758|    }
  ------------------
 2183|    758|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|    758|    {                                         \
  |  |   36|    758|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    758|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 758]
  |  |  ------------------
  |  |   38|    758|    }
  ------------------
 2184|    758|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_contract_id));
  ------------------
  |  |   30|    758|    {                           \
  |  |   31|    758|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 758]
  |  |  ------------------
  |  |   32|    758|    }
  ------------------
 2185|    758|            break;
 2186|    213|        case HOST_FUNCTION_TYPE_CREATE_CONTRACT:
  ------------------
  |  Branch (2186:9): [True: 213, False: 904]
  ------------------
 2187|    213|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    213|    {                                         \
  |  |   36|    213|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    213|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 213]
  |  |  ------------------
  |  |   38|    213|    }
  ------------------
 2188|    213|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|    213|    {                                         \
  |  |   36|    213|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    213|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 213]
  |  |  ------------------
  |  |   38|    213|    }
  ------------------
 2189|       |            // we dont need to care the sub-invocation here
 2190|    213|            return format_operation_source_prepare(fdata);
 2191|      0|            break;
 2192|    146|        case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM:
  ------------------
  |  Branch (2192:9): [True: 146, False: 971]
  ------------------
 2193|    146|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    146|    {                                         \
  |  |   36|    146|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    146|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 146]
  |  |  ------------------
  |  |   38|    146|    }
  ------------------
 2194|    146|            STRLCPY(fdata->value, "Upload Smart Contract Wasm", fdata->value_len);
  ------------------
  |  |   35|    146|    {                                         \
  |  |   36|    146|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    146|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 146]
  |  |  ------------------
  |  |   38|    146|    }
  ------------------
 2195|    146|            return format_operation_source_prepare(fdata);
 2196|      0|            break;
 2197|      0|        default:
  ------------------
  |  Branch (2197:9): [True: 0, False: 1.11k]
  ------------------
 2198|      0|            return false;
 2199|  1.11k|    }
 2200|    758|    return true;
 2201|  1.11k|}
formatter.c:format_extend_footprint_ttl:
 2222|    182|static bool format_extend_footprint_ttl(formatter_data_t *fdata) {
 2223|    182|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    182|    {                                         \
  |  |   36|    182|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    182|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 182]
  |  |  ------------------
  |  |   38|    182|    }
  ------------------
 2224|    182|    STRLCPY(fdata->value, "Extend Footprint TTL", fdata->value_len);
  ------------------
  |  |   35|    182|    {                                         \
  |  |   36|    182|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    182|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 182]
  |  |  ------------------
  |  |   38|    182|    }
  ------------------
 2225|    182|    return format_operation_source_prepare(fdata);
 2226|    182|}
formatter.c:format_restore_footprint:
 2228|    383|static bool format_restore_footprint(formatter_data_t *fdata) {
 2229|    383|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    383|    {                                         \
  |  |   36|    383|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    383|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 383]
  |  |  ------------------
  |  |   38|    383|    }
  ------------------
 2230|    383|    STRLCPY(fdata->value, "Restore Footprint", fdata->value_len);
  ------------------
  |  |   35|    383|    {                                         \
  |  |   36|    383|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    383|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 383]
  |  |  ------------------
  |  |   38|    383|    }
  ------------------
 2231|    383|    return format_operation_source_prepare(fdata);
 2232|    383|}

parse_bool:
   48|  3.04M|bool parse_bool(buffer_t *buffer, bool *b) {
   49|  3.04M|    uint32_t val;
   50|       |
   51|  3.04M|    if (!parse_uint32(buffer, &val)) {
  ------------------
  |  Branch (51:9): [True: 326, False: 3.04M]
  ------------------
   52|    326|        return false;
   53|    326|    }
   54|  3.04M|    if (val != 0 && val != 1) {
  ------------------
  |  Branch (54:9): [True: 2.61M, False: 431k]
  |  Branch (54:21): [True: 2.18k, False: 2.61M]
  ------------------
   55|  2.18k|        return false;
   56|  2.18k|    }
   57|  3.04M|    *b = val == 1 ? true : false;
  ------------------
  |  Branch (57:10): [True: 2.61M, False: 431k]
  ------------------
   58|  3.04M|    return true;
   59|  3.04M|}
parse_uint64:
   61|  27.0k|bool parse_uint64(buffer_t *buffer, uint64_t *n) {
   62|  27.0k|    return buffer_read_u64(buffer, n, BE);
   63|  27.0k|}
parse_int64:
   65|   251k|bool parse_int64(buffer_t *buffer, int64_t *n) {
   66|   251k|    if (!buffer_can_read(buffer, 8)) {
  ------------------
  |  Branch (66:9): [True: 146, False: 251k]
  ------------------
   67|    146|        *n = 0;
   68|    146|        return false;
   69|    146|    }
   70|   251k|    *n = read_i64_be(buffer->ptr, buffer->offset);
   71|   251k|    return buffer_seek_cur(buffer, 8);
   72|   251k|}
parse_uint32:
   74|  41.4M|bool parse_uint32(buffer_t *buffer, uint32_t *n) {
   75|  41.4M|    return buffer_read_u32(buffer, n, BE);
   76|  41.4M|}
parse_int32:
   78|  13.6k|bool parse_int32(buffer_t *buffer, int32_t *n) {
   79|  13.6k|    if (!buffer_can_read(buffer, 4)) {
  ------------------
  |  Branch (79:9): [True: 39, False: 13.6k]
  ------------------
   80|     39|        *n = 0;
   81|     39|        return false;
   82|     39|    }
   83|  13.6k|    *n = read_i32_be(buffer->ptr, buffer->offset);
   84|  13.6k|    return buffer_seek_cur(buffer, 4);
   85|  13.6k|}
parse_scv_symbol:
  152|    318|bool parse_scv_symbol(buffer_t *buffer, scv_symbol_t *symbol) {
  153|    318|    PARSER_CHECK(
  ------------------
  |  |   15|    318|    {                           \
  |  |   16|    318|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 308]
  |  |  ------------------
  |  |   17|    318|    }
  ------------------
  154|    318|        parse_binary_string_ptr(buffer, &symbol->symbol, &symbol->size, SCV_SYMBOL_MAX_SIZE))
  155|    308|    return true;
  156|    318|}
parse_scv_string:
  158|    719|bool parse_scv_string(buffer_t *buffer, scv_string_t *string) {
  159|    719|    PARSER_CHECK(parse_binary_string_ptr(buffer, &string->string, &string->size, 0))
  ------------------
  |  |   15|    719|    {                           \
  |  |   16|    719|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 715]
  |  |  ------------------
  |  |   17|    719|    }
  ------------------
  160|    715|    return true;
  161|    719|}
parse_sc_address:
  684|  61.6k|bool parse_sc_address(buffer_t *buffer, sc_address_t *sc_address) {
  685|  61.6k|    PARSER_CHECK(parse_uint32(buffer, &sc_address->type))
  ------------------
  |  |   15|  61.6k|    {                           \
  |  |   16|  61.6k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 65, False: 61.5k]
  |  |  ------------------
  |  |   17|  61.6k|    }
  ------------------
  686|  61.5k|    switch (sc_address->type) {
  687|  49.3k|        case SC_ADDRESS_TYPE_ACCOUNT:
  ------------------
  |  Branch (687:9): [True: 49.3k, False: 12.1k]
  ------------------
  688|  49.3k|            PARSER_CHECK(parse_account_id(buffer, &sc_address->address))
  ------------------
  |  |   15|  49.3k|    {                           \
  |  |   16|  49.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.19k, False: 48.1k]
  |  |  ------------------
  |  |   17|  49.3k|    }
  ------------------
  689|  48.1k|            return true;
  690|  11.6k|        case SC_ADDRESS_TYPE_CONTRACT:
  ------------------
  |  Branch (690:9): [True: 11.6k, False: 49.9k]
  ------------------
  691|  11.6k|            PARSER_CHECK(buffer_read_bytes(buffer, &sc_address->address, RAW_CONTRACT_KEY_SIZE))
  ------------------
  |  |   15|  11.6k|    {                           \
  |  |   16|  11.6k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 52, False: 11.5k]
  |  |  ------------------
  |  |   17|  11.6k|    }
  ------------------
  692|  11.5k|            return true;
  693|    571|        default:
  ------------------
  |  Branch (693:9): [True: 571, False: 60.9k]
  ------------------
  694|    571|            return false;
  695|  61.5k|    }
  696|  61.5k|}
read_scval_advance:
  733|  34.6M|bool read_scval_advance(buffer_t *buffer) {
  734|  34.6M|    uint32_t sc_type;
  735|  34.6M|    PARSER_CHECK(parse_uint32(buffer, &sc_type))
  ------------------
  |  |   15|  34.6M|    {                           \
  |  |   16|  34.6M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 677, False: 34.6M]
  |  |  ------------------
  |  |   17|  34.6M|    }
  ------------------
  736|       |
  737|  34.6M|    switch (sc_type) {
  738|  28.7M|        case SCV_BOOL:
  ------------------
  |  Branch (738:9): [True: 28.7M, False: 5.96M]
  ------------------
  739|  28.7M|            PARSER_CHECK(buffer_advance(buffer, 4))
  ------------------
  |  |   15|  28.7M|    {                           \
  |  |   16|  28.7M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 106, False: 28.7M]
  |  |  ------------------
  |  |   17|  28.7M|    }
  ------------------
  740|  28.7M|            break;
  741|  28.7M|        case SCV_VOID:
  ------------------
  |  Branch (741:9): [True: 6.60k, False: 34.6M]
  ------------------
  742|  6.60k|            break;  // void
  743|    164|        case SCV_ERROR:
  ------------------
  |  Branch (743:9): [True: 164, False: 34.6M]
  ------------------
  744|    164|            return false;  // not implemented
  745|   455k|        case SCV_U32:
  ------------------
  |  Branch (745:9): [True: 455k, False: 34.2M]
  ------------------
  746|   462k|        case SCV_I32:
  ------------------
  |  Branch (746:9): [True: 6.76k, False: 34.6M]
  ------------------
  747|   462k|            PARSER_CHECK(buffer_advance(buffer, 4))
  ------------------
  |  |   15|   462k|    {                           \
  |  |   16|   462k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 21, False: 462k]
  |  |  ------------------
  |  |   17|   462k|    }
  ------------------
  748|   462k|            break;
  749|   462k|        case SCV_U64:
  ------------------
  |  Branch (749:9): [True: 1.28k, False: 34.6M]
  ------------------
  750|  2.59k|        case SCV_I64:
  ------------------
  |  Branch (750:9): [True: 1.31k, False: 34.6M]
  ------------------
  751|  2.19M|        case SCV_TIMEPOINT:
  ------------------
  |  Branch (751:9): [True: 2.19M, False: 32.4M]
  ------------------
  752|  2.19M|        case SCV_DURATION:
  ------------------
  |  Branch (752:9): [True: 1.97k, False: 34.6M]
  ------------------
  753|  2.19M|            PARSER_CHECK(buffer_advance(buffer, 8))
  ------------------
  |  |   15|  2.19M|    {                           \
  |  |   16|  2.19M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 38, False: 2.19M]
  |  |  ------------------
  |  |   17|  2.19M|    }
  ------------------
  754|  2.19M|            break;
  755|  2.19M|        case SCV_U128:
  ------------------
  |  Branch (755:9): [True: 658k, False: 34.0M]
  ------------------
  756|   667k|        case SCV_I128:
  ------------------
  |  Branch (756:9): [True: 9.06k, False: 34.6M]
  ------------------
  757|   667k|            PARSER_CHECK(buffer_advance(buffer, 16))
  ------------------
  |  |   15|   667k|    {                           \
  |  |   16|   667k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 47, False: 667k]
  |  |  ------------------
  |  |   17|   667k|    }
  ------------------
  758|   667k|            break;
  759|   667k|        case SCV_U256:
  ------------------
  |  Branch (759:9): [True: 1.38k, False: 34.6M]
  ------------------
  760|  3.89k|        case SCV_I256:
  ------------------
  |  Branch (760:9): [True: 2.51k, False: 34.6M]
  ------------------
  761|  3.89k|            PARSER_CHECK(buffer_advance(buffer, 32))
  ------------------
  |  |   15|  3.89k|    {                           \
  |  |   16|  3.89k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 67, False: 3.82k]
  |  |  ------------------
  |  |   17|  3.89k|    }
  ------------------
  762|  3.82k|            break;
  763|  3.82k|        case SCV_BYTES:
  ------------------
  |  Branch (763:9): [True: 1.83k, False: 34.6M]
  ------------------
  764|  5.67k|        case SCV_STRING:
  ------------------
  |  Branch (764:9): [True: 3.83k, False: 34.6M]
  ------------------
  765|  7.53k|        case SCV_SYMBOL: {
  ------------------
  |  Branch (765:9): [True: 1.86k, False: 34.6M]
  ------------------
  766|  7.53k|            size_t data_size = 0;
  767|  7.53k|            PARSER_CHECK(parse_uint32(buffer, &data_size))
  ------------------
  |  |   15|  7.53k|    {                           \
  |  |   16|  7.53k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 17, False: 7.51k]
  |  |  ------------------
  |  |   17|  7.53k|    }
  ------------------
  768|  7.51k|            PARSER_CHECK(num_bytes(data_size, &data_size))
  ------------------
  |  |   15|  7.51k|    {                           \
  |  |   16|  7.51k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 7.51k]
  |  |  ------------------
  |  |   17|  7.51k|    }
  ------------------
  769|  7.51k|            PARSER_CHECK(buffer_advance(buffer, data_size))
  ------------------
  |  |   15|  7.51k|    {                           \
  |  |   16|  7.51k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 161, False: 7.35k]
  |  |  ------------------
  |  |   17|  7.51k|    }
  ------------------
  770|  7.35k|            break;
  771|  7.51k|        }
  772|  7.35k|        case SCV_VEC: {
  ------------------
  |  Branch (772:9): [True: 4.92k, False: 34.6M]
  ------------------
  773|  4.92k|            bool vec_exists;
  774|  4.92k|            PARSER_CHECK(parse_bool(buffer, &vec_exists))
  ------------------
  |  |   15|  4.92k|    {                           \
  |  |   16|  4.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 285, False: 4.63k]
  |  |  ------------------
  |  |   17|  4.92k|    }
  ------------------
  775|  4.63k|            if (vec_exists) {
  ------------------
  |  Branch (775:17): [True: 4.14k, False: 491]
  ------------------
  776|  4.14k|                PARSER_CHECK(read_scval_vec_advance(buffer));
  ------------------
  |  |   15|  4.14k|    {                           \
  |  |   16|  4.14k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3.75k, False: 397]
  |  |  ------------------
  |  |   17|  4.14k|    }
  ------------------
  777|    397|            }
  778|    888|            break;
  779|  4.63k|        }
  780|  2.58M|        case SCV_MAP: {
  ------------------
  |  Branch (780:9): [True: 2.58M, False: 32.0M]
  ------------------
  781|  2.58M|            bool map_exists;
  782|  2.58M|            PARSER_CHECK(parse_bool(buffer, &map_exists))
  ------------------
  |  |   15|  2.58M|    {                           \
  |  |   16|  2.58M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 383, False: 2.58M]
  |  |  ------------------
  |  |   17|  2.58M|    }
  ------------------
  783|  2.58M|            if (map_exists) {
  ------------------
  |  Branch (783:17): [True: 2.58M, False: 1.15k]
  ------------------
  784|  2.58M|                PARSER_CHECK(read_scval_map_advance(buffer));
  ------------------
  |  |   15|  2.58M|    {                           \
  |  |   16|  2.58M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.54M, False: 47.3k]
  |  |  ------------------
  |  |   17|  2.58M|    }
  ------------------
  785|  47.3k|            }
  786|  48.4k|            break;
  787|  2.58M|        }
  788|  48.4k|        case SCV_ADDRESS: {
  ------------------
  |  Branch (788:9): [True: 6.36k, False: 34.6M]
  ------------------
  789|  6.36k|            sc_address_t sc_address;
  790|  6.36k|            PARSER_CHECK(parse_sc_address(buffer, &sc_address));
  ------------------
  |  |   15|  6.36k|    {                           \
  |  |   16|  6.36k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 369, False: 5.99k]
  |  |  ------------------
  |  |   17|  6.36k|    }
  ------------------
  791|  5.99k|            break;
  792|  6.36k|        }
  793|  4.10k|        case SCV_CONTRACT_INSTANCE: {
  ------------------
  |  Branch (793:9): [True: 4.10k, False: 34.6M]
  ------------------
  794|  4.10k|            PARSER_CHECK(read_contract_executable_advance(buffer))
  ------------------
  |  |   15|  4.10k|    {                           \
  |  |   16|  4.10k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 211, False: 3.89k]
  |  |  ------------------
  |  |   17|  4.10k|    }
  ------------------
  795|  3.89k|            bool map_exists;
  796|  3.89k|            PARSER_CHECK(parse_bool(buffer, &map_exists))
  ------------------
  |  |   15|  3.89k|    {                           \
  |  |   16|  3.89k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 349, False: 3.54k]
  |  |  ------------------
  |  |   17|  3.89k|    }
  ------------------
  797|  3.54k|            if (map_exists) {
  ------------------
  |  Branch (797:17): [True: 2.96k, False: 579]
  ------------------
  798|  2.96k|                PARSER_CHECK(read_scval_map_advance(buffer));
  ------------------
  |  |   15|  2.96k|    {                           \
  |  |   16|  2.96k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 678, False: 2.28k]
  |  |  ------------------
  |  |   17|  2.96k|    }
  ------------------
  799|  2.28k|            }
  800|  2.86k|            break;
  801|  3.54k|        }
  802|  2.86k|        case SCV_LEDGER_KEY_CONTRACT_INSTANCE:
  ------------------
  |  Branch (802:9): [True: 1.04k, False: 34.6M]
  ------------------
  803|  1.04k|            break;  // void
  804|  1.12k|        case SCV_LEDGER_KEY_NONCE:
  ------------------
  |  Branch (804:9): [True: 1.12k, False: 34.6M]
  ------------------
  805|  1.12k|            PARSER_CHECK(buffer_advance(buffer, 8))
  ------------------
  |  |   15|  1.12k|    {                           \
  |  |   16|  1.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 1.11k]
  |  |  ------------------
  |  |   17|  1.12k|    }
  ------------------
  806|  1.11k|            break;
  807|  6.15k|        default:
  ------------------
  |  Branch (807:9): [True: 6.15k, False: 34.6M]
  ------------------
  808|  6.15k|            return false;
  809|  34.6M|    }
  810|  32.1M|    return true;
  811|  34.6M|}
parse_transaction_envelope:
 1307|  22.0k|bool parse_transaction_envelope(const uint8_t *data, size_t data_len, envelope_t *envelope) {
 1308|  22.0k|    PRINTF("parse_transaction_envelope\n");
 1309|  22.0k|    buffer_t buffer = {
 1310|  22.0k|        .ptr = data,
 1311|  22.0k|        .size = data_len,
 1312|  22.0k|        .offset = 0,
 1313|  22.0k|    };
 1314|       |
 1315|  22.0k|    explicit_bzero(&envelope->tx_details, sizeof(tx_details_t));
 1316|  22.0k|    uint32_t envelope_type;
 1317|  22.0k|    PARSER_CHECK(parse_network(&buffer, &envelope->network))
  ------------------
  |  |   15|  22.0k|    {                           \
  |  |   16|  22.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 22.0k]
  |  |  ------------------
  |  |   17|  22.0k|    }
  ------------------
 1318|  22.0k|    PARSER_CHECK(parse_uint32(&buffer, &envelope_type))
  ------------------
  |  |   15|  22.0k|    {                           \
  |  |   16|  22.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 22.0k]
  |  |  ------------------
  |  |   17|  22.0k|    }
  ------------------
 1319|  22.0k|    envelope->type = envelope_type;
 1320|  22.0k|    switch (envelope_type) {
 1321|  9.40k|        case ENVELOPE_TYPE_TX:
  ------------------
  |  Branch (1321:9): [True: 9.40k, False: 12.6k]
  ------------------
 1322|  9.40k|            PARSER_CHECK(parse_transaction_details(&buffer, &envelope->tx_details.tx))
  ------------------
  |  |   15|  9.40k|    {                           \
  |  |   16|  9.40k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 593, False: 8.81k]
  |  |  ------------------
  |  |   17|  9.40k|    }
  ------------------
 1323|  8.81k|            break;
 1324|  8.81k|        case ENVELOPE_TYPE_TX_FEE_BUMP:
  ------------------
  |  Branch (1324:9): [True: 125, False: 21.9k]
  ------------------
 1325|    125|            PARSER_CHECK(
  ------------------
  |  |   15|    125|    {                           \
  |  |   16|    125|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 105]
  |  |  ------------------
  |  |   17|    125|    }
  ------------------
 1326|    125|                parse_fee_bump_transaction_details(&buffer, &envelope->tx_details.fee_bump_tx))
 1327|    105|            uint32_t inner_envelope_type;
 1328|    105|            PARSER_CHECK(parse_uint32(&buffer, &inner_envelope_type))
  ------------------
  |  |   15|    105|    {                           \
  |  |   16|    105|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 102]
  |  |  ------------------
  |  |   17|    105|    }
  ------------------
 1329|    102|            if (inner_envelope_type != ENVELOPE_TYPE_TX) {
  ------------------
  |  Branch (1329:17): [True: 3, False: 99]
  ------------------
 1330|      3|                return false;
 1331|      3|            }
 1332|     99|            PARSER_CHECK(parse_transaction_details(&buffer, &envelope->tx_details.tx))
  ------------------
  |  |   15|     99|    {                           \
  |  |   16|     99|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 91]
  |  |  ------------------
  |  |   17|     99|    }
  ------------------
 1333|     91|            break;
 1334|  12.5k|        default:
  ------------------
  |  Branch (1334:9): [True: 12.5k, False: 9.52k]
  ------------------
 1335|  12.5k|            return false;
 1336|  22.0k|    }
 1337|       |
 1338|  8.90k|    envelope->tx_details.tx.operation_position = buffer.offset;
 1339|       |
 1340|       |    // check all operations are valid
 1341|  8.90k|    PARSER_CHECK(check_operations(&buffer, envelope->tx_details.tx.operations_count));
  ------------------
  |  |   15|  8.90k|    {                           \
  |  |   16|  8.90k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.45k, False: 6.44k]
  |  |  ------------------
  |  |   17|  8.90k|    }
  ------------------
 1342|  6.44k|    return true;
 1343|  8.90k|}
parse_transaction_operation:
 1348|  40.8k|                                 uint8_t operation_index) {
 1349|  40.8k|    buffer_t buffer = {
 1350|  40.8k|        .ptr = data,
 1351|  40.8k|        .size = data_len,
 1352|  40.8k|        .offset = envelope->tx_details.tx.operation_position,
 1353|  40.8k|    };
 1354|   302k|    for (uint8_t i = 0; i <= operation_index; i++) {
  ------------------
  |  Branch (1354:25): [True: 261k, False: 40.8k]
  ------------------
 1355|   261k|        PARSER_CHECK(parse_operation(&buffer, &envelope->tx_details.tx.op_details));
  ------------------
  |  |   15|   261k|    {                           \
  |  |   16|   261k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 261k]
  |  |  ------------------
  |  |   17|   261k|    }
  ------------------
 1356|   261k|    }
 1357|  40.8k|    envelope->tx_details.tx.operation_index = operation_index;
 1358|  40.8k|    return true;
 1359|  40.8k|}
parse_auth_function:
 1361|  29.7k|bool parse_auth_function(buffer_t *buffer, uint32_t *type, invoke_contract_args_t *args) {
 1362|       |    // function
 1363|  29.7k|    PARSER_CHECK(parse_uint32(buffer, type))
  ------------------
  |  |   15|  29.7k|    {                           \
  |  |   16|  29.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 29.7k]
  |  |  ------------------
  |  |   17|  29.7k|    }
  ------------------
 1364|  29.7k|    switch (*type) {
 1365|  27.9k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN: {
  ------------------
  |  Branch (1365:9): [True: 27.9k, False: 1.82k]
  ------------------
 1366|       |            // contractFn
 1367|  27.9k|            PARSER_CHECK(parse_invoke_contract_args(buffer, args))
  ------------------
  |  |   15|  27.9k|    {                           \
  |  |   16|  27.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12.2k, False: 15.7k]
  |  |  ------------------
  |  |   17|  27.9k|    }
  ------------------
 1368|  15.7k|            break;
 1369|  27.9k|        }
 1370|  15.7k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1370:9): [True: 520, False: 29.2k]
  ------------------
 1371|       |            // createContractHostFn
 1372|    520|            PARSER_CHECK(read_create_contract_args_advance(buffer))
  ------------------
  |  |   15|    520|    {                           \
  |  |   16|    520|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 47, False: 473]
  |  |  ------------------
  |  |   17|    520|    }
  ------------------
 1373|    473|            break;
 1374|  1.30k|        default:
  ------------------
  |  Branch (1374:9): [True: 1.30k, False: 28.4k]
  ------------------
 1375|  1.30k|            return false;
 1376|  29.7k|    }
 1377|  16.1k|    return true;
 1378|  29.7k|}
parse_soroban_authorization_envelope:
 1382|  26.2k|                                          envelope_t *envelope) {
 1383|  26.2k|    PRINTF("parse_soroban_authorization_envelope\n");
 1384|  26.2k|    buffer_t buffer = {
 1385|  26.2k|        .ptr = data,
 1386|  26.2k|        .size = data_len,
 1387|  26.2k|        .offset = 0,
 1388|  26.2k|    };
 1389|       |
 1390|  26.2k|    explicit_bzero(&envelope->soroban_authorization, sizeof(soroban_authorization_t));
 1391|       |
 1392|  26.2k|    uint32_t envelope_type;
 1393|  26.2k|    PARSER_CHECK(parse_uint32(&buffer, &envelope_type))
  ------------------
  |  |   15|  26.2k|    {                           \
  |  |   16|  26.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 26.2k]
  |  |  ------------------
  |  |   17|  26.2k|    }
  ------------------
 1394|  26.2k|    if (envelope_type != ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1394:9): [True: 3.30k, False: 22.9k]
  ------------------
 1395|  3.30k|        return false;
 1396|  3.30k|    }
 1397|  22.9k|    envelope->type = envelope_type;
 1398|       |
 1399|  22.9k|    PARSER_CHECK(parse_network(&buffer, &envelope->network))
  ------------------
  |  |   15|  22.9k|    {                           \
  |  |   16|  22.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 22.9k]
  |  |  ------------------
  |  |   17|  22.9k|    }
  ------------------
 1400|  22.9k|    PARSER_CHECK(parse_uint64(&buffer, &envelope->soroban_authorization.nonce))
  ------------------
  |  |   15|  22.9k|    {                           \
  |  |   16|  22.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 22.9k]
  |  |  ------------------
  |  |   17|  22.9k|    }
  ------------------
 1401|  22.9k|    PARSER_CHECK(
  ------------------
  |  |   15|  22.9k|    {                           \
  |  |   16|  22.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 22.9k]
  |  |  ------------------
  |  |   17|  22.9k|    }
  ------------------
 1402|  22.9k|        parse_uint32(&buffer, &envelope->soroban_authorization.signature_expiration_ledger))
 1403|       |
 1404|       |    // function
 1405|  22.9k|    PARSER_CHECK(parse_auth_function(&buffer,
  ------------------
  |  |   15|  22.9k|    {                           \
  |  |   16|  22.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13.6k, False: 9.34k]
  |  |  ------------------
  |  |   17|  22.9k|    }
  ------------------
 1406|  22.9k|                                     &envelope->soroban_authorization.auth_function_type,
 1407|  22.9k|                                     &envelope->soroban_authorization.invoke_contract_args))
 1408|       |    // subInvocations
 1409|  9.34k|    uint32_t len;
 1410|  9.34k|    uint8_t sub_invocations_count = 0;
 1411|  9.34k|    PARSER_CHECK(parse_uint32(&buffer, &len))
  ------------------
  |  |   15|  9.34k|    {                           \
  |  |   16|  9.34k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 51, False: 9.28k]
  |  |  ------------------
  |  |   17|  9.34k|    }
  ------------------
 1412|  16.3k|    for (uint32_t i = 0; i < len; i++) {
  ------------------
  |  Branch (1412:26): [True: 8.03k, False: 8.36k]
  ------------------
 1413|  8.03k|        PARSER_CHECK(read_soroban_authorized_invocation_advance(
  ------------------
  |  |   15|  8.03k|    {                           \
  |  |   16|  8.03k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 929, False: 7.10k]
  |  |  ------------------
  |  |   17|  8.03k|    }
  ------------------
 1414|  8.03k|            &buffer,
 1415|  8.03k|            &sub_invocations_count,
 1416|  8.03k|            envelope->soroban_authorization.sub_invocation_positions));
 1417|  7.10k|    }
 1418|  8.36k|    envelope->soroban_authorization.sub_invocations_count = sub_invocations_count;
 1419|  8.36k|    PRINTF("sub_invocations_count=%d\n", sub_invocations_count);
 1420|       |    // for (uint8_t i = 0; i < 16; i++) {
 1421|       |    //     PRINTF("sub_invocation_positions[%d]=%d\n",
 1422|       |    //            i,
 1423|       |    //            envelope->soroban_authorization.sub_invocation_positions[i]);
 1424|       |    // }
 1425|  8.36k|    return true;
 1426|  9.28k|}
parser.c:read_i64_be:
   32|   251k|static int64_t read_i64_be(const uint8_t *ptr, size_t offset) {
   33|   251k|    uint64_t result = 0;
   34|  2.26M|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (34:21): [True: 2.01M, False: 251k]
  ------------------
   35|  2.01M|        result = (result << 8) | ptr[offset + i];
   36|  2.01M|    }
   37|   251k|    return (int64_t) result;
   38|   251k|}
parser.c:read_i32_be:
   40|  13.6k|static int32_t read_i32_be(const uint8_t *ptr, size_t offset) {
   41|  13.6k|    uint32_t result = 0;
   42|  68.2k|    for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (42:21): [True: 54.5k, False: 13.6k]
  ------------------
   43|  54.5k|        result = (result << 8) | ptr[offset + i];
   44|  54.5k|    }
   45|  13.6k|    return (int32_t) result;
   46|  13.6k|}
parser.c:parse_binary_string_ptr:
  114|  60.9k|                                    size_t max_length) {
  115|       |    /* max_length does not include terminal null character */
  116|  60.9k|    uint32_t size;
  117|       |
  118|  60.9k|    PARSER_CHECK(parse_uint32(buffer, &size))
  ------------------
  |  |   15|  60.9k|    {                           \
  |  |   16|  60.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 46, False: 60.9k]
  |  |  ------------------
  |  |   17|  60.9k|    }
  ------------------
  119|  60.9k|    if (max_length != 0 && size > max_length) {
  ------------------
  |  Branch (119:9): [True: 60.2k, False: 719]
  |  Branch (119:28): [True: 73, False: 60.1k]
  ------------------
  120|     73|        return false;
  121|     73|    }
  122|       |
  123|  60.8k|    size_t data_size = 0;
  124|  60.8k|    PARSER_CHECK(num_bytes(size, &data_size))
  ------------------
  |  |   15|  60.8k|    {                           \
  |  |   16|  60.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 60.8k]
  |  |  ------------------
  |  |   17|  60.8k|    }
  ------------------
  125|  60.8k|    PARSER_CHECK(buffer_read_bytes(buffer, string, data_size))
  ------------------
  |  |   15|  60.8k|    {                           \
  |  |   16|  60.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 78, False: 60.7k]
  |  |  ------------------
  |  |   17|  60.8k|    }
  ------------------
  126|       |    PARSER_CHECK(check_padding(*string, size, data_size))  // security check
  ------------------
  |  |   15|  60.7k|    {                           \
  |  |   16|  60.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.60k, False: 59.1k]
  |  |  ------------------
  |  |   17|  60.7k|    }
  ------------------
  127|  59.1k|    if (out_len) {
  ------------------
  |  Branch (127:9): [True: 59.1k, False: 0]
  ------------------
  128|  59.1k|        *out_len = size;
  129|  59.1k|    }
  130|  59.1k|    return true;
  131|  60.7k|}
parser.c:check_padding:
  101|  60.7k|static bool check_padding(const uint8_t *buffer, size_t offset, size_t length) {
  102|  60.7k|    size_t i;
  103|  79.8k|    for (i = 0; i < length - offset; i++) {
  ------------------
  |  Branch (103:17): [True: 20.6k, False: 59.1k]
  ------------------
  104|  20.6k|        if (buffer[offset + i] != 0x00) {
  ------------------
  |  Branch (104:13): [True: 1.60k, False: 19.0k]
  ------------------
  105|  1.60k|            return false;
  106|  1.60k|        }
  107|  20.6k|    }
  108|  59.1k|    return true;
  109|  60.7k|}
parser.c:parse_account_id:
  194|   297k|static bool parse_account_id(buffer_t *buffer, const uint8_t **account_id) {
  195|   297k|    uint32_t account_type;
  196|       |
  197|   297k|    PARSER_CHECK(parse_uint32(buffer, &account_type))
  ------------------
  |  |   15|   297k|    {                           \
  |  |   16|   297k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 124, False: 297k]
  |  |  ------------------
  |  |   17|   297k|    }
  ------------------
  198|   297k|    if (account_type != PUBLIC_KEY_TYPE_ED25519) {
  ------------------
  |  |   50|   297k|#define PUBLIC_KEY_TYPE_ED25519 0
  ------------------
  |  Branch (198:9): [True: 1.16k, False: 296k]
  ------------------
  199|  1.16k|        return false;
  200|  1.16k|    }
  201|   296k|    PARSER_CHECK(buffer_read_bytes(buffer, account_id, RAW_ED25519_PUBLIC_KEY_SIZE))
  ------------------
  |  |   15|   296k|    {                           \
  |  |   16|   296k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 149, False: 295k]
  |  |  ------------------
  |  |   17|   296k|    }
  ------------------
  202|   295k|    return true;
  203|   296k|}
parser.c:buffer_read_bytes:
   25|   466k|static bool buffer_read_bytes(buffer_t *buffer, const uint8_t **data, size_t size) {
   26|   466k|    PARSER_CHECK(buffer_can_read(buffer, size))
  ------------------
  |  |   15|   466k|    {                           \
  |  |   16|   466k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 484, False: 465k]
  |  |  ------------------
  |  |   17|   466k|    }
  ------------------
   27|   465k|    *data = buffer->ptr + buffer->offset;
   28|   465k|    PARSER_CHECK(buffer_advance(buffer, size))
  ------------------
  |  |   15|   465k|    {                           \
  |  |   16|   465k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 465k]
  |  |  ------------------
  |  |   17|   465k|    }
  ------------------
   29|   465k|    return true;
   30|   465k|}
parser.c:buffer_advance:
   21|  32.5M|static bool buffer_advance(buffer_t *buffer, size_t num_bytes) {
   22|  32.5M|    return buffer_seek_cur(buffer, num_bytes);
   23|  32.5M|}
parser.c:num_bytes:
   87|  71.4k|static bool num_bytes(size_t size, size_t *out_size) {
   88|  71.4k|    size_t remainder = size % 4;
   89|  71.4k|    if (remainder == 0) {
  ------------------
  |  Branch (89:9): [True: 58.3k, False: 13.0k]
  ------------------
   90|  58.3k|        *out_size = size;
   91|  58.3k|        return true;
   92|  58.3k|    }
   93|  13.0k|    if (size > SIZE_MAX - 4) {
  ------------------
  |  Branch (93:9): [True: 0, False: 13.0k]
  ------------------
   94|       |        // size + 4 would overflow
   95|      0|        return false;
   96|      0|    }
   97|  13.0k|    *out_size = size + 4 - remainder;
   98|  13.0k|    return true;
   99|  13.0k|}
parser.c:read_scval_vec_advance:
  698|  4.14k|static bool read_scval_vec_advance(buffer_t *buffer) {
  699|  4.14k|    uint32_t vec_len;
  700|  4.14k|    PARSER_CHECK(parse_uint32(buffer, &vec_len))
  ------------------
  |  |   15|  4.14k|    {                           \
  |  |   16|  4.14k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 4.14k]
  |  |  ------------------
  |  |   17|  4.14k|    }
  ------------------
  701|  24.5k|    for (uint32_t i = 0; i < vec_len; i++) {
  ------------------
  |  Branch (701:26): [True: 24.1k, False: 397]
  ------------------
  702|  24.1k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  24.1k|    {                           \
  |  |   16|  24.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3.74k, False: 20.3k]
  |  |  ------------------
  |  |   17|  24.1k|    }
  ------------------
  703|  24.1k|    }
  704|    397|    return true;
  705|  4.14k|}
parser.c:read_scval_map_advance:
  707|  2.59M|static bool read_scval_map_advance(buffer_t *buffer) {
  708|  2.59M|    uint32_t map_len;
  709|  2.59M|    PARSER_CHECK(parse_uint32(buffer, &map_len))
  ------------------
  |  |   15|  2.59M|    {                           \
  |  |   16|  2.59M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 44, False: 2.59M]
  |  |  ------------------
  |  |   17|  2.59M|    }
  ------------------
  710|  18.2M|    for (uint32_t i = 0; i < map_len; i++) {
  ------------------
  |  Branch (710:26): [True: 18.1M, False: 49.6k]
  ------------------
  711|  18.1M|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  18.1M|    {                           \
  |  |   16|  18.1M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.83M, False: 16.3M]
  |  |  ------------------
  |  |   17|  18.1M|    }
  ------------------
  712|  16.3M|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  16.3M|    {                           \
  |  |   16|  16.3M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 705k, False: 15.6M]
  |  |  ------------------
  |  |   17|  16.3M|    }
  ------------------
  713|  16.3M|    }
  714|  49.6k|    return true;
  715|  2.59M|}
parser.c:read_contract_executable_advance:
  717|  7.30k|static bool read_contract_executable_advance(buffer_t *buffer) {
  718|  7.30k|    uint32_t type;
  719|  7.30k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  7.30k|    {                           \
  |  |   16|  7.30k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 37, False: 7.26k]
  |  |  ------------------
  |  |   17|  7.30k|    }
  ------------------
  720|  7.26k|    switch (type) {
  721|  3.95k|        case CONTRACT_EXECUTABLE_WASM:
  ------------------
  |  |  491|  3.95k|#define CONTRACT_EXECUTABLE_WASM          0
  ------------------
  |  Branch (721:9): [True: 3.95k, False: 3.31k]
  ------------------
  722|       |            PARSER_CHECK(buffer_advance(buffer, HASH_SIZE))  // code
  ------------------
  |  |   15|  3.95k|    {                           \
  |  |   16|  3.95k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 67, False: 3.88k]
  |  |  ------------------
  |  |   17|  3.95k|    }
  ------------------
  723|  3.88k|            break;
  724|  3.88k|        case CONTRACT_EXECUTABLE_STELLAR_ASSET:
  ------------------
  |  |  492|  3.12k|#define CONTRACT_EXECUTABLE_STELLAR_ASSET 1
  ------------------
  |  Branch (724:9): [True: 3.12k, False: 4.14k]
  ------------------
  725|       |            // void
  726|  3.12k|            break;
  727|    191|        default:
  ------------------
  |  Branch (727:9): [True: 191, False: 7.07k]
  ------------------
  728|    191|            return false;
  729|  7.26k|    }
  730|  7.00k|    return true;
  731|  7.26k|}
parser.c:parse_network:
 1293|  45.0k|static bool parse_network(buffer_t *buffer, uint8_t *network) {
 1294|  45.0k|    const uint8_t *network_id;
 1295|  45.0k|    PARSER_CHECK(buffer_read_bytes(buffer, &network_id, HASH_SIZE))
  ------------------
  |  |   15|  45.0k|    {                           \
  |  |   16|  45.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 45.0k]
  |  |  ------------------
  |  |   17|  45.0k|    }
  ------------------
 1296|       |
 1297|  45.0k|    if (memcmp(network_id, NETWORK_ID_PUBLIC_HASH, HASH_SIZE) == 0) {
  ------------------
  |  |   46|  45.0k|#define HASH_SIZE                 32
  ------------------
  |  Branch (1297:9): [True: 1.09k, False: 43.9k]
  ------------------
 1298|  1.09k|        *network = NETWORK_TYPE_PUBLIC;
  ------------------
  |  |   57|  1.09k|#define NETWORK_TYPE_PUBLIC  0
  ------------------
 1299|  43.9k|    } else if (memcmp(network_id, NETWORK_ID_TEST_HASH, HASH_SIZE) == 0) {
  ------------------
  |  |   46|  43.9k|#define HASH_SIZE                 32
  ------------------
  |  Branch (1299:16): [True: 490, False: 43.4k]
  ------------------
 1300|    490|        *network = NETWORK_TYPE_TEST;
  ------------------
  |  |   58|    490|#define NETWORK_TYPE_TEST    1
  ------------------
 1301|  43.4k|    } else {
 1302|  43.4k|        *network = NETWORK_TYPE_UNKNOWN;
  ------------------
  |  |   59|  43.4k|#define NETWORK_TYPE_UNKNOWN 2
  ------------------
 1303|  43.4k|    }
 1304|  45.0k|    return true;
 1305|  45.0k|}
parser.c:parse_transaction_details:
 1242|  9.50k|static bool parse_transaction_details(buffer_t *buffer, transaction_details_t *transaction) {
 1243|       |    // account used to run the (inner)transaction
 1244|  9.50k|    PARSER_CHECK(parse_transaction_source(buffer, &transaction->source_account))
  ------------------
  |  |   15|  9.50k|    {                           \
  |  |   16|  9.50k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 129, False: 9.37k]
  |  |  ------------------
  |  |   17|  9.50k|    }
  ------------------
 1245|       |
 1246|       |    // the fee the source_account will pay
 1247|  9.37k|    PARSER_CHECK(parse_transaction_fee(buffer, &transaction->fee))
  ------------------
  |  |   15|  9.37k|    {                           \
  |  |   16|  9.37k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 9.37k]
  |  |  ------------------
  |  |   17|  9.37k|    }
  ------------------
 1248|       |
 1249|       |    // sequence number to consume in the account
 1250|  9.37k|    PARSER_CHECK(parse_transaction_sequence(buffer, &transaction->sequence_number))
  ------------------
  |  |   15|  9.37k|    {                           \
  |  |   16|  9.37k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 9.36k]
  |  |  ------------------
  |  |   17|  9.37k|    }
  ------------------
 1251|       |
 1252|       |    // validity conditions
 1253|  9.36k|    PARSER_CHECK(parse_transaction_preconditions(buffer, &transaction->cond))
  ------------------
  |  |   15|  9.36k|    {                           \
  |  |   16|  9.36k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 152, False: 9.21k]
  |  |  ------------------
  |  |   17|  9.36k|    }
  ------------------
 1254|       |
 1255|  9.21k|    PARSER_CHECK(parse_transaction_memo(buffer, &transaction->memo))
  ------------------
  |  |   15|  9.21k|    {                           \
  |  |   16|  9.21k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 292, False: 8.92k]
  |  |  ------------------
  |  |   17|  9.21k|    }
  ------------------
 1256|  8.92k|    PARSER_CHECK(parse_transaction_operation_len(buffer, &transaction->operations_count))
  ------------------
  |  |   15|  8.92k|    {                           \
  |  |   16|  8.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 22, False: 8.90k]
  |  |  ------------------
  |  |   17|  8.92k|    }
  ------------------
 1257|       |
 1258|       |    // check ops is valid
 1259|       |    // size_t offset = buffer->offset;
 1260|       |    // PARSER_CHECK(check_operations(buffer, transaction->operations_count))
 1261|       |    // buffer->offset = offset;
 1262|       |
 1263|  8.90k|    return true;
 1264|  8.92k|}
parser.c:parse_transaction_source:
 1203|  9.50k|static bool parse_transaction_source(buffer_t *buffer, muxed_account_t *source) {
 1204|  9.50k|    return parse_muxed_account(buffer, source);
 1205|  9.50k|}
parser.c:parse_muxed_account:
  205|  29.0k|static bool parse_muxed_account(buffer_t *buffer, muxed_account_t *muxed_account) {
  206|  29.0k|    PARSER_CHECK(parse_uint32(buffer, &muxed_account->type))
  ------------------
  |  |   15|  29.0k|    {                           \
  |  |   16|  29.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 27, False: 29.0k]
  |  |  ------------------
  |  |   17|  29.0k|    }
  ------------------
  207|       |
  208|  29.0k|    switch (muxed_account->type) {
  209|  26.2k|        case KEY_TYPE_ED25519:
  ------------------
  |  Branch (209:9): [True: 26.2k, False: 2.73k]
  ------------------
  210|  26.2k|            PARSER_CHECK(
  ------------------
  |  |   15|  26.2k|    {                           \
  |  |   16|  26.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 18, False: 26.2k]
  |  |  ------------------
  |  |   17|  26.2k|    }
  ------------------
  211|  26.2k|                buffer_read_bytes(buffer, &muxed_account->ed25519, RAW_ED25519_PUBLIC_KEY_SIZE))
  212|  26.2k|            return true;
  213|  2.61k|        case KEY_TYPE_MUXED_ED25519:
  ------------------
  |  Branch (213:9): [True: 2.61k, False: 26.4k]
  ------------------
  214|  2.61k|            PARSER_CHECK(parse_uint64(buffer, &muxed_account->med25519.id))
  ------------------
  |  |   15|  2.61k|    {                           \
  |  |   16|  2.61k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 2.60k]
  |  |  ------------------
  |  |   17|  2.61k|    }
  ------------------
  215|  2.60k|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|  2.60k|    {                           \
  |  |   16|  2.60k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 2.59k]
  |  |  ------------------
  |  |   17|  2.60k|    }
  ------------------
  216|  2.60k|                                           &muxed_account->med25519.ed25519,
  217|  2.60k|                                           RAW_ED25519_PUBLIC_KEY_SIZE))
  218|  2.59k|            return true;
  219|    119|        default:
  ------------------
  |  Branch (219:9): [True: 119, False: 28.8k]
  ------------------
  220|    119|            return false;
  221|  29.0k|    }
  222|  29.0k|}
parser.c:parse_transaction_fee:
 1207|  9.37k|static bool parse_transaction_fee(buffer_t *buffer, uint32_t *fee) {
 1208|  9.37k|    return parse_uint32(buffer, fee);
 1209|  9.37k|}
parser.c:parse_transaction_sequence:
 1211|  9.37k|static bool parse_transaction_sequence(buffer_t *buffer, sequence_number_t *sequence_number) {
 1212|  9.37k|    return parse_int64(buffer, sequence_number);
 1213|  9.37k|}
parser.c:parse_transaction_preconditions:
 1215|  9.36k|static bool parse_transaction_preconditions(buffer_t *buffer, preconditions_t *preconditions) {
 1216|  9.36k|    return parse_preconditions(buffer, preconditions);
 1217|  9.36k|}
parser.c:parse_preconditions:
  249|  9.36k|static bool parse_preconditions(buffer_t *buffer, preconditions_t *cond) {
  250|  9.36k|    uint32_t precondition_type;
  251|  9.36k|    PARSER_CHECK(parse_uint32(buffer, &precondition_type))
  ------------------
  |  |   15|  9.36k|    {                           \
  |  |   16|  9.36k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 9.36k]
  |  |  ------------------
  |  |   17|  9.36k|    }
  ------------------
  252|  9.36k|    switch (precondition_type) {
  253|  8.54k|        case PRECOND_NONE:
  ------------------
  |  Branch (253:9): [True: 8.54k, False: 821]
  ------------------
  254|  8.54k|            cond->time_bounds_present = false;
  255|  8.54k|            cond->min_seq_num_present = false;
  256|  8.54k|            cond->ledger_bounds_present = false;
  257|  8.54k|            cond->min_seq_ledger_gap = 0;
  258|  8.54k|            cond->min_seq_age = 0;
  259|  8.54k|            return true;
  260|    571|        case PRECOND_TIME:
  ------------------
  |  Branch (260:9): [True: 571, False: 8.79k]
  ------------------
  261|    571|            cond->time_bounds_present = true;
  262|    571|            PARSER_CHECK(parse_time_bounds(buffer, &cond->time_bounds))
  ------------------
  |  |   15|    571|    {                           \
  |  |   16|    571|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 561]
  |  |  ------------------
  |  |   17|    571|    }
  ------------------
  263|    561|            cond->min_seq_num_present = false;
  264|    561|            cond->ledger_bounds_present = false;
  265|    561|            cond->min_seq_ledger_gap = 0;
  266|    561|            cond->min_seq_age = 0;
  267|    561|            return true;
  268|    241|        case PRECOND_V2:
  ------------------
  |  Branch (268:9): [True: 241, False: 9.12k]
  ------------------
  269|    241|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|    241|    {                           \
  |  |   16|    241|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 235]
  |  |  ------------------
  |  |   17|    241|    }
  ------------------
  270|    241|                                             (xdr_type_reader) parse_time_bounds,
  271|    241|                                             &cond->time_bounds,
  272|    241|                                             &cond->time_bounds_present))
  273|    235|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|    235|    {                           \
  |  |   16|    235|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 220]
  |  |  ------------------
  |  |   17|    235|    }
  ------------------
  274|    235|                                             (xdr_type_reader) parse_ledger_bounds,
  275|    235|                                             &cond->ledger_bounds,
  276|    235|                                             &cond->ledger_bounds_present))
  277|    220|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|    220|    {                           \
  |  |   16|    220|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 211]
  |  |  ------------------
  |  |   17|    220|    }
  ------------------
  278|    220|                                             (xdr_type_reader) parse_int64,
  279|    220|                                             &cond->min_seq_num,
  280|    220|                                             &cond->min_seq_num_present))
  281|    211|            PARSER_CHECK(parse_int64(buffer, &cond->min_seq_age))
  ------------------
  |  |   15|    211|    {                           \
  |  |   16|    211|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 208]
  |  |  ------------------
  |  |   17|    211|    }
  ------------------
  282|    208|            PARSER_CHECK(parse_uint32(buffer, &cond->min_seq_ledger_gap))
  ------------------
  |  |   15|    208|    {                           \
  |  |   16|    208|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 204]
  |  |  ------------------
  |  |   17|    208|    }
  ------------------
  283|    204|            PARSER_CHECK(parse_extra_signers(buffer))
  ------------------
  |  |   15|    204|    {                           \
  |  |   16|    204|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 92, False: 112]
  |  |  ------------------
  |  |   17|    204|    }
  ------------------
  284|    112|            return true;
  285|      9|        default:
  ------------------
  |  Branch (285:9): [True: 9, False: 9.35k]
  ------------------
  286|      9|            return false;
  287|  9.36k|    }
  288|  9.36k|}
parser.c:parse_time_bounds:
  224|    582|static bool parse_time_bounds(buffer_t *buffer, time_bounds_t *bounds) {
  225|    582|    PARSER_CHECK(parse_uint64(buffer, &bounds->min_time))
  ------------------
  |  |   15|    582|    {                           \
  |  |   16|    582|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 576]
  |  |  ------------------
  |  |   17|    582|    }
  ------------------
  226|    576|    PARSER_CHECK(parse_uint64(buffer, &bounds->max_time))
  ------------------
  |  |   15|    576|    {                           \
  |  |   16|    576|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 572]
  |  |  ------------------
  |  |   17|    576|    }
  ------------------
  227|    572|    return true;
  228|    576|}
parser.c:parse_optional_type:
  135|   432k|static bool parse_optional_type(buffer_t *buffer, xdr_type_reader reader, void *dst, bool *opted) {
  136|   432k|    bool is_present;
  137|       |
  138|   432k|    PARSER_CHECK(parse_bool(buffer, &is_present))
  ------------------
  |  |   15|   432k|    {                           \
  |  |   16|   432k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 395, False: 431k]
  |  |  ------------------
  |  |   17|   432k|    }
  ------------------
  139|   431k|    if (is_present) {
  ------------------
  |  Branch (139:9): [True: 15.0k, False: 416k]
  ------------------
  140|  15.0k|        if (opted) {
  ------------------
  |  Branch (140:13): [True: 15.0k, False: 0]
  ------------------
  141|  15.0k|            *opted = true;
  142|  15.0k|        }
  143|  15.0k|        return reader(buffer, dst);
  144|   416k|    } else {
  145|   416k|        if (opted) {
  ------------------
  |  Branch (145:13): [True: 416k, False: 0]
  ------------------
  146|   416k|            *opted = false;
  147|   416k|        }
  148|   416k|        return true;
  149|   416k|    }
  150|   431k|}
parser.c:parse_ledger_bounds:
  230|    111|static bool parse_ledger_bounds(buffer_t *buffer, ledger_bounds_t *ledger_bounds) {
  231|    111|    PARSER_CHECK(parse_uint32(buffer, &ledger_bounds->min_ledger))
  ------------------
  |  |   15|    111|    {                           \
  |  |   16|    111|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 106]
  |  |  ------------------
  |  |   17|    111|    }
  ------------------
  232|    106|    PARSER_CHECK(parse_uint32(buffer, &ledger_bounds->max_ledger))
  ------------------
  |  |   15|    106|    {                           \
  |  |   16|    106|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 103]
  |  |  ------------------
  |  |   17|    106|    }
  ------------------
  233|    103|    return true;
  234|    106|}
parser.c:parse_extra_signers:
  236|    204|static bool parse_extra_signers(buffer_t *buffer) {
  237|    204|    uint32_t length;
  238|    204|    PARSER_CHECK(parse_uint32(buffer, &length))
  ------------------
  |  |   15|    204|    {                           \
  |  |   16|    204|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 202]
  |  |  ------------------
  |  |   17|    204|    }
  ------------------
  239|    202|    if (length > 2) {  // maximum length is 2
  ------------------
  |  Branch (239:9): [True: 6, False: 196]
  ------------------
  240|      6|        return false;
  241|      6|    }
  242|    196|    signer_key_t signer_key;
  243|    333|    for (uint32_t i = 0; i < length; i++) {
  ------------------
  |  Branch (243:26): [True: 221, False: 112]
  ------------------
  244|    221|        PARSER_CHECK(parse_signer_key(buffer, &signer_key))
  ------------------
  |  |   15|    221|    {                           \
  |  |   16|    221|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 84, False: 137]
  |  |  ------------------
  |  |   17|    221|    }
  ------------------
  245|    221|    }
  246|    112|    return true;
  247|    196|}
parser.c:parse_signer_key:
  163|  7.92k|static bool parse_signer_key(buffer_t *buffer, signer_key_t *key) {
  164|  7.92k|    PARSER_CHECK(parse_uint32(buffer, &key->type))
  ------------------
  |  |   15|  7.92k|    {                           \
  |  |   16|  7.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 22, False: 7.89k]
  |  |  ------------------
  |  |   17|  7.92k|    }
  ------------------
  165|  7.89k|    switch (key->type) {
  166|  3.83k|        case SIGNER_KEY_TYPE_ED25519:
  ------------------
  |  Branch (166:9): [True: 3.83k, False: 4.06k]
  ------------------
  167|  3.83k|            PARSER_CHECK(buffer_read_bytes(buffer, &key->ed25519, RAW_ED25519_PUBLIC_KEY_SIZE))
  ------------------
  |  |   15|  3.83k|    {                           \
  |  |   16|  3.83k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 3.81k]
  |  |  ------------------
  |  |   17|  3.83k|    }
  ------------------
  168|  3.81k|            return true;
  169|  1.79k|        case SIGNER_KEY_TYPE_PRE_AUTH_TX:
  ------------------
  |  Branch (169:9): [True: 1.79k, False: 6.10k]
  ------------------
  170|  1.79k|            PARSER_CHECK(buffer_read_bytes(buffer, &key->pre_auth_tx, RAW_PRE_AUTH_TX_KEY_SIZE))
  ------------------
  |  |   15|  1.79k|    {                           \
  |  |   16|  1.79k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.78k]
  |  |  ------------------
  |  |   17|  1.79k|    }
  ------------------
  171|  1.78k|            return true;
  172|    504|        case SIGNER_KEY_TYPE_HASH_X:
  ------------------
  |  Branch (172:9): [True: 504, False: 7.39k]
  ------------------
  173|    504|            PARSER_CHECK(buffer_read_bytes(buffer, &key->hash_x, RAW_HASH_X_KEY_SIZE))
  ------------------
  |  |   15|    504|    {                           \
  |  |   16|    504|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 498]
  |  |  ------------------
  |  |   17|    504|    }
  ------------------
  174|    498|            return true;
  175|  1.75k|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:
  ------------------
  |  Branch (175:9): [True: 1.75k, False: 6.14k]
  ------------------
  176|  1.75k|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|  1.75k|    {                           \
  |  |   16|  1.75k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 1.74k]
  |  |  ------------------
  |  |   17|  1.75k|    }
  ------------------
  177|  1.75k|                                           &key->ed25519_signed_payload.ed25519,
  178|  1.75k|                                           RAW_ED25519_PUBLIC_KEY_SIZE))
  179|  1.74k|            PARSER_CHECK(parse_uint32(buffer, &key->ed25519_signed_payload.payload_len))
  ------------------
  |  |   15|  1.74k|    {                           \
  |  |   16|  1.74k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.73k]
  |  |  ------------------
  |  |   17|  1.74k|    }
  ------------------
  180|       |            // valid length [1, 64]
  181|  1.73k|            if (key->ed25519_signed_payload.payload_len == 0 ||
  ------------------
  |  Branch (181:17): [True: 9, False: 1.72k]
  ------------------
  182|  1.73k|                key->ed25519_signed_payload.payload_len > 64) {
  ------------------
  |  Branch (182:17): [True: 8, False: 1.72k]
  ------------------
  183|     17|                return false;
  184|     17|            }
  185|  1.72k|            size_t data_size = 0;
  186|  1.72k|            PARSER_CHECK(num_bytes(key->ed25519_signed_payload.payload_len, &data_size))
  ------------------
  |  |   15|  1.72k|    {                           \
  |  |   16|  1.72k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 1.72k]
  |  |  ------------------
  |  |   17|  1.72k|    }
  ------------------
  187|  1.72k|            PARSER_CHECK(buffer_read_bytes(buffer, &key->ed25519_signed_payload.payload, data_size))
  ------------------
  |  |   15|  1.72k|    {                           \
  |  |   16|  1.72k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 1.70k]
  |  |  ------------------
  |  |   17|  1.72k|    }
  ------------------
  188|  1.70k|            return true;
  189|     21|        default:
  ------------------
  |  Branch (189:9): [True: 21, False: 7.87k]
  ------------------
  190|     21|            return false;
  191|  7.89k|    }
  192|  7.89k|}
parser.c:parse_transaction_memo:
 1219|  9.21k|static bool parse_transaction_memo(buffer_t *buffer, memo_t *memo) {
 1220|  9.21k|    return parse_memo(buffer, memo);
 1221|  9.21k|}
parser.c:parse_memo:
  290|  9.21k|static bool parse_memo(buffer_t *buffer, memo_t *memo) {
  291|  9.21k|    PARSER_CHECK(parse_uint32(buffer, &memo->type))
  ------------------
  |  |   15|  9.21k|    {                           \
  |  |   16|  9.21k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 35, False: 9.18k]
  |  |  ------------------
  |  |   17|  9.21k|    }
  ------------------
  292|  9.18k|    switch (memo->type) {
  293|  8.37k|        case MEMO_NONE:
  ------------------
  |  Branch (293:9): [True: 8.37k, False: 808]
  ------------------
  294|  8.37k|            return true;
  295|     36|        case MEMO_ID:
  ------------------
  |  Branch (295:9): [True: 36, False: 9.14k]
  ------------------
  296|     36|            return parse_uint64(buffer, &memo->id);
  297|    530|        case MEMO_TEXT: {
  ------------------
  |  Branch (297:9): [True: 530, False: 8.65k]
  ------------------
  298|    530|            PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|    530|    {                           \
  |  |   16|    530|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 506]
  |  |  ------------------
  |  |   17|    530|    }
  ------------------
  299|    530|                                                 &memo->text.text,
  300|    530|                                                 &memo->text.text_size,
  301|    530|                                                 MEMO_TEXT_MAX_SIZE))
  302|    506|            return true;
  303|    530|        }
  304|     10|        case MEMO_HASH:
  ------------------
  |  Branch (304:9): [True: 10, False: 9.17k]
  ------------------
  305|     10|            return buffer_read_bytes(buffer, &memo->hash, HASH_SIZE);
  ------------------
  |  |   46|     10|#define HASH_SIZE                 32
  ------------------
  306|     13|        case MEMO_RETURN:
  ------------------
  |  Branch (306:9): [True: 13, False: 9.16k]
  ------------------
  307|     13|            return buffer_read_bytes(buffer, &memo->return_hash, HASH_SIZE);
  ------------------
  |  |   46|     13|#define HASH_SIZE                 32
  ------------------
  308|    219|        default:
  ------------------
  |  Branch (308:9): [True: 219, False: 8.96k]
  ------------------
  309|    219|            return false;  // unknown memo type
  310|  9.18k|    }
  311|  9.18k|}
parser.c:parse_transaction_operation_len:
 1223|  8.92k|static bool parse_transaction_operation_len(buffer_t *buffer, uint8_t *operations_count) {
 1224|  8.92k|    uint32_t len;
 1225|  8.92k|    PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  8.92k|    {                           \
  |  |   16|  8.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 8.91k]
  |  |  ------------------
  |  |   17|  8.92k|    }
  ------------------
 1226|  8.91k|    if (len > MAX_OPS) {
  ------------------
  |  |   39|  8.91k|#define MAX_OPS 35
  ------------------
  |  Branch (1226:9): [True: 10, False: 8.90k]
  ------------------
 1227|     10|        return false;
 1228|     10|    }
 1229|  8.90k|    *operations_count = len;
 1230|  8.90k|    return true;
 1231|  8.91k|}
parser.c:parse_fee_bump_transaction_details:
 1276|    125|    fee_bump_transaction_details_t *fee_bump_transaction) {
 1277|    125|    PARSER_CHECK(parse_fee_bump_transaction_fee_source(buffer, &fee_bump_transaction->fee_source))
  ------------------
  |  |   15|    125|    {                           \
  |  |   16|    125|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 110]
  |  |  ------------------
  |  |   17|    125|    }
  ------------------
 1278|    110|    PARSER_CHECK(parse_fee_bump_transaction_fee(buffer, &fee_bump_transaction->fee))
  ------------------
  |  |   15|    110|    {                           \
  |  |   16|    110|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 105]
  |  |  ------------------
  |  |   17|    110|    }
  ------------------
 1279|    105|    return true;
 1280|    110|}
parser.c:parse_fee_bump_transaction_fee_source:
 1266|    125|static bool parse_fee_bump_transaction_fee_source(buffer_t *buffer, muxed_account_t *fee_source) {
 1267|    125|    return parse_muxed_account(buffer, fee_source);
 1268|    125|}
parser.c:parse_fee_bump_transaction_fee:
 1270|    110|static bool parse_fee_bump_transaction_fee(buffer_t *buffer, int64_t *fee) {
 1271|    110|    return parse_int64(buffer, fee);
 1272|    110|}
parser.c:check_operations:
 1233|  8.90k|static bool check_operations(buffer_t *buffer, uint8_t op_count) {
 1234|  8.90k|    PRINTF("check_operations: op_count=%d, offset=%d\n", op_count, buffer->offset);
 1235|  8.90k|    operation_t op;
 1236|  52.5k|    for (uint8_t i = 0; i < op_count; i++) {
  ------------------
  |  Branch (1236:25): [True: 46.0k, False: 6.44k]
  ------------------
 1237|  46.0k|        PARSER_CHECK(parse_operation(buffer, &op))
  ------------------
  |  |   15|  46.0k|    {                           \
  |  |   16|  46.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.45k, False: 43.6k]
  |  |  ------------------
  |  |   17|  46.0k|    }
  ------------------
 1238|  46.0k|    }
 1239|  6.44k|    return true;
 1240|  8.90k|}
parser.c:parse_operation:
 1101|   307k|static bool parse_operation(buffer_t *buffer, operation_t *operation) {
 1102|   307k|    PRINTF("parse_operation: offset=%d\n", buffer->offset);
 1103|   307k|    explicit_bzero(operation, sizeof(operation_t));
 1104|       |
 1105|   307k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|   307k|    {                           \
  |  |   16|   307k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 318, False: 306k]
  |  |  ------------------
  |  |   17|   307k|    }
  ------------------
 1106|   307k|                                     (xdr_type_reader) parse_muxed_account,
 1107|   307k|                                     &operation->source_account,
 1108|   307k|                                     &operation->source_account_present))
 1109|   306k|    PRINTF("operation->source_account_present: %d\n", operation->source_account_present);
 1110|       |
 1111|   306k|    PARSER_CHECK(parse_uint32(buffer, &operation->type))
  ------------------
  |  |   15|   306k|    {                           \
  |  |   16|   306k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 32, False: 306k]
  |  |  ------------------
  |  |   17|   306k|    }
  ------------------
 1112|   306k|    PRINTF("sizeof operation->type: %d\n", sizeof(operation->type));
 1113|       |
 1114|   306k|    switch (operation->type) {
 1115|   211k|        case OPERATION_TYPE_CREATE_ACCOUNT: {
  ------------------
  |  Branch (1115:9): [True: 211k, False: 95.8k]
  ------------------
 1116|   211k|            return parse_create_account(buffer, &operation->create_account_op);
 1117|      0|        }
 1118|  4.56k|        case OPERATION_TYPE_PAYMENT: {
  ------------------
  |  Branch (1118:9): [True: 4.56k, False: 302k]
  ------------------
 1119|  4.56k|            return parse_payment(buffer, &operation->payment_op);
 1120|      0|        }
 1121|  1.93k|        case OPERATION_TYPE_PATH_PAYMENT_STRICT_RECEIVE: {
  ------------------
  |  Branch (1121:9): [True: 1.93k, False: 305k]
  ------------------
 1122|  1.93k|            return parse_path_payment_strict_receive(buffer,
 1123|  1.93k|                                                     &operation->path_payment_strict_receive_op);
 1124|      0|        }
 1125|  3.33k|        case OPERATION_TYPE_CREATE_PASSIVE_SELL_OFFER: {
  ------------------
  |  Branch (1125:9): [True: 3.33k, False: 303k]
  ------------------
 1126|  3.33k|            return parse_create_passive_sell_offer(buffer,
 1127|  3.33k|                                                   &operation->create_passive_sell_offer_op);
 1128|      0|        }
 1129|  1.43k|        case OPERATION_TYPE_MANAGE_SELL_OFFER: {
  ------------------
  |  Branch (1129:9): [True: 1.43k, False: 305k]
  ------------------
 1130|  1.43k|            return parse_manage_sell_offer(buffer, &operation->manage_sell_offer_op);
 1131|      0|        }
 1132|  15.5k|        case OPERATION_TYPE_SET_OPTIONS: {
  ------------------
  |  Branch (1132:9): [True: 15.5k, False: 291k]
  ------------------
 1133|  15.5k|            return parse_set_options(buffer, &operation->set_options_op);
 1134|      0|        }
 1135|  2.02k|        case OPERATION_TYPE_CHANGE_TRUST: {
  ------------------
  |  Branch (1135:9): [True: 2.02k, False: 304k]
  ------------------
 1136|  2.02k|            return parse_change_trust(buffer, &operation->change_trust_op);
 1137|      0|        }
 1138|    638|        case OPERATION_TYPE_ALLOW_TRUST: {
  ------------------
  |  Branch (1138:9): [True: 638, False: 306k]
  ------------------
 1139|    638|            return parse_allow_trust(buffer, &operation->allow_trust_op);
 1140|      0|        }
 1141|  4.71k|        case OPERATION_TYPE_ACCOUNT_MERGE: {
  ------------------
  |  Branch (1141:9): [True: 4.71k, False: 302k]
  ------------------
 1142|  4.71k|            return parse_account_merge(buffer, &operation->account_merge_op);
 1143|      0|        }
 1144|  2.95k|        case OPERATION_TYPE_INFLATION: {
  ------------------
  |  Branch (1144:9): [True: 2.95k, False: 303k]
  ------------------
 1145|  2.95k|            return true;
 1146|      0|        }
 1147|  3.30k|        case OPERATION_TYPE_MANAGE_DATA: {
  ------------------
  |  Branch (1147:9): [True: 3.30k, False: 303k]
  ------------------
 1148|  3.30k|            return parse_manage_data(buffer, &operation->manage_data_op);
 1149|      0|        }
 1150|  1.63k|        case OPERATION_TYPE_BUMP_SEQUENCE: {
  ------------------
  |  Branch (1150:9): [True: 1.63k, False: 305k]
  ------------------
 1151|  1.63k|            return parse_bump_sequence(buffer, &operation->bump_sequence_op);
 1152|      0|        }
 1153|  1.62k|        case OPERATION_TYPE_MANAGE_BUY_OFFER: {
  ------------------
  |  Branch (1153:9): [True: 1.62k, False: 305k]
  ------------------
 1154|  1.62k|            return parse_manage_buy_offer(buffer, &operation->manage_buy_offer_op);
 1155|      0|        }
 1156|    325|        case OPERATION_TYPE_PATH_PAYMENT_STRICT_SEND: {
  ------------------
  |  Branch (1156:9): [True: 325, False: 306k]
  ------------------
 1157|    325|            return parse_path_payment_strict_send(buffer, &operation->path_payment_strict_send_op);
 1158|      0|        }
 1159|  1.99k|        case OPERATION_TYPE_CREATE_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1159:9): [True: 1.99k, False: 304k]
  ------------------
 1160|  1.99k|            return parse_create_claimable_balance(buffer, &operation->create_claimable_balance_op);
 1161|      0|        }
 1162|  2.02k|        case OPERATION_TYPE_CLAIM_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1162:9): [True: 2.02k, False: 304k]
  ------------------
 1163|  2.02k|            return parse_claim_claimable_balance(buffer, &operation->claim_claimable_balance_op);
 1164|      0|        }
 1165|  5.88k|        case OPERATION_TYPE_BEGIN_SPONSORING_FUTURE_RESERVES: {
  ------------------
  |  Branch (1165:9): [True: 5.88k, False: 301k]
  ------------------
 1166|  5.88k|            return parse_begin_sponsoring_future_reserves(
 1167|  5.88k|                buffer,
 1168|  5.88k|                &operation->begin_sponsoring_future_reserves_op);
 1169|      0|        }
 1170|  1.47k|        case OPERATION_TYPE_END_SPONSORING_FUTURE_RESERVES: {
  ------------------
  |  Branch (1170:9): [True: 1.47k, False: 305k]
  ------------------
 1171|  1.47k|            return true;
 1172|      0|        }
 1173|  17.4k|        case OPERATION_TYPE_REVOKE_SPONSORSHIP: {
  ------------------
  |  Branch (1173:9): [True: 17.4k, False: 289k]
  ------------------
 1174|  17.4k|            return parse_revoke_sponsorship(buffer, &operation->revoke_sponsorship_op);
 1175|      0|        }
 1176|    580|        case OPERATION_TYPE_CLAWBACK: {
  ------------------
  |  Branch (1176:9): [True: 580, False: 306k]
  ------------------
 1177|    580|            return parse_clawback(buffer, &operation->clawback_op);
 1178|      0|        }
 1179|    933|        case OPERATION_TYPE_CLAWBACK_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1179:9): [True: 933, False: 306k]
  ------------------
 1180|    933|            return parse_clawback_claimable_balance(buffer,
 1181|    933|                                                    &operation->clawback_claimable_balance_op);
 1182|      0|        }
 1183|  8.71k|        case OPERATION_TYPE_SET_TRUST_LINE_FLAGS: {
  ------------------
  |  Branch (1183:9): [True: 8.71k, False: 298k]
  ------------------
 1184|  8.71k|            return parse_set_trust_line_flags(buffer, &operation->set_trust_line_flags_op);
 1185|      0|        }
 1186|    257|        case OPERATION_TYPE_LIQUIDITY_POOL_DEPOSIT:
  ------------------
  |  Branch (1186:9): [True: 257, False: 306k]
  ------------------
 1187|    257|            return parse_liquidity_pool_deposit(buffer, &operation->liquidity_pool_deposit_op);
 1188|  1.71k|        case OPERATION_TYPE_LIQUIDITY_POOL_WITHDRAW:
  ------------------
  |  Branch (1188:9): [True: 1.71k, False: 305k]
  ------------------
 1189|  1.71k|            return parse_liquidity_pool_withdraw(buffer, &operation->liquidity_pool_withdraw_op);
 1190|  6.89k|        case OPERATION_INVOKE_HOST_FUNCTION: {
  ------------------
  |  Branch (1190:9): [True: 6.89k, False: 300k]
  ------------------
 1191|  6.89k|            return parse_invoke_host_function(buffer, &operation->invoke_host_function_op);
 1192|      0|        }
 1193|  1.01k|        case OPERATION_EXTEND_FOOTPRINT_TTL:
  ------------------
  |  Branch (1193:9): [True: 1.01k, False: 305k]
  ------------------
 1194|  1.01k|            return parse_extend_footprint_ttl(buffer, &operation->extend_footprint_ttl_op);
 1195|  2.88k|        case OPERATION_RESTORE_FOOTPRINT:
  ------------------
  |  Branch (1195:9): [True: 2.88k, False: 304k]
  ------------------
 1196|  2.88k|            return parse_restore_footprint(buffer, &operation->restore_footprint_op);
 1197|     21|        default:
  ------------------
  |  Branch (1197:9): [True: 21, False: 306k]
  ------------------
 1198|     21|            return false;
 1199|   306k|    }
 1200|      0|    return false;
 1201|   306k|}
parser.c:parse_create_account:
  401|   211k|static bool parse_create_account(buffer_t *buffer, create_account_op_t *create_account_op) {
  402|   211k|    PARSER_CHECK(parse_account_id(buffer, &create_account_op->destination))
  ------------------
  |  |   15|   211k|    {                           \
  |  |   16|   211k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 93, False: 210k]
  |  |  ------------------
  |  |   17|   211k|    }
  ------------------
  403|   210k|    PARSER_CHECK(parse_int64(buffer, &create_account_op->starting_balance))
  ------------------
  |  |   15|   210k|    {                           \
  |  |   16|   210k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 210k]
  |  |  ------------------
  |  |   17|   210k|    }
  ------------------
  404|   210k|    return true;
  405|   210k|}
parser.c:parse_payment:
  407|  4.56k|static bool parse_payment(buffer_t *buffer, payment_op_t *payment_op) {
  408|  4.56k|    PARSER_CHECK(parse_muxed_account(buffer, &payment_op->destination))
  ------------------
  |  |   15|  4.56k|    {                           \
  |  |   16|  4.56k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 4.55k]
  |  |  ------------------
  |  |   17|  4.56k|    }
  ------------------
  409|  4.55k|    PARSER_CHECK(parse_asset(buffer, &payment_op->asset))
  ------------------
  |  |   15|  4.55k|    {                           \
  |  |   16|  4.55k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 4.54k]
  |  |  ------------------
  |  |   17|  4.55k|    }
  ------------------
  410|  4.54k|    PARSER_CHECK(parse_int64(buffer, &payment_op->amount))
  ------------------
  |  |   15|  4.54k|    {                           \
  |  |   16|  4.54k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 4.54k]
  |  |  ------------------
  |  |   17|  4.54k|    }
  ------------------
  411|  4.54k|    return true;
  412|  4.54k|}
parser.c:parse_asset:
  325|  35.9k|static bool parse_asset(buffer_t *buffer, asset_t *asset) {
  326|  35.9k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  35.9k|    {                           \
  |  |   16|  35.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 86, False: 35.8k]
  |  |  ------------------
  |  |   17|  35.9k|    }
  ------------------
  327|  35.8k|    switch (asset->type) {
  328|  33.2k|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (328:9): [True: 33.2k, False: 2.62k]
  ------------------
  329|  33.2k|            return true;
  330|      0|        }
  331|  1.64k|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (331:9): [True: 1.64k, False: 34.2k]
  ------------------
  332|  1.64k|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  333|      0|        }
  334|    852|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (334:9): [True: 852, False: 35.0k]
  ------------------
  335|    852|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  336|      0|        }
  337|    123|        default:
  ------------------
  |  Branch (337:9): [True: 123, False: 35.7k]
  ------------------
  338|    123|            return false;  // unknown asset type
  339|  35.8k|    }
  340|  35.8k|}
parser.c:parse_alpha_num4_asset:
  313|  2.66k|static bool parse_alpha_num4_asset(buffer_t *buffer, alpha_num4_t *asset) {
  314|  2.66k|    PARSER_CHECK(buffer_read_bytes(buffer, &asset->asset_code, 4))
  ------------------
  |  |   15|  2.66k|    {                           \
  |  |   16|  2.66k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 21, False: 2.64k]
  |  |  ------------------
  |  |   17|  2.66k|    }
  ------------------
  315|  2.64k|    PARSER_CHECK(parse_account_id(buffer, &asset->issuer))
  ------------------
  |  |   15|  2.64k|    {                           \
  |  |   16|  2.64k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 29, False: 2.61k]
  |  |  ------------------
  |  |   17|  2.64k|    }
  ------------------
  316|  2.61k|    return true;
  317|  2.64k|}
parser.c:parse_alpha_num12_asset:
  319|  1.62k|static bool parse_alpha_num12_asset(buffer_t *buffer, alpha_num12_t *asset) {
  320|  1.62k|    PARSER_CHECK(buffer_read_bytes(buffer, &asset->asset_code, 12))
  ------------------
  |  |   15|  1.62k|    {                           \
  |  |   16|  1.62k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 34, False: 1.59k]
  |  |  ------------------
  |  |   17|  1.62k|    }
  ------------------
  321|  1.59k|    PARSER_CHECK(parse_account_id(buffer, &asset->issuer))
  ------------------
  |  |   15|  1.59k|    {                           \
  |  |   16|  1.59k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 23, False: 1.56k]
  |  |  ------------------
  |  |   17|  1.59k|    }
  ------------------
  322|  1.56k|    return true;
  323|  1.59k|}
parser.c:parse_path_payment_strict_receive:
  415|  1.93k|                                              path_payment_strict_receive_op_t *op) {
  416|  1.93k|    uint32_t path_len;
  417|       |
  418|  1.93k|    PARSER_CHECK(parse_asset(buffer, &op->send_asset))
  ------------------
  |  |   15|  1.93k|    {                           \
  |  |   16|  1.93k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 1.92k]
  |  |  ------------------
  |  |   17|  1.93k|    }
  ------------------
  419|  1.92k|    PARSER_CHECK(parse_int64(buffer, &op->send_max))
  ------------------
  |  |   15|  1.92k|    {                           \
  |  |   16|  1.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 1.91k]
  |  |  ------------------
  |  |   17|  1.92k|    }
  ------------------
  420|  1.91k|    PARSER_CHECK(parse_muxed_account(buffer, &op->destination))
  ------------------
  |  |   15|  1.91k|    {                           \
  |  |   16|  1.91k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.90k]
  |  |  ------------------
  |  |   17|  1.91k|    }
  ------------------
  421|  1.90k|    PARSER_CHECK(parse_asset(buffer, &op->dest_asset))
  ------------------
  |  |   15|  1.90k|    {                           \
  |  |   16|  1.90k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 1.89k]
  |  |  ------------------
  |  |   17|  1.90k|    }
  ------------------
  422|  1.89k|    PARSER_CHECK(parse_int64(buffer, &op->dest_amount))
  ------------------
  |  |   15|  1.89k|    {                           \
  |  |   16|  1.89k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 19, False: 1.87k]
  |  |  ------------------
  |  |   17|  1.89k|    }
  ------------------
  423|       |
  424|  1.87k|    PARSER_CHECK(parse_uint32(buffer, &path_len))
  ------------------
  |  |   15|  1.87k|    {                           \
  |  |   16|  1.87k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.87k]
  |  |  ------------------
  |  |   17|  1.87k|    }
  ------------------
  425|  1.87k|    if (path_len > PATH_PAYMENT_MAX_PATH_LENGTH) {
  ------------------
  |  |   35|  1.87k|#define PATH_PAYMENT_MAX_PATH_LENGTH  5
  ------------------
  |  Branch (425:9): [True: 4, False: 1.86k]
  ------------------
  426|      4|        return false;
  427|      4|    }
  428|  3.66k|    for (uint32_t i = 0; i < path_len; i++) {
  ------------------
  |  Branch (428:26): [True: 1.81k, False: 1.84k]
  ------------------
  429|  1.81k|        asset_t tmp_asset;
  430|  1.81k|        PARSER_CHECK(parse_asset(buffer, &tmp_asset))
  ------------------
  |  |   15|  1.81k|    {                           \
  |  |   16|  1.81k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 1.79k]
  |  |  ------------------
  |  |   17|  1.81k|    }
  ------------------
  431|  1.81k|    }
  432|  1.84k|    return true;
  433|  1.86k|}
parser.c:parse_create_passive_sell_offer:
  500|  3.33k|static bool parse_create_passive_sell_offer(buffer_t *buffer, create_passive_sell_offer_op_t *op) {
  501|  3.33k|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|  3.33k|    {                           \
  |  |   16|  3.33k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 3.32k]
  |  |  ------------------
  |  |   17|  3.33k|    }
  ------------------
  502|  3.32k|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|  3.32k|    {                           \
  |  |   16|  3.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 16, False: 3.30k]
  |  |  ------------------
  |  |   17|  3.32k|    }
  ------------------
  503|  3.30k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  3.30k|    {                           \
  |  |   16|  3.30k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 3.29k]
  |  |  ------------------
  |  |   17|  3.30k|    }
  ------------------
  504|  3.29k|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|  3.29k|    {                           \
  |  |   16|  3.29k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 3.28k]
  |  |  ------------------
  |  |   17|  3.29k|    }
  ------------------
  505|  3.28k|    return true;
  506|  3.29k|}
parser.c:parse_price:
  475|  6.78k|static bool parse_price(buffer_t *buffer, price_t *price) {
  476|  6.78k|    PARSER_CHECK(parse_int32(buffer, &price->n))
  ------------------
  |  |   15|  6.78k|    {                           \
  |  |   16|  6.78k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 26, False: 6.75k]
  |  |  ------------------
  |  |   17|  6.78k|    }
  ------------------
  477|  6.75k|    PARSER_CHECK(parse_int32(buffer, &price->d))
  ------------------
  |  |   15|  6.75k|    {                           \
  |  |   16|  6.75k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 6.74k]
  |  |  ------------------
  |  |   17|  6.75k|    }
  ------------------
  478|       |    // Denominator cannot be null, as it would lead to a division by zero.
  479|  6.74k|    return price->d != 0;
  480|  6.75k|}
parser.c:parse_manage_sell_offer:
  482|  1.43k|static bool parse_manage_sell_offer(buffer_t *buffer, manage_sell_offer_op_t *op) {
  483|  1.43k|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|  1.43k|    {                           \
  |  |   16|  1.43k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.43k]
  |  |  ------------------
  |  |   17|  1.43k|    }
  ------------------
  484|  1.43k|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|  1.43k|    {                           \
  |  |   16|  1.43k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 1.42k]
  |  |  ------------------
  |  |   17|  1.43k|    }
  ------------------
  485|  1.42k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  1.42k|    {                           \
  |  |   16|  1.42k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 1.41k]
  |  |  ------------------
  |  |   17|  1.42k|    }
  ------------------
  486|  1.41k|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|  1.41k|    {                           \
  |  |   16|  1.41k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 1.40k]
  |  |  ------------------
  |  |   17|  1.41k|    }
  ------------------
  487|  1.40k|    PARSER_CHECK(parse_int64(buffer, &op->offer_id))
  ------------------
  |  |   15|  1.40k|    {                           \
  |  |   16|  1.40k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 1.39k]
  |  |  ------------------
  |  |   17|  1.40k|    }
  ------------------
  488|  1.39k|    return true;
  489|  1.40k|}
parser.c:parse_set_options:
  521|  15.5k|static bool parse_set_options(buffer_t *buffer, set_options_op_t *set_options) {
  522|  15.5k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  15.5k|    {                           \
  |  |   16|  15.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 15.5k]
  |  |  ------------------
  |  |   17|  15.5k|    }
  ------------------
  523|  15.5k|                                     (xdr_type_reader) parse_account_id,
  524|  15.5k|                                     &set_options->inflation_destination,
  525|  15.5k|                                     &set_options->inflation_destination_present))
  526|       |
  527|  15.5k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  15.5k|    {                           \
  |  |   16|  15.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 15.5k]
  |  |  ------------------
  |  |   17|  15.5k|    }
  ------------------
  528|  15.5k|                                     (xdr_type_reader) parse_uint32,
  529|  15.5k|                                     &set_options->clear_flags,
  530|  15.5k|                                     &set_options->clear_flags_present))
  531|  15.5k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  15.5k|    {                           \
  |  |   16|  15.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 15.5k]
  |  |  ------------------
  |  |   17|  15.5k|    }
  ------------------
  532|  15.5k|                                     (xdr_type_reader) parse_uint32,
  533|  15.5k|                                     &set_options->set_flags,
  534|  15.5k|                                     &set_options->set_flags_present))
  535|  15.5k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  15.5k|    {                           \
  |  |   16|  15.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 15.5k]
  |  |  ------------------
  |  |   17|  15.5k|    }
  ------------------
  536|  15.5k|                                     (xdr_type_reader) parse_uint32,
  537|  15.5k|                                     &set_options->master_weight,
  538|  15.5k|                                     &set_options->master_weight_present))
  539|  15.5k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  15.5k|    {                           \
  |  |   16|  15.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 15.5k]
  |  |  ------------------
  |  |   17|  15.5k|    }
  ------------------
  540|  15.5k|                                     (xdr_type_reader) parse_uint32,
  541|  15.5k|                                     &set_options->low_threshold,
  542|  15.5k|                                     &set_options->low_threshold_present))
  543|  15.5k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  15.5k|    {                           \
  |  |   16|  15.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 15.5k]
  |  |  ------------------
  |  |   17|  15.5k|    }
  ------------------
  544|  15.5k|                                     (xdr_type_reader) parse_uint32,
  545|  15.5k|                                     &set_options->medium_threshold,
  546|  15.5k|                                     &set_options->medium_threshold_present))
  547|  15.5k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  15.5k|    {                           \
  |  |   16|  15.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 15.4k]
  |  |  ------------------
  |  |   17|  15.5k|    }
  ------------------
  548|  15.5k|                                     (xdr_type_reader) parse_uint32,
  549|  15.5k|                                     &set_options->high_threshold,
  550|  15.5k|                                     &set_options->high_threshold_present))
  551|       |
  552|  15.4k|    uint32_t home_domain_present;
  553|  15.4k|    PARSER_CHECK(parse_uint32(buffer, &home_domain_present))
  ------------------
  |  |   15|  15.4k|    {                           \
  |  |   16|  15.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 15.4k]
  |  |  ------------------
  |  |   17|  15.4k|    }
  ------------------
  554|  15.4k|    set_options->home_domain_present = home_domain_present ? true : false;
  ------------------
  |  Branch (554:40): [True: 3.38k, False: 12.1k]
  ------------------
  555|  15.4k|    if (set_options->home_domain_present) {
  ------------------
  |  Branch (555:9): [True: 3.38k, False: 12.1k]
  ------------------
  556|  3.38k|        PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  3.38k|    {                           \
  |  |   16|  3.38k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 3.37k]
  |  |  ------------------
  |  |   17|  3.38k|    }
  ------------------
  557|  3.38k|                                             &set_options->home_domain,
  558|  3.38k|                                             &set_options->home_domain_size,
  559|  3.38k|                                             HOME_DOMAIN_MAX_SIZE))
  560|  12.1k|    } else {
  561|  12.1k|        set_options->home_domain_size = 0;
  562|  12.1k|    }
  563|       |
  564|  15.4k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  15.4k|    {                           \
  |  |   16|  15.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 33, False: 15.4k]
  |  |  ------------------
  |  |   17|  15.4k|    }
  ------------------
  565|  15.4k|                                     (xdr_type_reader) parse_signer,
  566|  15.4k|                                     &set_options->signer,
  567|  15.4k|                                     &set_options->signer_present))
  568|  15.4k|    return true;
  569|  15.4k|}
parser.c:parse_signer:
  515|  1.03k|static bool parse_signer(buffer_t *buffer, signer_t *signer) {
  516|  1.03k|    PARSER_CHECK(parse_signer_key(buffer, &signer->key))
  ------------------
  |  |   15|  1.03k|    {                           \
  |  |   16|  1.03k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 1.01k]
  |  |  ------------------
  |  |   17|  1.03k|    }
  ------------------
  517|  1.01k|    PARSER_CHECK(parse_uint32(buffer, &signer->weight))
  ------------------
  |  |   15|  1.01k|    {                           \
  |  |   16|  1.01k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.01k]
  |  |  ------------------
  |  |   17|  1.01k|    }
  ------------------
  518|  1.01k|    return true;
  519|  1.01k|}
parser.c:parse_change_trust:
  508|  2.02k|static bool parse_change_trust(buffer_t *buffer, change_trust_op_t *op) {
  509|  2.02k|    PARSER_CHECK(parse_change_trust_asset(buffer, &op->line))
  ------------------
  |  |   15|  2.02k|    {                           \
  |  |   16|  2.02k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 45, False: 1.98k]
  |  |  ------------------
  |  |   17|  2.02k|    }
  ------------------
  510|  1.98k|    PARSER_CHECK(parse_int64(buffer, &op->limit));
  ------------------
  |  |   15|  1.98k|    {                           \
  |  |   16|  1.98k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 1.97k]
  |  |  ------------------
  |  |   17|  1.98k|    }
  ------------------
  511|       |    // Limit cannot be negative
  512|  1.97k|    return op->limit >= 0;
  513|  1.98k|}
parser.c:parse_change_trust_asset:
  381|  2.02k|static bool parse_change_trust_asset(buffer_t *buffer, change_trust_asset_t *asset) {
  382|  2.02k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  2.02k|    {                           \
  |  |   16|  2.02k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 2.02k]
  |  |  ------------------
  |  |   17|  2.02k|    }
  ------------------
  383|  2.02k|    switch (asset->type) {
  384|    335|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (384:9): [True: 335, False: 1.68k]
  ------------------
  385|    335|            return true;
  386|      0|        }
  387|    911|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (387:9): [True: 911, False: 1.11k]
  ------------------
  388|    911|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  389|      0|        }
  390|    609|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (390:9): [True: 609, False: 1.41k]
  ------------------
  391|    609|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  392|      0|        }
  393|    160|        case ASSET_TYPE_POOL_SHARE: {
  ------------------
  |  Branch (393:9): [True: 160, False: 1.86k]
  ------------------
  394|    160|            return parse_liquidity_pool_parameters(buffer, &asset->liquidity_pool);
  395|      0|        }
  396|      8|        default:
  ------------------
  |  Branch (396:9): [True: 8, False: 2.01k]
  ------------------
  397|      8|            return false;  // unknown asset type
  398|  2.02k|    }
  399|  2.02k|}
parser.c:parse_liquidity_pool_parameters:
  366|    160|    liquidity_pool_parameters_t *liquidity_pool_parameters) {
  367|    160|    uint32_t liquidity_pool_type;
  368|    160|    PARSER_CHECK(parse_uint32(buffer, &liquidity_pool_type))
  ------------------
  |  |   15|    160|    {                           \
  |  |   16|    160|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 158]
  |  |  ------------------
  |  |   17|    160|    }
  ------------------
  369|    158|    switch (liquidity_pool_type) {
  370|    155|        case LIQUIDITY_POOL_CONSTANT_PRODUCT: {
  ------------------
  |  Branch (370:9): [True: 155, False: 3]
  ------------------
  371|    155|            PARSER_CHECK(parse_asset(buffer, &liquidity_pool_parameters->constant_product.asset_a))
  ------------------
  |  |   15|    155|    {                           \
  |  |   16|    155|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 150]
  |  |  ------------------
  |  |   17|    155|    }
  ------------------
  372|    150|            PARSER_CHECK(parse_asset(buffer, &liquidity_pool_parameters->constant_product.asset_b))
  ------------------
  |  |   15|    150|    {                           \
  |  |   16|    150|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 145]
  |  |  ------------------
  |  |   17|    150|    }
  ------------------
  373|    145|            PARSER_CHECK(parse_int32(buffer, &liquidity_pool_parameters->constant_product.fee))
  ------------------
  |  |   15|    145|    {                           \
  |  |   16|    145|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 142]
  |  |  ------------------
  |  |   17|    145|    }
  ------------------
  374|    142|            return true;
  375|    145|        }
  376|      3|        default:
  ------------------
  |  Branch (376:9): [True: 3, False: 155]
  ------------------
  377|      3|            return false;
  378|    158|    }
  379|    158|}
parser.c:parse_allow_trust:
  435|    638|static bool parse_allow_trust(buffer_t *buffer, allow_trust_op_t *op) {
  436|    638|    PARSER_CHECK(parse_account_id(buffer, &op->trustor))
  ------------------
  |  |   15|    638|    {                           \
  |  |   16|    638|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 633]
  |  |  ------------------
  |  |   17|    638|    }
  ------------------
  437|    633|    PARSER_CHECK(parse_uint32(buffer, &op->asset_type))
  ------------------
  |  |   15|    633|    {                           \
  |  |   16|    633|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 630]
  |  |  ------------------
  |  |   17|    633|    }
  ------------------
  438|       |
  439|    630|    switch (op->asset_type) {
  440|    308|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (440:9): [True: 308, False: 322]
  ------------------
  441|    308|            PARSER_CHECK(buffer_read_bytes(buffer, &op->asset_code, 4))
  ------------------
  |  |   15|    308|    {                           \
  |  |   16|    308|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 305]
  |  |  ------------------
  |  |   17|    308|    }
  ------------------
  442|    305|            break;
  443|    315|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (443:9): [True: 315, False: 315]
  ------------------
  444|    315|            PARSER_CHECK(buffer_read_bytes(buffer, &op->asset_code, 12))
  ------------------
  |  |   15|    315|    {                           \
  |  |   16|    315|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 307]
  |  |  ------------------
  |  |   17|    315|    }
  ------------------
  445|    307|            break;
  446|    307|        default:
  ------------------
  |  Branch (446:9): [True: 7, False: 623]
  ------------------
  447|      7|            return false;  // unknown asset type
  448|    630|    }
  449|       |
  450|    612|    PARSER_CHECK(parse_uint32(buffer, &op->authorize))
  ------------------
  |  |   15|    612|    {                           \
  |  |   16|    612|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 607]
  |  |  ------------------
  |  |   17|    612|    }
  ------------------
  451|    607|    return true;
  452|    612|}
parser.c:parse_account_merge:
  454|  4.71k|static bool parse_account_merge(buffer_t *buffer, account_merge_op_t *op) {
  455|  4.71k|    return parse_muxed_account(buffer, &op->destination);
  456|  4.71k|}
parser.c:parse_manage_data:
  458|  3.30k|static bool parse_manage_data(buffer_t *buffer, manage_data_op_t *op) {
  459|  3.30k|    PARSER_CHECK(
  ------------------
  |  |   15|  3.30k|    {                           \
  |  |   16|  3.30k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 3.30k]
  |  |  ------------------
  |  |   17|  3.30k|    }
  ------------------
  460|  3.30k|        parse_binary_string_ptr(buffer, &op->data_name, &op->data_name_size, DATA_NAME_MAX_SIZE))
  461|       |
  462|  3.30k|    bool has_value;
  463|  3.30k|    PARSER_CHECK(parse_bool(buffer, &has_value))
  ------------------
  |  |   15|  3.30k|    {                           \
  |  |   16|  3.30k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 3.29k]
  |  |  ------------------
  |  |   17|  3.30k|    }
  ------------------
  464|  3.29k|    if (has_value) {
  ------------------
  |  Branch (464:9): [True: 741, False: 2.54k]
  ------------------
  465|    741|        PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|    741|    {                           \
  |  |   16|    741|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 731]
  |  |  ------------------
  |  |   17|    741|    }
  ------------------
  466|    741|                                             &op->data_value,
  467|    741|                                             &op->data_value_size,
  468|    741|                                             DATA_VALUE_MAX_SIZE))
  469|  2.54k|    } else {
  470|  2.54k|        op->data_value_size = 0;
  471|  2.54k|    }
  472|  3.28k|    return true;
  473|  3.29k|}
parser.c:parse_bump_sequence:
  571|  1.63k|static bool parse_bump_sequence(buffer_t *buffer, bump_sequence_op_t *op) {
  572|  1.63k|    return parse_int64(buffer, &op->bump_to);
  573|  1.63k|}
parser.c:parse_manage_buy_offer:
  491|  1.62k|static bool parse_manage_buy_offer(buffer_t *buffer, manage_buy_offer_op_t *op) {
  492|  1.62k|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|  1.62k|    {                           \
  |  |   16|  1.62k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 17, False: 1.60k]
  |  |  ------------------
  |  |   17|  1.62k|    }
  ------------------
  493|  1.60k|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|  1.60k|    {                           \
  |  |   16|  1.60k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 1.59k]
  |  |  ------------------
  |  |   17|  1.60k|    }
  ------------------
  494|  1.59k|    PARSER_CHECK(parse_int64(buffer, &op->buy_amount))
  ------------------
  |  |   15|  1.59k|    {                           \
  |  |   16|  1.59k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 1.59k]
  |  |  ------------------
  |  |   17|  1.59k|    }
  ------------------
  495|  1.59k|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|  1.59k|    {                           \
  |  |   16|  1.59k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 1.58k]
  |  |  ------------------
  |  |   17|  1.59k|    }
  ------------------
  496|  1.58k|    PARSER_CHECK(parse_int64(buffer, &op->offer_id))
  ------------------
  |  |   15|  1.58k|    {                           \
  |  |   16|  1.58k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.58k]
  |  |  ------------------
  |  |   17|  1.58k|    }
  ------------------
  497|  1.58k|    return true;
  498|  1.58k|}
parser.c:parse_path_payment_strict_send:
  575|    325|static bool parse_path_payment_strict_send(buffer_t *buffer, path_payment_strict_send_op_t *op) {
  576|    325|    uint32_t path_len;
  577|       |
  578|    325|    PARSER_CHECK(parse_asset(buffer, &op->send_asset))
  ------------------
  |  |   15|    325|    {                           \
  |  |   16|    325|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 315]
  |  |  ------------------
  |  |   17|    325|    }
  ------------------
  579|    315|    PARSER_CHECK(parse_int64(buffer, &op->send_amount))
  ------------------
  |  |   15|    315|    {                           \
  |  |   16|    315|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 310]
  |  |  ------------------
  |  |   17|    315|    }
  ------------------
  580|    310|    PARSER_CHECK(parse_muxed_account(buffer, &op->destination))
  ------------------
  |  |   15|    310|    {                           \
  |  |   16|    310|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 307]
  |  |  ------------------
  |  |   17|    310|    }
  ------------------
  581|    307|    PARSER_CHECK(parse_asset(buffer, &op->dest_asset))
  ------------------
  |  |   15|    307|    {                           \
  |  |   16|    307|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 302]
  |  |  ------------------
  |  |   17|    307|    }
  ------------------
  582|    302|    PARSER_CHECK(parse_int64(buffer, &op->dest_min))
  ------------------
  |  |   15|    302|    {                           \
  |  |   16|    302|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 296]
  |  |  ------------------
  |  |   17|    302|    }
  ------------------
  583|    296|    PARSER_CHECK(parse_uint32(buffer, &path_len))
  ------------------
  |  |   15|    296|    {                           \
  |  |   16|    296|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 293]
  |  |  ------------------
  |  |   17|    296|    }
  ------------------
  584|    293|    if (path_len > PATH_PAYMENT_MAX_PATH_LENGTH) {
  ------------------
  |  |   35|    293|#define PATH_PAYMENT_MAX_PATH_LENGTH  5
  ------------------
  |  Branch (584:9): [True: 4, False: 289]
  ------------------
  585|      4|        return false;
  586|      4|    }
  587|    655|    for (uint32_t i = 0; i < path_len; i++) {
  ------------------
  |  Branch (587:26): [True: 382, False: 273]
  ------------------
  588|    382|        asset_t tmp_asset;
  589|    382|        PARSER_CHECK(parse_asset(buffer, &tmp_asset))
  ------------------
  |  |   15|    382|    {                           \
  |  |   16|    382|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 16, False: 366]
  |  |  ------------------
  |  |   17|    382|    }
  ------------------
  590|    382|    }
  591|    273|    return true;
  592|    289|}
parser.c:parse_create_claimable_balance:
  645|  1.99k|static bool parse_create_claimable_balance(buffer_t *buffer, create_claimable_balance_op_t *op) {
  646|  1.99k|    uint32_t claimant_len;
  647|  1.99k|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|  1.99k|    {                           \
  |  |   16|  1.99k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 1.98k]
  |  |  ------------------
  |  |   17|  1.99k|    }
  ------------------
  648|  1.98k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  1.98k|    {                           \
  |  |   16|  1.98k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.97k]
  |  |  ------------------
  |  |   17|  1.98k|    }
  ------------------
  649|  1.97k|    PARSER_CHECK(parse_uint32(buffer, &claimant_len))
  ------------------
  |  |   15|  1.97k|    {                           \
  |  |   16|  1.97k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.97k]
  |  |  ------------------
  |  |   17|  1.97k|    }
  ------------------
  650|  1.97k|    if (claimant_len > CLAIMANTS_MAX_LENGTH) {
  ------------------
  |  |   34|  1.97k|#define CLAIMANTS_MAX_LENGTH          10
  ------------------
  |  Branch (650:9): [True: 4, False: 1.96k]
  ------------------
  651|      4|        return false;
  652|      4|    }
  653|  1.96k|    op->claimant_len = claimant_len;
  654|  5.59k|    for (int i = 0; i < op->claimant_len; i++) {
  ------------------
  |  Branch (654:21): [True: 3.93k, False: 1.65k]
  ------------------
  655|  3.93k|        PARSER_CHECK(parse_claimant(buffer, &op->claimants[i]))
  ------------------
  |  |   15|  3.93k|    {                           \
  |  |   16|  3.93k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 312, False: 3.62k]
  |  |  ------------------
  |  |   17|  3.93k|    }
  ------------------
  656|  3.93k|    }
  657|  1.65k|    return true;
  658|  1.96k|}
parser.c:parse_claimant:
  633|  3.93k|static bool parse_claimant(buffer_t *buffer, claimant_t *claimant) {
  634|  3.93k|    PARSER_CHECK(parse_uint32(buffer, &claimant->type))
  ------------------
  |  |   15|  3.93k|    {                           \
  |  |   16|  3.93k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 61, False: 3.87k]
  |  |  ------------------
  |  |   17|  3.93k|    }
  ------------------
  635|  3.87k|    switch (claimant->type) {
  636|  3.82k|        case CLAIMANT_TYPE_V0:
  ------------------
  |  Branch (636:9): [True: 3.82k, False: 49]
  ------------------
  637|  3.82k|            PARSER_CHECK(parse_account_id(buffer, &claimant->v0.destination))
  ------------------
  |  |   15|  3.82k|    {                           \
  |  |   16|  3.82k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 3.80k]
  |  |  ------------------
  |  |   17|  3.82k|    }
  ------------------
  638|  3.80k|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|  3.80k|    {                           \
  |  |   16|  3.80k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 178, False: 3.62k]
  |  |  ------------------
  |  |   17|  3.80k|    }
  ------------------
  639|  3.62k|            return true;
  640|     49|        default:
  ------------------
  |  Branch (640:9): [True: 49, False: 3.82k]
  ------------------
  641|     49|            return false;
  642|  3.87k|    }
  643|  3.87k|}
parser.c:parse_claimant_predicate:
  594|  4.59k|static bool parse_claimant_predicate(buffer_t *buffer) {
  595|       |    // Currently, does not support displaying claimant details.
  596|       |    // So here we will not store the parsed data, just to ensure that the data can be parsed
  597|       |    // correctly.
  598|  4.59k|    uint32_t claim_predicate_type;
  599|  4.59k|    uint32_t predicates_len;
  600|  4.59k|    bool not_predicate_present;
  601|  4.59k|    int64_t abs_before;
  602|  4.59k|    int64_t rel_before;
  603|  4.59k|    PARSER_CHECK(parse_uint32(buffer, &claim_predicate_type))
  ------------------
  |  |   15|  4.59k|    {                           \
  |  |   16|  4.59k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 30, False: 4.56k]
  |  |  ------------------
  |  |   17|  4.59k|    }
  ------------------
  604|  4.56k|    switch (claim_predicate_type) {
  605|  3.33k|        case CLAIM_PREDICATE_UNCONDITIONAL:
  ------------------
  |  Branch (605:9): [True: 3.33k, False: 1.22k]
  ------------------
  606|  3.33k|            return true;
  607|    264|        case CLAIM_PREDICATE_AND:
  ------------------
  |  Branch (607:9): [True: 264, False: 4.29k]
  ------------------
  608|    435|        case CLAIM_PREDICATE_OR:
  ------------------
  |  Branch (608:9): [True: 171, False: 4.39k]
  ------------------
  609|    435|            PARSER_CHECK(parse_uint32(buffer, &predicates_len))
  ------------------
  |  |   15|    435|    {                           \
  |  |   16|    435|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 411]
  |  |  ------------------
  |  |   17|    435|    }
  ------------------
  610|    411|            if (predicates_len != 2) {
  ------------------
  |  Branch (610:17): [True: 61, False: 350]
  ------------------
  611|     61|                return false;
  612|     61|            }
  613|    350|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|    350|    {                           \
  |  |   16|    350|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 128, False: 222]
  |  |  ------------------
  |  |   17|    350|    }
  ------------------
  614|    222|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|    222|    {                           \
  |  |   16|    222|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 51, False: 171]
  |  |  ------------------
  |  |   17|    222|    }
  ------------------
  615|    171|            return true;
  616|    326|        case CLAIM_PREDICATE_NOT:
  ------------------
  |  Branch (616:9): [True: 326, False: 4.23k]
  ------------------
  617|    326|            PARSER_CHECK(parse_bool(buffer, &not_predicate_present))
  ------------------
  |  |   15|    326|    {                           \
  |  |   16|    326|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 317]
  |  |  ------------------
  |  |   17|    326|    }
  ------------------
  618|    317|            if (not_predicate_present) {
  ------------------
  |  Branch (618:17): [True: 218, False: 99]
  ------------------
  619|    218|                PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|    218|    {                           \
  |  |   16|    218|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 207]
  |  |  ------------------
  |  |   17|    218|    }
  ------------------
  620|    218|            }
  621|    306|            return true;
  622|    313|        case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:
  ------------------
  |  Branch (622:9): [True: 313, False: 4.24k]
  ------------------
  623|    313|            PARSER_CHECK(parse_int64(buffer, &abs_before))
  ------------------
  |  |   15|    313|    {                           \
  |  |   16|    313|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 304]
  |  |  ------------------
  |  |   17|    313|    }
  ------------------
  624|    304|            return true;
  625|    114|        case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:
  ------------------
  |  Branch (625:9): [True: 114, False: 4.44k]
  ------------------
  626|    114|            PARSER_CHECK(parse_int64(buffer, &rel_before))
  ------------------
  |  |   15|    114|    {                           \
  |  |   16|    114|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 105]
  |  |  ------------------
  |  |   17|    114|    }
  ------------------
  627|    105|            return true;
  628|     36|        default:
  ------------------
  |  Branch (628:9): [True: 36, False: 4.52k]
  ------------------
  629|     36|            return false;
  630|  4.56k|    }
  631|  4.56k|}
parser.c:parse_claim_claimable_balance:
  673|  2.02k|static bool parse_claim_claimable_balance(buffer_t *buffer, claim_claimable_balance_op_t *op) {
  674|  2.02k|    PARSER_CHECK(parse_claimable_balance_id(buffer, &op->balance_id))
  ------------------
  |  |   15|  2.02k|    {                           \
  |  |   16|  2.02k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 2.01k]
  |  |  ------------------
  |  |   17|  2.02k|    }
  ------------------
  675|  2.01k|    return true;
  676|  2.02k|}
parser.c:parse_claimable_balance_id:
  661|  3.58k|                                       claimable_balance_id_t *claimable_balance_id_t) {
  662|  3.58k|    PARSER_CHECK(parse_uint32(buffer, &claimable_balance_id_t->type))
  ------------------
  |  |   15|  3.58k|    {                           \
  |  |   16|  3.58k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 3.58k]
  |  |  ------------------
  |  |   17|  3.58k|    }
  ------------------
  663|  3.58k|    switch (claimable_balance_id_t->type) {
  664|  3.56k|        case CLAIMABLE_BALANCE_ID_TYPE_V0:
  ------------------
  |  Branch (664:9): [True: 3.56k, False: 12]
  ------------------
  665|  3.56k|            PARSER_CHECK(
  ------------------
  |  |   15|  3.56k|    {                           \
  |  |   16|  3.56k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 3.56k]
  |  |  ------------------
  |  |   17|  3.56k|    }
  ------------------
  666|  3.56k|                buffer_read_bytes(buffer, &claimable_balance_id_t->v0, CLAIMABLE_BALANCE_ID_SIZE))
  667|  3.56k|            return true;
  668|     12|        default:
  ------------------
  |  Branch (668:9): [True: 12, False: 3.56k]
  ------------------
  669|     12|            return false;
  670|  3.58k|    }
  671|  3.58k|}
parser.c:parse_begin_sponsoring_future_reserves:
  679|  5.88k|                                                   begin_sponsoring_future_reserves_op_t *op) {
  680|  5.88k|    PARSER_CHECK(parse_account_id(buffer, &op->sponsored_id))
  ------------------
  |  |   15|  5.88k|    {                           \
  |  |   16|  5.88k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 5.86k]
  |  |  ------------------
  |  |   17|  5.88k|    }
  ------------------
  681|  5.86k|    return true;
  682|  5.88k|}
parser.c:parse_revoke_sponsorship:
  849|  17.4k|static bool parse_revoke_sponsorship(buffer_t *buffer, revoke_sponsorship_op_t *op) {
  850|  17.4k|    PARSER_CHECK(parse_uint32(buffer, &op->type))
  ------------------
  |  |   15|  17.4k|    {                           \
  |  |   16|  17.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 17.4k]
  |  |  ------------------
  |  |   17|  17.4k|    }
  ------------------
  851|  17.4k|    switch (op->type) {
  852|  10.7k|        case REVOKE_SPONSORSHIP_LEDGER_ENTRY:
  ------------------
  |  Branch (852:9): [True: 10.7k, False: 6.67k]
  ------------------
  853|  10.7k|            PARSER_CHECK(parse_ledger_key(buffer, &op->ledger_key))
  ------------------
  |  |   15|  10.7k|    {                           \
  |  |   16|  10.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 106, False: 10.6k]
  |  |  ------------------
  |  |   17|  10.7k|    }
  ------------------
  854|  10.6k|            return true;
  855|  6.67k|        case REVOKE_SPONSORSHIP_SIGNER:
  ------------------
  |  Branch (855:9): [True: 6.67k, False: 10.7k]
  ------------------
  856|  6.67k|            PARSER_CHECK(parse_account_id(buffer, &op->signer.account_id))
  ------------------
  |  |   15|  6.67k|    {                           \
  |  |   16|  6.67k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 6.66k]
  |  |  ------------------
  |  |   17|  6.67k|    }
  ------------------
  857|  6.66k|            PARSER_CHECK(parse_signer_key(buffer, &op->signer.signer_key))
  ------------------
  |  |   15|  6.66k|    {                           \
  |  |   16|  6.66k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 6.65k]
  |  |  ------------------
  |  |   17|  6.66k|    }
  ------------------
  858|  6.65k|            return true;
  859|      4|        default:
  ------------------
  |  Branch (859:9): [True: 4, False: 17.4k]
  ------------------
  860|      4|            return false;
  861|  17.4k|    }
  862|  17.4k|}
parser.c:parse_ledger_key:
  813|  10.7k|static bool parse_ledger_key(buffer_t *buffer, ledger_key_t *ledger_key) {
  814|  10.7k|    PARSER_CHECK(parse_uint32(buffer, &ledger_key->type))
  ------------------
  |  |   15|  10.7k|    {                           \
  |  |   16|  10.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 10.7k]
  |  |  ------------------
  |  |   17|  10.7k|    }
  ------------------
  815|  10.7k|    switch (ledger_key->type) {
  816|  2.27k|        case ACCOUNT:
  ------------------
  |  Branch (816:9): [True: 2.27k, False: 8.50k]
  ------------------
  817|  2.27k|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->account.account_id))
  ------------------
  |  |   15|  2.27k|    {                           \
  |  |   16|  2.27k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 2.25k]
  |  |  ------------------
  |  |   17|  2.27k|    }
  ------------------
  818|  2.25k|            return true;
  819|  1.91k|        case TRUSTLINE:
  ------------------
  |  Branch (819:9): [True: 1.91k, False: 8.86k]
  ------------------
  820|  1.91k|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->trust_line.account_id))
  ------------------
  |  |   15|  1.91k|    {                           \
  |  |   16|  1.91k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.91k]
  |  |  ------------------
  |  |   17|  1.91k|    }
  ------------------
  821|  1.91k|            PARSER_CHECK(parse_trust_line_asset(buffer, &ledger_key->trust_line.asset))
  ------------------
  |  |   15|  1.91k|    {                           \
  |  |   16|  1.91k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 42, False: 1.87k]
  |  |  ------------------
  |  |   17|  1.91k|    }
  ------------------
  822|  1.87k|            return true;
  823|    606|        case OFFER:
  ------------------
  |  Branch (823:9): [True: 606, False: 10.1k]
  ------------------
  824|    606|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->offer.seller_id))
  ------------------
  |  |   15|    606|    {                           \
  |  |   16|    606|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 597]
  |  |  ------------------
  |  |   17|    606|    }
  ------------------
  825|    597|            PARSER_CHECK(parse_int64(buffer, &ledger_key->offer.offer_id))
  ------------------
  |  |   15|    597|    {                           \
  |  |   16|    597|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 594]
  |  |  ------------------
  |  |   17|    597|    }
  ------------------
  826|    594|            return true;
  827|  1.99k|        case DATA:
  ------------------
  |  Branch (827:9): [True: 1.99k, False: 8.78k]
  ------------------
  828|  1.99k|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->data.account_id))
  ------------------
  |  |   15|  1.99k|    {                           \
  |  |   16|  1.99k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 1.98k]
  |  |  ------------------
  |  |   17|  1.99k|    }
  ------------------
  829|  1.98k|            PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  1.98k|    {                           \
  |  |   16|  1.98k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.98k]
  |  |  ------------------
  |  |   17|  1.98k|    }
  ------------------
  830|  1.98k|                                                 &ledger_key->data.data_name,
  831|  1.98k|                                                 &ledger_key->data.data_name_size,
  832|  1.98k|                                                 DATA_NAME_MAX_SIZE))
  833|  1.98k|            return true;
  834|    632|        case CLAIMABLE_BALANCE:
  ------------------
  |  Branch (834:9): [True: 632, False: 10.1k]
  ------------------
  835|    632|            PARSER_CHECK(
  ------------------
  |  |   15|    632|    {                           \
  |  |   16|    632|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 628]
  |  |  ------------------
  |  |   17|    632|    }
  ------------------
  836|    632|                parse_claimable_balance_id(buffer, &ledger_key->claimable_balance.balance_id))
  837|    628|            return true;
  838|  3.34k|        case LIQUIDITY_POOL:
  ------------------
  |  Branch (838:9): [True: 3.34k, False: 7.43k]
  ------------------
  839|  3.34k|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|  3.34k|    {                           \
  |  |   16|  3.34k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 3.34k]
  |  |  ------------------
  |  |   17|  3.34k|    }
  ------------------
  840|  3.34k|                                           &ledger_key->liquidity_pool.liquidity_pool_id,
  841|  3.34k|                                           LIQUIDITY_POOL_ID_SIZE))
  842|       |
  843|  3.34k|            return true;
  844|      6|        default:
  ------------------
  |  Branch (844:9): [True: 6, False: 10.7k]
  ------------------
  845|      6|            return false;
  846|  10.7k|    }
  847|  10.7k|}
parser.c:parse_trust_line_asset:
  342|  1.91k|static bool parse_trust_line_asset(buffer_t *buffer, trust_line_asset_t *asset) {
  343|  1.91k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  1.91k|    {                           \
  |  |   16|  1.91k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.91k]
  |  |  ------------------
  |  |   17|  1.91k|    }
  ------------------
  344|  1.91k|    switch (asset->type) {
  345|  1.22k|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (345:9): [True: 1.22k, False: 687]
  ------------------
  346|  1.22k|            return true;
  347|      0|        }
  348|    113|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (348:9): [True: 113, False: 1.79k]
  ------------------
  349|    113|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  350|      0|        }
  351|    165|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (351:9): [True: 165, False: 1.74k]
  ------------------
  352|    165|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  353|      0|        }
  354|    398|        case ASSET_TYPE_POOL_SHARE: {
  ------------------
  |  Branch (354:9): [True: 398, False: 1.51k]
  ------------------
  355|    398|            PARSER_CHECK(
  ------------------
  |  |   15|    398|    {                           \
  |  |   16|    398|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 391]
  |  |  ------------------
  |  |   17|    398|    }
  ------------------
  356|    398|                buffer_read_bytes(buffer, &asset->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  357|    391|            return true;
  358|    398|        }
  359|     11|        default:
  ------------------
  |  Branch (359:9): [True: 11, False: 1.90k]
  ------------------
  360|     11|            return false;  // unknown asset type
  361|  1.91k|    }
  362|  1.91k|}
parser.c:parse_clawback:
  864|    580|static bool parse_clawback(buffer_t *buffer, clawback_op_t *op) {
  865|    580|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|    580|    {                           \
  |  |   16|    580|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 560]
  |  |  ------------------
  |  |   17|    580|    }
  ------------------
  866|    560|    PARSER_CHECK(parse_muxed_account(buffer, &op->from))
  ------------------
  |  |   15|    560|    {                           \
  |  |   16|    560|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 556]
  |  |  ------------------
  |  |   17|    560|    }
  ------------------
  867|    556|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    556|    {                           \
  |  |   16|    556|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 553]
  |  |  ------------------
  |  |   17|    556|    }
  ------------------
  868|    553|    return true;
  869|    556|}
parser.c:parse_clawback_claimable_balance:
  872|    933|                                             clawback_claimable_balance_op_t *op) {
  873|    933|    PARSER_CHECK(parse_claimable_balance_id(buffer, &op->balance_id))
  ------------------
  |  |   15|    933|    {                           \
  |  |   16|    933|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 920]
  |  |  ------------------
  |  |   17|    933|    }
  ------------------
  874|    920|    return true;
  875|    933|}
parser.c:parse_set_trust_line_flags:
  877|  8.71k|static bool parse_set_trust_line_flags(buffer_t *buffer, set_trust_line_flags_op_t *op) {
  878|  8.71k|    PARSER_CHECK(parse_account_id(buffer, &op->trustor))
  ------------------
  |  |   15|  8.71k|    {                           \
  |  |   16|  8.71k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 8.70k]
  |  |  ------------------
  |  |   17|  8.71k|    }
  ------------------
  879|  8.70k|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|  8.70k|    {                           \
  |  |   16|  8.70k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 8.69k]
  |  |  ------------------
  |  |   17|  8.70k|    }
  ------------------
  880|  8.69k|    PARSER_CHECK(parse_uint32(buffer, &op->clear_flags))
  ------------------
  |  |   15|  8.69k|    {                           \
  |  |   16|  8.69k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 8.69k]
  |  |  ------------------
  |  |   17|  8.69k|    }
  ------------------
  881|  8.69k|    PARSER_CHECK(parse_uint32(buffer, &op->set_flags))
  ------------------
  |  |   15|  8.69k|    {                           \
  |  |   16|  8.69k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 8.68k]
  |  |  ------------------
  |  |   17|  8.69k|    }
  ------------------
  882|  8.68k|    return true;
  883|  8.69k|}
parser.c:parse_liquidity_pool_deposit:
  885|    257|static bool parse_liquidity_pool_deposit(buffer_t *buffer, liquidity_pool_deposit_op_t *op) {
  886|    257|    PARSER_CHECK(buffer_read_bytes(buffer, &op->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  ------------------
  |  |   15|    257|    {                           \
  |  |   16|    257|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 244]
  |  |  ------------------
  |  |   17|    257|    }
  ------------------
  887|    244|    PARSER_CHECK(parse_int64(buffer, &op->max_amount_a))
  ------------------
  |  |   15|    244|    {                           \
  |  |   16|    244|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 241]
  |  |  ------------------
  |  |   17|    244|    }
  ------------------
  888|    241|    PARSER_CHECK(parse_int64(buffer, &op->max_amount_b))
  ------------------
  |  |   15|    241|    {                           \
  |  |   16|    241|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 239]
  |  |  ------------------
  |  |   17|    241|    }
  ------------------
  889|    239|    PARSER_CHECK(parse_price(buffer, &op->min_price))
  ------------------
  |  |   15|    239|    {                           \
  |  |   16|    239|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 236]
  |  |  ------------------
  |  |   17|    239|    }
  ------------------
  890|    236|    PARSER_CHECK(parse_price(buffer, &op->max_price))
  ------------------
  |  |   15|    236|    {                           \
  |  |   16|    236|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 229]
  |  |  ------------------
  |  |   17|    236|    }
  ------------------
  891|    229|    return true;
  892|    236|}
parser.c:parse_liquidity_pool_withdraw:
  894|  1.71k|static bool parse_liquidity_pool_withdraw(buffer_t *buffer, liquidity_pool_withdraw_op_t *op) {
  895|  1.71k|    PARSER_CHECK(buffer_read_bytes(buffer, &op->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  ------------------
  |  |   15|  1.71k|    {                           \
  |  |   16|  1.71k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 1.69k]
  |  |  ------------------
  |  |   17|  1.71k|    }
  ------------------
  896|  1.69k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  1.69k|    {                           \
  |  |   16|  1.69k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.69k]
  |  |  ------------------
  |  |   17|  1.69k|    }
  ------------------
  897|  1.69k|    PARSER_CHECK(parse_int64(buffer, &op->min_amount_a))
  ------------------
  |  |   15|  1.69k|    {                           \
  |  |   16|  1.69k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 1.69k]
  |  |  ------------------
  |  |   17|  1.69k|    }
  ------------------
  898|  1.69k|    PARSER_CHECK(parse_int64(buffer, &op->min_amount_b))
  ------------------
  |  |   15|  1.69k|    {                           \
  |  |   16|  1.69k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.69k]
  |  |  ------------------
  |  |   17|  1.69k|    }
  ------------------
  899|  1.69k|    return true;
  900|  1.69k|}
parser.c:parse_invoke_host_function:
 1035|  6.89k|static bool parse_invoke_host_function(buffer_t *buffer, invoke_host_function_op_t *op) {
 1036|       |    // hostFunction
 1037|  6.89k|    PARSER_CHECK(parse_uint32(buffer, &op->host_function_type));
  ------------------
  |  |   15|  6.89k|    {                           \
  |  |   16|  6.89k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 6.89k]
  |  |  ------------------
  |  |   17|  6.89k|    }
  ------------------
 1038|  6.89k|    PRINTF("host_function_type=%d\n", op->host_function_type);
 1039|  6.89k|    switch (op->host_function_type) {
 1040|  3.63k|        case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:
  ------------------
  |  Branch (1040:9): [True: 3.63k, False: 3.25k]
  ------------------
 1041|  3.63k|            PARSER_CHECK(parse_invoke_contract_args(buffer, &op->invoke_contract_args))
  ------------------
  |  |   15|  3.63k|    {                           \
  |  |   16|  3.63k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 157, False: 3.47k]
  |  |  ------------------
  |  |   17|  3.63k|    }
  ------------------
 1042|  3.47k|            break;
 1043|  3.47k|        case HOST_FUNCTION_TYPE_CREATE_CONTRACT:
  ------------------
  |  Branch (1043:9): [True: 1.91k, False: 4.97k]
  ------------------
 1044|  1.91k|            PARSER_CHECK(read_create_contract_args_advance(buffer))
  ------------------
  |  |   15|  1.91k|    {                           \
  |  |   16|  1.91k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 84, False: 1.82k]
  |  |  ------------------
  |  |   17|  1.91k|    }
  ------------------
 1045|  1.82k|            break;
 1046|  1.82k|        case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM: {
  ------------------
  |  Branch (1046:9): [True: 1.34k, False: 5.54k]
  ------------------
 1047|  1.34k|            size_t data_size = 0;
 1048|  1.34k|            PARSER_CHECK(parse_uint32(buffer, &data_size))
  ------------------
  |  |   15|  1.34k|    {                           \
  |  |   16|  1.34k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.33k]
  |  |  ------------------
  |  |   17|  1.34k|    }
  ------------------
 1049|  1.33k|            PARSER_CHECK(num_bytes(data_size, &data_size))
  ------------------
  |  |   15|  1.33k|    {                           \
  |  |   16|  1.33k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 1.33k]
  |  |  ------------------
  |  |   17|  1.33k|    }
  ------------------
 1050|  1.33k|            PARSER_CHECK(buffer_advance(buffer, data_size))
  ------------------
  |  |   15|  1.33k|    {                           \
  |  |   16|  1.33k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.33k]
  |  |  ------------------
  |  |   17|  1.33k|    }
  ------------------
 1051|  1.33k|            break;
 1052|  1.33k|        }
 1053|  1.33k|        default:
  ------------------
  |  Branch (1053:9): [True: 4, False: 6.88k]
  ------------------
 1054|      4|            return false;
 1055|  6.89k|    }
 1056|       |
 1057|       |    // auth<>
 1058|  6.63k|    uint32_t auth_len;
 1059|  6.63k|    uint8_t sub_invocations_count = 0;
 1060|  6.63k|    PARSER_CHECK(parse_uint32(buffer, &auth_len))
  ------------------
  |  |   15|  6.63k|    {                           \
  |  |   16|  6.63k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 28, False: 6.60k]
  |  |  ------------------
  |  |   17|  6.63k|    }
  ------------------
 1061|  8.71k|    for (uint32_t i = 0; i < auth_len; i++) {
  ------------------
  |  Branch (1061:26): [True: 2.66k, False: 6.05k]
  ------------------
 1062|       |        // PARSER_CHECK(read_soroban_authorization_entry_advance(buffer,
 1063|       |        //                                                       &sub_invocations_count,
 1064|       |        //                                                       op->sub_invocation_positions))
 1065|       |        // PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, count, positions))
 1066|       |        // 1. read credentials
 1067|  2.66k|        uint32_t credentials_type;
 1068|  2.66k|        PARSER_CHECK(read_parse_soroban_credentials_advance(buffer, &credentials_type))
  ------------------
  |  |   15|  2.66k|    {                           \
  |  |   16|  2.66k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 147, False: 2.51k]
  |  |  ------------------
  |  |   17|  2.66k|    }
  ------------------
 1069|       |        // 2. read rootInvocation.function
 1070|  2.51k|        PARSER_CHECK(read_soroban_authorized_function_advance(buffer))
  ------------------
  |  |   15|  2.51k|    {                           \
  |  |   16|  2.51k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 153, False: 2.36k]
  |  |  ------------------
  |  |   17|  2.51k|    }
  ------------------
 1071|       |        // 3. read rootInvocation.subInvocations
 1072|       |        // subInvocations
 1073|  2.36k|        uint32_t len;
 1074|  2.36k|        PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  2.36k|    {                           \
  |  |   16|  2.36k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 2.35k]
  |  |  ------------------
  |  |   17|  2.36k|    }
  ------------------
 1075|  4.29k|        for (uint32_t j = 0; j < len; j++) {
  ------------------
  |  Branch (1075:30): [True: 2.18k, False: 2.10k]
  ------------------
 1076|  2.18k|            if (credentials_type == SOROBAN_CREDENTIALS_SOURCE_ACCOUNT) {
  ------------------
  |  Branch (1076:17): [True: 1.23k, False: 949]
  ------------------
 1077|  1.23k|                PARSER_CHECK(
  ------------------
  |  |   15|  1.23k|    {                           \
  |  |   16|  1.23k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 97, False: 1.13k]
  |  |  ------------------
  |  |   17|  1.23k|    }
  ------------------
 1078|  1.23k|                    read_soroban_authorized_invocation_advance(buffer,
 1079|  1.23k|                                                               &sub_invocations_count,
 1080|  1.23k|                                                               op->sub_invocation_positions))
 1081|  1.23k|            } else {
 1082|    949|                PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, NULL, NULL))
  ------------------
  |  |   15|    949|    {                           \
  |  |   16|    949|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 150, False: 799]
  |  |  ------------------
  |  |   17|    949|    }
  ------------------
 1083|    949|            }
 1084|  2.18k|        }
 1085|  2.35k|    }
 1086|  6.05k|    op->sub_invocations_count = sub_invocations_count;
 1087|       |
 1088|  6.05k|    PRINTF("sub_invocations_count=%d\n", sub_invocations_count);
 1089|       |    // for (uint8_t i = 0; i < 16; i++) {
 1090|       |    //     PRINTF("sub_invocation_positions[%d]=%d\n", i, op->sub_invocation_positions[i]);
 1091|       |    // }
 1092|  6.05k|    return true;
 1093|  6.60k|}
parser.c:read_parse_soroban_credentials_advance:
  917|  2.66k|static bool read_parse_soroban_credentials_advance(buffer_t *buffer, uint32_t *credentials_type) {
  918|  2.66k|    PARSER_CHECK(parse_uint32(buffer, credentials_type))
  ------------------
  |  |   15|  2.66k|    {                           \
  |  |   16|  2.66k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 39, False: 2.62k]
  |  |  ------------------
  |  |   17|  2.66k|    }
  ------------------
  919|  2.62k|    switch (*credentials_type) {
  920|  2.19k|        case SOROBAN_CREDENTIALS_SOURCE_ACCOUNT:
  ------------------
  |  Branch (920:9): [True: 2.19k, False: 426]
  ------------------
  921|       |            // void
  922|  2.19k|            break;
  923|    379|        case SOROBAN_CREDENTIALS_ADDRESS: {
  ------------------
  |  Branch (923:9): [True: 379, False: 2.24k]
  ------------------
  924|    379|            sc_address_t address;
  925|    379|            PARSER_CHECK(parse_sc_address(buffer, &address))
  ------------------
  |  |   15|    379|    {                           \
  |  |   16|    379|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 21, False: 358]
  |  |  ------------------
  |  |   17|    379|    }
  ------------------
  926|       |            PARSER_CHECK(buffer_advance(buffer, 8))   // nonce
  ------------------
  |  |   15|    358|    {                           \
  |  |   16|    358|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 349]
  |  |  ------------------
  |  |   17|    358|    }
  ------------------
  927|       |            PARSER_CHECK(buffer_advance(buffer, 4))   // signatureExpirationLedger
  ------------------
  |  |   15|    349|    {                           \
  |  |   16|    349|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 335]
  |  |  ------------------
  |  |   17|    349|    }
  ------------------
  928|       |            PARSER_CHECK(read_scval_advance(buffer))  // signature
  ------------------
  |  |   15|    335|    {                           \
  |  |   16|    335|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 17, False: 318]
  |  |  ------------------
  |  |   17|    335|    }
  ------------------
  929|    318|            break;
  930|    335|        }
  931|    318|        default:
  ------------------
  |  Branch (931:9): [True: 47, False: 2.57k]
  ------------------
  932|     47|            return false;
  933|  2.62k|    }
  934|  2.51k|    return true;
  935|  2.62k|}
parser.c:read_soroban_authorized_function_advance:
  994|  21.3k|static bool read_soroban_authorized_function_advance(buffer_t *buffer) {
  995|  21.3k|    uint32_t type;
  996|  21.3k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  21.3k|    {                           \
  |  |   16|  21.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 242, False: 21.0k]
  |  |  ------------------
  |  |   17|  21.3k|    }
  ------------------
  997|  21.0k|    switch (type) {
  998|  19.8k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN: {
  ------------------
  |  Branch (998:9): [True: 19.8k, False: 1.20k]
  ------------------
  999|       |            // contractFn
 1000|  19.8k|            invoke_contract_args_t args;
 1001|  19.8k|            PARSER_CHECK(parse_invoke_contract_args(buffer, &args));
  ------------------
  |  |   15|  19.8k|    {                           \
  |  |   16|  19.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 617, False: 19.2k]
  |  |  ------------------
  |  |   17|  19.8k|    }
  ------------------
 1002|  19.2k|            break;
 1003|  19.8k|        }
 1004|    927|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1004:9): [True: 927, False: 20.1k]
  ------------------
 1005|       |            // createContractHostFn
 1006|    927|            PARSER_CHECK(read_create_contract_args_advance(buffer));
  ------------------
  |  |   15|    927|    {                           \
  |  |   16|    927|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 117, False: 810]
  |  |  ------------------
  |  |   17|    927|    }
  ------------------
 1007|    810|            break;
 1008|    279|        default:
  ------------------
  |  Branch (1008:9): [True: 279, False: 20.7k]
  ------------------
 1009|    279|            return false;
 1010|  21.0k|    }
 1011|  20.0k|    return true;
 1012|  21.0k|}
parser.c:parse_extend_footprint_ttl:
 1095|  1.01k|static bool parse_extend_footprint_ttl(buffer_t *buffer, extend_footprint_ttl_op_t *op) {
 1096|  1.01k|    PARSER_CHECK(parse_extension_point_v0(buffer))
  ------------------
  |  |   15|  1.01k|    {                           \
  |  |   16|  1.01k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.01k]
  |  |  ------------------
  |  |   17|  1.01k|    }
  ------------------
 1097|  1.01k|    PARSER_CHECK(parse_uint32(buffer, &op->extend_to))
  ------------------
  |  |   15|  1.01k|    {                           \
  |  |   16|  1.01k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.00k]
  |  |  ------------------
  |  |   17|  1.01k|    }
  ------------------
 1098|  1.00k|    return true;
 1099|  1.01k|}
parser.c:parse_extension_point_v0:
  902|  3.90k|static bool parse_extension_point_v0(buffer_t *buffer) {
  903|  3.90k|    uint32_t v;
  904|  3.90k|    PARSER_CHECK(parse_uint32(buffer, &v))
  ------------------
  |  |   15|  3.90k|    {                           \
  |  |   16|  3.90k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 3.89k]
  |  |  ------------------
  |  |   17|  3.90k|    }
  ------------------
  905|  3.89k|    if (v != 0) {
  ------------------
  |  Branch (905:9): [True: 11, False: 3.88k]
  ------------------
  906|     11|        return false;
  907|     11|    }
  908|  3.88k|    return true;
  909|  3.89k|}
parser.c:parse_restore_footprint:
  911|  2.88k|static bool parse_restore_footprint(buffer_t *buffer, restore_footprint_op_t *op) {
  912|  2.88k|    (void) op;
  913|  2.88k|    PARSER_CHECK(parse_extension_point_v0(buffer))
  ------------------
  |  |   15|  2.88k|    {                           \
  |  |   16|  2.88k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 2.87k]
  |  |  ------------------
  |  |   17|  2.88k|    }
  ------------------
  914|  2.87k|    return true;
  915|  2.88k|}
parser.c:parse_invoke_contract_args:
  962|  51.4k|static bool parse_invoke_contract_args(buffer_t *buffer, invoke_contract_args_t *args) {
  963|       |    // contractAddress
  964|  51.4k|    PARSER_CHECK(parse_sc_address(buffer, &args->address))
  ------------------
  |  |   15|  51.4k|    {                           \
  |  |   16|  51.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.46k, False: 49.9k]
  |  |  ------------------
  |  |   17|  51.4k|    }
  ------------------
  965|       |    // functionName
  966|  49.9k|    PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  49.9k|    {                           \
  |  |   16|  49.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.73k, False: 48.2k]
  |  |  ------------------
  |  |   17|  49.9k|    }
  ------------------
  967|  49.9k|                                         &args->function.name,
  968|  49.9k|                                         &args->function.name_size,
  969|  49.9k|                                         SCV_SYMBOL_MAX_SIZE))
  970|       |
  971|       |    // args
  972|  48.2k|    uint32_t args_len;
  973|  48.2k|    PARSER_CHECK(parse_uint32(buffer, &args_len))
  ------------------
  |  |   15|  48.2k|    {                           \
  |  |   16|  48.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 39, False: 48.2k]
  |  |  ------------------
  |  |   17|  48.2k|    }
  ------------------
  974|       |
  975|  48.2k|    args->parameters_length = args_len;
  976|  48.2k|    args->parameters_position = buffer->offset;
  977|       |
  978|  48.2k|    if (args_len > HOST_FUNCTION_ARGS_MAX_LENGTH) {
  ------------------
  |  |   36|  48.2k|#define HOST_FUNCTION_ARGS_MAX_LENGTH 10
  ------------------
  |  Branch (978:9): [True: 691, False: 47.5k]
  ------------------
  979|       |        // We dont support more than 10 arguments
  980|    691|        return false;
  981|    691|    }
  982|       |
  983|       |    // PRINTF("function_name.text_size=%d, function_name.text=%s, args->parameters_length=%d\n",
  984|       |    //        args->function.name_size,
  985|       |    //        args->function.name,
  986|       |    //        args->parameters_length);
  987|       |
  988|   119k|    for (uint32_t i = 0; i < args_len; i++) {
  ------------------
  |  Branch (988:26): [True: 81.5k, False: 38.4k]
  ------------------
  989|  81.5k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  81.5k|    {                           \
  |  |   16|  81.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9.08k, False: 72.4k]
  |  |  ------------------
  |  |   17|  81.5k|    }
  ------------------
  990|  81.5k|    }
  991|  38.4k|    return true;
  992|  47.5k|}
parser.c:read_create_contract_args_advance:
  937|  3.35k|static bool read_create_contract_args_advance(buffer_t *buffer) {
  938|       |    // contract_id_preimage
  939|  3.35k|    uint32_t type;
  940|  3.35k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  3.35k|    {                           \
  |  |   16|  3.35k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 3.33k]
  |  |  ------------------
  |  |   17|  3.35k|    }
  ------------------
  941|  3.33k|    switch (type) {
  942|  2.88k|        case CONTRACT_ID_PREIMAGE_FROM_ADDRESS: {
  ------------------
  |  |  489|  2.88k|#define CONTRACT_ID_PREIMAGE_FROM_ADDRESS 0
  ------------------
  |  Branch (942:9): [True: 2.88k, False: 451]
  ------------------
  943|  2.88k|            sc_address_t address;
  944|  2.88k|            PARSER_CHECK(parse_sc_address(buffer, &address))
  ------------------
  |  |   15|  2.88k|    {                           \
  |  |   16|  2.88k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 21, False: 2.86k]
  |  |  ------------------
  |  |   17|  2.88k|    }
  ------------------
  945|       |            PARSER_CHECK(buffer_advance(buffer, 32))  // salt
  ------------------
  |  |   15|  2.86k|    {                           \
  |  |   16|  2.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 2.85k]
  |  |  ------------------
  |  |   17|  2.86k|    }
  ------------------
  946|  2.85k|            break;
  947|  2.86k|        }
  948|  2.85k|        case CONTRACT_ID_PREIMAGE_FROM_ASSET: {
  ------------------
  |  |  490|    418|#define CONTRACT_ID_PREIMAGE_FROM_ASSET   1
  ------------------
  |  Branch (948:9): [True: 418, False: 2.92k]
  ------------------
  949|    418|            asset_t asset;
  950|    418|            PARSER_CHECK(parse_asset(buffer, &asset))
  ------------------
  |  |   15|    418|    {                           \
  |  |   16|    418|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 75, False: 343]
  |  |  ------------------
  |  |   17|    418|    }
  ------------------
  951|    343|            break;
  952|    418|        }
  953|    343|        default:
  ------------------
  |  Branch (953:9): [True: 33, False: 3.30k]
  ------------------
  954|     33|            return false;
  955|  3.33k|    }
  956|       |
  957|       |    // executable
  958|  3.19k|    PARSER_CHECK(read_contract_executable_advance(buffer))
  ------------------
  |  |   15|  3.19k|    {                           \
  |  |   16|  3.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 84, False: 3.11k]
  |  |  ------------------
  |  |   17|  3.19k|    }
  ------------------
  959|  3.11k|    return true;
  960|  3.19k|}
parser.c:read_soroban_authorized_invocation_advance:
 1016|  18.8k|                                                       size_t *positions) {
 1017|  18.8k|    if (count != NULL && positions != NULL) {
  ------------------
  |  Branch (1017:9): [True: 17.8k, False: 1.03k]
  |  Branch (1017:26): [True: 17.8k, False: 0]
  ------------------
 1018|  17.8k|        if (*count >= MAX_SUB_INVOCATIONS_SIZE) {
  ------------------
  |  |   44|  17.8k|#define MAX_SUB_INVOCATIONS_SIZE 16
  ------------------
  |  Branch (1018:13): [True: 46, False: 17.7k]
  ------------------
 1019|     46|            return false;
 1020|     46|        }
 1021|  17.7k|        positions[(*count)++] = buffer->offset;
 1022|  17.7k|    }
 1023|       |    // function
 1024|  18.8k|    PARSER_CHECK(read_soroban_authorized_function_advance(buffer))
  ------------------
  |  |   15|  18.8k|    {                           \
  |  |   16|  18.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.10k, False: 17.6k]
  |  |  ------------------
  |  |   17|  18.8k|    }
  ------------------
 1025|       |
 1026|       |    // subInvocations
 1027|  17.6k|    uint32_t len;
 1028|  17.6k|    PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  17.6k|    {                           \
  |  |   16|  17.6k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 28, False: 17.6k]
  |  |  ------------------
  |  |   17|  17.6k|    }
  ------------------
 1029|  25.4k|    for (uint32_t i = 0; i < len; i++) {
  ------------------
  |  Branch (1029:26): [True: 8.62k, False: 16.8k]
  ------------------
 1030|  8.62k|        PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, count, positions))
  ------------------
  |  |   15|  8.62k|    {                           \
  |  |   16|  8.62k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 834, False: 7.79k]
  |  |  ------------------
  |  |   17|  8.62k|    }
  ------------------
 1031|  8.62k|    }
 1032|  16.8k|    return true;
 1033|  17.6k|}

crc16:
   15|  54.3k|uint16_t crc16(const uint8_t *input_str, uint32_t num_bytes) {
   16|  54.3k|    uint16_t crc = 0;
   17|  1.86M|    while (num_bytes-- > 0) {
  ------------------
  |  Branch (17:12): [True: 1.81M, False: 54.3k]
  ------------------
   18|  1.81M|        crc = crc ^ (uint32_t) *input_str++ << 8;
   19|  1.81M|        int i = 8;
   20|  14.4M|        do {
   21|  14.4M|            if (crc & 0x8000)
  ------------------
  |  Branch (21:17): [True: 7.11M, False: 7.38M]
  ------------------
   22|  7.11M|                crc = crc << 1 ^ 0x1021;
   23|  7.38M|            else
   24|  7.38M|                crc = crc << 1;
   25|  14.4M|        } while (--i);
  ------------------
  |  Branch (25:18): [True: 12.6M, False: 1.81M]
  ------------------
   26|  1.81M|    }
   27|  54.3k|    return crc;
   28|  54.3k|}
encode_key:
   30|  53.5k|bool encode_key(const uint8_t *in, uint8_t version_byte, char *out, uint8_t out_len) {
   31|  53.5k|    if (in == NULL || out_len < 56 + 1) {
  ------------------
  |  Branch (31:9): [True: 0, False: 53.5k]
  |  Branch (31:23): [True: 0, False: 53.5k]
  ------------------
   32|      0|        return false;
   33|      0|    }
   34|  53.5k|    uint8_t buffer[35] = {0};
   35|  53.5k|    buffer[0] = version_byte;
   36|  1.76M|    for (uint8_t i = 0; i < 32; i++) {
  ------------------
  |  Branch (36:25): [True: 1.71M, False: 53.5k]
  ------------------
   37|  1.71M|        buffer[i + 1] = in[i];
   38|  1.71M|    }
   39|  53.5k|    uint16_t crc = crc16(buffer, 33);  // checksum
   40|  53.5k|    buffer[33] = crc;
   41|  53.5k|    buffer[34] = crc >> 8;
   42|  53.5k|    if (base32_encode(buffer, 35, (uint8_t *) out, 56) == -1) {
  ------------------
  |  Branch (42:9): [True: 0, False: 53.5k]
  ------------------
   43|      0|        return false;
   44|      0|    }
   45|  53.5k|    out[56] = '\0';
   46|  53.5k|    return true;
   47|  53.5k|}
encode_ed25519_public_key:
   51|  49.5k|                               size_t out_len) {
   52|  49.5k|    return encode_key(raw_public_key, VERSION_BYTE_ED25519_PUBLIC_KEY, out, out_len);
  ------------------
  |  |   25|  49.5k|#define VERSION_BYTE_ED25519_PUBLIC_KEY     6 << 3
  ------------------
   53|  49.5k|}
encode_hash_x_key:
   57|    100|                       size_t out_len) {
   58|    100|    return encode_key(raw_hash_x, VERSION_BYTE_HASH_X, out, out_len);
  ------------------
  |  |   28|    100|#define VERSION_BYTE_HASH_X                 23 << 3
  ------------------
   59|    100|}
encode_pre_auth_x_key:
   63|    253|                           size_t out_len) {
   64|    253|    return encode_key(raw_pre_auth_tx, VERSION_BYTE_PRE_AUTH_TX_KEY, out, out_len);
  ------------------
  |  |   27|    253|#define VERSION_BYTE_PRE_AUTH_TX_KEY        19 << 3
  ------------------
   65|    253|}
encode_contract:
   69|  3.62k|                     size_t out_len) {
   70|  3.62k|    return encode_key(raw_contract, VERSION_BYTE_CONTRACT, out, out_len);
  ------------------
  |  |   31|  3.62k|#define VERSION_BYTE_CONTRACT               2 << 3
  ------------------
   71|  3.62k|}
encode_ed25519_signed_payload:
   75|    348|                                   size_t out_len) {
   76|    348|    if (out_len < ED25519_SIGNED_PAYLOAD_MAX_LENGTH) {  // (103 * 8 + 4) / 5
  ------------------
  |  |   12|    348|#define ED25519_SIGNED_PAYLOAD_MAX_LENGTH 166  // include the null terminator
  ------------------
  |  Branch (76:9): [True: 0, False: 348]
  ------------------
   77|      0|        return false;
   78|      0|    }
   79|    348|    if (signed_payload->payload_len > 64 || signed_payload->payload_len <= 0) {
  ------------------
  |  Branch (79:9): [True: 0, False: 348]
  |  Branch (79:45): [True: 0, False: 348]
  ------------------
   80|      0|        return false;
   81|      0|    }
   82|    348|    uint8_t data_len = RAW_ED25519_PUBLIC_KEY_SIZE + 4 + signed_payload->payload_len +
  ------------------
  |  |   18|    348|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
   83|    348|                       ((4 - signed_payload->payload_len % 4) % 4);
   84|    348|    uint8_t buffer[1 + 32 + 4 + 64 + 2] = {0};
   85|    348|    buffer[0] = VERSION_BYTE_ED25519_SIGNED_PAYLOAD;
  ------------------
  |  |   30|    348|#define VERSION_BYTE_ED25519_SIGNED_PAYLOAD 15 << 3
  ------------------
   86|  11.4k|    for (uint8_t i = 0; i < 32; i++) {
  ------------------
  |  Branch (86:25): [True: 11.1k, False: 348]
  ------------------
   87|  11.1k|        buffer[i + 1] = signed_payload->ed25519[i];
   88|  11.1k|    }
   89|    348|    buffer[36] = signed_payload->payload_len;
   90|  11.2k|    for (uint32_t i = 0; i < signed_payload->payload_len; i++) {
  ------------------
  |  Branch (90:26): [True: 10.8k, False: 348]
  ------------------
   91|  10.8k|        buffer[i + 37] = signed_payload->payload[i];
   92|  10.8k|    }
   93|    348|    uint16_t crc = crc16(buffer, data_len + 1);  // checksum
   94|    348|    buffer[1 + data_len] = crc;
   95|    348|    buffer[1 + data_len + 1] = crc >> 8;
   96|    348|    int ret = base32_encode(buffer, data_len + 3, (uint8_t *) out, out_len);
   97|    348|    if (ret == -1) {
  ------------------
  |  Branch (97:9): [True: 0, False: 348]
  ------------------
   98|      0|        return false;
   99|      0|    }
  100|    348|    out[ret] = '\0';
  101|    348|    return true;
  102|    348|}
encode_muxed_account:
  104|  9.59k|bool encode_muxed_account(const muxed_account_t *raw_muxed_account, char *out, size_t out_len) {
  105|  9.59k|    if (raw_muxed_account == NULL) {
  ------------------
  |  Branch (105:9): [True: 0, False: 9.59k]
  ------------------
  106|      0|        return false;
  107|      0|    }
  108|  9.59k|    if (raw_muxed_account->type == KEY_TYPE_ED25519) {
  ------------------
  |  Branch (108:9): [True: 9.10k, False: 499]
  ------------------
  109|  9.10k|        return encode_ed25519_public_key(raw_muxed_account->ed25519, out, out_len);
  110|  9.10k|    } else {
  111|    499|        if (out_len < ENCODED_MUXED_ACCOUNT_KEY_LENGTH) {
  ------------------
  |  |   16|    499|#define ENCODED_MUXED_ACCOUNT_KEY_LENGTH   70
  ------------------
  |  Branch (111:13): [True: 0, False: 499]
  ------------------
  112|      0|            return false;
  113|      0|        }
  114|    499|        uint8_t buffer[MUXED_ACCOUNT_MED_25519_SIZE] = {0};
  115|    499|        buffer[0] = VERSION_BYTE_MUXED_ACCOUNT;
  ------------------
  |  |   29|    499|#define VERSION_BYTE_MUXED_ACCOUNT          12 << 3
  ------------------
  116|    499|        memcpy(buffer + 1, raw_muxed_account->med25519.ed25519, RAW_ED25519_PUBLIC_KEY_SIZE);
  ------------------
  |  |   18|    499|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  117|  4.49k|        for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (117:25): [True: 3.99k, False: 499]
  ------------------
  118|  3.99k|            buffer[33 + i] = raw_muxed_account->med25519.id >> 8 * (7 - i);
  119|  3.99k|        }
  120|    499|        uint16_t crc = crc16(buffer, MUXED_ACCOUNT_MED_25519_SIZE - 2);  // checksum
  ------------------
  |  |   10|    499|#define MUXED_ACCOUNT_MED_25519_SIZE      43
  ------------------
  121|    499|        buffer[41] = crc;
  122|    499|        buffer[42] = crc >> 8;
  123|    499|        if (base32_encode(buffer,
  ------------------
  |  Branch (123:13): [True: 0, False: 499]
  ------------------
  124|    499|                          MUXED_ACCOUNT_MED_25519_SIZE,
  ------------------
  |  |   10|    499|#define MUXED_ACCOUNT_MED_25519_SIZE      43
  ------------------
  125|    499|                          (uint8_t *) out,
  126|    499|                          ENCODED_MUXED_ACCOUNT_KEY_LENGTH) == -1) {
  ------------------
  |  |   16|    499|#define ENCODED_MUXED_ACCOUNT_KEY_LENGTH   70
  ------------------
  127|      0|            return false;
  128|      0|        }
  129|    499|        out[69] = '\0';
  130|    499|        return true;
  131|    499|    }
  132|  9.59k|}
print_binary:
  162|  1.32k|                  uint8_t num_chars_r) {
  163|  1.32k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (163:9): [True: 210, False: 1.11k]
  ------------------
  164|    210|        char buffer[BINARY_MAX_SIZE * 2 + 1];
  165|    210|        if (!format_hex(in, in_len, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (165:13): [True: 0, False: 210]
  ------------------
  166|      0|            return false;
  167|      0|        }
  168|    210|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  169|    210|    }
  170|  1.11k|    return format_hex(in, in_len, out, out_len);
  171|  1.32k|}
print_account_id:
  177|  40.4k|                      uint8_t num_chars_r) {
  178|  40.4k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (178:9): [True: 948, False: 39.5k]
  ------------------
  179|    948|        char buffer[ENCODED_ED25519_PUBLIC_KEY_LENGTH];
  180|    948|        if (!encode_ed25519_public_key(account_id, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (180:13): [True: 0, False: 948]
  ------------------
  181|      0|            return false;
  182|      0|        }
  183|    948|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  184|    948|    }
  185|  39.5k|    return encode_ed25519_public_key(account_id, out, out_len);
  186|  40.4k|}
print_contract_id:
  192|  3.62k|                       uint8_t num_chars_r) {
  193|  3.62k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (193:9): [True: 0, False: 3.62k]
  ------------------
  194|      0|        char buffer[ENCODED_CONTRACT_KEY_LENGTH];
  195|      0|        if (!encode_contract(contract_id, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (195:13): [True: 0, False: 0]
  ------------------
  196|      0|            return false;
  197|      0|        }
  198|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  199|      0|    }
  200|  3.62k|    return encode_contract(contract_id, out, out_len);
  201|  3.62k|}
print_hash_x_key:
  207|    100|                      uint8_t num_chars_r) {
  208|    100|    if (num_chars_l > 0) {
  ------------------
  |  Branch (208:9): [True: 0, False: 100]
  ------------------
  209|      0|        char buffer[ENCODED_HASH_X_KEY_LENGTH];
  210|      0|        if (!encode_hash_x_key(raw_hash_x, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|            return false;
  212|      0|        }
  213|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  214|      0|    }
  215|    100|    return encode_hash_x_key(raw_hash_x, out, out_len);
  216|    100|}
print_pre_auth_x_key:
  222|    253|                          uint8_t num_chars_r) {
  223|    253|    if (num_chars_l > 0) {
  ------------------
  |  Branch (223:9): [True: 0, False: 253]
  ------------------
  224|      0|        char buffer[ENCODED_PRE_AUTH_TX_KEY_LENGTH];
  225|      0|        if (!encode_pre_auth_x_key(raw_pre_auth_tx, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (225:13): [True: 0, False: 0]
  ------------------
  226|      0|            return false;
  227|      0|        }
  228|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  229|      0|    }
  230|    253|    return encode_pre_auth_x_key(raw_pre_auth_tx, out, out_len);
  231|    253|}
print_ed25519_signed_payload:
  237|    348|                                  uint8_t num_chars_r) {
  238|    348|    char tmp[ED25519_SIGNED_PAYLOAD_MAX_LENGTH];
  239|    348|    if (!encode_ed25519_signed_payload(signed_payload, tmp, sizeof(tmp))) {
  ------------------
  |  Branch (239:9): [True: 0, False: 348]
  ------------------
  240|      0|        return false;
  241|    348|    };
  242|       |
  243|    348|    if (num_chars_l > 0) {
  ------------------
  |  Branch (243:9): [True: 348, False: 0]
  ------------------
  244|    348|        if (out_len < num_chars_l + num_chars_r + 2 + 1) {
  ------------------
  |  Branch (244:13): [True: 0, False: 348]
  ------------------
  245|      0|            return false;
  246|      0|        }
  247|    348|        return print_summary(tmp, out, out_len, num_chars_l, num_chars_r);
  248|    348|    } else {
  249|      0|        if (strlcpy(out, tmp, out_len) >= out_len) {
  ------------------
  |  Branch (249:13): [True: 0, False: 0]
  ------------------
  250|      0|            return false;
  251|      0|        }
  252|      0|    }
  253|      0|    return true;
  254|    348|}
print_sc_address:
  260|  11.9k|                      uint8_t num_chars_r) {
  261|  11.9k|    if (sc_address->type == SC_ADDRESS_TYPE_ACCOUNT) {
  ------------------
  |  Branch (261:9): [True: 8.34k, False: 3.62k]
  ------------------
  262|  8.34k|        return print_account_id(sc_address->address, out, out_len, num_chars_l, num_chars_r);
  263|  8.34k|    } else {
  264|  3.62k|        return print_contract_id(sc_address->address, out, out_len, num_chars_l, num_chars_r);
  265|  3.62k|    }
  266|      0|    return true;
  267|  11.9k|}
print_muxed_account:
  273|  9.59k|                         uint8_t num_chars_r) {
  274|  9.59k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (274:9): [True: 1.17k, False: 8.42k]
  ------------------
  275|  1.17k|        char buffer[ENCODED_MUXED_ACCOUNT_KEY_LENGTH];
  276|  1.17k|        if (!encode_muxed_account(muxed_account, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (276:13): [True: 0, False: 1.17k]
  ------------------
  277|      0|            return false;
  278|      0|        }
  279|  1.17k|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  280|  1.17k|    }
  281|  8.42k|    return encode_muxed_account(muxed_account, out, out_len);
  282|  9.59k|}
print_claimable_balance_id:
  288|    488|                                uint8_t num_chars_r) {
  289|    488|    if (out_len < (4 + CLAIMABLE_BALANCE_ID_SIZE) * 2 + 1) {
  ------------------
  |  |   48|    488|#define CLAIMABLE_BALANCE_ID_SIZE 32
  ------------------
  |  Branch (289:9): [True: 0, False: 488]
  ------------------
  290|      0|        return false;
  291|      0|    }
  292|    488|    uint8_t data[(4 + CLAIMABLE_BALANCE_ID_SIZE)];
  293|  2.44k|    for (uint8_t i = 0; i < 4; i++) {
  ------------------
  |  Branch (293:25): [True: 1.95k, False: 488]
  ------------------
  294|  1.95k|        data[i] = claimable_balance_id_t->type >> (8 * (3 - i));
  295|  1.95k|    }
  296|    488|    memcpy(data + 4, claimable_balance_id_t->v0, CLAIMABLE_BALANCE_ID_SIZE);
  ------------------
  |  |   48|    488|#define CLAIMABLE_BALANCE_ID_SIZE 32
  ------------------
  297|    488|    return print_binary(data, sizeof(data), out, out_len, num_chars_l, num_chars_r);
  298|    488|}
print_uint64_num:
  300|   146k|bool print_uint64_num(uint64_t num, char *out, size_t out_len) {
  301|   146k|    uint8_t data[8] = {0};
  302|  1.32M|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (302:21): [True: 1.17M, False: 146k]
  ------------------
  303|  1.17M|        data[i] = num >> (8 * (7 - i));
  304|  1.17M|    }
  305|   146k|    return print_uint64(data, 0, out, out_len, false);
  306|   146k|}
print_int64_num:
  308|    259|bool print_int64_num(int64_t num, char *out, size_t out_len) {
  309|    259|    uint8_t data[8] = {0};
  310|  2.33k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (310:21): [True: 2.07k, False: 259]
  ------------------
  311|  2.07k|        data[i] = num >> (8 * (7 - i));
  312|  2.07k|    }
  313|    259|    return print_int64(data, 0, out, out_len, false);
  314|    259|}
print_time:
  316|    755|bool print_time(uint64_t seconds, char *out, size_t out_len) {
  317|    755|    if (seconds > 253402300799) {
  ------------------
  |  Branch (317:9): [True: 72, False: 683]
  ------------------
  318|       |        // valid range 1970-01-01 00:00:00 - 9999-12-31 23:59:59
  319|     72|        return false;
  320|     72|    }
  321|    683|    char time_str[20] = {0};  // 1970-01-01 00:00:00
  322|       |
  323|    683|    if (out_len < sizeof(time_str)) {
  ------------------
  |  Branch (323:9): [True: 0, False: 683]
  ------------------
  324|      0|        return false;
  325|      0|    }
  326|    683|    struct tm tm;
  327|    683|    if (!gmtime_r((time_t *) &seconds, &tm)) {
  ------------------
  |  Branch (327:9): [True: 0, False: 683]
  ------------------
  328|      0|        return false;
  329|    683|    };
  330|       |
  331|    683|    if (snprintf(time_str,
  ------------------
  |  Branch (331:9): [True: 0, False: 683]
  ------------------
  332|    683|                 sizeof(time_str),
  333|    683|                 "%04d-%02d-%02d %02d:%02d:%02d",
  334|    683|                 tm.tm_year + 1900,
  335|    683|                 tm.tm_mon + 1,
  336|    683|                 tm.tm_mday,
  337|    683|                 tm.tm_hour,
  338|    683|                 tm.tm_min,
  339|    683|                 tm.tm_sec) < 0) {
  340|      0|        return false;
  341|    683|    };
  342|    683|    if (strlcpy(out, time_str, out_len) >= out_len) {
  ------------------
  |  Branch (342:9): [True: 0, False: 683]
  ------------------
  343|      0|        return false;
  344|      0|    }
  345|    683|    return true;
  346|    683|}
print_asset_name:
  348|  39.6k|bool print_asset_name(const asset_t *asset, uint8_t network_id, char *out, size_t out_len) {
  349|  39.6k|    switch (asset->type) {
  350|  38.7k|        case ASSET_TYPE_NATIVE:
  ------------------
  |  Branch (350:9): [True: 38.7k, False: 967]
  ------------------
  351|  38.7k|            if (network_id == NETWORK_TYPE_UNKNOWN) {
  ------------------
  |  |   59|  38.7k|#define NETWORK_TYPE_UNKNOWN 2
  ------------------
  |  Branch (351:17): [True: 36.8k, False: 1.88k]
  ------------------
  352|  36.8k|                if (strlcpy(out, "native", out_len) >= out_len) {
  ------------------
  |  Branch (352:21): [True: 0, False: 36.8k]
  ------------------
  353|      0|                    return false;
  354|      0|                }
  355|  36.8k|            } else {
  356|  1.88k|                if (strlcpy(out, "XLM", out_len) >= out_len) {
  ------------------
  |  Branch (356:21): [True: 0, False: 1.88k]
  ------------------
  357|      0|                    return false;
  358|      0|                }
  359|  1.88k|            }
  360|  38.7k|            return true;
  361|    627|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (361:9): [True: 627, False: 39.0k]
  ------------------
  362|  2.02k|            for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (362:29): [True: 1.74k, False: 282]
  ------------------
  363|  1.74k|                out[i] = asset->alpha_num4.asset_code[i];
  364|  1.74k|                if (out[i] == 0) {
  ------------------
  |  Branch (364:21): [True: 345, False: 1.40k]
  ------------------
  365|    345|                    break;
  366|    345|                }
  367|  1.74k|            }
  368|    627|            out[4] = 0;
  369|    627|            return true;
  370|    340|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (370:9): [True: 340, False: 39.3k]
  ------------------
  371|    961|            for (int i = 0; i < 12; i++) {
  ------------------
  |  Branch (371:29): [True: 954, False: 7]
  ------------------
  372|    954|                out[i] = asset->alpha_num12.asset_code[i];
  373|    954|                if (out[i] == 0) {
  ------------------
  |  Branch (373:21): [True: 333, False: 621]
  ------------------
  374|    333|                    break;
  375|    333|                }
  376|    954|            }
  377|    340|            out[12] = 0;
  378|    340|            return true;
  379|      0|        default:
  ------------------
  |  Branch (379:9): [True: 0, False: 39.6k]
  ------------------
  380|      0|            return false;
  381|  39.6k|    }
  382|  39.6k|}
print_asset:
  384|  38.3k|bool print_asset(const asset_t *asset, uint8_t network_id, char *out, size_t out_len) {
  385|  38.3k|    char asset_code[12 + 1];
  386|  38.3k|    char asset_issuer[3 + 2 + 4 + 1];
  387|  38.3k|    print_asset_name(asset, network_id, asset_code, sizeof(asset_code));
  388|       |
  389|  38.3k|    switch (asset->type) {
  390|    608|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (390:9): [True: 608, False: 37.7k]
  ------------------
  391|    608|            print_account_id(asset->alpha_num4.issuer, asset_issuer, sizeof(asset_issuer), 3, 4);
  392|    608|            break;
  393|    340|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (393:9): [True: 340, False: 38.0k]
  ------------------
  394|    340|            print_account_id(asset->alpha_num12.issuer, asset_issuer, sizeof(asset_issuer), 3, 4);
  395|    340|            break;
  396|  37.4k|        default:
  ------------------
  |  Branch (396:9): [True: 37.4k, False: 948]
  ------------------
  397|  37.4k|            break;
  398|  38.3k|    }
  399|  38.3k|    if (strlcpy(out, asset_code, out_len) >= out_len) {
  ------------------
  |  Branch (399:9): [True: 0, False: 38.3k]
  ------------------
  400|      0|        return false;
  401|      0|    }
  402|  38.3k|    if (asset->type != ASSET_TYPE_NATIVE) {
  ------------------
  |  Branch (402:9): [True: 948, False: 37.4k]
  ------------------
  403|    948|        if (strlcat(out, "@", out_len) >= out_len) {
  ------------------
  |  Branch (403:13): [True: 0, False: 948]
  ------------------
  404|      0|            return false;
  405|      0|        }
  406|    948|        if (strlcat(out, asset_issuer, out_len) >= out_len) {
  ------------------
  |  Branch (406:13): [True: 0, False: 948]
  ------------------
  407|      0|            return false;
  408|      0|        }
  409|    948|    }
  410|  38.3k|    return true;
  411|  38.3k|}
print_flag:
  413|  2.85k|bool print_flag(const char *flag, char *out, size_t out_len) {
  414|  2.85k|    if (out[0]) {
  ------------------
  |  Branch (414:9): [True: 1.47k, False: 1.37k]
  ------------------
  415|  1.47k|        if (strlcat(out, ", ", out_len) >= out_len) {
  ------------------
  |  Branch (415:13): [True: 0, False: 1.47k]
  ------------------
  416|      0|            return false;
  417|      0|        }
  418|  1.47k|    }
  419|  2.85k|    if (strlcat(out, flag, out_len) >= out_len) {
  ------------------
  |  Branch (419:9): [True: 0, False: 2.85k]
  ------------------
  420|      0|        return false;
  421|      0|    }
  422|  2.85k|    return true;
  423|  2.85k|}
print_account_flags:
  425|    724|bool print_account_flags(uint32_t flags, char *out, size_t out_len) {
  426|    724|    explicit_bzero(out, out_len);
  427|    724|    if (flags & 0x01u) {
  ------------------
  |  Branch (427:9): [True: 243, False: 481]
  ------------------
  428|    243|        if (!print_flag("AUTH_REQUIRED", out, out_len)) {
  ------------------
  |  Branch (428:13): [True: 0, False: 243]
  ------------------
  429|      0|            return false;
  430|      0|        }
  431|    243|    }
  432|    724|    if (flags & 0x02u) {
  ------------------
  |  Branch (432:9): [True: 414, False: 310]
  ------------------
  433|    414|        if (!print_flag("AUTH_REVOCABLE", out, out_len)) {
  ------------------
  |  Branch (433:13): [True: 0, False: 414]
  ------------------
  434|      0|            return false;
  435|      0|        }
  436|    414|    }
  437|    724|    if (flags & 0x04u) {
  ------------------
  |  Branch (437:9): [True: 313, False: 411]
  ------------------
  438|    313|        if (!print_flag("AUTH_IMMUTABLE", out, out_len)) {
  ------------------
  |  Branch (438:13): [True: 0, False: 313]
  ------------------
  439|      0|            return false;
  440|      0|        }
  441|    313|    }
  442|    724|    if (flags & 0x08u) {
  ------------------
  |  Branch (442:9): [True: 236, False: 488]
  ------------------
  443|    236|        if (!print_flag("AUTH_CLAWBACK_ENABLED", out, out_len)) {
  ------------------
  |  Branch (443:13): [True: 0, False: 236]
  ------------------
  444|      0|            return false;
  445|      0|        }
  446|    236|    }
  447|    724|    return true;
  448|    724|}
print_trust_line_flags:
  450|  1.50k|bool print_trust_line_flags(uint32_t flags, char *out, size_t out_len) {
  451|  1.50k|    explicit_bzero(out, out_len);
  452|  1.50k|    if (flags & AUTHORIZED_FLAG) {
  ------------------
  |  Branch (452:9): [True: 658, False: 846]
  ------------------
  453|    658|        if (!print_flag("AUTHORIZED", out, out_len)) {
  ------------------
  |  Branch (453:13): [True: 0, False: 658]
  ------------------
  454|      0|            return false;
  455|      0|        }
  456|    658|    }
  457|  1.50k|    if (flags & AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG) {
  ------------------
  |  Branch (457:9): [True: 574, False: 930]
  ------------------
  458|    574|        if (!print_flag("AUTHORIZED_TO_MAINTAIN_LIABILITIES", out, out_len)) {
  ------------------
  |  Branch (458:13): [True: 0, False: 574]
  ------------------
  459|      0|            return false;
  460|      0|        }
  461|    574|    }
  462|  1.50k|    if (flags & TRUSTLINE_CLAWBACK_ENABLED_FLAG) {
  ------------------
  |  Branch (462:9): [True: 412, False: 1.09k]
  ------------------
  463|    412|        if (!print_flag("TRUSTLINE_CLAWBACK_ENABLED", out, out_len)) {
  ------------------
  |  Branch (463:13): [True: 0, False: 412]
  ------------------
  464|      0|            return false;
  465|      0|        }
  466|    412|    }
  467|  1.50k|    return true;
  468|  1.50k|}
print_allow_trust_flags:
  470|    168|bool print_allow_trust_flags(uint32_t flag, char *out, size_t out_len) {
  471|    168|    explicit_bzero(out, out_len);
  472|    168|    if (flag & AUTHORIZED_FLAG) {
  ------------------
  |  Branch (472:9): [True: 5, False: 163]
  ------------------
  473|      5|        if (strlcpy(out, "AUTHORIZED", out_len) >= out_len) {
  ------------------
  |  Branch (473:13): [True: 0, False: 5]
  ------------------
  474|      0|            return false;
  475|      0|        }
  476|    163|    } else if (flag & AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG) {
  ------------------
  |  Branch (476:16): [True: 25, False: 138]
  ------------------
  477|     25|        if (strlcpy(out, "AUTHORIZED_TO_MAINTAIN_LIABILITIES", out_len) >= out_len) {
  ------------------
  |  Branch (477:13): [True: 0, False: 25]
  ------------------
  478|      0|            return false;
  479|      0|        }
  480|    138|    } else {
  481|    138|        if (strlcpy(out, "UNAUTHORIZED", out_len) >= out_len) {
  ------------------
  |  Branch (481:13): [True: 0, False: 138]
  ------------------
  482|      0|            return false;
  483|      0|        }
  484|    138|    }
  485|    168|    return true;
  486|    168|}
print_amount:
  492|  37.5k|                  size_t out_len) {
  493|  37.5k|    uint8_t data[8] = {0};
  494|   338k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (494:21): [True: 300k, False: 37.5k]
  ------------------
  495|   300k|        data[i] = amount >> (8 * (7 - i));
  496|   300k|    }
  497|       |
  498|  37.5k|    if (!print_uint64(data, 7, out, out_len, true)) {
  ------------------
  |  Branch (498:9): [True: 0, False: 37.5k]
  ------------------
  499|      0|        return false;
  500|      0|    }
  501|       |
  502|  37.5k|    if (asset) {
  ------------------
  |  Branch (502:9): [True: 35.3k, False: 2.19k]
  ------------------
  503|  35.3k|        if (strlcat(out, " ", out_len) >= out_len) {
  ------------------
  |  Branch (503:13): [True: 0, False: 35.3k]
  ------------------
  504|      0|            return false;
  505|      0|        }
  506|  35.3k|        size_t length = strlen(out);
  507|  35.3k|        if (!print_asset(asset, network_id, out + length, out_len - length)) {
  ------------------
  |  Branch (507:13): [True: 0, False: 35.3k]
  ------------------
  508|      0|            return false;
  509|  35.3k|        };
  510|  35.3k|    }
  511|  37.5k|    return true;
  512|  37.5k|}
is_printable_binary:
  514|    985|bool is_printable_binary(const uint8_t *str, size_t str_len) {
  515|  6.49k|    for (size_t i = 0; i < str_len; i++) {
  ------------------
  |  Branch (515:24): [True: 5.90k, False: 594]
  ------------------
  516|  5.90k|        if (str[i] > 0x7e || str[i] < 0x20) {
  ------------------
  |  Branch (516:13): [True: 177, False: 5.72k]
  |  Branch (516:30): [True: 214, False: 5.51k]
  ------------------
  517|    391|            return false;
  518|    391|        }
  519|  5.90k|    }
  520|    594|    return true;
  521|    985|}
add_decimal_point:
  661|   188k|bool add_decimal_point(char *out, size_t out_len, uint8_t decimals) {
  662|   188k|    if (out == NULL || out_len == 0) {
  ------------------
  |  Branch (662:9): [True: 0, False: 188k]
  |  Branch (662:24): [True: 0, False: 188k]
  ------------------
  663|      0|        return false;
  664|      0|    }
  665|   188k|    if (decimals == 0) {
  ------------------
  |  Branch (665:9): [True: 150k, False: 37.6k]
  ------------------
  666|   150k|        return true;
  667|   150k|    }
  668|       |
  669|  37.6k|    bool is_negative = out[0] == '-';
  670|  37.6k|    char *start = is_negative ? out + 1 : out;
  ------------------
  |  Branch (670:19): [True: 11, False: 37.6k]
  ------------------
  671|       |
  672|  37.6k|    size_t len = strlen(start);
  673|  37.6k|    if (len == 0) {
  ------------------
  |  Branch (673:9): [True: 0, False: 37.6k]
  ------------------
  674|      0|        return true;
  675|      0|    }
  676|       |
  677|  37.6k|    if (is_negative) {
  ------------------
  |  Branch (677:9): [True: 11, False: 37.6k]
  ------------------
  678|     11|        if (decimals >= out_len - 2) {
  ------------------
  |  Branch (678:13): [True: 0, False: 11]
  ------------------
  679|       |            // Not enough space to add decimal point and leading zero.
  680|      0|            return false;
  681|      0|        }
  682|  37.6k|    } else {
  683|  37.6k|        if (decimals >= out_len - 1) {
  ------------------
  |  Branch (683:13): [True: 0, False: 37.6k]
  ------------------
  684|       |            // Not enough space to add decimal point.
  685|      0|            return false;
  686|      0|        }
  687|  37.6k|    }
  688|       |
  689|  37.6k|    if (len <= decimals) {
  ------------------
  |  Branch (689:9): [True: 28.6k, False: 9.00k]
  ------------------
  690|       |        // Shift the number to the right and add leading zeros
  691|  28.6k|        memmove(start + decimals - len + 2, start, len + 1);
  692|  28.6k|        start[0] = '0';
  693|  28.6k|        start[1] = '.';
  694|  28.6k|        memset(start + 2, '0', decimals - len);
  695|  28.6k|    } else {
  696|       |        // Insert the decimal point at the appropriate position
  697|  9.00k|        memmove(start + len - decimals + 1, start + len - decimals, decimals + 1);
  698|  9.00k|        start[len - decimals] = '.';
  699|  9.00k|    }
  700|       |
  701|       |    // Remove trailing zeros after decimal point
  702|  37.6k|    char *p = start + strlen(start) - 1;
  703|   177k|    while (p > start && *p == '0') {
  ------------------
  |  Branch (703:12): [True: 177k, False: 0]
  |  Branch (703:25): [True: 139k, False: 37.6k]
  ------------------
  704|   139k|        *p-- = '\0';
  705|   139k|    }
  706|       |
  707|       |    // Remove decimal point if it's the last character
  708|  37.6k|    if (p > start && *p == '.') {
  ------------------
  |  Branch (708:9): [True: 37.6k, False: 0]
  |  Branch (708:22): [True: 19.3k, False: 18.2k]
  ------------------
  709|  19.3k|        *p = '\0';
  710|  19.3k|    }
  711|       |
  712|       |    // Add the negative sign back if necessary
  713|  37.6k|    if (is_negative && out[0] != '-') {
  ------------------
  |  Branch (713:9): [True: 11, False: 37.6k]
  |  Branch (713:24): [True: 0, False: 11]
  ------------------
  714|      0|        memmove(out + 1, out, strlen(out) + 1);
  715|      0|        out[0] = '-';
  716|      0|    }
  717|       |
  718|  37.6k|    return true;
  719|  37.6k|}
add_separator_to_number:
  721|  41.5k|bool add_separator_to_number(char *out, size_t out_len) {
  722|  41.5k|    if (out == NULL || out_len == 0) {
  ------------------
  |  Branch (722:9): [True: 0, False: 41.5k]
  |  Branch (722:24): [True: 0, False: 41.5k]
  ------------------
  723|      0|        return false;
  724|      0|    }
  725|       |
  726|  41.5k|    size_t length = strlen(out);
  727|  41.5k|    uint8_t negative = (out[0] == '-') ? 1 : 0;  // Check if the number is negative
  ------------------
  |  Branch (727:24): [True: 569, False: 40.9k]
  ------------------
  728|       |
  729|       |    // Find the position of the decimal point
  730|  41.5k|    char *decimal_point = strchr(out, '.');
  731|  41.5k|    size_t decimal_index = decimal_point ? decimal_point - out : length;
  ------------------
  |  Branch (731:28): [True: 18.2k, False: 23.2k]
  ------------------
  732|       |
  733|       |    // Calculate the new length of the string with the commas
  734|  41.5k|    size_t new_length = 0;
  735|  41.5k|    if (negative) {
  ------------------
  |  Branch (735:9): [True: 569, False: 40.9k]
  ------------------
  736|    569|        if (decimal_index < 2) {
  ------------------
  |  Branch (736:13): [True: 0, False: 569]
  ------------------
  737|       |            // The string is too short to have a negative number
  738|      0|            return false;
  739|      0|        }
  740|    569|        new_length = decimal_index + (decimal_index - 2) / 3;
  741|  40.9k|    } else {
  742|  40.9k|        if (decimal_index < 1) {
  ------------------
  |  Branch (742:13): [True: 0, False: 40.9k]
  ------------------
  743|       |            // The string is too short to have a positive number
  744|      0|            return false;
  745|      0|        }
  746|  40.9k|        new_length = decimal_index + (decimal_index - 1) / 3;
  747|  40.9k|    }
  748|       |
  749|       |    // If the new length is greater than the maximum length, return false
  750|  41.5k|    if (new_length >= out_len || new_length >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  41.5k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (750:9): [True: 0, False: 41.5k]
  |  Branch (750:34): [True: 0, False: 41.5k]
  ------------------
  751|      0|        return false;
  752|      0|    }
  753|       |
  754|  41.5k|    char temp[NUMBER_WITH_COMMAS_MAX_LENGTH];
  755|  41.5k|    if (strlcpy(temp, out, NUMBER_WITH_COMMAS_MAX_LENGTH) >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  41.5k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
                  if (strlcpy(temp, out, NUMBER_WITH_COMMAS_MAX_LENGTH) >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  41.5k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (755:9): [True: 0, False: 41.5k]
  ------------------
  756|      0|        return false;
  757|      0|    }
  758|       |
  759|  41.5k|    temp[new_length] = '\0';  // Set the end of the new string
  760|       |
  761|       |    // Start from the end of the string and move the digits to their new positions
  762|   222k|    for (int i = decimal_index - 1, j = new_length - 1; i >= 0; i--, j--) {
  ------------------
  |  Branch (762:57): [True: 181k, False: 41.5k]
  ------------------
  763|   181k|        temp[j] = out[i];
  764|       |
  765|       |        // If the current position is a multiple of 3 and it's not the first digit, add a comma
  766|   181k|        if ((decimal_index - i) % 3 == 0 && i != negative && j > 0) {
  ------------------
  |  Branch (766:13): [True: 46.9k, False: 134k]
  |  Branch (766:45): [True: 42.5k, False: 4.38k]
  |  Branch (766:62): [True: 42.2k, False: 342]
  ------------------
  767|  42.2k|            temp[--j] = ',';
  768|  42.2k|        }
  769|   181k|    }
  770|       |
  771|       |    // If there is a decimal point, append the part after the decimal point
  772|  41.5k|    if (decimal_point) {
  ------------------
  |  Branch (772:9): [True: 18.2k, False: 23.2k]
  ------------------
  773|  18.2k|        if (strlcpy(temp + new_length, decimal_point, NUMBER_WITH_COMMAS_MAX_LENGTH - new_length) >=
  ------------------
  |  |   13|  18.2k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (773:13): [True: 0, False: 18.2k]
  ------------------
  774|  18.2k|            NUMBER_WITH_COMMAS_MAX_LENGTH - new_length) {
  ------------------
  |  |   13|  18.2k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  775|      0|            return false;
  776|      0|        }
  777|  18.2k|    }
  778|       |
  779|  41.5k|    if (strlcpy(out, temp, out_len) >= out_len) {
  ------------------
  |  Branch (779:9): [True: 0, False: 41.5k]
  ------------------
  780|      0|        return false;
  781|      0|    }
  782|       |
  783|  41.5k|    return true;
  784|  41.5k|}
print_int32:
  790|    393|                 bool add_separator) {
  791|    393|    return int256_to_decimal(value, 4, out, out_len) && add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (791:12): [True: 393, False: 0]
  |  Branch (791:57): [True: 393, False: 0]
  ------------------
  792|    393|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (792:13): [True: 59, False: 334]
  |  Branch (792:31): [True: 334, False: 0]
  ------------------
  793|    393|}
print_uint32:
  799|    177|                  bool add_separator) {
  800|    177|    return uint256_to_decimal(value, 4, out, out_len) &&
  ------------------
  |  Branch (800:12): [True: 177, False: 0]
  ------------------
  801|    177|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (801:12): [True: 177, False: 0]
  ------------------
  802|    177|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (802:13): [True: 0, False: 177]
  |  Branch (802:31): [True: 177, False: 0]
  ------------------
  803|    177|}
print_int64:
  809|    806|                 bool add_separator) {
  810|    806|    return int256_to_decimal(value, 8, out, out_len) && add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (810:12): [True: 806, False: 0]
  |  Branch (810:57): [True: 806, False: 0]
  ------------------
  811|    806|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (811:13): [True: 259, False: 547]
  |  Branch (811:31): [True: 547, False: 0]
  ------------------
  812|    806|}
print_uint64:
  818|   184k|                  bool add_separator) {
  819|   184k|    return uint256_to_decimal(value, 8, out, out_len) &&
  ------------------
  |  Branch (819:12): [True: 184k, False: 0]
  ------------------
  820|   184k|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (820:12): [True: 184k, False: 0]
  ------------------
  821|   184k|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (821:13): [True: 146k, False: 37.7k]
  |  Branch (821:31): [True: 37.7k, False: 0]
  ------------------
  822|   184k|}
print_int128:
  828|  1.67k|                  bool add_separator) {
  829|  1.67k|    return int256_to_decimal(value, 16, out, out_len) &&
  ------------------
  |  Branch (829:12): [True: 1.67k, False: 0]
  ------------------
  830|  1.67k|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (830:12): [True: 1.67k, False: 0]
  ------------------
  831|  1.67k|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (831:13): [True: 0, False: 1.67k]
  |  Branch (831:31): [True: 1.67k, False: 0]
  ------------------
  832|  1.67k|}
print_uint128:
  838|    334|                   bool add_separator) {
  839|    334|    return uint256_to_decimal(value, 16, out, out_len) &&
  ------------------
  |  Branch (839:12): [True: 334, False: 0]
  ------------------
  840|    334|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (840:12): [True: 334, False: 0]
  ------------------
  841|    334|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (841:13): [True: 0, False: 334]
  |  Branch (841:31): [True: 334, False: 0]
  ------------------
  842|    334|}
print_int256:
  848|    429|                  bool add_separator) {
  849|    429|    return int256_to_decimal(value, 32, out, out_len) &&
  ------------------
  |  Branch (849:12): [True: 429, False: 0]
  ------------------
  850|    429|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (850:12): [True: 429, False: 0]
  ------------------
  851|    429|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (851:13): [True: 0, False: 429]
  |  Branch (851:31): [True: 429, False: 0]
  ------------------
  852|    429|}
print_uint256:
  858|    303|                   bool add_separator) {
  859|    303|    return uint256_to_decimal(value, 32, out, out_len) &&
  ------------------
  |  Branch (859:12): [True: 303, False: 0]
  ------------------
  860|    303|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (860:12): [True: 303, False: 0]
  ------------------
  861|    303|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (861:13): [True: 0, False: 303]
  |  Branch (861:31): [True: 303, False: 0]
  ------------------
  862|    303|}
print_scv_symbol:
  864|    308|bool print_scv_symbol(const scv_symbol_t *scv_symbol, char *out, size_t out_len) {
  865|    308|    if (scv_symbol == NULL || out == NULL) {
  ------------------
  |  Branch (865:9): [True: 0, False: 308]
  |  Branch (865:31): [True: 0, False: 308]
  ------------------
  866|      0|        return false;
  867|      0|    }
  868|    308|    if (scv_symbol->size > SCV_SYMBOL_MAX_SIZE || scv_symbol->size > out_len - 1) {
  ------------------
  |  |   55|    616|#define SCV_SYMBOL_MAX_SIZE     32
  ------------------
  |  Branch (868:9): [True: 0, False: 308]
  |  Branch (868:51): [True: 0, False: 308]
  ------------------
  869|      0|        return false;
  870|      0|    }
  871|    308|    if (scv_symbol->size == 0) {
  ------------------
  |  Branch (871:9): [True: 133, False: 175]
  ------------------
  872|       |        // print empty symbol
  873|    133|        if (strlcpy(out, "[empty symbol]", out_len) >= out_len) {
  ------------------
  |  Branch (873:13): [True: 0, False: 133]
  ------------------
  874|      0|            return false;
  875|      0|        }
  876|    133|        return true;
  877|    133|    }
  878|    175|    if (!is_printable_binary(scv_symbol->symbol, scv_symbol->size)) {
  ------------------
  |  Branch (878:9): [True: 7, False: 168]
  ------------------
  879|      7|        return false;
  880|      7|    }
  881|    168|    if (!print_string(out, out_len, scv_symbol->symbol, scv_symbol->size)) {
  ------------------
  |  Branch (881:9): [True: 0, False: 168]
  ------------------
  882|      0|        return false;
  883|      0|    }
  884|    168|    return true;
  885|    168|}
print_scv_string:
  887|    715|bool print_scv_string(const scv_string_t *scv_string, char *out, size_t out_len) {
  888|    715|    if (scv_string == NULL || out == NULL) {
  ------------------
  |  Branch (888:9): [True: 0, False: 715]
  |  Branch (888:31): [True: 0, False: 715]
  ------------------
  889|      0|        return false;
  890|      0|    }
  891|       |
  892|    715|    if (scv_string->size == 0) {
  ------------------
  |  Branch (892:9): [True: 435, False: 280]
  ------------------
  893|       |        // print empty symbol
  894|    435|        if (strlcpy(out, "[empty string]", out_len) >= out_len) {
  ------------------
  |  Branch (894:13): [True: 0, False: 435]
  ------------------
  895|      0|            return false;
  896|      0|        }
  897|    435|        return true;
  898|    435|    }
  899|       |
  900|       |    // if the string is not printable, print [unprintable string]
  901|    280|    if (!is_printable_binary(scv_string->string, scv_string->size)) {
  ------------------
  |  Branch (901:9): [True: 237, False: 43]
  ------------------
  902|    237|        if (strlcpy(out, "[unprintable string]", out_len) >= out_len) {
  ------------------
  |  Branch (902:13): [True: 0, False: 237]
  ------------------
  903|      0|            return false;
  904|      0|        }
  905|    237|        return true;
  906|    237|    }
  907|       |
  908|     43|    size_t copy_len = scv_string->size;
  909|       |
  910|       |    // If the output buffer is large enough to hold the entire scv_string, copy it directly and
  911|       |    // append a null terminator.
  912|     43|    if (out_len > copy_len) {
  ------------------
  |  Branch (912:9): [True: 43, False: 0]
  ------------------
  913|     43|        memcpy(out, scv_string->string, copy_len);
  914|     43|        out[copy_len] = '\0';  // Ensure the string is null-terminated.
  915|     43|    } else {
  916|      0|        if (out_len < 3) {
  ------------------
  |  Branch (916:13): [True: 0, False: 0]
  ------------------
  917|      0|            return false;
  918|      0|        }
  919|       |        // Calculate the lengths of the beginning and end parts that can be displayed.
  920|      0|        size_t dots_len = 2;                 // The length of two dots.
  921|      0|        size_t available_len = out_len - 1;  // Subtract 1 to reserve space for the null terminator.
  922|      0|        size_t start_copy_len = available_len / 2;
  923|      0|        size_t end_copy_len = available_len - start_copy_len - dots_len;
  924|       |
  925|       |        // Copy the beginning part of the string.
  926|      0|        memcpy(out, scv_string->string, start_copy_len);
  927|      0|        out[start_copy_len] = '.';
  928|      0|        out[start_copy_len + 1] = '.';
  929|       |
  930|       |        // Copy the end part of the string if there is space for it after the dots.
  931|      0|        if (end_copy_len > 0) {
  ------------------
  |  Branch (931:13): [True: 0, False: 0]
  ------------------
  932|      0|            memcpy(out + start_copy_len + dots_len,
  933|      0|                   scv_string->string + copy_len - end_copy_len,
  934|      0|                   end_copy_len);
  935|      0|        }
  936|       |
  937|       |        // Ensure the output string is null-terminated by placing a null character at the end of the
  938|       |        // buffer.
  939|      0|        out[out_len - 1] = '\0';
  940|      0|    }
  941|       |
  942|     43|    return true;
  943|     43|}
print_string:
  945|  13.0k|bool print_string(char *out, size_t out_len, const uint8_t *src, size_t src_size) {
  946|  13.0k|    if (out == NULL || src == NULL || out_len == 0) {
  ------------------
  |  Branch (946:9): [True: 0, False: 13.0k]
  |  Branch (946:24): [True: 0, False: 13.0k]
  |  Branch (946:39): [True: 0, False: 13.0k]
  ------------------
  947|      0|        return false;
  948|      0|    }
  949|  13.0k|    if (src_size + 1 > out_len) {
  ------------------
  |  Branch (949:9): [True: 0, False: 13.0k]
  ------------------
  950|      0|        return false;
  951|      0|    }
  952|  13.0k|    memcpy(out, src, src_size);
  953|  13.0k|    out[src_size] = '\0';
  954|  13.0k|    return true;
  955|  13.0k|}
print_price:
  962|    818|                 size_t out_len) {
  963|    818|    uint64_t scaled_price = ((uint64_t) price->n * 10000000) / price->d;
  964|    818|    if (!print_amount(scaled_price, NULL, network_id, out, out_len)) {
  ------------------
  |  Branch (964:9): [True: 0, False: 818]
  ------------------
  965|      0|        return false;
  966|      0|    }
  967|       |
  968|    818|    if (asset_a != NULL && asset_b != NULL) {
  ------------------
  |  Branch (968:9): [True: 672, False: 146]
  |  Branch (968:28): [True: 672, False: 0]
  ------------------
  969|    672|        char tmp_asset_code[ASSET_CODE_MAX_LENGTH] = {0};
  970|    672|        if (strlcat(out, " ", out_len) >= out_len ||
  ------------------
  |  Branch (970:13): [True: 0, False: 672]
  ------------------
  971|    672|            !print_asset_name(asset_a, network_id, tmp_asset_code, sizeof(tmp_asset_code)) ||
  ------------------
  |  Branch (971:13): [True: 0, False: 672]
  ------------------
  972|    672|            strlcat(out, tmp_asset_code, out_len) >= out_len ||
  ------------------
  |  Branch (972:13): [True: 0, False: 672]
  ------------------
  973|    672|            strlcat(out, "/", out_len) >= out_len ||
  ------------------
  |  Branch (973:13): [True: 0, False: 672]
  ------------------
  974|    672|            !print_asset_name(asset_b, network_id, tmp_asset_code, sizeof(tmp_asset_code)) ||
  ------------------
  |  Branch (974:13): [True: 0, False: 672]
  ------------------
  975|    672|            strlcat(out, tmp_asset_code, out_len) >= out_len) {
  ------------------
  |  Branch (975:13): [True: 0, False: 672]
  ------------------
  976|      0|            return false;
  977|      0|        }
  978|    672|    }
  979|    818|    return true;
  980|    818|}
printer.c:print_summary:
  138|  2.68k|                          uint8_t num_chars_r) {
  139|  2.68k|    uint8_t result_len = num_chars_l + num_chars_r + 2;
  140|  2.68k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (140:9): [True: 0, False: 2.68k]
  ------------------
  141|      0|        return false;
  142|      0|    }
  143|  2.68k|    uint16_t in_len = strlen(in);
  144|  2.68k|    if (in_len > result_len) {
  ------------------
  |  Branch (144:9): [True: 2.68k, False: 0]
  ------------------
  145|  2.68k|        memcpy(out, in, num_chars_l);
  146|  2.68k|        out[num_chars_l] = '.';
  147|  2.68k|        out[num_chars_l + 1] = '.';
  148|  2.68k|        memcpy(out + num_chars_l + 2, in + in_len - num_chars_r, num_chars_r);
  149|  2.68k|        out[result_len] = '\0';
  150|  2.68k|    } else {
  151|      0|        memcpy(out, in, in_len);
  152|      0|        out[in_len] = '\0';
  153|      0|    }
  154|  2.68k|    return true;
  155|  2.68k|}
printer.c:int256_to_decimal:
  595|  3.30k|static bool int256_to_decimal(const uint8_t *value, size_t value_len, char *out, size_t out_len) {
  596|  3.30k|    if (value_len > INT256_LENGTH) {
  ------------------
  |  |    9|  3.30k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (596:9): [True: 0, False: 3.30k]
  ------------------
  597|       |        // Value length is bigger than INT256_LENGTH
  598|      0|        return false;
  599|      0|    }
  600|       |
  601|  3.30k|    bool is_negative = (value[0] & 0x80) != 0;
  602|  3.30k|    uint8_t n[INT256_LENGTH] = {0};
  603|       |
  604|  3.30k|    if (is_negative) {
  ------------------
  |  Branch (604:9): [True: 580, False: 2.72k]
  ------------------
  605|       |        // Compute the absolute value using two's complement
  606|    580|        bool carry = true;
  607|  14.3k|        for (size_t i = value_len; i-- > 0;) {
  ------------------
  |  Branch (607:36): [True: 13.7k, False: 580]
  ------------------
  608|  13.7k|            n[INT256_LENGTH - value_len + i] = ~value[i] + carry;
  ------------------
  |  |    9|  13.7k|#define INT256_LENGTH                     32
  ------------------
  609|  13.7k|            carry = carry && (value[i] == 0);
  ------------------
  |  Branch (609:21): [True: 7.59k, False: 6.19k]
  |  Branch (609:30): [True: 7.01k, False: 580]
  ------------------
  610|  13.7k|        }
  611|  2.72k|    } else {
  612|  2.72k|        memcpy(n + INT256_LENGTH - value_len, value, value_len);
  ------------------
  |  |    9|  2.72k|#define INT256_LENGTH                     32
  ------------------
  613|  2.72k|    }
  614|       |
  615|  3.30k|    char *p = out + out_len;
  616|  3.30k|    size_t result_len = 0;
  617|       |
  618|  64.5k|    do {
  619|  64.5k|        if (p == out) {
  ------------------
  |  Branch (619:13): [True: 0, False: 64.5k]
  ------------------
  620|       |            // Not enough space in the output buffer
  621|      0|            return false;
  622|      0|        }
  623|       |
  624|  64.5k|        uint32_t remainder = 0;
  625|  2.13M|        for (size_t i = 0; i < INT256_LENGTH; ++i) {
  ------------------
  |  |    9|  2.13M|#define INT256_LENGTH                     32
  ------------------
  |  Branch (625:28): [True: 2.06M, False: 64.5k]
  ------------------
  626|  2.06M|            uint32_t temp = (remainder << 8) | n[i];
  627|  2.06M|            n[i] = temp / 10;
  628|  2.06M|            remainder = temp % 10;
  629|  2.06M|        }
  630|       |
  631|  64.5k|        *--p = '0' + remainder;
  632|  64.5k|        result_len++;
  633|  64.5k|    } while (!allzeroes(n, INT256_LENGTH));
  ------------------
  |  |    9|  64.5k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (633:14): [True: 61.2k, False: 3.30k]
  ------------------
  634|       |
  635|  3.30k|    if (is_negative) {
  ------------------
  |  Branch (635:9): [True: 580, False: 2.72k]
  ------------------
  636|    580|        if (p == out) {
  ------------------
  |  Branch (636:13): [True: 0, False: 580]
  ------------------
  637|       |            // Not enough space in the output buffer
  638|      0|            return false;
  639|      0|        }
  640|    580|        *--p = '-';
  641|    580|        result_len++;
  642|    580|    }
  643|       |
  644|  3.30k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (644:9): [True: 0, False: 3.30k]
  ------------------
  645|       |        // Not enough space to hold the result and \0.
  646|      0|        return false;
  647|      0|    }
  648|       |
  649|  3.30k|    memmove(out, p, result_len);
  650|  3.30k|    out[result_len] = '\0';
  651|       |
  652|       |    // Clear the rest of the 'out' array
  653|       |    // Generally speaking, this is unnecessary,
  654|       |    // but handler_get_app_configuration requires that it must be followed by `\0`.
  655|  3.30k|    if (result_len + 1 < out_len) {
  ------------------
  |  Branch (655:9): [True: 3.30k, False: 0]
  ------------------
  656|  3.30k|        memset(out + result_len + 1, 0, out_len - result_len - 1);
  657|  3.30k|    }
  658|  3.30k|    return true;
  659|  3.30k|}
printer.c:allzeroes:
  523|   920k|static int allzeroes(const void *buf, size_t n) {
  524|   920k|    uint8_t *p = (uint8_t *) buf;
  525|  27.6M|    for (size_t i = 0; i < n; ++i) {
  ------------------
  |  Branch (525:24): [True: 27.4M, False: 188k]
  ------------------
  526|  27.4M|        if (p[i]) {
  ------------------
  |  Branch (526:13): [True: 731k, False: 26.6M]
  ------------------
  527|   731k|            return 0;
  528|   731k|        }
  529|  27.4M|    }
  530|   188k|    return 1;
  531|   920k|}
printer.c:uint256_to_decimal:
  533|   185k|static bool uint256_to_decimal(const uint8_t *value, size_t value_len, char *out, size_t out_len) {
  534|   185k|    if (value_len > INT256_LENGTH) {
  ------------------
  |  |    9|   185k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (534:9): [True: 0, False: 185k]
  ------------------
  535|      0|        return false;
  536|      0|    }
  537|       |
  538|   185k|    uint16_t n[16] = {0};
  539|       |    // Copy and right-align the number
  540|   185k|    memcpy((uint8_t *) n + INT256_LENGTH - value_len, value, value_len);
  ------------------
  |  |    9|   185k|#define INT256_LENGTH                     32
  ------------------
  541|       |
  542|       |    // Special case when value is 0
  543|   185k|    if (allzeroes(n, sizeof(n))) {
  ------------------
  |  Branch (543:9): [True: 23.8k, False: 161k]
  ------------------
  544|  23.8k|        if (out_len < 2) {
  ------------------
  |  Branch (544:13): [True: 0, False: 23.8k]
  ------------------
  545|       |            // Not enough space to hold "0" and \0.
  546|      0|            return false;
  547|      0|        }
  548|  23.8k|        out[0] = '0';
  549|  23.8k|        out[1] = '\0';
  550|  23.8k|        return true;
  551|  23.8k|    }
  552|       |
  553|       |    // Swap the byte order of each uint16_t element in the array
  554|  2.74M|    for (int i = 0; i < 16; i++) {
  ------------------
  |  Branch (554:21): [True: 2.58M, False: 161k]
  ------------------
  555|  2.58M|        n[i] = __builtin_bswap16(n[i]);
  556|  2.58M|    }
  557|       |
  558|   161k|    size_t result_len = 0;
  559|   161k|    int pos = out_len;
  560|       |
  561|   670k|    while (!allzeroes(n, sizeof(n))) {
  ------------------
  |  Branch (561:12): [True: 508k, False: 161k]
  ------------------
  562|   508k|        if (pos == 0) {
  ------------------
  |  Branch (562:13): [True: 0, False: 508k]
  ------------------
  563|      0|            return false;
  564|      0|        }
  565|   508k|        pos--;
  566|   508k|        result_len++;
  567|       |
  568|   508k|        uint32_t carry = 0;
  569|  8.64M|        for (int i = 0; i < 16; i++) {
  ------------------
  |  Branch (569:25): [True: 8.14M, False: 508k]
  ------------------
  570|  8.14M|            uint32_t digit = ((carry << 16) | n[i]);
  571|  8.14M|            n[i] = digit / 10;
  572|  8.14M|            carry = digit % 10;
  573|  8.14M|        }
  574|   508k|        out[pos] = '0' + carry;
  575|   508k|    }
  576|       |
  577|   161k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (577:9): [True: 0, False: 161k]
  ------------------
  578|       |        // Not enough space to hold the result and \0.
  579|      0|        return false;
  580|      0|    }
  581|       |
  582|       |    // Move the result to the beginning of the output buffer
  583|   161k|    memmove(out, out + pos, result_len);
  584|   161k|    out[result_len] = '\0';
  585|       |
  586|       |    // Clear the rest of the 'out' array
  587|       |    // Generally speaking, this is unnecessary,
  588|       |    // but handler_get_app_configuration requires that it must be followed by `\0`.
  589|   161k|    if (result_len + 1 < out_len) {
  ------------------
  |  Branch (589:9): [True: 161k, False: 0]
  ------------------
  590|   161k|        memset(out + result_len + 1, 0, out_len - result_len - 1);
  591|   161k|    }
  592|   161k|    return true;
  593|   161k|}

