buffer_can_read:
   28|   203k|{
   29|   203k|    return buffer->size - buffer->offset >= n;
   30|   203k|}
buffer_seek_cur:
   44|   219k|{
   45|   219k|    if (buffer->offset + offset < buffer->offset ||  // overflow
  ------------------
  |  Branch (45:9): [True: 0, False: 219k]
  ------------------
   46|   219k|        buffer->offset + offset > buffer->size) {    // exceed buffer size
  ------------------
  |  Branch (46:9): [True: 133, False: 219k]
  ------------------
   47|    133|        return false;
   48|    133|    }
   49|       |
   50|   219k|    buffer->offset += offset;
   51|       |
   52|   219k|    return true;
   53|   219k|}
buffer_read_u32:
   97|   151k|{
   98|   151k|    if (!buffer_can_read(buffer, 4)) {
  ------------------
  |  Branch (98:9): [True: 1.70k, False: 149k]
  ------------------
   99|  1.70k|        *value = 0;
  100|       |
  101|  1.70k|        return false;
  102|  1.70k|    }
  103|       |
  104|   149k|    *value = ((endianness == BE) ? read_u32_be(buffer->ptr, buffer->offset)
  ------------------
  |  Branch (104:15): [True: 149k, False: 0]
  ------------------
  105|   149k|                                 : read_u32_le(buffer->ptr, buffer->offset));
  106|       |
  107|   149k|    buffer_seek_cur(buffer, 4);
  108|       |
  109|   149k|    return true;
  110|   151k|}
buffer_read_u64:
  113|  1.80k|{
  114|  1.80k|    if (!buffer_can_read(buffer, 8)) {
  ------------------
  |  Branch (114:9): [True: 11, False: 1.79k]
  ------------------
  115|     11|        *value = 0;
  116|       |
  117|     11|        return false;
  118|     11|    }
  119|       |
  120|  1.79k|    *value = ((endianness == BE) ? read_u64_be(buffer->ptr, buffer->offset)
  ------------------
  |  Branch (120:15): [True: 1.79k, False: 0]
  ------------------
  121|  1.79k|                                 : read_u64_le(buffer->ptr, buffer->offset));
  122|       |
  123|  1.79k|    buffer_seek_cur(buffer, 8);
  124|       |
  125|  1.79k|    return true;
  126|  1.80k|}

format_hex:
  157|    144|{
  158|    144|    if (out_len < 2 * in_len + 1) {
  ------------------
  |  Branch (158:9): [True: 0, False: 144]
  ------------------
  159|      0|        return -1;
  160|      0|    }
  161|       |
  162|    144|    const char hex[]   = "0123456789ABCDEF";
  163|    144|    size_t     i       = 0;
  164|    144|    int        written = 0;
  165|       |
  166|  4.95k|    while (i < in_len && (i * 2 + (2 + 1)) <= out_len) {
  ------------------
  |  Branch (166:12): [True: 4.81k, False: 144]
  |  Branch (166:26): [True: 4.81k, False: 0]
  ------------------
  167|  4.81k|        uint8_t high_nibble = (in[i] & 0xF0) >> 4;
  168|  4.81k|        *out                = hex[high_nibble];
  169|  4.81k|        out++;
  170|       |
  171|  4.81k|        uint8_t low_nibble = in[i] & 0x0F;
  172|  4.81k|        *out               = hex[low_nibble];
  173|  4.81k|        out++;
  174|       |
  175|  4.81k|        i++;
  176|  4.81k|        written += 2;
  177|  4.81k|    }
  178|       |
  179|    144|    *out = '\0';
  180|       |
  181|    144|    return written + 1;
  182|    144|}

read_u32_be:
   27|   149k|{
   28|   149k|    return (uint32_t) ptr[offset + 0] << 24 |  //
   29|   149k|           (uint32_t) ptr[offset + 1] << 16 |  //
   30|   149k|           (uint32_t) ptr[offset + 2] << 8 |   //
   31|   149k|           (uint32_t) ptr[offset + 3] << 0;
   32|   149k|}
read_u64_be:
   35|  1.79k|{
   36|  1.79k|    return (uint64_t) ptr[offset + 0] << 56 |  //
   37|  1.79k|           (uint64_t) ptr[offset + 1] << 48 |  //
   38|  1.79k|           (uint64_t) ptr[offset + 2] << 40 |  //
   39|  1.79k|           (uint64_t) ptr[offset + 3] << 32 |  //
   40|  1.79k|           (uint64_t) ptr[offset + 4] << 24 |  //
   41|  1.79k|           (uint64_t) ptr[offset + 5] << 16 |  //
   42|  1.79k|           (uint64_t) ptr[offset + 6] << 8 |   //
   43|  1.79k|           (uint64_t) ptr[offset + 7] << 0;
   44|  1.79k|}

LLVMFuzzerTestOneInput:
   23|  1.38k|int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   24|  1.38k|    envelope_t envelope;
   25|  1.38k|    bool data_exists = true;
   26|  1.38k|    bool is_op_header = false;
   27|  1.38k|    char detail_caption[DETAIL_CAPTION_MAX_LENGTH];
   28|  1.38k|    char detail_value[DETAIL_VALUE_MAX_LENGTH];
   29|  1.38k|    uint8_t signing_key[] = {0xe9, 0x33, 0x88, 0xbb, 0xfd, 0x2f, 0xbd, 0x11, 0x80, 0x6d, 0xd0,
   30|  1.38k|                             0xbd, 0x59, 0xce, 0xa9, 0x7,  0x9e, 0x7c, 0xc7, 0xc,  0xe7, 0xb1,
   31|  1.38k|                             0xe1, 0x54, 0xf1, 0x14, 0xcd, 0xfe, 0x4e, 0x46, 0x6e, 0xcd};
   32|       |
   33|  1.38k|    memset(&envelope, 0, sizeof(envelope_t));
   34|  1.38k|    if (parse_transaction_envelope(data, size, &envelope)) {
  ------------------
  |  Branch (34:9): [True: 552, False: 828]
  ------------------
   35|    552|        formatter_data_t tx_fdata = {
   36|    552|            .raw_data = data,
   37|    552|            .raw_data_len = size,
   38|    552|            .envelope = &envelope,
   39|    552|            .caption = detail_caption,
   40|    552|            .value = detail_value,
   41|    552|            .signing_key = signing_key,
   42|    552|            .caption_len = DETAIL_CAPTION_MAX_LENGTH,
  ------------------
  |  |    9|    552|#define DETAIL_CAPTION_MAX_LENGTH 21
  ------------------
   43|    552|            .value_len = DETAIL_VALUE_MAX_LENGTH,
  ------------------
  |  |   10|    552|#define DETAIL_VALUE_MAX_LENGTH   105
  ------------------
   44|    552|            .display_sequence = true,
   45|    552|        };
   46|    552|        reset_formatter();
   47|       |
   48|  14.8k|        while (true) {
   49|  14.8k|            if (!get_next_data(&tx_fdata, true, &data_exists, &is_op_header)) {
  ------------------
  |  Branch (49:17): [True: 23, False: 14.8k]
  ------------------
   50|     23|                break;
   51|     23|            }
   52|       |
   53|  14.8k|            if (!data_exists) {
  ------------------
  |  Branch (53:17): [True: 529, False: 14.2k]
  ------------------
   54|    529|                break;
   55|    529|            }
   56|  14.8k|        }
   57|    552|    }
   58|       |
   59|  1.38k|    memset(&envelope, 0, sizeof(envelope_t));
   60|  1.38k|    if (parse_soroban_authorization_envelope(data, size, &envelope)) {
  ------------------
  |  Branch (60:9): [True: 396, False: 984]
  ------------------
   61|    396|        formatter_data_t auth_fdata = {
   62|    396|            .raw_data = data,
   63|    396|            .raw_data_len = size,
   64|    396|            .envelope = &envelope,
   65|    396|            .caption = detail_caption,
   66|    396|            .value = detail_value,
   67|    396|            .signing_key = signing_key,
   68|    396|            .caption_len = DETAIL_CAPTION_MAX_LENGTH,
  ------------------
  |  |    9|    396|#define DETAIL_CAPTION_MAX_LENGTH 21
  ------------------
   69|    396|            .value_len = DETAIL_VALUE_MAX_LENGTH,
  ------------------
  |  |   10|    396|#define DETAIL_VALUE_MAX_LENGTH   105
  ------------------
   70|    396|            .display_sequence = true,
   71|    396|            .plugin_check_presence = &plugin_check_presence,
   72|    396|            .plugin_init_contract = &plugin_init_contract,
   73|    396|            .plugin_query_data_pair_count = &plugin_query_data_pair_count,
   74|    396|            .plugin_query_data_pair = &plugin_query_data_pair,
   75|    396|        };
   76|       |
   77|    396|        reset_formatter();
   78|       |
   79|  5.78k|        while (true) {
   80|  5.78k|            if (!get_next_data(&auth_fdata, true, &data_exists, &is_op_header)) {
  ------------------
  |  Branch (80:17): [True: 109, False: 5.68k]
  ------------------
   81|    109|                break;
   82|    109|            }
   83|       |
   84|  5.68k|            if (!data_exists) {
  ------------------
  |  Branch (84:17): [True: 287, False: 5.39k]
  ------------------
   85|    287|                break;
   86|    287|            }
   87|  5.68k|        }
   88|    396|    }
   89|       |
   90|  1.38k|    return 0;
   91|  1.38k|}
fuzz_tx.c:plugin_check_presence:
   93|  1.37k|static bool plugin_check_presence(const uint8_t *contract_address) {
   94|  1.37k|    uint8_t expected[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   95|  1.37k|                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   96|  1.37k|                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
   97|  1.37k|    return memcmp(contract_address, expected, 32) == 0;
   98|  1.37k|}
fuzz_tx.c:plugin_init_contract:
  100|    144|stellar_plugin_result_t plugin_init_contract(const uint8_t *contract_address) {
  101|       |    // Build-in token plugin
  102|    144|    if (plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (102:9): [True: 144, False: 0]
  ------------------
  103|    144|        return STELLAR_PLUGIN_RESULT_OK;
  104|    144|    }
  105|      0|    return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  106|    144|}
fuzz_tx.c:plugin_query_data_pair_count:
  109|    144|                                                     uint8_t *data_pair_count) {
  110|       |    // Build-in token plugin
  111|    144|    if (plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (111:9): [True: 144, False: 0]
  ------------------
  112|    144|        *data_pair_count = 3;
  113|    144|        return STELLAR_PLUGIN_RESULT_OK;
  114|    144|    }
  115|      0|    return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  116|    144|}
fuzz_tx.c:plugin_query_data_pair:
  123|    432|                                               uint8_t value_len) {
  124|    432|    if (!plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (124:9): [True: 0, False: 432]
  ------------------
  125|      0|        return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  126|      0|    }
  127|    432|    switch (data_pair_index) {
  128|    144|        case 0:
  ------------------
  |  Branch (128:9): [True: 144, False: 288]
  ------------------
  129|    144|            strncpy(caption, "caption 0", caption_len);
  130|    144|            strncpy(value, "value 0", value_len);
  131|    144|            break;
  132|    144|        case 1:
  ------------------
  |  Branch (132:9): [True: 144, False: 288]
  ------------------
  133|    144|            strncpy(caption, "caption 1", caption_len);
  134|    144|            strncpy(value, "value 1", value_len);
  135|    144|            break;
  136|    144|        case 2:
  ------------------
  |  Branch (136:9): [True: 144, False: 288]
  ------------------
  137|    144|            strncpy(caption, "caption 2", caption_len);
  138|    144|            strncpy(value, "value 2", value_len);
  139|    144|            break;
  140|      0|        default:
  ------------------
  |  Branch (140:9): [True: 0, False: 432]
  ------------------
  141|      0|            return STELLAR_PLUGIN_RESULT_ERROR;
  142|    432|    }
  143|    432|    return STELLAR_PLUGIN_RESULT_OK;
  144|    432|}

base32_encode:
   64|  3.88k|int base32_encode(const uint8_t *data, int length, uint8_t *result, int buf_size) {
   65|  3.88k|    if (length < 0 || length > (1 << 28)) {
  ------------------
  |  Branch (65:9): [True: 0, False: 3.88k]
  |  Branch (65:23): [True: 0, False: 3.88k]
  ------------------
   66|      0|        return -1;
   67|      0|    }
   68|  3.88k|    int count = 0;
   69|  3.88k|    if (length > 0) {
  ------------------
  |  Branch (69:9): [True: 3.88k, False: 0]
  ------------------
   70|  3.88k|        uint32_t buffer = data[0];
   71|  3.88k|        int next = 1;
   72|  3.88k|        int bits_left = 8;
   73|   223k|        while (count < buf_size && (bits_left > 0 || next < length)) {
  ------------------
  |  Branch (73:16): [True: 219k, False: 3.81k]
  |  Branch (73:37): [True: 196k, False: 23.6k]
  |  Branch (73:54): [True: 23.6k, False: 73]
  ------------------
   74|   219k|            if (bits_left < 5) {
  ------------------
  |  Branch (74:17): [True: 133k, False: 86.2k]
  ------------------
   75|   133k|                if (next < length) {
  ------------------
  |  Branch (75:21): [True: 133k, False: 71]
  ------------------
   76|   133k|                    buffer <<= 8;
   77|   133k|                    buffer |= data[next++] & 0xFF;
   78|   133k|                    bits_left += 8;
   79|   133k|                } else {
   80|     71|                    int pad = 5 - bits_left;
   81|     71|                    buffer <<= pad;
   82|     71|                    bits_left += pad;
   83|     71|                }
   84|   133k|            }
   85|   219k|            int index = 0x1F & (buffer >> (bits_left - 5));
   86|   219k|            bits_left -= 5;
   87|   219k|            result[count++] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"[index];
   88|   219k|        }
   89|  3.88k|    }
   90|  3.88k|    if (count < buf_size) {
  ------------------
  |  Branch (90:9): [True: 73, False: 3.81k]
  ------------------
   91|     73|        result[count] = '\000';
   92|     73|    }
   93|  3.88k|    return count;
   94|  3.88k|}

base64_encode:
   11|     17|bool base64_encode(const uint8_t *data, size_t in_len, char *out, size_t out_len) {
   12|     17|    size_t encoded_len = 4 * ((in_len + 2) / 3);
   13|     17|    if (encoded_len > out_len) {
  ------------------
  |  Branch (13:9): [True: 0, False: 17]
  ------------------
   14|      0|        return false;
   15|      0|    }
   16|       |
   17|     89|    for (unsigned int i = 0, j = 0; i < in_len;) {
  ------------------
  |  Branch (17:37): [True: 72, False: 17]
  ------------------
   18|     72|        uint32_t octet_a = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (18:28): [True: 72, False: 0]
  ------------------
   19|     72|        uint32_t octet_b = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (19:28): [True: 66, False: 6]
  ------------------
   20|     72|        uint32_t octet_c = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (20:28): [True: 62, False: 10]
  ------------------
   21|       |
   22|     72|        uint32_t triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;
   23|       |
   24|     72|        out[j++] = BASE64_ALPHABET[(triple >> 3 * 6) & 0x3F];
   25|     72|        out[j++] = BASE64_ALPHABET[(triple >> 2 * 6) & 0x3F];
   26|     72|        out[j++] = BASE64_ALPHABET[(triple >> 1 * 6) & 0x3F];
   27|     72|        out[j++] = BASE64_ALPHABET[(triple >> 0 * 6) & 0x3F];
   28|     72|    }
   29|       |
   30|     33|    for (int i = 0; i < BASE64_MOD_TABLE[in_len % 3]; i++) {
  ------------------
  |  Branch (30:21): [True: 16, False: 17]
  ------------------
   31|     16|        out[encoded_len - 1 - i] = '=';
   32|     16|    }
   33|       |
   34|     17|    out[encoded_len] = '\0';
   35|     17|    return true;
   36|     17|}

reset_formatter:
 2428|    948|void reset_formatter(void) {
 2429|    948|    explicit_bzero(formatter_stack, sizeof(formatter_stack));
 2430|    948|    formatter_index = 0;
 2431|    948|    current_data_index = 0;
 2432|    948|}
get_next_data:
 2434|  20.6k|bool get_next_data(formatter_data_t *fdata, bool forward, bool *data_exists, bool *is_op_header) {
 2435|  20.6k|    if (current_data_index == 0 && formatter_index == 0 && !forward) {
  ------------------
  |  Branch (2435:9): [True: 8.62k, False: 11.9k]
  |  Branch (2435:36): [True: 948, False: 7.67k]
  |  Branch (2435:60): [True: 0, False: 948]
  ------------------
 2436|      0|        return false;
 2437|      0|    }
 2438|  20.6k|    explicit_bzero(fdata->caption, fdata->caption_len);
 2439|  20.6k|    explicit_bzero(fdata->value, fdata->value_len);
 2440|  20.6k|    *is_op_header = false;
 2441|  20.6k|    uint8_t total_data = get_data_count(fdata);
 2442|       |    // printf("current_data_index: %d, formatter_index: %d\n", current_data_index,
 2443|       |    // formatter_index);
 2444|  20.6k|    if (forward) {
  ------------------
  |  Branch (2444:9): [True: 20.6k, False: 0]
  ------------------
 2445|  20.6k|        if (current_data_index == 0 && formatter_index == 0) {
  ------------------
  |  Branch (2445:13): [True: 8.62k, False: 11.9k]
  |  Branch (2445:40): [True: 948, False: 7.67k]
  ------------------
 2446|    948|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|    948|    {                           \
  |  |   31|    948|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 948]
  |  |  ------------------
  |  |   32|    948|    }
  ------------------
 2447|    948|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2447:17): [True: 0, False: 948]
  ------------------
 2448|      0|                return false;
 2449|      0|            }
 2450|    948|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|    948|    {                           \
  |  |   31|    948|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 948]
  |  |  ------------------
  |  |   32|    948|    }
  ------------------
 2451|    948|            *data_exists = true;
 2452|  19.6k|        } else if (current_data_index < total_data - 1 &&
  ------------------
  |  Branch (2452:20): [True: 12.0k, False: 7.66k]
  ------------------
 2453|  19.6k|                   formatter_stack[formatter_index - 1] == NULL) {
  ------------------
  |  Branch (2453:20): [True: 3.04k, False: 8.97k]
  ------------------
 2454|  3.04k|            current_data_index++;
 2455|  3.04k|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|  3.04k|    {                           \
  |  |   31|  3.04k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.04k]
  |  |  ------------------
  |  |   32|  3.04k|    }
  ------------------
 2456|  3.04k|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2456:17): [True: 0, False: 3.04k]
  ------------------
 2457|      0|                return false;
 2458|      0|            }
 2459|  3.04k|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|  3.04k|    {                           \
  |  |   31|  3.04k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 2, False: 3.03k]
  |  |  ------------------
  |  |   32|  3.04k|    }
  ------------------
 2460|  3.03k|            *is_op_header = true;
 2461|  3.03k|            *data_exists = true;
 2462|  16.6k|        } else if (current_data_index == total_data - 1 &&
  ------------------
  |  Branch (2462:20): [True: 7.66k, False: 8.97k]
  ------------------
 2463|  16.6k|                   formatter_stack[formatter_index - 1] == NULL) {
  ------------------
  |  Branch (2463:20): [True: 816, False: 6.84k]
  ------------------
 2464|    816|            formatter_index++;  // we can back from the approve page
 2465|    816|            *data_exists = false;
 2466|  15.8k|        } else {
 2467|  15.8k|            FORMATTER_CHECK(formatter_stack[formatter_index - 1](fdata));
  ------------------
  |  |   30|  15.8k|    {                           \
  |  |   31|  15.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 130, False: 15.6k]
  |  |  ------------------
  |  |   32|  15.8k|    }
  ------------------
 2468|  15.6k|            *data_exists = true;
 2469|  15.6k|        }
 2470|  20.6k|    } else {
 2471|      0|        if (current_data_index == 0 && formatter_index == 2) {
  ------------------
  |  Branch (2471:13): [True: 0, False: 0]
  |  Branch (2471:40): [True: 0, False: 0]
  ------------------
 2472|      0|            formatter_index = 0;
 2473|      0|            *data_exists = false;
 2474|      0|        } else if (current_data_index > 0 && formatter_index == 2) {
  ------------------
  |  Branch (2474:20): [True: 0, False: 0]
  |  Branch (2474:46): [True: 0, False: 0]
  ------------------
 2475|      0|            current_data_index -= 1;
 2476|      0|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2477|      0|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2477:17): [True: 0, False: 0]
  ------------------
 2478|      0|                return false;
 2479|      0|            }
 2480|      0|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2481|      0|            *data_exists = true;
 2482|      0|            if (current_data_index > 0) {
  ------------------
  |  Branch (2482:17): [True: 0, False: 0]
  ------------------
 2483|      0|                *is_op_header = true;
 2484|      0|            }
 2485|      0|        } else {
 2486|      0|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2487|      0|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2487:17): [True: 0, False: 0]
  ------------------
 2488|      0|                return false;
 2489|      0|            }
 2490|      0|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2491|      0|            *data_exists = true;
 2492|      0|            if (current_data_index > 0) {
  ------------------
  |  Branch (2492:17): [True: 0, False: 0]
  ------------------
 2493|      0|                *is_op_header = true;
 2494|      0|            }
 2495|      0|        }
 2496|      0|    }
 2497|       |
 2498|  20.4k|    return true;
 2499|  20.6k|}
formatter.c:get_data_count:
 2420|  20.6k|static uint8_t get_data_count(formatter_data_t *fdata) {
 2421|  20.6k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2421:9): [True: 5.78k, False: 14.8k]
  ------------------
 2422|  5.78k|        return 1;
 2423|  5.78k|    }
 2424|  14.8k|    uint8_t op_cnt = fdata->envelope->tx_details.tx.operations_count;
 2425|  14.8k|    return op_cnt + 1;
 2426|  20.6k|}
formatter.c:format:
 2398|  3.98k|static bool format(formatter_data_t *fdata, uint8_t data_index) {
 2399|  3.98k|    explicit_bzero(formatter_stack, sizeof(formatter_stack));
 2400|  3.98k|    formatter_index = 0;
 2401|  3.98k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2401:9): [True: 396, False: 3.59k]
  ------------------
 2402|    396|        return format_soroban_authorization(fdata);
 2403|  3.59k|    } else {
 2404|  3.59k|        if (data_index == 0) {
  ------------------
  |  Branch (2404:13): [True: 552, False: 3.04k]
  ------------------
 2405|    552|            return format_transaction_info(fdata);
 2406|  3.04k|        } else {
 2407|  3.04k|            uint8_t op_index = data_index - 1;
 2408|  3.04k|            if (!parse_transaction_operation(fdata->raw_data,
  ------------------
  |  Branch (2408:17): [True: 0, False: 3.04k]
  ------------------
 2409|  3.04k|                                             fdata->raw_data_len,
 2410|  3.04k|                                             fdata->envelope,
 2411|  3.04k|                                             op_index)) {
 2412|      0|                return false;
 2413|  3.04k|            };
 2414|  3.04k|            FORMATTER_CHECK(push_to_formatter_stack(&format_confirm_operation))
  ------------------
  |  |   30|  3.04k|    {                           \
  |  |   31|  3.04k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.04k]
  |  |  ------------------
  |  |   32|  3.04k|    }
  ------------------
 2415|  3.04k|        }
 2416|  3.59k|    }
 2417|  3.04k|    return true;
 2418|  3.98k|}
formatter.c:format_soroban_authorization:
 2389|    396|static bool format_soroban_authorization(formatter_data_t *fdata) {
 2390|    396|    if (fdata->envelope->network != 0) {
  ------------------
  |  Branch (2390:9): [True: 382, False: 14]
  ------------------
 2391|    382|        FORMATTER_CHECK(push_to_formatter_stack(&format_network))
  ------------------
  |  |   30|    382|    {                           \
  |  |   31|    382|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 382]
  |  |  ------------------
  |  |   32|    382|    }
  ------------------
 2392|    382|    } else {
 2393|     14|        FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_nonce))
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
 2394|     14|    }
 2395|    396|    return true;
 2396|    396|}
formatter.c:format_network:
 2369|    900|static bool format_network(formatter_data_t *fdata) {
 2370|    900|    STRLCPY(fdata->caption, "Network", fdata->caption_len);
  ------------------
  |  |   35|    900|    {                                         \
  |  |   36|    900|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    900|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 900]
  |  |  ------------------
  |  |   38|    900|    }
  ------------------
 2371|    900|    STRLCPY(fdata->value, (char *) PIC(NETWORK_NAMES[fdata->envelope->network]), fdata->value_len);
  ------------------
  |  |   35|    900|    {                                         \
  |  |   36|    900|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    900|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 900]
  |  |  ------------------
  |  |   38|    900|    }
  ------------------
 2372|    900|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2372:9): [True: 382, False: 518]
  ------------------
 2373|    382|        FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_nonce))
  ------------------
  |  |   30|    382|    {                           \
  |  |   31|    382|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 382]
  |  |  ------------------
  |  |   32|    382|    }
  ------------------
 2374|    518|    } else {
 2375|    518|        return get_tx_details_formatter(fdata);
 2376|    518|    }
 2377|    382|    return true;
 2378|    900|}
formatter.c:get_tx_details_formatter:
 2328|    552|static bool get_tx_details_formatter(formatter_data_t *fdata) {
 2329|    552|    if (fdata->envelope->type == ENVELOPE_TYPE_TX_FEE_BUMP) {
  ------------------
  |  Branch (2329:9): [True: 6, False: 546]
  ------------------
 2330|      6|        FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_details))
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
 2331|      6|    }
 2332|       |
 2333|    552|    if (fdata->envelope->type == ENVELOPE_TYPE_TX) {
  ------------------
  |  Branch (2333:9): [True: 546, False: 6]
  ------------------
 2334|    546|        if (fdata->envelope->tx_details.tx.memo.type != MEMO_NONE) {
  ------------------
  |  Branch (2334:13): [True: 41, False: 505]
  ------------------
 2335|     41|            FORMATTER_CHECK(push_to_formatter_stack(&format_memo))
  ------------------
  |  |   30|     41|    {                           \
  |  |   31|     41|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   32|     41|    }
  ------------------
 2336|    505|        } else {
 2337|    505|            FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|    505|    {                           \
  |  |   31|    505|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 505]
  |  |  ------------------
  |  |   32|    505|    }
  ------------------
 2338|    505|        }
 2339|    546|    }
 2340|       |
 2341|    552|    return true;
 2342|    552|}
formatter.c:format_fee_bump_transaction_details:
 2320|      6|static bool format_fee_bump_transaction_details(formatter_data_t *fdata) {
 2321|      6|    (void) fdata;
 2322|      6|    STRLCPY(fdata->caption, "Fee Bump", fdata->caption_len);
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
 2323|      6|    STRLCPY(fdata->value, "Transaction Details", fdata->value_len);
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
 2324|      6|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_source))
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
 2325|      6|    return true;
 2326|      6|}
formatter.c:format_fee_bump_transaction_source:
 2297|      6|static bool format_fee_bump_transaction_source(formatter_data_t *fdata) {
 2298|      6|    STRLCPY(fdata->caption, "Fee Source", fdata->caption_len);
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
 2299|      6|    if (fdata->envelope->type == ENVELOPE_TYPE_TX_FEE_BUMP &&
  ------------------
  |  Branch (2299:9): [True: 6, False: 0]
  ------------------
 2300|      6|        fdata->envelope->tx_details.fee_bump_tx.fee_source.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (2300:9): [True: 5, False: 1]
  ------------------
 2301|      6|        memcmp(fdata->envelope->tx_details.fee_bump_tx.fee_source.ed25519,
  ------------------
  |  Branch (2301:9): [True: 3, False: 2]
  ------------------
 2302|      5|               fdata->signing_key,
 2303|      5|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|      5|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 2304|      3|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.fee_bump_tx.fee_source,
  ------------------
  |  |   30|      3|    {                           \
  |  |   31|      3|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   32|      3|    }
  ------------------
 2305|      3|                                            fdata->value,
 2306|      3|                                            fdata->value_len,
 2307|      3|                                            6,
 2308|      3|                                            6))
 2309|      3|    } else {
 2310|      3|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.fee_bump_tx.fee_source,
  ------------------
  |  |   30|      3|    {                           \
  |  |   31|      3|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   32|      3|    }
  ------------------
 2311|      3|                                            fdata->value,
 2312|      3|                                            fdata->value_len,
 2313|      3|                                            0,
 2314|      3|                                            0))
 2315|      3|    }
 2316|      6|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_fee))
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
 2317|      6|    return true;
 2318|      6|}
formatter.c:format_fee_bump_transaction_fee:
 2285|      6|static bool format_fee_bump_transaction_fee(formatter_data_t *fdata) {
 2286|      6|    STRLCPY(fdata->caption, "Max Fee", fdata->caption_len);
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
 2287|      6|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
 2288|      6|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.fee_bump_tx.fee,
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
 2289|      6|                                 &asset,
 2290|      6|                                 fdata->envelope->network,
 2291|      6|                                 fdata->value,
 2292|      6|                                 fdata->value_len))
 2293|      6|    FORMATTER_CHECK(push_to_formatter_stack(&format_transaction_details))
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
 2294|      6|    return true;
 2295|      6|}
formatter.c:format_transaction_details:
  285|      6|static bool format_transaction_details(formatter_data_t *fdata) {
  286|      6|    switch (fdata->envelope->type) {
  287|      6|        case ENVELOPE_TYPE_TX_FEE_BUMP:
  ------------------
  |  Branch (287:9): [True: 6, False: 0]
  ------------------
  288|      6|            STRLCPY(fdata->caption, "InnerTx", fdata->caption_len);
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
  289|      6|            break;
  290|      0|        case ENVELOPE_TYPE_TX:
  ------------------
  |  Branch (290:9): [True: 0, False: 6]
  ------------------
  291|      0|            STRLCPY(fdata->caption, "Transaction", fdata->caption_len);
  ------------------
  |  |   35|      0|    {                                         \
  |  |   36|      0|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      0|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   38|      0|    }
  ------------------
  292|      0|            break;
  293|      0|        default:
  ------------------
  |  Branch (293:9): [True: 0, False: 6]
  ------------------
  294|      0|            return false;
  295|      6|    }
  296|      6|    STRLCPY(fdata->value, "Details", fdata->value_len);
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
  297|      6|    if (fdata->envelope->tx_details.tx.memo.type != MEMO_NONE) {
  ------------------
  |  Branch (297:9): [True: 3, False: 3]
  ------------------
  298|      3|        FORMATTER_CHECK(push_to_formatter_stack(&format_memo))
  ------------------
  |  |   30|      3|    {                           \
  |  |   31|      3|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   32|      3|    }
  ------------------
  299|      3|    } else {
  300|      3|        FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|      3|    {                           \
  |  |   31|      3|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   32|      3|    }
  ------------------
  301|      3|    }
  302|      6|    return true;
  303|      6|}
formatter.c:format_memo:
  242|     44|static bool format_memo(formatter_data_t *fdata) {
  243|     44|    memo_t *memo = &fdata->envelope->tx_details.tx.memo;
  244|     44|    switch (memo->type) {
  245|      2|        case MEMO_ID: {
  ------------------
  |  Branch (245:9): [True: 2, False: 42]
  ------------------
  246|      2|            STRLCPY(fdata->caption, "Memo ID", fdata->caption_len);
  ------------------
  |  |   35|      2|    {                                         \
  |  |   36|      2|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      2|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   38|      2|    }
  ------------------
  247|      2|            FORMATTER_CHECK(print_uint64_num(memo->id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|      2|    {                           \
  |  |   31|      2|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   32|      2|    }
  ------------------
  248|      2|            break;
  249|      2|        }
  250|     40|        case MEMO_TEXT: {
  ------------------
  |  Branch (250:9): [True: 40, False: 4]
  ------------------
  251|     40|            STRLCPY(fdata->caption, "Memo Text", fdata->caption_len);
  ------------------
  |  |   35|     40|    {                                         \
  |  |   36|     40|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     40|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 40]
  |  |  ------------------
  |  |   38|     40|    }
  ------------------
  252|     40|            if (is_printable_binary(memo->text.text, memo->text.text_size)) {
  ------------------
  |  Branch (252:17): [True: 25, False: 15]
  ------------------
  253|     25|                FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  254|     25|                                             fdata->value_len,
  255|     25|                                             memo->text.text,
  256|     25|                                             memo->text.text_size))
  257|     25|            } else {
  258|     15|                STRLCPY(fdata->value, "Base64: ", fdata->value_len)
  ------------------
  |  |   35|     15|    {                                         \
  |  |   36|     15|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     15|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   38|     15|    }
  ------------------
  259|     15|                FORMATTER_CHECK(base64_encode(memo->text.text,
  ------------------
  |  |   30|     15|    {                           \
  |  |   31|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   32|     15|    }
  ------------------
  260|     15|                                              memo->text.text_size,
  261|     15|                                              fdata->value + strlen(fdata->value),
  262|     15|                                              fdata->value_len - strlen(fdata->value)))
  263|     15|            }
  264|     40|            break;
  265|     40|        }
  266|     40|        case MEMO_HASH: {
  ------------------
  |  Branch (266:9): [True: 1, False: 43]
  ------------------
  267|      1|            STRLCPY(fdata->caption, "Memo Hash", fdata->caption_len);
  ------------------
  |  |   35|      1|    {                                         \
  |  |   36|      1|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      1|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   38|      1|    }
  ------------------
  268|      1|            FORMATTER_CHECK(
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
  269|      1|                print_binary(memo->hash, HASH_SIZE, fdata->value, fdata->value_len, 0, 0))
  270|      1|            break;
  271|      1|        }
  272|      1|        case MEMO_RETURN: {
  ------------------
  |  Branch (272:9): [True: 1, False: 43]
  ------------------
  273|      1|            STRLCPY(fdata->caption, "Memo Return", fdata->caption_len);
  ------------------
  |  |   35|      1|    {                                         \
  |  |   36|      1|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      1|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   38|      1|    }
  ------------------
  274|      1|            FORMATTER_CHECK(
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
  275|      1|                print_binary(memo->hash, HASH_SIZE, fdata->value, fdata->value_len, 0, 0))
  276|      1|            break;
  277|      1|        }
  278|      1|        default:
  ------------------
  |  Branch (278:9): [True: 0, False: 44]
  ------------------
  279|      0|            return false;
  280|     44|    }
  281|     44|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|     44|    {                           \
  |  |   31|     44|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 44]
  |  |  ------------------
  |  |   32|     44|    }
  ------------------
  282|     44|    return true;
  283|     44|}
formatter.c:format_fee:
  226|    552|static bool format_fee(formatter_data_t *fdata) {
  227|    552|    STRLCPY(fdata->caption, "Max Fee", fdata->caption_len);
  ------------------
  |  |   35|    552|    {                                         \
  |  |   36|    552|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    552|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 552]
  |  |  ------------------
  |  |   38|    552|    }
  ------------------
  228|    552|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
  229|    552|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.fee,
  ------------------
  |  |   30|    552|    {                           \
  |  |   31|    552|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 552]
  |  |  ------------------
  |  |   32|    552|    }
  ------------------
  230|    552|                                 &asset,
  231|    552|                                 fdata->envelope->network,
  232|    552|                                 fdata->value,
  233|    552|                                 fdata->value_len))
  234|    552|    if (fdata->display_sequence) {
  ------------------
  |  Branch (234:9): [True: 552, False: 0]
  ------------------
  235|    552|        FORMATTER_CHECK(push_to_formatter_stack(&format_sequence))
  ------------------
  |  |   30|    552|    {                           \
  |  |   31|    552|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 552]
  |  |  ------------------
  |  |   32|    552|    }
  ------------------
  236|    552|    } else {
  237|      0|        FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds))
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
  238|      0|    }
  239|    552|    return true;
  240|    552|}
formatter.c:format_sequence:
  217|    552|static bool format_sequence(formatter_data_t *fdata) {
  218|    552|    STRLCPY(fdata->caption, "Sequence Num", fdata->caption_len);
  ------------------
  |  |   35|    552|    {                                         \
  |  |   36|    552|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    552|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 552]
  |  |  ------------------
  |  |   38|    552|    }
  ------------------
  219|    552|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.sequence_number,
  ------------------
  |  |   30|    552|    {                           \
  |  |   31|    552|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 552]
  |  |  ------------------
  |  |   32|    552|    }
  ------------------
  220|    552|                                     fdata->value,
  221|    552|                                     fdata->value_len))
  222|    552|    FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds))
  ------------------
  |  |   30|    552|    {                           \
  |  |   31|    552|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 552]
  |  |  ------------------
  |  |   32|    552|    }
  ------------------
  223|    552|    return true;
  224|    552|}
formatter.c:format_time_bounds:
  204|    552|static bool format_time_bounds(formatter_data_t *fdata) {
  205|    552|    if (!fdata->envelope->tx_details.tx.cond.time_bounds_present ||
  ------------------
  |  Branch (205:9): [True: 513, False: 39]
  ------------------
  206|    552|        (fdata->envelope->tx_details.tx.cond.time_bounds.min_time == 0 &&
  ------------------
  |  Branch (206:10): [True: 31, False: 8]
  ------------------
  207|    521|         fdata->envelope->tx_details.tx.cond.time_bounds.max_time == 0)) {
  ------------------
  |  Branch (207:10): [True: 8, False: 23]
  ------------------
  208|    521|        return format_ledger_bounds(fdata);
  209|    521|    } else if (fdata->envelope->tx_details.tx.cond.time_bounds.min_time != 0) {
  ------------------
  |  Branch (209:16): [True: 8, False: 23]
  ------------------
  210|      8|        return format_time_bounds_min_time(fdata);
  211|     23|    } else {
  212|     23|        return format_time_bounds_max_time(fdata);
  213|     23|    }
  214|      0|    return true;
  215|    552|}
formatter.c:format_ledger_bounds:
  168|    548|static bool format_ledger_bounds(formatter_data_t *fdata) {
  169|    548|    if (!fdata->envelope->tx_details.tx.cond.ledger_bounds_present ||
  ------------------
  |  Branch (169:9): [True: 543, False: 5]
  ------------------
  170|    548|        (fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger == 0 &&
  ------------------
  |  Branch (170:10): [True: 2, False: 3]
  ------------------
  171|    544|         fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger == 0)) {
  ------------------
  |  Branch (171:10): [True: 1, False: 1]
  ------------------
  172|    544|        return format_min_seq_num_prepare(fdata);
  173|    544|    } else if (fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger != 0) {
  ------------------
  |  Branch (173:16): [True: 3, False: 1]
  ------------------
  174|      3|        return format_ledger_bounds_min_ledger(fdata);
  175|      3|    } else {
  176|      1|        return format_ledger_bounds_max_ledger(fdata);
  177|      1|    }
  178|      0|    return true;
  179|    548|}
formatter.c:format_min_seq_num_prepare:
  137|    548|static bool format_min_seq_num_prepare(formatter_data_t *fdata) {
  138|    548|    if (!fdata->envelope->tx_details.tx.cond.min_seq_num_present ||
  ------------------
  |  Branch (138:9): [True: 546, False: 2]
  ------------------
  139|    548|        fdata->envelope->tx_details.tx.cond.min_seq_num == 0) {
  ------------------
  |  Branch (139:9): [True: 1, False: 1]
  ------------------
  140|    547|        return format_min_seq_age_prepare(fdata);
  141|    547|    } else {
  142|      1|        return format_min_seq_num(fdata);
  143|      1|    }
  144|    548|}
formatter.c:format_min_seq_age_prepare:
  119|    548|static bool format_min_seq_age_prepare(formatter_data_t *fdata) {
  120|    548|    if (fdata->envelope->tx_details.tx.cond.min_seq_age == 0) {
  ------------------
  |  Branch (120:9): [True: 544, False: 4]
  ------------------
  121|    544|        format_min_seq_ledger_gap_prepare(fdata);
  122|    544|    } else {
  123|      4|        format_min_seq_age(fdata);
  124|      4|    }
  125|    548|    return true;
  126|    548|}
formatter.c:format_min_seq_ledger_gap_prepare:
  102|    548|static bool format_min_seq_ledger_gap_prepare(formatter_data_t *fdata) {
  103|    548|    if (fdata->envelope->tx_details.tx.cond.min_seq_ledger_gap == 0) {
  ------------------
  |  Branch (103:9): [True: 547, False: 1]
  ------------------
  104|    547|        return format_transaction_source(fdata);
  105|    547|    } else {
  106|      1|        return format_min_seq_ledger_gap(fdata);
  107|      1|    }
  108|    548|}
formatter.c:format_transaction_source:
   70|    548|static bool format_transaction_source(formatter_data_t *fdata) {
   71|    548|    STRLCPY(fdata->caption, "Tx Source", fdata->caption_len);
  ------------------
  |  |   35|    548|    {                                         \
  |  |   36|    548|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    548|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 548]
  |  |  ------------------
  |  |   38|    548|    }
  ------------------
   72|    548|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (72:9): [True: 542, False: 6]
  ------------------
   73|    548|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (73:9): [True: 532, False: 10]
  ------------------
   74|    548|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (74:9): [True: 51, False: 481]
  ------------------
   75|    532|               fdata->signing_key,
   76|    532|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|    532|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
   77|     51|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.source_account,
  ------------------
  |  |   30|     51|    {                           \
  |  |   31|     51|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 51]
  |  |  ------------------
  |  |   32|     51|    }
  ------------------
   78|     51|                                            fdata->value,
   79|     51|                                            fdata->value_len,
   80|     51|                                            6,
   81|     51|                                            6))
   82|    497|    } else {
   83|    497|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.source_account,
  ------------------
  |  |   30|    497|    {                           \
  |  |   31|    497|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 497]
  |  |  ------------------
  |  |   32|    497|    }
  ------------------
   84|    497|                                            fdata->value,
   85|    497|                                            fdata->value_len,
   86|    497|                                            0,
   87|    497|                                            0))
   88|    497|    }
   89|    548|    FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|    548|    {                           \
  |  |   31|    548|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 548]
  |  |  ------------------
  |  |   32|    548|    }
  ------------------
   90|    548|    return true;
   91|    548|}
formatter.c:format_min_seq_ledger_gap:
   93|      1|static bool format_min_seq_ledger_gap(formatter_data_t *fdata) {
   94|      1|    STRLCPY(fdata->caption, "Min Seq Ledger Gap", fdata->caption_len);
  ------------------
  |  |   35|      1|    {                                         \
  |  |   36|      1|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      1|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   38|      1|    }
  ------------------
   95|      1|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_ledger_gap,
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
   96|      1|                                     fdata->value,
   97|      1|                                     fdata->value_len))
   98|      1|    FORMATTER_CHECK(push_to_formatter_stack(&format_transaction_source))
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
   99|      1|    return true;
  100|      1|}
formatter.c:format_min_seq_age:
  110|      4|static bool format_min_seq_age(formatter_data_t *fdata) {
  111|      4|    STRLCPY(fdata->caption, "Min Seq Age", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  112|      4|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_age,
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  113|      4|                                     fdata->value,
  114|      4|                                     fdata->value_len))
  115|      4|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_ledger_gap_prepare))
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  116|      4|    return true;
  117|      4|}
formatter.c:format_min_seq_num:
  128|      1|static bool format_min_seq_num(formatter_data_t *fdata) {
  129|      1|    STRLCPY(fdata->caption, "Min Seq Num", fdata->caption_len);
  ------------------
  |  |   35|      1|    {                                         \
  |  |   36|      1|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      1|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   38|      1|    }
  ------------------
  130|      1|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_num,
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
  131|      1|                                     fdata->value,
  132|      1|                                     fdata->value_len))
  133|      1|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_age_prepare))
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
  134|      1|    return true;
  135|      1|}
formatter.c:format_ledger_bounds_min_ledger:
  155|      3|static bool format_ledger_bounds_min_ledger(formatter_data_t *fdata) {
  156|      3|    STRLCPY(fdata->caption, "Ledger Bounds Min", fdata->caption_len);
  ------------------
  |  |   35|      3|    {                                         \
  |  |   36|      3|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      3|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   38|      3|    }
  ------------------
  157|      3|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger,
  ------------------
  |  |   30|      3|    {                           \
  |  |   31|      3|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   32|      3|    }
  ------------------
  158|      3|                                     fdata->value,
  159|      3|                                     fdata->value_len))
  160|      3|    if (fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger != 0) {
  ------------------
  |  Branch (160:9): [True: 2, False: 1]
  ------------------
  161|      2|        FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds_max_ledger))
  ------------------
  |  |   30|      2|    {                           \
  |  |   31|      2|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   32|      2|    }
  ------------------
  162|      2|    } else {
  163|      1|        FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_num_prepare))
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
  164|      1|    }
  165|      3|    return true;
  166|      3|}
formatter.c:format_ledger_bounds_max_ledger:
  146|      3|static bool format_ledger_bounds_max_ledger(formatter_data_t *fdata) {
  147|      3|    STRLCPY(fdata->caption, "Ledger Bounds Max", fdata->caption_len);
  ------------------
  |  |   35|      3|    {                                         \
  |  |   36|      3|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      3|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   38|      3|    }
  ------------------
  148|      3|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger,
  ------------------
  |  |   30|      3|    {                           \
  |  |   31|      3|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   32|      3|    }
  ------------------
  149|      3|                                     fdata->value,
  150|      3|                                     fdata->value_len))
  151|      3|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_num_prepare))
  ------------------
  |  |   30|      3|    {                           \
  |  |   31|      3|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   32|      3|    }
  ------------------
  152|      3|    return true;
  153|      3|}
formatter.c:format_time_bounds_min_time:
  190|      8|static bool format_time_bounds_min_time(formatter_data_t *fdata) {
  191|      8|    STRLCPY(fdata->caption, "Valid After (UTC)", fdata->caption_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
  192|      8|    FORMATTER_CHECK(print_time(fdata->envelope->tx_details.tx.cond.time_bounds.min_time,
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 2, False: 6]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
  193|      8|                               fdata->value,
  194|      8|                               fdata->value_len))
  195|       |
  196|      6|    if (fdata->envelope->tx_details.tx.cond.time_bounds.max_time != 0) {
  ------------------
  |  Branch (196:9): [True: 5, False: 1]
  ------------------
  197|      5|        FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds_max_time))
  ------------------
  |  |   30|      5|    {                           \
  |  |   31|      5|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   32|      5|    }
  ------------------
  198|      5|    } else {
  199|      1|        FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds))
  ------------------
  |  |   30|      1|    {                           \
  |  |   31|      1|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   32|      1|    }
  ------------------
  200|      1|    }
  201|      6|    return true;
  202|      6|}
formatter.c:format_time_bounds_max_time:
  181|     28|static bool format_time_bounds_max_time(formatter_data_t *fdata) {
  182|     28|    STRLCPY(fdata->caption, "Valid Before (UTC)", fdata->caption_len);
  ------------------
  |  |   35|     28|    {                                         \
  |  |   36|     28|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     28|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 28]
  |  |  ------------------
  |  |   38|     28|    }
  ------------------
  183|     28|    FORMATTER_CHECK(print_time(fdata->envelope->tx_details.tx.cond.time_bounds.max_time,
  ------------------
  |  |   30|     28|    {                           \
  |  |   31|     28|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 2, False: 26]
  |  |  ------------------
  |  |   32|     28|    }
  ------------------
  184|     28|                               fdata->value,
  185|     28|                               fdata->value_len))
  186|     26|    FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds))
  ------------------
  |  |   30|     26|    {                           \
  |  |   31|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   32|     26|    }
  ------------------
  187|     26|    return true;
  188|     26|}
formatter.c:format_soroban_authorization_nonce:
 2354|    396|static bool format_soroban_authorization_nonce(formatter_data_t *fdata) {
 2355|       |    // avoid the root invoke_contract_args be overwritten by the sub-invocation
 2356|    396|    if (!parse_soroban_authorization_envelope(fdata->raw_data,
  ------------------
  |  Branch (2356:9): [True: 0, False: 396]
  ------------------
 2357|    396|                                              fdata->raw_data_len,
 2358|    396|                                              fdata->envelope)) {
 2359|      0|        return false;
 2360|    396|    };
 2361|    396|    STRLCPY(fdata->caption, "Nonce", fdata->caption_len);
  ------------------
  |  |   35|    396|    {                                         \
  |  |   36|    396|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    396|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 396]
  |  |  ------------------
  |  |   38|    396|    }
  ------------------
 2362|    396|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->soroban_authorization.nonce,
  ------------------
  |  |   30|    396|    {                           \
  |  |   31|    396|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 396]
  |  |  ------------------
  |  |   32|    396|    }
  ------------------
 2363|    396|                                     fdata->value,
 2364|    396|                                     fdata->value_len))
 2365|    396|    FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_sig_exp))
  ------------------
  |  |   30|    396|    {                           \
  |  |   31|    396|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 396]
  |  |  ------------------
  |  |   32|    396|    }
  ------------------
 2366|    396|    return true;
 2367|    396|}
formatter.c:format_soroban_authorization_sig_exp:
 2344|    396|static bool format_soroban_authorization_sig_exp(formatter_data_t *fdata) {
 2345|    396|    STRLCPY(fdata->caption, "Sig Exp Ledger", fdata->caption_len);
  ------------------
  |  |   35|    396|    {                                         \
  |  |   36|    396|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    396|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 396]
  |  |  ------------------
  |  |   38|    396|    }
  ------------------
 2346|    396|    FORMATTER_CHECK(
  ------------------
  |  |   30|    396|    {                           \
  |  |   31|    396|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 396]
  |  |  ------------------
  |  |   32|    396|    }
  ------------------
 2347|    396|        print_uint64_num(fdata->envelope->soroban_authorization.signature_expiration_ledger,
 2348|    396|                         fdata->value,
 2349|    396|                         fdata->value_len))
 2350|    396|    FORMATTER_CHECK(push_to_formatter_stack(&format_auth_function));
  ------------------
  |  |   30|    396|    {                           \
  |  |   31|    396|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 396]
  |  |  ------------------
  |  |   32|    396|    }
  ------------------
 2351|    396|    return true;
 2352|    396|}
formatter.c:format_auth_function:
 2203|    396|static bool format_auth_function(formatter_data_t *fdata) {
 2204|    396|    switch (fdata->envelope->soroban_authorization.auth_function_type) {
 2205|    389|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
  ------------------
  |  Branch (2205:9): [True: 389, False: 7]
  ------------------
 2206|    389|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    389|    {                                         \
  |  |   36|    389|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    389|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 389]
  |  |  ------------------
  |  |   38|    389|    }
  ------------------
 2207|    389|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|    389|    {                                         \
  |  |   36|    389|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    389|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 389]
  |  |  ------------------
  |  |   38|    389|    }
  ------------------
 2208|    389|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_contract_id));
  ------------------
  |  |   30|    389|    {                           \
  |  |   31|    389|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 389]
  |  |  ------------------
  |  |   32|    389|    }
  ------------------
 2209|    389|            break;
 2210|      7|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (2210:9): [True: 7, False: 389]
  ------------------
 2211|      7|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|      7|    {                                         \
  |  |   36|      7|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      7|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   38|      7|    }
  ------------------
 2212|      7|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|      7|    {                                         \
  |  |   36|      7|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      7|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   38|      7|    }
  ------------------
 2213|       |            // we dont need to care the sub-invocation here
 2214|      7|            FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|      7|    {                           \
  |  |   31|      7|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   32|      7|    }
  ------------------
 2215|      7|            break;
 2216|      7|        default:
  ------------------
  |  Branch (2216:9): [True: 0, False: 396]
  ------------------
 2217|      0|            return false;
 2218|    396|    }
 2219|    396|    return true;
 2220|    396|}
formatter.c:format_invoke_host_function_contract_id:
 2156|    430|static bool format_invoke_host_function_contract_id(formatter_data_t *fdata) {
 2157|    430|    sc_address_t *address =
 2158|    430|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2158:9): [True: 389, False: 41]
  ------------------
 2159|    430|            ? &fdata->envelope->soroban_authorization.invoke_contract_args.address
 2160|    430|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2161|     41|                   .invoke_contract_args.address;
 2162|       |
 2163|    430|    STRLCPY(fdata->caption, "Contract ID", fdata->caption_len);
  ------------------
  |  |   35|    430|    {                                         \
  |  |   36|    430|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    430|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 430]
  |  |  ------------------
  |  |   38|    430|    }
  ------------------
 2164|       |
 2165|    430|    FORMATTER_CHECK(print_sc_address(address, fdata->value, fdata->value_len, 0, 0))
  ------------------
  |  |   30|    430|    {                           \
  |  |   31|    430|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 430]
  |  |  ------------------
  |  |   32|    430|    }
  ------------------
 2166|    430|    push_to_formatter_stack(&format_invoke_host_function_func_name);
 2167|    430|    return true;
 2168|    430|}
formatter.c:format_invoke_host_function_func_name:
 2124|    430|static bool format_invoke_host_function_func_name(formatter_data_t *fdata) {
 2125|    430|    invoke_contract_args_t invoke_contract_args;
 2126|    430|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2126:9): [True: 389, False: 41]
  ------------------
 2127|    389|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2128|    389|    } else {
 2129|     41|        invoke_contract_args =
 2130|     41|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2131|     41|    }
 2132|    430|    STRLCPY(fdata->caption, "Function", fdata->caption_len);
  ------------------
  |  |   35|    430|    {                                         \
  |  |   36|    430|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    430|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 430]
  |  |  ------------------
  |  |   38|    430|    }
  ------------------
 2133|    430|    FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|    430|    {                           \
  |  |   31|    430|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 430]
  |  |  ------------------
  |  |   32|    430|    }
  ------------------
 2134|    430|                                 fdata->value_len,
 2135|    430|                                 invoke_contract_args.function.name,
 2136|    430|                                 invoke_contract_args.function.name_size))
 2137|       |
 2138|    430|    uint8_t data_count = should_move_control_to_plugin(fdata);
 2139|    430|    if (data_count == 0) {
  ------------------
  |  Branch (2139:9): [True: 414, False: 16]
  ------------------
 2140|       |        // we should not move control to plugin
 2141|    414|        if (invoke_contract_args.parameters_length == 0) {
  ------------------
  |  Branch (2141:13): [True: 111, False: 303]
  ------------------
 2142|    111|            return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2143|    303|        } else {
 2144|    303|            parameters_index = 0;
 2145|    303|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args))
  ------------------
  |  |   30|    303|    {                           \
  |  |   31|    303|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 303]
  |  |  ------------------
  |  |   32|    303|    }
  ------------------
 2146|    303|        }
 2147|    414|    } else {
 2148|     16|        PRINTF("we should move control to plugin\n");
 2149|     16|        parameters_index = 0;
 2150|     16|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args_with_plugin))
  ------------------
  |  |   30|     16|    {                           \
  |  |   31|     16|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 16]
  |  |  ------------------
  |  |   32|     16|    }
  ------------------
 2151|     16|    }
 2152|       |
 2153|    319|    return true;
 2154|    430|}
formatter.c:should_move_control_to_plugin:
 1662|    747|static bool should_move_control_to_plugin(formatter_data_t *fdata) {
 1663|    747|    if (fdata->plugin_check_presence == NULL || fdata->plugin_init_contract == NULL ||
  ------------------
  |  Branch (1663:9): [True: 88, False: 659]
  |  Branch (1663:49): [True: 0, False: 659]
  ------------------
 1664|    747|        fdata->plugin_query_data_pair_count == NULL || fdata->plugin_query_data_pair == NULL) {
  ------------------
  |  Branch (1664:9): [True: 0, False: 659]
  |  Branch (1664:56): [True: 0, False: 659]
  ------------------
 1665|     88|        return false;
 1666|     88|    }
 1667|       |
 1668|    659|    invoke_contract_args_t invoke_contract_args;
 1669|    659|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1669:9): [True: 659, False: 0]
  ------------------
 1670|    659|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1671|    659|    } else {
 1672|      0|        invoke_contract_args =
 1673|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1674|      0|    }
 1675|       |
 1676|    659|    const uint8_t *contract_address = invoke_contract_args.address.address;
 1677|       |
 1678|       |    // check if plugin exists
 1679|    659|    if (!fdata->plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (1679:9): [True: 515, False: 144]
  ------------------
 1680|    515|        return false;
 1681|    515|    }
 1682|       |
 1683|       |    // init plugin
 1684|    144|    if (fdata->plugin_init_contract(contract_address) != STELLAR_PLUGIN_RESULT_OK) {
  ------------------
  |  Branch (1684:9): [True: 0, False: 144]
  ------------------
 1685|      0|        return false;
 1686|      0|    }
 1687|       |
 1688|       |    // get data count
 1689|    144|    if (fdata->plugin_query_data_pair_count(contract_address, &plugin_data_pair_count) !=
  ------------------
  |  Branch (1689:9): [True: 0, False: 144]
  ------------------
 1690|    144|        STELLAR_PLUGIN_RESULT_OK) {
 1691|      0|        return false;
 1692|      0|    }
 1693|       |
 1694|    144|    return plugin_data_pair_count != 0;
 1695|    144|}
formatter.c:format_operation_source_prepare_for_invoke_host_function_op:
 2025|    329|static bool format_operation_source_prepare_for_invoke_host_function_op(formatter_data_t *fdata) {
 2026|    329|    if (fdata->envelope->type != ENVELOPE_TYPE_SOROBAN_AUTHORIZATION &&
  ------------------
  |  Branch (2026:9): [True: 38, False: 291]
  ------------------
 2027|    329|        fdata->envelope->tx_details.tx.op_details.source_account_present) {
  ------------------
  |  Branch (2027:9): [True: 11, False: 27]
  ------------------
 2028|       |        // If the source exists, when the user clicks the next button,
 2029|       |        // it will jump to the page showing the source
 2030|     11|        FORMATTER_CHECK(
  ------------------
  |  |   30|     11|    {                           \
  |  |   31|     11|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 11]
  |  |  ------------------
  |  |   32|     11|    }
  ------------------
 2031|     11|            push_to_formatter_stack(&format_operation_source_for_invoke_host_function_op))
 2032|    318|    } else {
 2033|    318|        uint8_t sub_invocations_count =
 2034|    318|            fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2034:13): [True: 291, False: 27]
  ------------------
 2035|    318|                ? fdata->envelope->soroban_authorization.sub_invocations_count
 2036|    318|                : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2037|     27|                      .sub_invocations_count;
 2038|    318|        if (sub_invocations_count > 0) {
  ------------------
  |  Branch (2038:13): [True: 56, False: 262]
  ------------------
 2039|     56|            formatter_index = 0;
 2040|     56|            FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_start))
  ------------------
  |  |   30|     56|    {                           \
  |  |   31|     56|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 56]
  |  |  ------------------
  |  |   32|     56|    }
  ------------------
 2041|    262|        } else {
 2042|    262|            FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|    262|    {                           \
  |  |   31|    262|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 4, False: 258]
  |  |  ------------------
  |  |   32|    262|    }
  ------------------
 2043|    262|        }
 2044|    318|    }
 2045|    325|    return true;
 2046|    329|}
formatter.c:format_operation_source_for_invoke_host_function_op:
 1986|     11|static bool format_operation_source_for_invoke_host_function_op(formatter_data_t *fdata) {
 1987|     11|    STRLCPY(fdata->caption, "Op Source", fdata->caption_len);
  ------------------
  |  |   35|     11|    {                                         \
  |  |   36|     11|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     11|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 11]
  |  |  ------------------
  |  |   38|     11|    }
  ------------------
 1988|     11|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (1988:9): [True: 11, False: 0]
  ------------------
 1989|     11|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (1989:9): [True: 10, False: 1]
  ------------------
 1990|     11|        fdata->envelope->tx_details.tx.op_details.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (1990:9): [True: 9, False: 1]
  ------------------
 1991|     11|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (1991:9): [True: 8, False: 1]
  ------------------
 1992|      9|               fdata->signing_key,
 1993|      9|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0 &&
  ------------------
  |  |   18|      9|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 1994|     11|        memcmp(fdata->envelope->tx_details.tx.op_details.source_account.ed25519,
  ------------------
  |  Branch (1994:9): [True: 5, False: 3]
  ------------------
 1995|      8|               fdata->signing_key,
 1996|      8|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|      8|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 1997|      5|        FORMATTER_CHECK(
  ------------------
  |  |   30|      5|    {                           \
  |  |   31|      5|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   32|      5|    }
  ------------------
 1998|      5|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
 1999|      5|                                fdata->value,
 2000|      5|                                fdata->value_len,
 2001|      5|                                6,
 2002|      5|                                6))
 2003|      6|    } else {
 2004|      6|        FORMATTER_CHECK(
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
 2005|      6|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
 2006|      6|                                fdata->value,
 2007|      6|                                fdata->value_len,
 2008|      6|                                0,
 2009|      6|                                0))
 2010|      6|    }
 2011|     11|    uint8_t sub_invocations_count =
 2012|     11|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2012:9): [True: 0, False: 11]
  ------------------
 2013|     11|            ? fdata->envelope->soroban_authorization.sub_invocations_count
 2014|     11|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2015|     11|                  .sub_invocations_count;
 2016|     11|    if (sub_invocations_count > 0) {
  ------------------
  |  Branch (2016:9): [True: 8, False: 3]
  ------------------
 2017|      8|        formatter_index = 0;
 2018|      8|        FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_start))
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 2019|      8|    } else {
 2020|      3|        FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|      3|    {                           \
  |  |   31|      3|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   32|      3|    }
  ------------------
 2021|      3|    }
 2022|     11|    return true;
 2023|     11|}
formatter.c:format_sub_invocation_start:
 1939|    344|static bool format_sub_invocation_start(formatter_data_t *fdata) {
 1940|    344|    uint8_t sub_invocation_index = 0;
 1941|    344|    uint8_t sub_invocations_count = 0;
 1942|    344|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1942:9): [True: 295, False: 49]
  ------------------
 1943|    295|        sub_invocation_index = fdata->envelope->soroban_authorization.sub_invocation_index;
 1944|    295|        sub_invocations_count = fdata->envelope->soroban_authorization.sub_invocations_count;
 1945|    295|    } else {
 1946|     49|        sub_invocation_index =
 1947|     49|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocation_index;
 1948|     49|        sub_invocations_count =
 1949|     49|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocations_count;
 1950|     49|    }
 1951|       |
 1952|    344|    STRLCPY(fdata->caption, "Nested Authorization", fdata->caption_len);
  ------------------
  |  |   35|    344|    {                                         \
  |  |   36|    344|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    344|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 344]
  |  |  ------------------
  |  |   38|    344|    }
  ------------------
 1953|       |
 1954|    344|    FORMATTER_CHECK(print_uint64_num(sub_invocation_index + 1, fdata->value, fdata->value_len))
  ------------------
  |  |   30|    344|    {                           \
  |  |   31|    344|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 344]
  |  |  ------------------
  |  |   32|    344|    }
  ------------------
 1955|    344|    STRLCAT(fdata->value, " of ", fdata->value_len)
  ------------------
  |  |   41|    344|    {                                         \
  |  |   42|    344|        size_t len = strlcat(dst, src, size); \
  |  |   43|    344|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 344]
  |  |  ------------------
  |  |   44|    344|    }
  ------------------
 1956|    344|    FORMATTER_CHECK(print_uint64_num(sub_invocations_count,
  ------------------
  |  |   30|    344|    {                           \
  |  |   31|    344|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 344]
  |  |  ------------------
  |  |   32|    344|    }
  ------------------
 1957|    344|                                     fdata->value + strlen(fdata->value),
 1958|    344|                                     fdata->value_len - strlen(fdata->value)))
 1959|       |
 1960|    344|    buffer_t buffer = {
 1961|    344|        .ptr = fdata->raw_data,
 1962|    344|        .size = fdata->raw_data_len,
 1963|    344|        .offset = fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1963:19): [True: 295, False: 49]
  ------------------
 1964|    344|                      ? fdata->envelope->soroban_authorization
 1965|    295|                            .sub_invocation_positions[sub_invocation_index]
 1966|    344|                      : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1967|     49|                            .sub_invocation_positions[sub_invocation_index]};
 1968|       |
 1969|       |    // here we parse the sub-invocation, and store it in the invoke_contract_args
 1970|    344|    FORMATTER_CHECK(parse_auth_function(
  ------------------
  |  |   30|    344|    {                           \
  |  |   31|  1.37k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 344]
  |  |  |  Branch (31:15): [True: 295, False: 49]
  |  |  |  Branch (31:15): [True: 295, False: 49]
  |  |  ------------------
  |  |   32|    344|    }
  ------------------
 1971|    344|        &buffer,
 1972|    344|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
 1973|    344|            ? &fdata->envelope->soroban_authorization.auth_function_type
 1974|    344|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.auth_function_type,
 1975|    344|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
 1976|    344|            ? &fdata->envelope->soroban_authorization.invoke_contract_args
 1977|    344|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1978|    344|                   .invoke_contract_args))
 1979|       |
 1980|    344|    FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_auth_function))
  ------------------
  |  |   30|    344|    {                           \
  |  |   31|    344|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 344]
  |  |  ------------------
  |  |   32|    344|    }
  ------------------
 1981|    344|    return true;
 1982|    344|}
formatter.c:format_sub_invocation_auth_function:
 1915|    344|static bool format_sub_invocation_auth_function(formatter_data_t *fdata) {
 1916|    344|    soroban_authorization_function_type_t auth_function_type =
 1917|    344|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1917:9): [True: 295, False: 49]
  ------------------
 1918|    344|            ? fdata->envelope->soroban_authorization.auth_function_type
 1919|    344|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.auth_function_type;
 1920|    344|    PRINTF("auth_function_type: %d\n", auth_function_type);
 1921|    344|    switch (auth_function_type) {
 1922|    317|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
  ------------------
  |  Branch (1922:9): [True: 317, False: 27]
  ------------------
 1923|    317|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    317|    {                                         \
  |  |   36|    317|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    317|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 317]
  |  |  ------------------
  |  |   38|    317|    }
  ------------------
 1924|    317|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|    317|    {                                         \
  |  |   36|    317|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    317|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 317]
  |  |  ------------------
  |  |   38|    317|    }
  ------------------
 1925|    317|            FORMATTER_CHECK(
  ------------------
  |  |   30|    317|    {                           \
  |  |   31|    317|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 317]
  |  |  ------------------
  |  |   32|    317|    }
  ------------------
 1926|    317|                push_to_formatter_stack(&format_sub_invocation_invoke_host_function_contract_id));
 1927|    317|            break;
 1928|     27|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1928:9): [True: 27, False: 317]
  ------------------
 1929|     27|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|     27|    {                                         \
  |  |   36|     27|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     27|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   38|     27|    }
  ------------------
 1930|     27|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|     27|    {                                         \
  |  |   36|     27|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     27|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   38|     27|    }
  ------------------
 1931|     27|            FORMATTER_CHECK(format_next_sub_invocation(fdata));
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1932|     27|            break;
 1933|      0|        default:
  ------------------
  |  Branch (1933:9): [True: 0, False: 344]
  ------------------
 1934|      0|            return false;
 1935|    344|    }
 1936|    344|    return true;
 1937|    344|}
formatter.c:format_sub_invocation_invoke_host_function_contract_id:
 1898|    317|static bool format_sub_invocation_invoke_host_function_contract_id(formatter_data_t *fdata) {
 1899|    317|    invoke_contract_args_t invoke_contract_args;
 1900|    317|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1900:9): [True: 270, False: 47]
  ------------------
 1901|    270|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1902|    270|    } else {
 1903|     47|        invoke_contract_args =
 1904|     47|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1905|     47|    }
 1906|       |
 1907|    317|    STRLCPY(fdata->caption, "Contract ID", fdata->caption_len);
  ------------------
  |  |   35|    317|    {                                         \
  |  |   36|    317|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    317|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 317]
  |  |  ------------------
  |  |   38|    317|    }
  ------------------
 1908|       |
 1909|    317|    FORMATTER_CHECK(
  ------------------
  |  |   30|    317|    {                           \
  |  |   31|    317|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 317]
  |  |  ------------------
  |  |   32|    317|    }
  ------------------
 1910|    317|        print_sc_address(&invoke_contract_args.address, fdata->value, fdata->value_len, 0, 0))
 1911|    317|    push_to_formatter_stack(&format_sub_invocation_invoke_host_function_func_name);
 1912|    317|    return true;
 1913|    317|}
formatter.c:format_sub_invocation_invoke_host_function_func_name:
 1864|    317|static bool format_sub_invocation_invoke_host_function_func_name(formatter_data_t *fdata) {
 1865|    317|    invoke_contract_args_t invoke_contract_args;
 1866|    317|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1866:9): [True: 270, False: 47]
  ------------------
 1867|    270|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1868|    270|    } else {
 1869|     47|        invoke_contract_args =
 1870|     47|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1871|     47|    }
 1872|    317|    STRLCPY(fdata->caption, "Function", fdata->caption_len);
  ------------------
  |  |   35|    317|    {                                         \
  |  |   36|    317|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    317|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 317]
  |  |  ------------------
  |  |   38|    317|    }
  ------------------
 1873|    317|    FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|    317|    {                           \
  |  |   31|    317|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 317]
  |  |  ------------------
  |  |   32|    317|    }
  ------------------
 1874|    317|                                 fdata->value_len,
 1875|    317|                                 invoke_contract_args.function.name,
 1876|    317|                                 invoke_contract_args.function.name_size))
 1877|       |
 1878|    317|    uint8_t data_count = should_move_control_to_plugin(fdata);
 1879|    317|    if (data_count == 0) {
  ------------------
  |  Branch (1879:9): [True: 189, False: 128]
  ------------------
 1880|       |        // we should not move control to plugin
 1881|    189|        if (invoke_contract_args.parameters_length == 0) {
  ------------------
  |  Branch (1881:13): [True: 100, False: 89]
  ------------------
 1882|    100|            return format_next_sub_invocation(fdata);
 1883|    100|        } else {
 1884|     89|            parameters_index = 0;
 1885|     89|            FORMATTER_CHECK(
  ------------------
  |  |   30|     89|    {                           \
  |  |   31|     89|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 89]
  |  |  ------------------
  |  |   32|     89|    }
  ------------------
 1886|     89|                push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args))
 1887|     89|        }
 1888|    189|    } else {
 1889|    128|        PRINTF("we should move control to plugin\n");
 1890|    128|        parameters_index = 0;
 1891|    128|        FORMATTER_CHECK(
  ------------------
  |  |   30|    128|    {                           \
  |  |   31|    128|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 128]
  |  |  ------------------
  |  |   32|    128|    }
  ------------------
 1892|    128|            push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args_with_plugin))
 1893|    128|    }
 1894|       |
 1895|    217|    return true;
 1896|    317|}
formatter.c:format_sub_invocation_invoke_host_function_args:
 1792|    222|static bool format_sub_invocation_invoke_host_function_args(formatter_data_t *fdata) {
 1793|    222|    invoke_contract_args_t invoke_contract_args;
 1794|    222|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1794:9): [True: 195, False: 27]
  ------------------
 1795|    195|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1796|    195|    } else {
 1797|     27|        invoke_contract_args =
 1798|     27|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1799|     27|    }
 1800|       |
 1801|    222|    size_t length;
 1802|    222|    STRLCPY(fdata->caption, "Arg ", fdata->caption_len);
  ------------------
  |  |   35|    222|    {                                         \
  |  |   36|    222|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    222|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 222]
  |  |  ------------------
  |  |   38|    222|    }
  ------------------
 1803|    222|    length = strlen(fdata->caption);
 1804|    222|    FORMATTER_CHECK(print_uint64_num(parameters_index + 1,
  ------------------
  |  |   30|    222|    {                           \
  |  |   31|    222|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 222]
  |  |  ------------------
  |  |   32|    222|    }
  ------------------
 1805|    222|                                     fdata->caption + length,
 1806|    222|                                     fdata->caption_len - length))
 1807|       |
 1808|    222|    STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|    222|    {                                         \
  |  |   42|    222|        size_t len = strlcat(dst, src, size); \
  |  |   43|    222|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 222]
  |  |  ------------------
  |  |   44|    222|    }
  ------------------
 1809|    222|    length = strlen(fdata->caption);
 1810|    222|    FORMATTER_CHECK(print_uint64_num(invoke_contract_args.parameters_length,
  ------------------
  |  |   30|    222|    {                           \
  |  |   31|    222|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 222]
  |  |  ------------------
  |  |   32|    222|    }
  ------------------
 1811|    222|                                     fdata->caption + length,
 1812|    222|                                     fdata->caption_len - length))
 1813|       |
 1814|    222|    buffer_t buffer = {.ptr = fdata->raw_data,
 1815|    222|                       .size = fdata->raw_data_len,
 1816|    222|                       .offset = invoke_contract_args.parameters_position};
 1817|       |    // Content
 1818|    757|    for (uint8_t i = 0; i < parameters_index; i++) {
  ------------------
  |  Branch (1818:25): [True: 535, False: 222]
  ------------------
 1819|    535|        FORMATTER_CHECK(read_scval_advance(&buffer))
  ------------------
  |  |   30|    535|    {                           \
  |  |   31|    535|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 535]
  |  |  ------------------
  |  |   32|    535|    }
  ------------------
 1820|    535|    }
 1821|       |
 1822|    222|    FORMATTER_CHECK(print_scval(buffer, fdata->value, fdata->value_len))
  ------------------
  |  |   30|    222|    {                           \
  |  |   31|    222|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 7, False: 215]
  |  |  ------------------
  |  |   32|    222|    }
  ------------------
 1823|       |
 1824|    215|    parameters_index++;
 1825|    215|    if (parameters_index == invoke_contract_args.parameters_length) {
  ------------------
  |  Branch (1825:9): [True: 82, False: 133]
  ------------------
 1826|     82|        return format_next_sub_invocation(fdata);
 1827|    133|    } else {
 1828|    133|        FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args))
  ------------------
  |  |   30|    133|    {                           \
  |  |   31|    133|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 133]
  |  |  ------------------
  |  |   32|    133|    }
  ------------------
 1829|    133|    }
 1830|    133|    return true;
 1831|    215|}
formatter.c:print_scval:
 1697|  1.68k|static bool print_scval(buffer_t buffer, char *value, uint8_t value_len) {
 1698|  1.68k|    uint32_t sc_type;
 1699|  1.68k|    FORMATTER_CHECK(parse_uint32(&buffer, &sc_type))
  ------------------
  |  |   30|  1.68k|    {                           \
  |  |   31|  1.68k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.68k]
  |  |  ------------------
  |  |   32|  1.68k|    }
  ------------------
 1700|       |
 1701|  1.68k|    switch (sc_type) {
 1702|    938|        case SCV_BOOL: {
  ------------------
  |  Branch (1702:9): [True: 938, False: 743]
  ------------------
 1703|    938|            bool b;
 1704|    938|            FORMATTER_CHECK(parse_bool(&buffer, &b))
  ------------------
  |  |   30|    938|    {                           \
  |  |   31|    938|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 97, False: 841]
  |  |  ------------------
  |  |   32|    938|    }
  ------------------
 1705|    841|            STRLCPY(value, b ? "true" : "false", value_len);
  ------------------
  |  |   35|    841|    {                                         \
  |  |   36|  1.68k|        size_t len = strlcpy(dst, src, size); \
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 3, False: 838]
  |  |  ------------------
  |  |   37|    841|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 841]
  |  |  ------------------
  |  |   38|    841|    }
  ------------------
 1706|    841|            break;
 1707|    841|        }
 1708|     94|        case SCV_VOID:
  ------------------
  |  Branch (1708:9): [True: 94, False: 1.58k]
  ------------------
 1709|     94|            STRLCPY(value, "[void]", value_len);
  ------------------
  |  |   35|     94|    {                                         \
  |  |   36|     94|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     94|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 94]
  |  |  ------------------
  |  |   38|     94|    }
  ------------------
 1710|     94|            break;  // void
 1711|     33|        case SCV_U32:
  ------------------
  |  Branch (1711:9): [True: 33, False: 1.64k]
  ------------------
 1712|     33|            FORMATTER_CHECK(print_uint32(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     33|    {                           \
  |  |   31|     33|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 33]
  |  |  ------------------
  |  |   32|     33|    }
  ------------------
 1713|     33|            break;
 1714|     62|        case SCV_I32:
  ------------------
  |  Branch (1714:9): [True: 62, False: 1.61k]
  ------------------
 1715|     62|            FORMATTER_CHECK(print_int32(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     62|    {                           \
  |  |   31|     62|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 62]
  |  |  ------------------
  |  |   32|     62|    }
  ------------------
 1716|     62|            break;
 1717|     15|        case SCV_U64:
  ------------------
  |  Branch (1717:9): [True: 15, False: 1.66k]
  ------------------
 1718|     15|            FORMATTER_CHECK(print_uint64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     15|    {                           \
  |  |   31|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   32|     15|    }
  ------------------
 1719|     15|            break;
 1720|     22|        case SCV_I64:
  ------------------
  |  Branch (1720:9): [True: 22, False: 1.65k]
  ------------------
 1721|     22|            FORMATTER_CHECK(print_int64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     22|    {                           \
  |  |   31|     22|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 22]
  |  |  ------------------
  |  |   32|     22|    }
  ------------------
 1722|     22|            break;
 1723|     23|        case SCV_TIMEPOINT: {
  ------------------
  |  Branch (1723:9): [True: 23, False: 1.65k]
  ------------------
 1724|     23|            uint64_t timepoint;
 1725|     23|            FORMATTER_CHECK(parse_uint64(&buffer, &timepoint));
  ------------------
  |  |   30|     23|    {                           \
  |  |   31|     23|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 23]
  |  |  ------------------
  |  |   32|     23|    }
  ------------------
 1726|     23|            FORMATTER_CHECK(print_time(timepoint, value, value_len));
  ------------------
  |  |   30|     23|    {                           \
  |  |   31|     23|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 8, False: 15]
  |  |  ------------------
  |  |   32|     23|    }
  ------------------
 1727|     15|            break;
 1728|     23|        }
 1729|     30|        case SCV_DURATION:
  ------------------
  |  Branch (1729:9): [True: 30, False: 1.65k]
  ------------------
 1730|     30|            FORMATTER_CHECK(print_int64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 1731|     30|            break;
 1732|     35|        case SCV_U128:
  ------------------
  |  Branch (1732:9): [True: 35, False: 1.64k]
  ------------------
 1733|     35|            FORMATTER_CHECK(print_uint128(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     35|    {                           \
  |  |   31|     35|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 35]
  |  |  ------------------
  |  |   32|     35|    }
  ------------------
 1734|     35|            break;
 1735|    100|        case SCV_I128:
  ------------------
  |  Branch (1735:9): [True: 100, False: 1.58k]
  ------------------
 1736|    100|            FORMATTER_CHECK(print_int128(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    100|    {                           \
  |  |   31|    100|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 100]
  |  |  ------------------
  |  |   32|    100|    }
  ------------------
 1737|    100|            break;
 1738|     25|        case SCV_U256:
  ------------------
  |  Branch (1738:9): [True: 25, False: 1.65k]
  ------------------
 1739|     25|            FORMATTER_CHECK(print_uint256(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
 1740|     25|            break;
 1741|     46|        case SCV_I256:
  ------------------
  |  Branch (1741:9): [True: 46, False: 1.63k]
  ------------------
 1742|     46|            FORMATTER_CHECK(print_int256(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     46|    {                           \
  |  |   31|     46|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 46]
  |  |  ------------------
  |  |   32|     46|    }
  ------------------
 1743|     46|            break;
 1744|     15|        case SCV_BYTES:
  ------------------
  |  Branch (1744:9): [True: 15, False: 1.66k]
  ------------------
 1745|     15|            STRLCPY(value, "[Bytes Data]", value_len);
  ------------------
  |  |   35|     15|    {                                         \
  |  |   36|     15|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     15|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   38|     15|    }
  ------------------
 1746|     15|            break;
 1747|     41|        case SCV_STRING: {
  ------------------
  |  Branch (1747:9): [True: 41, False: 1.64k]
  ------------------
 1748|     41|            scv_string_t scv_string;
 1749|     41|            FORMATTER_CHECK(parse_scv_string(&buffer, &scv_string));
  ------------------
  |  |   30|     41|    {                           \
  |  |   31|     41|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1, False: 40]
  |  |  ------------------
  |  |   32|     41|    }
  ------------------
 1750|     40|            FORMATTER_CHECK(print_scv_string(&scv_string, value, value_len));
  ------------------
  |  |   30|     40|    {                           \
  |  |   31|     40|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 40]
  |  |  ------------------
  |  |   32|     40|    }
  ------------------
 1751|     40|            break;
 1752|     40|        }
 1753|     15|        case SCV_SYMBOL: {
  ------------------
  |  Branch (1753:9): [True: 15, False: 1.66k]
  ------------------
 1754|     15|            scv_symbol_t scv_symbol;
 1755|     15|            FORMATTER_CHECK(parse_scv_symbol(&buffer, &scv_symbol));
  ------------------
  |  |   30|     15|    {                           \
  |  |   31|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1, False: 14]
  |  |  ------------------
  |  |   32|     15|    }
  ------------------
 1756|     14|            FORMATTER_CHECK(print_scv_symbol(&scv_symbol, value, value_len));
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1, False: 13]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
 1757|     13|            break;
 1758|     14|        }
 1759|     31|        case SCV_ADDRESS: {
  ------------------
  |  Branch (1759:9): [True: 31, False: 1.65k]
  ------------------
 1760|     31|            sc_address_t sc_address;
 1761|     31|            FORMATTER_CHECK(parse_sc_address(&buffer, &sc_address));
  ------------------
  |  |   30|     31|    {                           \
  |  |   31|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   32|     31|    }
  ------------------
 1762|     31|            FORMATTER_CHECK(print_sc_address(&sc_address, value, value_len, 0, 0));
  ------------------
  |  |   30|     31|    {                           \
  |  |   31|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   32|     31|    }
  ------------------
 1763|     31|            break;
 1764|     31|        }
 1765|    156|        default:
  ------------------
  |  Branch (1765:9): [True: 156, False: 1.52k]
  ------------------
 1766|    156|            STRLCPY(value, "[unable to display]", value_len);
  ------------------
  |  |   35|    156|    {                                         \
  |  |   36|    156|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    156|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 156]
  |  |  ------------------
  |  |   38|    156|    }
  ------------------
 1767|  1.68k|    }
 1768|  1.57k|    return true;
 1769|  1.68k|}
formatter.c:format_sub_invocation_invoke_host_function_args_with_plugin:
 1833|    384|static bool format_sub_invocation_invoke_host_function_args_with_plugin(formatter_data_t *fdata) {
 1834|    384|    invoke_contract_args_t invoke_contract_args;
 1835|    384|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1835:9): [True: 384, False: 0]
  ------------------
 1836|    384|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1837|    384|    } else {
 1838|      0|        invoke_contract_args =
 1839|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1840|      0|    }
 1841|       |
 1842|    384|    const uint8_t *contract_address = invoke_contract_args.address.address;
 1843|       |
 1844|       |    // get data pair
 1845|    384|    if (fdata->plugin_query_data_pair(contract_address,
  ------------------
  |  Branch (1845:9): [True: 0, False: 384]
  ------------------
 1846|    384|                                      parameters_index,
 1847|    384|                                      fdata->caption,
 1848|    384|                                      fdata->caption_len,
 1849|    384|                                      fdata->value,
 1850|    384|                                      fdata->value_len) != STELLAR_PLUGIN_RESULT_OK) {
 1851|      0|        return false;
 1852|      0|    }
 1853|       |
 1854|    384|    parameters_index++;
 1855|    384|    if (parameters_index == plugin_data_pair_count) {
  ------------------
  |  Branch (1855:9): [True: 128, False: 256]
  ------------------
 1856|    128|        return format_next_sub_invocation(fdata);
 1857|    256|    } else {
 1858|    256|        FORMATTER_CHECK(
  ------------------
  |  |   30|    256|    {                           \
  |  |   31|    256|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 256]
  |  |  ------------------
  |  |   32|    256|    }
  ------------------
 1859|    256|            push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args_with_plugin))
 1860|    256|    }
 1861|    256|    return true;
 1862|    384|}
formatter.c:format_next_sub_invocation:
 1772|    337|static bool format_next_sub_invocation(formatter_data_t *fdata) {
 1773|    337|    uint8_t sub_invocations_count =
 1774|    337|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1774:9): [True: 288, False: 49]
  ------------------
 1775|    337|            ? fdata->envelope->soroban_authorization.sub_invocations_count
 1776|    337|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1777|     49|                  .sub_invocations_count;
 1778|    337|    uint8_t *sub_invocation_index =
 1779|    337|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1779:9): [True: 288, False: 49]
  ------------------
 1780|    337|            ? &fdata->envelope->soroban_authorization.sub_invocation_index
 1781|    337|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1782|     49|                   .sub_invocation_index;
 1783|    337|    (*sub_invocation_index)++;
 1784|    337|    if (*sub_invocation_index == sub_invocations_count) {
  ------------------
  |  Branch (1784:9): [True: 57, False: 280]
  ------------------
 1785|     57|        return push_to_formatter_stack(NULL);
 1786|    280|    } else {
 1787|    280|        formatter_index = 0;
 1788|    280|        return push_to_formatter_stack(format_sub_invocation_start);
 1789|    280|    }
 1790|    337|}
formatter.c:format_invoke_host_function_args:
 2048|  1.45k|static bool format_invoke_host_function_args(formatter_data_t *fdata) {
 2049|  1.45k|    invoke_contract_args_t invoke_contract_args;
 2050|  1.45k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2050:9): [True: 1.39k, False: 62]
  ------------------
 2051|  1.39k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2052|  1.39k|    } else {
 2053|     62|        invoke_contract_args =
 2054|     62|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2055|     62|    }
 2056|       |
 2057|  1.45k|    size_t length;
 2058|  1.45k|    STRLCPY(fdata->caption, "Arg ", fdata->caption_len);
  ------------------
  |  |   35|  1.45k|    {                                         \
  |  |   36|  1.45k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.45k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.45k]
  |  |  ------------------
  |  |   38|  1.45k|    }
  ------------------
 2059|  1.45k|    length = strlen(fdata->caption);
 2060|  1.45k|    FORMATTER_CHECK(print_uint64_num(parameters_index + 1,
  ------------------
  |  |   30|  1.45k|    {                           \
  |  |   31|  1.45k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.45k]
  |  |  ------------------
  |  |   32|  1.45k|    }
  ------------------
 2061|  1.45k|                                     fdata->caption + length,
 2062|  1.45k|                                     fdata->caption_len - length))
 2063|       |
 2064|  1.45k|    STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  1.45k|    {                                         \
  |  |   42|  1.45k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  1.45k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 1.45k]
  |  |  ------------------
  |  |   44|  1.45k|    }
  ------------------
 2065|  1.45k|    length = strlen(fdata->caption);
 2066|  1.45k|    FORMATTER_CHECK(print_uint64_num(invoke_contract_args.parameters_length,
  ------------------
  |  |   30|  1.45k|    {                           \
  |  |   31|  1.45k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.45k]
  |  |  ------------------
  |  |   32|  1.45k|    }
  ------------------
 2067|  1.45k|                                     fdata->caption + length,
 2068|  1.45k|                                     fdata->caption_len - length))
 2069|       |
 2070|  1.45k|    buffer_t buffer = {.ptr = fdata->raw_data,
 2071|  1.45k|                       .size = fdata->raw_data_len,
 2072|  1.45k|                       .offset = invoke_contract_args.parameters_position};
 2073|       |    // Content
 2074|  5.41k|    for (uint8_t i = 0; i < parameters_index; i++) {
  ------------------
  |  Branch (2074:25): [True: 3.96k, False: 1.45k]
  ------------------
 2075|  3.96k|        FORMATTER_CHECK(read_scval_advance(&buffer))
  ------------------
  |  |   30|  3.96k|    {                           \
  |  |   31|  3.96k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.96k]
  |  |  ------------------
  |  |   32|  3.96k|    }
  ------------------
 2076|  3.96k|    }
 2077|       |
 2078|  1.45k|    FORMATTER_CHECK(print_scval(buffer, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  1.45k|    {                           \
  |  |   31|  1.45k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 101, False: 1.35k]
  |  |  ------------------
  |  |   32|  1.45k|    }
  ------------------
 2079|       |
 2080|  1.35k|    parameters_index++;
 2081|  1.35k|    if (parameters_index == invoke_contract_args.parameters_length) {
  ------------------
  |  Branch (2081:9): [True: 202, False: 1.15k]
  ------------------
 2082|    202|        return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2083|  1.15k|    } else {
 2084|  1.15k|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args))
  ------------------
  |  |   30|  1.15k|    {                           \
  |  |   31|  1.15k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.15k]
  |  |  ------------------
  |  |   32|  1.15k|    }
  ------------------
 2085|  1.15k|    }
 2086|  1.15k|    return true;
 2087|  1.35k|}
formatter.c:format_invoke_host_function_args_with_plugin:
 2089|     48|static bool format_invoke_host_function_args_with_plugin(formatter_data_t *fdata) {
 2090|     48|    invoke_contract_args_t invoke_contract_args;
 2091|     48|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2091:9): [True: 48, False: 0]
  ------------------
 2092|     48|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2093|     48|    } else {
 2094|      0|        invoke_contract_args =
 2095|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2096|      0|    }
 2097|       |
 2098|     48|    const uint8_t *contract_address = invoke_contract_args.address.address;
 2099|       |
 2100|       |    // get data pair
 2101|     48|    if (fdata->plugin_query_data_pair(contract_address,
  ------------------
  |  Branch (2101:9): [True: 0, False: 48]
  ------------------
 2102|     48|                                      parameters_index,
 2103|     48|                                      fdata->caption,
 2104|     48|                                      fdata->caption_len,
 2105|     48|                                      fdata->value,
 2106|     48|                                      fdata->value_len) != STELLAR_PLUGIN_RESULT_OK) {
 2107|      0|        return false;
 2108|      0|    }
 2109|       |
 2110|     48|    parameters_index++;
 2111|     48|    if (parameters_index == plugin_data_pair_count) {
  ------------------
  |  Branch (2111:9): [True: 16, False: 32]
  ------------------
 2112|       |        // if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
 2113|       |        //     FORMATTER_CHECK(push_to_formatter_stack(NULL))
 2114|       |        // } else {
 2115|       |        //     return format_operation_source_prepare(fdata);
 2116|       |        // }
 2117|     16|        return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2118|     32|    } else {
 2119|     32|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args_with_plugin))
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
 2120|     32|    }
 2121|     32|    return true;
 2122|     48|}
formatter.c:format_transaction_info:
 2380|    552|static bool format_transaction_info(formatter_data_t *fdata) {
 2381|    552|    if (fdata->envelope->network != 0) {
  ------------------
  |  Branch (2381:9): [True: 518, False: 34]
  ------------------
 2382|    518|        FORMATTER_CHECK(push_to_formatter_stack(&format_network))
  ------------------
  |  |   30|    518|    {                           \
  |  |   31|    518|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 518]
  |  |  ------------------
  |  |   32|    518|    }
  ------------------
 2383|    518|    } else {
 2384|     34|        return get_tx_details_formatter(fdata);
 2385|     34|    }
 2386|    518|    return true;
 2387|    552|}
formatter.c:push_to_formatter_stack:
   59|  23.6k|static bool push_to_formatter_stack(format_function_t formatter) {
   60|  23.6k|    if (formatter_index >= MAX_FORMATTERS_PER_OPERATION) {
  ------------------
  |  |   47|  23.6k|#define MAX_FORMATTERS_PER_OPERATION 16
  ------------------
  |  Branch (60:9): [True: 4, False: 23.6k]
  ------------------
   61|      4|        PRINTF("Formatter stack overflow\n");
   62|      4|        return false;
   63|      4|    }
   64|       |
   65|  23.6k|    formatter_stack[formatter_index++] = formatter;
   66|       |
   67|  23.6k|    return true;
   68|  23.6k|}
formatter.c:format_confirm_operation:
 2262|  3.04k|static bool format_confirm_operation(formatter_data_t *fdata) {
 2263|  3.04k|    if (fdata->envelope->tx_details.tx.operations_count > 1) {
  ------------------
  |  Branch (2263:9): [True: 2.91k, False: 121]
  ------------------
 2264|  2.91k|        size_t length;
 2265|  2.91k|        STRLCPY(fdata->caption, "Operation ", fdata->caption_len);
  ------------------
  |  |   35|  2.91k|    {                                         \
  |  |   36|  2.91k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.91k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.91k]
  |  |  ------------------
  |  |   38|  2.91k|    }
  ------------------
 2266|  2.91k|        length = strlen(fdata->caption);
 2267|  2.91k|        FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.operation_index + 1,
  ------------------
  |  |   30|  2.91k|    {                           \
  |  |   31|  2.91k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.91k]
  |  |  ------------------
  |  |   32|  2.91k|    }
  ------------------
 2268|  2.91k|                                         fdata->caption + length,
 2269|  2.91k|                                         fdata->caption_len - length))
 2270|  2.91k|        STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  2.91k|    {                                         \
  |  |   42|  2.91k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  2.91k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 2.91k]
  |  |  ------------------
  |  |   44|  2.91k|    }
  ------------------
 2271|  2.91k|        length = strlen(fdata->caption);
 2272|  2.91k|        FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.operations_count,
  ------------------
  |  |   30|  2.91k|    {                           \
  |  |   31|  2.91k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.91k]
  |  |  ------------------
  |  |   32|  2.91k|    }
  ------------------
 2273|  2.91k|                                         fdata->caption + length,
 2274|  2.91k|                                         fdata->caption_len - length))
 2275|       |
 2276|  2.91k|        FORMATTER_CHECK(push_to_formatter_stack(
  ------------------
  |  |   30|  2.91k|    {                           \
  |  |   31|  2.91k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.91k]
  |  |  ------------------
  |  |   32|  2.91k|    }
  ------------------
 2277|  2.91k|            ((format_function_t) PIC(formatters[fdata->envelope->tx_details.tx.op_details.type]))));
 2278|  2.91k|    } else {
 2279|    121|        format_function_t func = PIC(formatters[fdata->envelope->tx_details.tx.op_details.type]);
  ------------------
  |  |    6|    121|#define PIC(x) x
  ------------------
 2280|    121|        FORMATTER_CHECK(func(fdata));
  ------------------
  |  |   30|    121|    {                           \
  |  |   31|    121|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 2, False: 119]
  |  |  ------------------
  |  |   32|    121|    }
  ------------------
 2281|    119|    }
 2282|  3.03k|    return true;
 2283|  3.04k|}
formatter.c:format_create_account:
 1134|  1.80k|static bool format_create_account(formatter_data_t *fdata) {
 1135|  1.80k|    (void) fdata;
 1136|  1.80k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  1.80k|    {                                         \
  |  |   36|  1.80k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.80k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.80k]
  |  |  ------------------
  |  |   38|  1.80k|    }
  ------------------
 1137|  1.80k|    STRLCPY(fdata->value, "Create Account", fdata->value_len);
  ------------------
  |  |   35|  1.80k|    {                                         \
  |  |   36|  1.80k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.80k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.80k]
  |  |  ------------------
  |  |   38|  1.80k|    }
  ------------------
 1138|  1.80k|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_account_destination))
  ------------------
  |  |   30|  1.80k|    {                           \
  |  |   31|  1.80k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.80k]
  |  |  ------------------
  |  |   32|  1.80k|    }
  ------------------
 1139|  1.80k|    return true;
 1140|  1.80k|}
formatter.c:format_create_account_destination:
 1122|  1.80k|static bool format_create_account_destination(formatter_data_t *fdata) {
 1123|  1.80k|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|  1.80k|    {                                         \
  |  |   36|  1.80k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.80k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.80k]
  |  |  ------------------
  |  |   38|  1.80k|    }
  ------------------
 1124|  1.80k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.80k|    {                           \
  |  |   31|  1.80k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.80k]
  |  |  ------------------
  |  |   32|  1.80k|    }
  ------------------
 1125|  1.80k|        print_account_id(fdata->envelope->tx_details.tx.op_details.create_account_op.destination,
 1126|  1.80k|                         fdata->value,
 1127|  1.80k|                         fdata->value_len,
 1128|  1.80k|                         0,
 1129|  1.80k|                         0))
 1130|  1.80k|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_account_amount))
  ------------------
  |  |   30|  1.80k|    {                           \
  |  |   31|  1.80k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.80k]
  |  |  ------------------
  |  |   32|  1.80k|    }
  ------------------
 1131|  1.80k|    return true;
 1132|  1.80k|}
formatter.c:format_create_account_amount:
 1110|  1.80k|static bool format_create_account_amount(formatter_data_t *fdata) {
 1111|  1.80k|    STRLCPY(fdata->caption, "Starting Balance", fdata->caption_len);
  ------------------
  |  |   35|  1.80k|    {                                         \
  |  |   36|  1.80k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.80k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.80k]
  |  |  ------------------
  |  |   38|  1.80k|    }
  ------------------
 1112|  1.80k|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
 1113|  1.80k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.80k|    {                           \
  |  |   31|  1.80k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.80k]
  |  |  ------------------
  |  |   32|  1.80k|    }
  ------------------
 1114|  1.80k|        print_amount(fdata->envelope->tx_details.tx.op_details.create_account_op.starting_balance,
 1115|  1.80k|                     &asset,
 1116|  1.80k|                     fdata->envelope->network,
 1117|  1.80k|                     fdata->value,
 1118|  1.80k|                     fdata->value_len))
 1119|  1.80k|    return format_operation_source_prepare(fdata);
 1120|  1.80k|}
formatter.c:format_operation_source_prepare:
  334|  2.98k|static bool format_operation_source_prepare(formatter_data_t *fdata) {
  335|  2.98k|    if (fdata->envelope->tx_details.tx.op_details.source_account_present) {
  ------------------
  |  Branch (335:9): [True: 92, False: 2.89k]
  ------------------
  336|       |        // If the source exists, when the user clicks the next button,
  337|       |        // it will jump to the page showing the source
  338|     92|        FORMATTER_CHECK(push_to_formatter_stack(&format_operation_source))
  ------------------
  |  |   30|     92|    {                           \
  |  |   31|     92|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 92]
  |  |  ------------------
  |  |   32|     92|    }
  ------------------
  339|  2.89k|    } else {
  340|  2.89k|        FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  2.89k|    {                           \
  |  |   31|  2.89k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.89k]
  |  |  ------------------
  |  |   32|  2.89k|    }
  ------------------
  341|  2.89k|    }
  342|  2.98k|    return true;
  343|  2.98k|}
formatter.c:format_operation_source:
  305|     92|static bool format_operation_source(formatter_data_t *fdata) {
  306|     92|    STRLCPY(fdata->caption, "Op Source", fdata->caption_len);
  ------------------
  |  |   35|     92|    {                                         \
  |  |   36|     92|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     92|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 92]
  |  |  ------------------
  |  |   38|     92|    }
  ------------------
  307|     92|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (307:9): [True: 89, False: 3]
  ------------------
  308|     92|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (308:9): [True: 73, False: 16]
  ------------------
  309|     92|        fdata->envelope->tx_details.tx.op_details.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (309:9): [True: 61, False: 12]
  ------------------
  310|     92|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (310:9): [True: 45, False: 16]
  ------------------
  311|     61|               fdata->signing_key,
  312|     61|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0 &&
  ------------------
  |  |   18|     61|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  313|     92|        memcmp(fdata->envelope->tx_details.tx.op_details.source_account.ed25519,
  ------------------
  |  Branch (313:9): [True: 27, False: 18]
  ------------------
  314|     45|               fdata->signing_key,
  315|     45|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|     45|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  316|     27|        FORMATTER_CHECK(
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
  317|     27|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
  318|     27|                                fdata->value,
  319|     27|                                fdata->value_len,
  320|     27|                                6,
  321|     27|                                6))
  322|     65|    } else {
  323|     65|        FORMATTER_CHECK(
  ------------------
  |  |   30|     65|    {                           \
  |  |   31|     65|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 65]
  |  |  ------------------
  |  |   32|     65|    }
  ------------------
  324|     65|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
  325|     65|                                fdata->value,
  326|     65|                                fdata->value_len,
  327|     65|                                0,
  328|     65|                                0))
  329|     65|    }
  330|     92|    FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|     92|    {                           \
  |  |   31|     92|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 92]
  |  |  ------------------
  |  |   32|     92|    }
  ------------------
  331|     92|    return true;
  332|     92|}
formatter.c:format_payment:
 1099|     50|static bool format_payment(formatter_data_t *fdata) {
 1100|     50|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|     50|    {                                         \
  |  |   36|     50|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     50|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   38|     50|    }
  ------------------
 1101|     50|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.payment_op.amount,
  ------------------
  |  |   30|     50|    {                           \
  |  |   31|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   32|     50|    }
  ------------------
 1102|     50|                                 &fdata->envelope->tx_details.tx.op_details.payment_op.asset,
 1103|     50|                                 fdata->envelope->network,
 1104|     50|                                 fdata->value,
 1105|     50|                                 fdata->value_len))
 1106|     50|    FORMATTER_CHECK(push_to_formatter_stack(&format_payment_destination))
  ------------------
  |  |   30|     50|    {                           \
  |  |   31|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   32|     50|    }
  ------------------
 1107|     50|    return true;
 1108|     50|}
formatter.c:format_payment_destination:
 1088|     50|static bool format_payment_destination(formatter_data_t *fdata) {
 1089|     50|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|     50|    {                                         \
  |  |   36|     50|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     50|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   38|     50|    }
  ------------------
 1090|     50|    FORMATTER_CHECK(
  ------------------
  |  |   30|     50|    {                           \
  |  |   31|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   32|     50|    }
  ------------------
 1091|     50|        print_muxed_account(&fdata->envelope->tx_details.tx.op_details.payment_op.destination,
 1092|     50|                            fdata->value,
 1093|     50|                            fdata->value_len,
 1094|     50|                            0,
 1095|     50|                            0))
 1096|     50|    return format_operation_source_prepare(fdata);
 1097|     50|}
formatter.c:format_path_payment_strict_receive:
 1041|     23|static bool format_path_payment_strict_receive(formatter_data_t *fdata) {
 1042|     23|    STRLCPY(fdata->caption, "Send Max", fdata->caption_len);
  ------------------
  |  |   35|     23|    {                                         \
  |  |   36|     23|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     23|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 23]
  |  |  ------------------
  |  |   38|     23|    }
  ------------------
 1043|     23|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     23|    {                           \
  |  |   31|     23|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 23]
  |  |  ------------------
  |  |   32|     23|    }
  ------------------
 1044|     23|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.send_max,
 1045|     23|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.send_asset,
 1046|     23|        fdata->envelope->network,
 1047|     23|        fdata->value,
 1048|     23|        fdata->value_len))
 1049|     23|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_receive_destination))
  ------------------
  |  |   30|     23|    {                           \
  |  |   31|     23|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 23]
  |  |  ------------------
  |  |   32|     23|    }
  ------------------
 1050|     23|    return true;
 1051|     23|}
formatter.c:format_path_payment_strict_receive_destination:
 1029|     23|static bool format_path_payment_strict_receive_destination(formatter_data_t *fdata) {
 1030|     23|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|     23|    {                                         \
  |  |   36|     23|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     23|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 23]
  |  |  ------------------
  |  |   38|     23|    }
  ------------------
 1031|     23|    FORMATTER_CHECK(print_muxed_account(
  ------------------
  |  |   30|     23|    {                           \
  |  |   31|     23|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 23]
  |  |  ------------------
  |  |   32|     23|    }
  ------------------
 1032|     23|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.destination,
 1033|     23|        fdata->value,
 1034|     23|        fdata->value_len,
 1035|     23|        0,
 1036|     23|        0))
 1037|     23|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_receive_receive))
  ------------------
  |  |   30|     23|    {                           \
  |  |   31|     23|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 23]
  |  |  ------------------
  |  |   32|     23|    }
  ------------------
 1038|     23|    return true;
 1039|     23|}
formatter.c:format_path_payment_strict_receive_receive:
 1018|     23|static bool format_path_payment_strict_receive_receive(formatter_data_t *fdata) {
 1019|     23|    STRLCPY(fdata->caption, "Receive", fdata->caption_len);
  ------------------
  |  |   35|     23|    {                                         \
  |  |   36|     23|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     23|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 23]
  |  |  ------------------
  |  |   38|     23|    }
  ------------------
 1020|     23|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     23|    {                           \
  |  |   31|     23|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 23]
  |  |  ------------------
  |  |   32|     23|    }
  ------------------
 1021|     23|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.dest_amount,
 1022|     23|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.dest_asset,
 1023|     23|        fdata->envelope->network,
 1024|     23|        fdata->value,
 1025|     23|        fdata->value_len))
 1026|     23|    return format_operation_source_prepare(fdata);
 1027|     23|}
formatter.c:format_manage_sell_offer:
  897|     29|static bool format_manage_sell_offer(formatter_data_t *fdata) {
  898|     29|    if (!fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.amount) {
  ------------------
  |  Branch (898:9): [True: 4, False: 25]
  ------------------
  899|      4|        STRLCPY(fdata->caption, "Remove Offer", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  900|      4|        FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  901|      4|            fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id,
  902|      4|            fdata->value,
  903|      4|            fdata->value_len))
  904|      4|        return format_operation_source_prepare(fdata);
  905|     25|    } else {
  906|     25|        if (fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id) {
  ------------------
  |  Branch (906:13): [True: 21, False: 4]
  ------------------
  907|     21|            STRLCPY(fdata->caption, "Change Offer", fdata->caption_len);
  ------------------
  |  |   35|     21|    {                                         \
  |  |   36|     21|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     21|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 21]
  |  |  ------------------
  |  |   38|     21|    }
  ------------------
  908|     21|            FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|     21|    {                           \
  |  |   31|     21|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 21]
  |  |  ------------------
  |  |   32|     21|    }
  ------------------
  909|     21|                fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id,
  910|     21|                fdata->value,
  911|     21|                fdata->value_len))
  912|     21|        } else {
  913|      4|            STRLCPY(fdata->caption, "Create Offer", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  914|      4|        }
  915|     25|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_buy))
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  916|     25|    }
  917|     25|    return true;
  918|     29|}
formatter.c:format_manage_sell_offer_buy:
  886|     25|static bool format_manage_sell_offer_buy(formatter_data_t *fdata) {
  887|     25|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|     25|    {                                         \
  |  |   36|     25|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     25|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   38|     25|    }
  ------------------
  888|     25|    FORMATTER_CHECK(
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  889|     25|        print_asset(&fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.buying,
  890|     25|                    fdata->envelope->network,
  891|     25|                    fdata->value,
  892|     25|                    fdata->value_len))
  893|     25|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_sell))
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  894|     25|    return true;
  895|     25|}
formatter.c:format_manage_sell_offer_sell:
  874|     25|static bool format_manage_sell_offer_sell(formatter_data_t *fdata) {
  875|     25|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|     25|    {                                         \
  |  |   36|     25|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     25|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   38|     25|    }
  ------------------
  876|     25|    FORMATTER_CHECK(
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  877|     25|        print_amount(fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.amount,
  878|     25|                     &fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.selling,
  879|     25|                     fdata->envelope->network,
  880|     25|                     fdata->value,
  881|     25|                     fdata->value_len))
  882|     25|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_price))
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  883|     25|    return true;
  884|     25|}
formatter.c:format_manage_sell_offer_price:
  862|     25|static bool format_manage_sell_offer_price(formatter_data_t *fdata) {
  863|     25|    manage_sell_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op;
  864|     25|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|     25|    {                                         \
  |  |   36|     25|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     25|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   38|     25|    }
  ------------------
  865|     25|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  866|     25|                                &op->buying,
  867|     25|                                &op->selling,
  868|     25|                                fdata->envelope->network,
  869|     25|                                fdata->value,
  870|     25|                                fdata->value_len))
  871|     25|    return format_operation_source_prepare(fdata);
  872|     25|}
formatter.c:format_create_passive_sell_offer:
 1010|     32|static bool format_create_passive_sell_offer(formatter_data_t *fdata) {
 1011|     32|    (void) fdata;
 1012|     32|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
 1013|     32|    STRLCPY(fdata->value, "Create Passive Sell Offer", fdata->value_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
 1014|     32|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_buy))
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
 1015|     32|    return true;
 1016|     32|}
formatter.c:format_create_passive_sell_offer_buy:
  999|     32|static bool format_create_passive_sell_offer_buy(formatter_data_t *fdata) {
 1000|     32|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
 1001|     32|    FORMATTER_CHECK(
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
 1002|     32|        print_asset(&fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.buying,
 1003|     32|                    fdata->envelope->network,
 1004|     32|                    fdata->value,
 1005|     32|                    fdata->value_len))
 1006|     32|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_sell))
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
 1007|     32|    return true;
 1008|     32|}
formatter.c:format_create_passive_sell_offer_sell:
  987|     32|static bool format_create_passive_sell_offer_sell(formatter_data_t *fdata) {
  988|     32|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
  989|     32|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
  990|     32|        fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.amount,
  991|     32|        &fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.selling,
  992|     32|        fdata->envelope->network,
  993|     32|        fdata->value,
  994|     32|        fdata->value_len))
  995|     32|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_price))
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
  996|     32|    return true;
  997|     32|}
formatter.c:format_create_passive_sell_offer_price:
  974|     32|static bool format_create_passive_sell_offer_price(formatter_data_t *fdata) {
  975|     32|    create_passive_sell_offer_op_t *op =
  976|     32|        &fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op;
  977|     32|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|     32|    {                                         \
  |  |   36|     32|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     32|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   38|     32|    }
  ------------------
  978|     32|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|     32|    {                           \
  |  |   31|     32|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32]
  |  |  ------------------
  |  |   32|     32|    }
  ------------------
  979|     32|                                &op->buying,
  980|     32|                                &op->selling,
  981|     32|                                fdata->envelope->network,
  982|     32|                                fdata->value,
  983|     32|                                fdata->value_len))
  984|     32|    return format_operation_source_prepare(fdata);
  985|     32|}
formatter.c:format_set_options:
  763|    201|static bool format_set_options(formatter_data_t *fdata) {
  764|       |    // this operation is a special one among all operations, because all its
  765|       |    // fields are optional.
  766|    201|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    201|    {                                         \
  |  |   36|    201|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    201|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 201]
  |  |  ------------------
  |  |   38|    201|    }
  ------------------
  767|    201|    STRLCPY(fdata->value, "Set Options", fdata->value_len);
  ------------------
  |  |   35|    201|    {                                         \
  |  |   36|    201|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    201|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 201]
  |  |  ------------------
  |  |   38|    201|    }
  ------------------
  768|    201|    if (is_empty_set_options_body(fdata)) {
  ------------------
  |  Branch (768:9): [True: 52, False: 149]
  ------------------
  769|     52|        FORMATTER_CHECK(push_to_formatter_stack(format_set_options_empty_body))
  ------------------
  |  |   30|     52|    {                           \
  |  |   31|     52|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 52]
  |  |  ------------------
  |  |   32|     52|    }
  ------------------
  770|    149|    } else {
  771|    149|        format_set_option_inflation_destination_prepare(fdata);
  772|    149|    }
  773|    201|    return true;
  774|    201|}
formatter.c:is_empty_set_options_body:
  750|    201|static bool is_empty_set_options_body(formatter_data_t *fdata) {
  751|    201|    return !(
  752|    201|        fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination_present ||
  ------------------
  |  Branch (752:9): [True: 3, False: 198]
  ------------------
  753|    201|        fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags_present ||
  ------------------
  |  Branch (753:9): [True: 22, False: 176]
  ------------------
  754|    201|        fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags_present ||
  ------------------
  |  Branch (754:9): [True: 10, False: 166]
  ------------------
  755|    201|        fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight_present ||
  ------------------
  |  Branch (755:9): [True: 10, False: 156]
  ------------------
  756|    201|        fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold_present ||
  ------------------
  |  Branch (756:9): [True: 34, False: 122]
  ------------------
  757|    201|        fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold_present ||
  ------------------
  |  Branch (757:9): [True: 25, False: 97]
  ------------------
  758|    201|        fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold_present ||
  ------------------
  |  Branch (758:9): [True: 4, False: 93]
  ------------------
  759|    201|        fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_present ||
  ------------------
  |  Branch (759:9): [True: 31, False: 62]
  ------------------
  760|    201|        fdata->envelope->tx_details.tx.op_details.set_options_op.signer_present);
  ------------------
  |  Branch (760:9): [True: 10, False: 52]
  ------------------
  761|    201|}
formatter.c:format_set_options_empty_body:
  743|     52|static bool format_set_options_empty_body(formatter_data_t *fdata) {
  744|     52|    (void) fdata;
  745|     52|    STRLCPY(fdata->caption, "SET OPTIONS", fdata->caption_len);
  ------------------
  |  |   35|     52|    {                                         \
  |  |   36|     52|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     52|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 52]
  |  |  ------------------
  |  |   38|     52|    }
  ------------------
  746|     52|    STRLCPY(fdata->value, "[BODY IS EMPTY]", fdata->value_len);
  ------------------
  |  |   35|     52|    {                                         \
  |  |   36|     52|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     52|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 52]
  |  |  ------------------
  |  |   38|     52|    }
  ------------------
  747|     52|    return format_operation_source_prepare(fdata);
  748|     52|}
formatter.c:format_set_option_inflation_destination_prepare:
  734|    149|static bool format_set_option_inflation_destination_prepare(formatter_data_t *fdata) {
  735|    149|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination_present) {
  ------------------
  |  Branch (735:9): [True: 3, False: 146]
  ------------------
  736|      3|        FORMATTER_CHECK(push_to_formatter_stack(format_set_option_inflation_destination))
  ------------------
  |  |   30|      3|    {                           \
  |  |   31|      3|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   32|      3|    }
  ------------------
  737|    146|    } else {
  738|    146|        format_set_option_clear_flags_prepare(fdata);
  739|    146|    }
  740|    149|    return true;
  741|    149|}
formatter.c:format_set_option_inflation_destination:
  722|      3|static bool format_set_option_inflation_destination(formatter_data_t *fdata) {
  723|      3|    STRLCPY(fdata->caption, "Inflation Dest", fdata->caption_len);
  ------------------
  |  |   35|      3|    {                                         \
  |  |   36|      3|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      3|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   38|      3|    }
  ------------------
  724|      3|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|      3|    {                           \
  |  |   31|      3|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   32|      3|    }
  ------------------
  725|      3|        fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination,
  726|      3|        fdata->value,
  727|      3|        fdata->value_len,
  728|      3|        0,
  729|      3|        0))
  730|      3|    format_set_option_clear_flags_prepare(fdata);
  731|      3|    return true;
  732|      3|}
formatter.c:format_set_option_clear_flags_prepare:
  713|    149|static bool format_set_option_clear_flags_prepare(formatter_data_t *fdata) {
  714|    149|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags_present) {
  ------------------
  |  Branch (714:9): [True: 24, False: 125]
  ------------------
  715|     24|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_clear_flags))
  ------------------
  |  |   30|     24|    {                           \
  |  |   31|     24|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   32|     24|    }
  ------------------
  716|    125|    } else {
  717|    125|        format_set_option_set_flags_prepare(fdata);
  718|    125|    }
  719|    149|    return true;
  720|    149|}
formatter.c:format_set_option_clear_flags:
  703|     24|static bool format_set_option_clear_flags(formatter_data_t *fdata) {
  704|     24|    STRLCPY(fdata->caption, "Clear Flags", fdata->caption_len);
  ------------------
  |  |   35|     24|    {                                         \
  |  |   36|     24|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     24|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   38|     24|    }
  ------------------
  705|     24|    FORMATTER_CHECK(
  ------------------
  |  |   30|     24|    {                           \
  |  |   31|     24|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   32|     24|    }
  ------------------
  706|     24|        print_account_flags(fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags,
  707|     24|                            fdata->value,
  708|     24|                            fdata->value_len))
  709|     24|    format_set_option_set_flags_prepare(fdata);
  710|     24|    return true;
  711|     24|}
formatter.c:format_set_option_set_flags_prepare:
  694|    149|static bool format_set_option_set_flags_prepare(formatter_data_t *fdata) {
  695|    149|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags_present) {
  ------------------
  |  Branch (695:9): [True: 31, False: 118]
  ------------------
  696|     31|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_set_flags))
  ------------------
  |  |   30|     31|    {                           \
  |  |   31|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   32|     31|    }
  ------------------
  697|    118|    } else {
  698|    118|        format_set_option_master_weight_prepare(fdata);
  699|    118|    }
  700|    149|    return true;
  701|    149|}
formatter.c:format_set_option_set_flags:
  684|     31|static bool format_set_option_set_flags(formatter_data_t *fdata) {
  685|     31|    STRLCPY(fdata->caption, "Set Flags", fdata->caption_len);
  ------------------
  |  |   35|     31|    {                                         \
  |  |   36|     31|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     31|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   38|     31|    }
  ------------------
  686|     31|    FORMATTER_CHECK(
  ------------------
  |  |   30|     31|    {                           \
  |  |   31|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   32|     31|    }
  ------------------
  687|     31|        print_account_flags(fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags,
  688|     31|                            fdata->value,
  689|     31|                            fdata->value_len))
  690|     31|    format_set_option_master_weight_prepare(fdata);
  691|     31|    return true;
  692|     31|}
formatter.c:format_set_option_master_weight_prepare:
  675|    149|static bool format_set_option_master_weight_prepare(formatter_data_t *fdata) {
  676|    149|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight_present) {
  ------------------
  |  Branch (676:9): [True: 13, False: 136]
  ------------------
  677|     13|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_master_weight))
  ------------------
  |  |   30|     13|    {                           \
  |  |   31|     13|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 13]
  |  |  ------------------
  |  |   32|     13|    }
  ------------------
  678|    136|    } else {
  679|    136|        format_set_option_low_threshold_prepare(fdata);
  680|    136|    }
  681|    149|    return true;
  682|    149|}
formatter.c:format_set_option_master_weight:
  665|     13|static bool format_set_option_master_weight(formatter_data_t *fdata) {
  666|     13|    STRLCPY(fdata->caption, "Master Weight", fdata->caption_len);
  ------------------
  |  |   35|     13|    {                                         \
  |  |   36|     13|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     13|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 13]
  |  |  ------------------
  |  |   38|     13|    }
  ------------------
  667|     13|    FORMATTER_CHECK(
  ------------------
  |  |   30|     13|    {                           \
  |  |   31|     13|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 13]
  |  |  ------------------
  |  |   32|     13|    }
  ------------------
  668|     13|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight,
  669|     13|                         fdata->value,
  670|     13|                         fdata->value_len))
  671|     13|    format_set_option_low_threshold_prepare(fdata);
  672|     13|    return true;
  673|     13|}
formatter.c:format_set_option_low_threshold_prepare:
  656|    149|static bool format_set_option_low_threshold_prepare(formatter_data_t *fdata) {
  657|    149|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold_present) {
  ------------------
  |  Branch (657:9): [True: 36, False: 113]
  ------------------
  658|     36|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_low_threshold))
  ------------------
  |  |   30|     36|    {                           \
  |  |   31|     36|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   32|     36|    }
  ------------------
  659|    113|    } else {
  660|    113|        format_set_option_medium_threshold_prepare(fdata);
  661|    113|    }
  662|    149|    return true;
  663|    149|}
formatter.c:format_set_option_low_threshold:
  646|     36|static bool format_set_option_low_threshold(formatter_data_t *fdata) {
  647|     36|    STRLCPY(fdata->caption, "Low Threshold", fdata->caption_len);
  ------------------
  |  |   35|     36|    {                                         \
  |  |   36|     36|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     36|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   38|     36|    }
  ------------------
  648|     36|    FORMATTER_CHECK(
  ------------------
  |  |   30|     36|    {                           \
  |  |   31|     36|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   32|     36|    }
  ------------------
  649|     36|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold,
  650|     36|                         fdata->value,
  651|     36|                         fdata->value_len))
  652|     36|    format_set_option_medium_threshold_prepare(fdata);
  653|     36|    return true;
  654|     36|}
formatter.c:format_set_option_medium_threshold_prepare:
  637|    149|static bool format_set_option_medium_threshold_prepare(formatter_data_t *fdata) {
  638|    149|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold_present) {
  ------------------
  |  Branch (638:9): [True: 27, False: 122]
  ------------------
  639|     27|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_medium_threshold))
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
  640|    122|    } else {
  641|    122|        format_set_option_high_threshold_prepare(fdata);
  642|    122|    }
  643|    149|    return true;
  644|    149|}
formatter.c:format_set_option_medium_threshold:
  627|     27|static bool format_set_option_medium_threshold(formatter_data_t *fdata) {
  628|     27|    STRLCPY(fdata->caption, "Medium Threshold", fdata->caption_len);
  ------------------
  |  |   35|     27|    {                                         \
  |  |   36|     27|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     27|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   38|     27|    }
  ------------------
  629|     27|    FORMATTER_CHECK(
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
  630|     27|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold,
  631|     27|                         fdata->value,
  632|     27|                         fdata->value_len))
  633|     27|    format_set_option_high_threshold_prepare(fdata);
  634|     27|    return true;
  635|     27|}
formatter.c:format_set_option_high_threshold_prepare:
  618|    149|static bool format_set_option_high_threshold_prepare(formatter_data_t *fdata) {
  619|    149|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold_present) {
  ------------------
  |  Branch (619:9): [True: 5, False: 144]
  ------------------
  620|      5|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_high_threshold))
  ------------------
  |  |   30|      5|    {                           \
  |  |   31|      5|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   32|      5|    }
  ------------------
  621|    144|    } else {
  622|    144|        format_set_option_home_domain_prepare(fdata);
  623|    144|    }
  624|    149|    return true;
  625|    149|}
formatter.c:format_set_option_high_threshold:
  608|      5|static bool format_set_option_high_threshold(formatter_data_t *fdata) {
  609|      5|    STRLCPY(fdata->caption, "High Threshold", fdata->caption_len);
  ------------------
  |  |   35|      5|    {                                         \
  |  |   36|      5|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      5|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   38|      5|    }
  ------------------
  610|      5|    FORMATTER_CHECK(
  ------------------
  |  |   30|      5|    {                           \
  |  |   31|      5|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   32|      5|    }
  ------------------
  611|      5|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold,
  612|      5|                         fdata->value,
  613|      5|                         fdata->value_len))
  614|      5|    format_set_option_home_domain_prepare(fdata);
  615|      5|    return true;
  616|      5|}
formatter.c:format_set_option_home_domain_prepare:
  599|    149|static bool format_set_option_home_domain_prepare(formatter_data_t *fdata) {
  600|    149|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_present) {
  ------------------
  |  Branch (600:9): [True: 33, False: 116]
  ------------------
  601|     33|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_home_domain))
  ------------------
  |  |   30|     33|    {                           \
  |  |   31|     33|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 33]
  |  |  ------------------
  |  |   32|     33|    }
  ------------------
  602|    116|    } else {
  603|    116|        format_set_option_signer_prepare(fdata);
  604|    116|    }
  605|    149|    return true;
  606|    149|}
formatter.c:format_set_option_home_domain:
  584|     33|static bool format_set_option_home_domain(formatter_data_t *fdata) {
  585|     33|    STRLCPY(fdata->caption, "Home Domain", fdata->caption_len);
  ------------------
  |  |   35|     33|    {                                         \
  |  |   36|     33|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     33|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 33]
  |  |  ------------------
  |  |   38|     33|    }
  ------------------
  586|     33|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_size) {
  ------------------
  |  Branch (586:9): [True: 17, False: 16]
  ------------------
  587|     17|        FORMATTER_CHECK(
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
  588|     17|            print_string(fdata->value,
  589|     17|                         fdata->value_len,
  590|     17|                         fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain,
  591|     17|                         fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_size))
  592|     17|    } else {
  593|     16|        STRLCPY(fdata->value, "[remove home domain from account]", fdata->value_len);
  ------------------
  |  |   35|     16|    {                                         \
  |  |   36|     16|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     16|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 16]
  |  |  ------------------
  |  |   38|     16|    }
  ------------------
  594|     16|    }
  595|     33|    format_set_option_signer_prepare(fdata);
  596|     33|    return true;
  597|     33|}
formatter.c:format_set_option_signer_prepare:
  575|    149|static bool format_set_option_signer_prepare(formatter_data_t *fdata) {
  576|    149|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.signer_present) {
  ------------------
  |  Branch (576:9): [True: 33, False: 116]
  ------------------
  577|     33|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer))
  ------------------
  |  |   30|     33|    {                           \
  |  |   31|     33|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 33]
  |  |  ------------------
  |  |   32|     33|    }
  ------------------
  578|    116|    } else {
  579|    116|        return format_operation_source_prepare(fdata);
  580|    116|    }
  581|     33|    return true;
  582|    149|}
formatter.c:format_set_option_signer:
  544|     33|static bool format_set_option_signer(formatter_data_t *fdata) {
  545|     33|    signer_t *signer = &fdata->envelope->tx_details.tx.op_details.set_options_op.signer;
  546|     33|    if (signer->weight) {
  ------------------
  |  Branch (546:9): [True: 17, False: 16]
  ------------------
  547|     17|        STRLCPY(fdata->caption, "Add Signer", fdata->caption_len);
  ------------------
  |  |   35|     17|    {                                         \
  |  |   36|     17|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     17|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   38|     17|    }
  ------------------
  548|     17|    } else {
  549|     16|        STRLCPY(fdata->caption, "Remove Signer", fdata->caption_len);
  ------------------
  |  |   35|     16|    {                                         \
  |  |   36|     16|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     16|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 16]
  |  |  ------------------
  |  |   38|     16|    }
  ------------------
  550|     16|    }
  551|     33|    switch (signer->key.type) {
  552|     30|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (552:9): [True: 30, False: 3]
  ------------------
  553|     30|            STRLCPY(fdata->value, "Type Public Key", fdata->value_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
  554|     30|            break;
  555|     30|        }
  556|      1|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (556:9): [True: 1, False: 32]
  ------------------
  557|      1|            STRLCPY(fdata->value, "Type Hash(x)", fdata->value_len);
  ------------------
  |  |   35|      1|    {                                         \
  |  |   36|      1|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      1|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   38|      1|    }
  ------------------
  558|      1|            break;
  559|      1|        }
  560|      1|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (560:9): [True: 1, False: 32]
  ------------------
  561|      1|            STRLCPY(fdata->value, "Type Pre-Auth", fdata->value_len);
  ------------------
  |  |   35|      1|    {                                         \
  |  |   36|      1|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      1|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   38|      1|    }
  ------------------
  562|      1|            break;
  563|      1|        }
  564|      1|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (564:9): [True: 1, False: 32]
  ------------------
  565|      1|            STRLCPY(fdata->value, "Type Ed25519 Signed Payload", fdata->value_len);
  ------------------
  |  |   35|      1|    {                                         \
  |  |   36|      1|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      1|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   38|      1|    }
  ------------------
  566|      1|            break;
  567|      1|        }
  568|      0|        default:
  ------------------
  |  Branch (568:9): [True: 0, False: 33]
  ------------------
  569|      0|            return false;
  570|     33|    }
  571|     33|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer_detail))
  ------------------
  |  |   30|     33|    {                           \
  |  |   31|     33|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 33]
  |  |  ------------------
  |  |   32|     33|    }
  ------------------
  572|     33|    return true;
  573|     33|}
formatter.c:format_set_option_signer_detail:
  530|     33|static bool format_set_option_signer_detail(formatter_data_t *fdata) {
  531|     33|    STRLCPY(fdata->caption, "Signer Key", fdata->caption_len);
  ------------------
  |  |   35|     33|    {                                         \
  |  |   36|     33|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     33|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 33]
  |  |  ------------------
  |  |   38|     33|    }
  ------------------
  532|     33|    signer_key_t *key = &fdata->envelope->tx_details.tx.op_details.set_options_op.signer.key;
  533|       |
  534|     33|    FORMATTER_CHECK(print_signer_key_detail(key, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     33|    {                           \
  |  |   31|     33|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 33]
  |  |  ------------------
  |  |   32|     33|    }
  ------------------
  535|       |
  536|     33|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.signer.weight != 0) {
  ------------------
  |  Branch (536:9): [True: 17, False: 16]
  ------------------
  537|     17|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer_weight))
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
  538|     17|    } else {
  539|     16|        return format_operation_source_prepare(fdata);
  540|     16|    }
  541|     17|    return true;
  542|     33|}
formatter.c:print_signer_key_detail:
  502|    124|static bool print_signer_key_detail(signer_key_t *key, char *value, size_t value_len) {
  503|    124|    switch (key->type) {
  504|     67|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (504:9): [True: 67, False: 57]
  ------------------
  505|     67|            FORMATTER_CHECK(print_account_id(key->ed25519, value, value_len, 0, 0))
  ------------------
  |  |   30|     67|    {                           \
  |  |   31|     67|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 67]
  |  |  ------------------
  |  |   32|     67|    }
  ------------------
  506|     67|            break;
  507|     67|        }
  508|     67|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (508:9): [True: 14, False: 110]
  ------------------
  509|     14|            FORMATTER_CHECK(print_hash_x_key(key->hash_x, value, value_len, 0, 0))
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
  510|     14|            break;
  511|     14|        }
  512|     16|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (512:9): [True: 16, False: 108]
  ------------------
  513|     16|            FORMATTER_CHECK(print_pre_auth_x_key(key->pre_auth_tx, value, value_len, 0, 0))
  ------------------
  |  |   30|     16|    {                           \
  |  |   31|     16|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 16]
  |  |  ------------------
  |  |   32|     16|    }
  ------------------
  514|     16|            break;
  515|     16|        }
  516|     27|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (516:9): [True: 27, False: 97]
  ------------------
  517|     27|            FORMATTER_CHECK(print_ed25519_signed_payload(&key->ed25519_signed_payload,
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
  518|     27|                                                         value,
  519|     27|                                                         value_len,
  520|     27|                                                         12,
  521|     27|                                                         12))
  522|     27|            break;
  523|     27|        }
  524|     27|        default:
  ------------------
  |  Branch (524:9): [True: 0, False: 124]
  ------------------
  525|      0|            return false;
  526|    124|    }
  527|    124|    return true;
  528|    124|}
formatter.c:format_set_option_signer_weight:
  493|     17|static bool format_set_option_signer_weight(formatter_data_t *fdata) {
  494|     17|    STRLCPY(fdata->caption, "Weight", fdata->caption_len);
  ------------------
  |  |   35|     17|    {                                         \
  |  |   36|     17|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     17|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   38|     17|    }
  ------------------
  495|     17|    FORMATTER_CHECK(
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
  496|     17|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.signer.weight,
  497|     17|                         fdata->value,
  498|     17|                         fdata->value_len))
  499|     17|    return format_operation_source_prepare(fdata);
  500|     17|}
formatter.c:format_change_trust:
  829|     63|static bool format_change_trust(formatter_data_t *fdata) {
  830|     63|    if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit) {
  ------------------
  |  Branch (830:9): [True: 43, False: 20]
  ------------------
  831|     43|        STRLCPY(fdata->caption, "Change Trust", fdata->caption_len);
  ------------------
  |  |   35|     43|    {                                         \
  |  |   36|     43|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     43|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   38|     43|    }
  ------------------
  832|     43|    } else {
  833|     20|        STRLCPY(fdata->caption, "Remove Trust", fdata->caption_len);
  ------------------
  |  |   35|     20|    {                                         \
  |  |   36|     20|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     20|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   38|     20|    }
  ------------------
  834|     20|    }
  835|     63|    uint8_t asset_type = fdata->envelope->tx_details.tx.op_details.change_trust_op.line.type;
  836|     63|    switch (asset_type) {
  837|     23|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (837:9): [True: 23, False: 40]
  ------------------
  838|     43|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (838:9): [True: 20, False: 43]
  ------------------
  839|     43|            FORMATTER_CHECK(print_asset(
  ------------------
  |  |   30|     43|    {                           \
  |  |   31|     43|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   32|     43|    }
  ------------------
  840|     43|                (asset_t *) &fdata->envelope->tx_details.tx.op_details.change_trust_op.line,
  841|     43|                fdata->envelope->network,
  842|     43|                fdata->value,
  843|     43|                fdata->value_len))
  844|     43|            if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit &&
  ------------------
  |  Branch (844:17): [True: 31, False: 12]
  ------------------
  845|     43|                fdata->envelope->tx_details.tx.op_details.change_trust_op.limit != INT64_MAX) {
  ------------------
  |  Branch (845:17): [True: 31, False: 0]
  ------------------
  846|     31|                FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_limit))
  ------------------
  |  |   30|     31|    {                           \
  |  |   31|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   32|     31|    }
  ------------------
  847|     31|            } else {
  848|     12|                return format_operation_source_prepare(fdata);
  849|     12|            }
  850|     31|            break;
  851|     31|        case ASSET_TYPE_POOL_SHARE:
  ------------------
  |  Branch (851:9): [True: 4, False: 59]
  ------------------
  852|      4|            STRLCPY(fdata->value, "Liquidity Pool Asset", fdata->value_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  853|      4|            FORMATTER_CHECK(
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  854|      4|                push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_asset_a))
  855|      4|            break;
  856|     16|        default:
  ------------------
  |  Branch (856:9): [True: 16, False: 47]
  ------------------
  857|     16|            return false;
  858|     63|    }
  859|     35|    return true;
  860|     63|}
formatter.c:format_change_trust_limit:
  776|     34|static bool format_change_trust_limit(formatter_data_t *fdata) {
  777|     34|    STRLCPY(fdata->caption, "Trust Limit", fdata->caption_len);
  ------------------
  |  |   35|     34|    {                                         \
  |  |   36|     34|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     34|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   38|     34|    }
  ------------------
  778|     34|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.change_trust_op.limit,
  ------------------
  |  |   30|     34|    {                           \
  |  |   31|     34|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   32|     34|    }
  ------------------
  779|     34|                                 NULL,
  780|     34|                                 fdata->envelope->network,
  781|     34|                                 fdata->value,
  782|     34|                                 fdata->value_len))
  783|     34|    return format_operation_source_prepare(fdata);
  784|     34|}
formatter.c:format_change_trust_detail_liquidity_pool_asset_a:
  818|      4|static bool format_change_trust_detail_liquidity_pool_asset_a(formatter_data_t *fdata) {
  819|      4|    STRLCPY(fdata->caption, "Asset A", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  820|      4|    FORMATTER_CHECK(print_asset(&fdata->envelope->tx_details.tx.op_details.change_trust_op.line
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  821|      4|                                     .liquidity_pool.constant_product.asset_a,
  822|      4|                                fdata->envelope->network,
  823|      4|                                fdata->value,
  824|      4|                                fdata->value_len))
  825|      4|    FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_asset_b))
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  826|      4|    return true;
  827|      4|}
formatter.c:format_change_trust_detail_liquidity_pool_asset_b:
  807|      4|static bool format_change_trust_detail_liquidity_pool_asset_b(formatter_data_t *fdata) {
  808|      4|    STRLCPY(fdata->caption, "Asset B", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  809|      4|    FORMATTER_CHECK(print_asset(&fdata->envelope->tx_details.tx.op_details.change_trust_op.line
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  810|      4|                                     .liquidity_pool.constant_product.asset_b,
  811|      4|                                fdata->envelope->network,
  812|      4|                                fdata->value,
  813|      4|                                fdata->value_len))
  814|      4|    FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_fee))
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  815|      4|    return true;
  816|      4|}
formatter.c:format_change_trust_detail_liquidity_pool_fee:
  786|      4|static bool format_change_trust_detail_liquidity_pool_fee(formatter_data_t *fdata) {
  787|      4|    STRLCPY(fdata->caption, "Pool Fee Rate", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  788|       |
  789|      4|    uint8_t fee[4] = {0};
  790|     20|    for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (790:21): [True: 16, False: 4]
  ------------------
  791|     16|        fee[i] = fdata->envelope->tx_details.tx.op_details.change_trust_op.line.liquidity_pool
  792|     16|                     .constant_product.fee >>
  793|     16|                 (8 * (3 - i));
  794|     16|    }
  795|      4|    FORMATTER_CHECK(print_int32(fee, 2, fdata->value, fdata->value_len, false))
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  796|       |
  797|      4|    STRLCAT(fdata->value, "%", fdata->value_len);
  ------------------
  |  |   41|      4|    {                                         \
  |  |   42|      4|        size_t len = strlcat(dst, src, size); \
  |  |   43|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   44|      4|    }
  ------------------
  798|      4|    if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit &&
  ------------------
  |  Branch (798:9): [True: 3, False: 1]
  ------------------
  799|      4|        fdata->envelope->tx_details.tx.op_details.change_trust_op.limit != INT64_MAX) {
  ------------------
  |  Branch (799:9): [True: 3, False: 0]
  ------------------
  800|      3|        FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_limit))
  ------------------
  |  |   30|      3|    {                           \
  |  |   31|      3|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   32|      3|    }
  ------------------
  801|      3|    } else {
  802|      1|        return format_operation_source_prepare(fdata);
  803|      1|    }
  804|      3|    return true;
  805|      4|}
formatter.c:format_allow_trust:
  485|     10|static bool format_allow_trust(formatter_data_t *fdata) {
  486|     10|    (void) fdata;
  487|     10|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
  488|     10|    STRLCPY(fdata->value, "Allow Trust", fdata->value_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
  489|     10|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_trustor))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
  490|     10|    return true;
  491|     10|}
formatter.c:format_allow_trust_trustor:
  473|     10|static bool format_allow_trust_trustor(formatter_data_t *fdata) {
  474|     10|    STRLCPY(fdata->caption, "Trustor", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
  475|     10|    FORMATTER_CHECK(
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
  476|     10|        print_account_id(fdata->envelope->tx_details.tx.op_details.allow_trust_op.trustor,
  477|     10|                         fdata->value,
  478|     10|                         fdata->value_len,
  479|     10|                         0,
  480|     10|                         0))
  481|     10|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_asset_code))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
  482|     10|    return true;
  483|     10|}
formatter.c:format_allow_trust_asset_code:
  446|     10|static bool format_allow_trust_asset_code(formatter_data_t *fdata) {
  447|     10|    STRLCPY(fdata->caption, "Asset Code", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
  448|     10|    switch (fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_type) {
  449|      5|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (449:9): [True: 5, False: 5]
  ------------------
  450|      5|            FORMATTER_CHECK(
  ------------------
  |  |   30|      5|    {                           \
  |  |   31|      5|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   32|      5|    }
  ------------------
  451|      5|                print_string(fdata->value,
  452|      5|                             fdata->value_len,
  453|      5|                             fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_code,
  454|      5|                             4))
  455|       |
  456|      5|            break;
  457|      5|        }
  458|      5|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (458:9): [True: 5, False: 5]
  ------------------
  459|      5|            FORMATTER_CHECK(
  ------------------
  |  |   30|      5|    {                           \
  |  |   31|      5|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   32|      5|    }
  ------------------
  460|      5|                print_string(fdata->value,
  461|      5|                             fdata->value_len,
  462|      5|                             fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_code,
  463|      5|                             12))
  464|      5|            break;
  465|      5|        }
  466|      5|        default:
  ------------------
  |  Branch (466:9): [True: 0, False: 10]
  ------------------
  467|      0|            return false;  // unknown asset type
  468|     10|    }
  469|     10|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_authorize))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
  470|     10|    return true;
  471|     10|}
formatter.c:format_allow_trust_authorize:
  437|     10|static bool format_allow_trust_authorize(formatter_data_t *fdata) {
  438|     10|    STRLCPY(fdata->caption, "Authorize Flag", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
  439|     10|    FORMATTER_CHECK(
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
  440|     10|        print_allow_trust_flags(fdata->envelope->tx_details.tx.op_details.allow_trust_op.authorize,
  441|     10|                                fdata->value,
  442|     10|                                fdata->value_len))
  443|     10|    return format_operation_source_prepare(fdata);
  444|     10|}
formatter.c:format_account_merge:
  387|     34|static bool format_account_merge(formatter_data_t *fdata) {
  388|     34|    (void) fdata;
  389|     34|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     34|    {                                         \
  |  |   36|     34|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     34|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   38|     34|    }
  ------------------
  390|     34|    STRLCPY(fdata->value, "Account Merge", fdata->value_len);
  ------------------
  |  |   35|     34|    {                                         \
  |  |   36|     34|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     34|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   38|     34|    }
  ------------------
  391|     34|    FORMATTER_CHECK(push_to_formatter_stack(&format_account_merge_detail))
  ------------------
  |  |   30|     34|    {                           \
  |  |   31|     34|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   32|     34|    }
  ------------------
  392|     34|    return true;
  393|     34|}
formatter.c:format_account_merge_detail:
  380|     34|static bool format_account_merge_detail(formatter_data_t *fdata) {
  381|     34|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|     34|    {                                         \
  |  |   36|     34|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     34|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   38|     34|    }
  ------------------
  382|     34|    STRLCPY(fdata->value, "All Funds", fdata->value_len);
  ------------------
  |  |   35|     34|    {                                         \
  |  |   36|     34|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     34|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   38|     34|    }
  ------------------
  383|     34|    FORMATTER_CHECK(push_to_formatter_stack(&format_account_merge_destination))
  ------------------
  |  |   30|     34|    {                           \
  |  |   31|     34|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   32|     34|    }
  ------------------
  384|     34|    return true;
  385|     34|}
formatter.c:format_account_merge_destination:
  369|     34|static bool format_account_merge_destination(formatter_data_t *fdata) {
  370|     34|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|     34|    {                                         \
  |  |   36|     34|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     34|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   38|     34|    }
  ------------------
  371|     34|    FORMATTER_CHECK(
  ------------------
  |  |   30|     34|    {                           \
  |  |   31|     34|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   32|     34|    }
  ------------------
  372|     34|        print_muxed_account(&fdata->envelope->tx_details.tx.op_details.account_merge_op.destination,
  373|     34|                            fdata->value,
  374|     34|                            fdata->value_len,
  375|     34|                            0,
  376|     34|                            0))
  377|     34|    return format_operation_source_prepare(fdata);
  378|     34|}
formatter.c:format_inflation:
  362|     84|static bool format_inflation(formatter_data_t *fdata) {
  363|     84|    (void) fdata;
  364|     84|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     84|    {                                         \
  |  |   36|     84|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     84|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   38|     84|    }
  ------------------
  365|     84|    STRLCPY(fdata->value, "Inflation", fdata->value_len);
  ------------------
  |  |   35|     84|    {                                         \
  |  |   36|     84|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     84|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   38|     84|    }
  ------------------
  366|     84|    return format_operation_source_prepare(fdata);
  367|     84|}
formatter.c:format_manage_data:
  420|     40|static bool format_manage_data(formatter_data_t *fdata) {
  421|     40|    FORMATTER_CHECK(
  ------------------
  |  |   30|     40|    {                           \
  |  |   31|     40|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 40]
  |  |  ------------------
  |  |   32|     40|    }
  ------------------
  422|     40|        print_string(fdata->value,
  423|     40|                     fdata->value_len,
  424|     40|                     fdata->envelope->tx_details.tx.op_details.manage_data_op.data_name,
  425|     40|                     fdata->envelope->tx_details.tx.op_details.manage_data_op.data_name_size))
  426|       |
  427|     40|    if (fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size) {
  ------------------
  |  Branch (427:9): [True: 4, False: 36]
  ------------------
  428|      4|        STRLCPY(fdata->caption, "Set Data", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  429|      4|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_data_value))
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  430|     36|    } else {
  431|     36|        STRLCPY(fdata->caption, "Remove Data", fdata->caption_len);
  ------------------
  |  |   35|     36|    {                                         \
  |  |   36|     36|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     36|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   38|     36|    }
  ------------------
  432|     36|        return format_operation_source_prepare(fdata);
  433|     36|    }
  434|      4|    return true;
  435|     40|}
formatter.c:format_manage_data_value:
  395|      4|static bool format_manage_data_value(formatter_data_t *fdata) {
  396|      4|    STRLCPY(fdata->caption, "Data Value", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  397|      4|    if (is_printable_binary(
  ------------------
  |  Branch (397:9): [True: 2, False: 2]
  ------------------
  398|      4|            fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  399|      4|            fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size)) {
  400|      2|        if (fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size >=
  ------------------
  |  Branch (400:13): [True: 0, False: 2]
  ------------------
  401|      2|            fdata->value_len) {
  402|      0|            return false;
  403|      0|        }
  404|      2|        FORMATTER_CHECK(
  ------------------
  |  |   30|      2|    {                           \
  |  |   31|      2|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   32|      2|    }
  ------------------
  405|      2|            print_string(fdata->value,
  406|      2|                         fdata->value_len,
  407|      2|                         fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  408|      2|                         fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size))
  409|      2|    } else {
  410|      2|        STRLCPY(fdata->value, "Base64: ", fdata->value_len)
  ------------------
  |  |   35|      2|    {                                         \
  |  |   36|      2|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      2|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   38|      2|    }
  ------------------
  411|      2|        FORMATTER_CHECK(
  ------------------
  |  |   30|      2|    {                           \
  |  |   31|      2|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   32|      2|    }
  ------------------
  412|      2|            base64_encode(fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  413|      2|                          fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size,
  414|      2|                          fdata->value + strlen(fdata->value),
  415|      2|                          fdata->value_len - strlen(fdata->value)))
  416|      2|    }
  417|      4|    return format_operation_source_prepare(fdata);
  418|      4|}
formatter.c:format_bump_sequence:
  354|     26|static bool format_bump_sequence(formatter_data_t *fdata) {
  355|     26|    (void) fdata;
  356|     26|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     26|    {                                         \
  |  |   36|     26|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     26|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   38|     26|    }
  ------------------
  357|     26|    STRLCPY(fdata->value, "Bump Sequence", fdata->value_len);
  ------------------
  |  |   35|     26|    {                                         \
  |  |   36|     26|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     26|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   38|     26|    }
  ------------------
  358|     26|    FORMATTER_CHECK(push_to_formatter_stack(&format_bump_sequence_bump_to))
  ------------------
  |  |   30|     26|    {                           \
  |  |   31|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   32|     26|    }
  ------------------
  359|     26|    return true;
  360|     26|}
formatter.c:format_bump_sequence_bump_to:
  345|     26|static bool format_bump_sequence_bump_to(formatter_data_t *fdata) {
  346|     26|    STRLCPY(fdata->caption, "Bump To", fdata->caption_len);
  ------------------
  |  |   35|     26|    {                                         \
  |  |   36|     26|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     26|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   38|     26|    }
  ------------------
  347|     26|    FORMATTER_CHECK(
  ------------------
  |  |   30|     26|    {                           \
  |  |   31|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   32|     26|    }
  ------------------
  348|     26|        print_int64_num(fdata->envelope->tx_details.tx.op_details.bump_sequence_op.bump_to,
  349|     26|                        fdata->value,
  350|     26|                        fdata->value_len))
  351|     26|    return format_operation_source_prepare(fdata);
  352|     26|}
formatter.c:format_manage_buy_offer:
  955|     25|static bool format_manage_buy_offer(formatter_data_t *fdata) {
  956|     25|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  957|       |
  958|     25|    if (op->buy_amount == 0) {
  ------------------
  |  Branch (958:9): [True: 13, False: 12]
  ------------------
  959|     13|        STRLCPY(fdata->caption, "Remove Offer", fdata->caption_len);
  ------------------
  |  |   35|     13|    {                                         \
  |  |   36|     13|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     13|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 13]
  |  |  ------------------
  |  |   38|     13|    }
  ------------------
  960|     13|        FORMATTER_CHECK(print_uint64_num(op->offer_id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     13|    {                           \
  |  |   31|     13|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 13]
  |  |  ------------------
  |  |   32|     13|    }
  ------------------
  961|     13|        return format_operation_source_prepare(fdata);
  962|     13|    } else {
  963|     12|        if (op->offer_id) {
  ------------------
  |  Branch (963:13): [True: 5, False: 7]
  ------------------
  964|      5|            STRLCPY(fdata->caption, "Change Offer", fdata->caption_len);
  ------------------
  |  |   35|      5|    {                                         \
  |  |   36|      5|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      5|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   38|      5|    }
  ------------------
  965|      5|            FORMATTER_CHECK(print_uint64_num(op->offer_id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|      5|    {                           \
  |  |   31|      5|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   32|      5|    }
  ------------------
  966|      7|        } else {
  967|      7|            STRLCPY(fdata->caption, "Create Offer", fdata->caption_len);
  ------------------
  |  |   35|      7|    {                                         \
  |  |   36|      7|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      7|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   38|      7|    }
  ------------------
  968|      7|        }
  969|     12|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_sell))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  970|     12|    }
  971|     12|    return true;
  972|     25|}
formatter.c:format_manage_buy_offer_sell:
  945|     12|static bool format_manage_buy_offer_sell(formatter_data_t *fdata) {
  946|     12|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  947|       |
  948|     12|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|     12|    {                                         \
  |  |   36|     12|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     12|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   38|     12|    }
  ------------------
  949|     12|    FORMATTER_CHECK(
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  950|     12|        print_asset(&op->selling, fdata->envelope->network, fdata->value, fdata->value_len))
  951|     12|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_buy))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  952|     12|    return true;
  953|     12|}
formatter.c:format_manage_buy_offer_buy:
  932|     12|static bool format_manage_buy_offer_buy(formatter_data_t *fdata) {
  933|     12|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  934|       |
  935|     12|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|     12|    {                                         \
  |  |   36|     12|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     12|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   38|     12|    }
  ------------------
  936|     12|    FORMATTER_CHECK(print_amount(op->buy_amount,
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  937|     12|                                 &op->buying,
  938|     12|                                 fdata->envelope->network,
  939|     12|                                 fdata->value,
  940|     12|                                 fdata->value_len))
  941|     12|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_price))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  942|     12|    return true;
  943|     12|}
formatter.c:format_manage_buy_offer_price:
  920|     12|static bool format_manage_buy_offer_price(formatter_data_t *fdata) {
  921|     12|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  922|     12|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|     12|    {                                         \
  |  |   36|     12|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     12|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   38|     12|    }
  ------------------
  923|     12|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  924|     12|                                &op->selling,
  925|     12|                                &op->buying,
  926|     12|                                fdata->envelope->network,
  927|     12|                                fdata->value,
  928|     12|                                fdata->value_len))
  929|     12|    return format_operation_source_prepare(fdata);
  930|     12|}
formatter.c:format_path_payment_strict_send:
 1076|      8|static bool format_path_payment_strict_send(formatter_data_t *fdata) {
 1077|      8|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
 1078|      8|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1079|      8|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.send_amount,
 1080|      8|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.send_asset,
 1081|      8|        fdata->envelope->network,
 1082|      8|        fdata->value,
 1083|      8|        fdata->value_len))
 1084|      8|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_send_destination))
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1085|      8|    return true;
 1086|      8|}
formatter.c:format_path_payment_strict_send_destination:
 1064|      8|static bool format_path_payment_strict_send_destination(formatter_data_t *fdata) {
 1065|      8|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
 1066|      8|    FORMATTER_CHECK(print_muxed_account(
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1067|      8|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.destination,
 1068|      8|        fdata->value,
 1069|      8|        fdata->value_len,
 1070|      8|        0,
 1071|      8|        0))
 1072|      8|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_send_receive))
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1073|      8|    return true;
 1074|      8|}
formatter.c:format_path_payment_strict_send_receive:
 1053|      8|static bool format_path_payment_strict_send_receive(formatter_data_t *fdata) {
 1054|      8|    STRLCPY(fdata->caption, "Receive Min", fdata->caption_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
 1055|      8|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1056|      8|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.dest_min,
 1057|      8|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.dest_asset,
 1058|      8|        fdata->envelope->network,
 1059|      8|        fdata->value,
 1060|      8|        fdata->value_len))
 1061|      8|    return format_operation_source_prepare(fdata);
 1062|      8|}
formatter.c:format_create_claimable_balance:
 1165|     39|static bool format_create_claimable_balance(formatter_data_t *fdata) {
 1166|     39|    (void) fdata;
 1167|     39|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     39|    {                                         \
  |  |   36|     39|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     39|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   38|     39|    }
  ------------------
 1168|     39|    STRLCPY(fdata->value, "Create Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|     39|    {                                         \
  |  |   36|     39|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     39|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   38|     39|    }
  ------------------
 1169|     39|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_claimable_balance_balance))
  ------------------
  |  |   30|     39|    {                           \
  |  |   31|     39|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   32|     39|    }
  ------------------
 1170|     39|    return true;
 1171|     39|}
formatter.c:format_create_claimable_balance_balance:
 1153|     39|static bool format_create_claimable_balance_balance(formatter_data_t *fdata) {
 1154|     39|    STRLCPY(fdata->caption, "Balance", fdata->caption_len);
  ------------------
  |  |   35|     39|    {                                         \
  |  |   36|     39|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     39|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   38|     39|    }
  ------------------
 1155|     39|    FORMATTER_CHECK(
  ------------------
  |  |   30|     39|    {                           \
  |  |   31|     39|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   32|     39|    }
  ------------------
 1156|     39|        print_amount(fdata->envelope->tx_details.tx.op_details.create_claimable_balance_op.amount,
 1157|     39|                     &fdata->envelope->tx_details.tx.op_details.create_claimable_balance_op.asset,
 1158|     39|                     fdata->envelope->network,
 1159|     39|                     fdata->value,
 1160|     39|                     fdata->value_len))
 1161|     39|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_claimable_balance_warning))
  ------------------
  |  |   30|     39|    {                           \
  |  |   31|     39|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   32|     39|    }
  ------------------
 1162|     39|    return true;
 1163|     39|}
formatter.c:format_create_claimable_balance_warning:
 1142|     39|static bool format_create_claimable_balance_warning(formatter_data_t *fdata) {
 1143|     39|    (void) fdata;
 1144|       |    // The claimant can be very complicated. I haven't figured out how to
 1145|       |    // display it for the time being, so let's display an WARNING here first.
 1146|     39|    STRLCPY(fdata->caption, "WARNING", fdata->caption_len);
  ------------------
  |  |   35|     39|    {                                         \
  |  |   36|     39|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     39|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   38|     39|    }
  ------------------
 1147|     39|    STRLCPY(fdata->value,
  ------------------
  |  |   35|     39|    {                                         \
  |  |   36|     39|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     39|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   38|     39|    }
  ------------------
 1148|     39|            "Currently does not support displaying claimant details",
 1149|     39|            fdata->value_len);
 1150|     39|    return format_operation_source_prepare(fdata);
 1151|     39|}
formatter.c:format_claim_claimable_balance:
 1184|     19|static bool format_claim_claimable_balance(formatter_data_t *fdata) {
 1185|     19|    (void) fdata;
 1186|     19|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     19|    {                                         \
  |  |   36|     19|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     19|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   38|     19|    }
  ------------------
 1187|     19|    STRLCPY(fdata->value, "Claim Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|     19|    {                                         \
  |  |   36|     19|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     19|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   38|     19|    }
  ------------------
 1188|     19|    FORMATTER_CHECK(push_to_formatter_stack(&format_claim_claimable_balance_balance_id))
  ------------------
  |  |   30|     19|    {                           \
  |  |   31|     19|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   32|     19|    }
  ------------------
 1189|     19|    return true;
 1190|     19|}
formatter.c:format_claim_claimable_balance_balance_id:
 1173|     19|static bool format_claim_claimable_balance_balance_id(formatter_data_t *fdata) {
 1174|     19|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|     19|    {                                         \
  |  |   36|     19|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     19|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   38|     19|    }
  ------------------
 1175|     19|    FORMATTER_CHECK(print_claimable_balance_id(
  ------------------
  |  |   30|     19|    {                           \
  |  |   31|     19|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   32|     19|    }
  ------------------
 1176|     19|        &fdata->envelope->tx_details.tx.op_details.claim_claimable_balance_op.balance_id,
 1177|     19|        fdata->value,
 1178|     19|        fdata->value_len,
 1179|     19|        12,
 1180|     19|        12))
 1181|     19|    return format_operation_source_prepare(fdata);
 1182|     19|}
formatter.c:format_begin_sponsoring_future_reserves:
 1203|     38|static bool format_begin_sponsoring_future_reserves(formatter_data_t *fdata) {
 1204|     38|    (void) fdata;
 1205|     38|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     38|    {                                         \
  |  |   36|     38|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     38|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 38]
  |  |  ------------------
  |  |   38|     38|    }
  ------------------
 1206|     38|    STRLCPY(fdata->value, "Begin Sponsoring Future Reserves", fdata->value_len);
  ------------------
  |  |   35|     38|    {                                         \
  |  |   36|     38|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     38|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 38]
  |  |  ------------------
  |  |   38|     38|    }
  ------------------
 1207|     38|    FORMATTER_CHECK(push_to_formatter_stack(&format_claim_claimable_balance_sponsored_id))
  ------------------
  |  |   30|     38|    {                           \
  |  |   31|     38|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 38]
  |  |  ------------------
  |  |   32|     38|    }
  ------------------
 1208|     38|    return true;
 1209|     38|}
formatter.c:format_claim_claimable_balance_sponsored_id:
 1192|     38|static bool format_claim_claimable_balance_sponsored_id(formatter_data_t *fdata) {
 1193|     38|    STRLCPY(fdata->caption, "Sponsored ID", fdata->caption_len);
  ------------------
  |  |   35|     38|    {                                         \
  |  |   36|     38|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     38|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 38]
  |  |  ------------------
  |  |   38|     38|    }
  ------------------
 1194|     38|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|     38|    {                           \
  |  |   31|     38|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 38]
  |  |  ------------------
  |  |   32|     38|    }
  ------------------
 1195|     38|        fdata->envelope->tx_details.tx.op_details.begin_sponsoring_future_reserves_op.sponsored_id,
 1196|     38|        fdata->value,
 1197|     38|        fdata->value_len,
 1198|     38|        0,
 1199|     38|        0))
 1200|     38|    return format_operation_source_prepare(fdata);
 1201|     38|}
formatter.c:format_end_sponsoring_future_reserves:
 1211|     17|static bool format_end_sponsoring_future_reserves(formatter_data_t *fdata) {
 1212|     17|    (void) fdata;
 1213|     17|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     17|    {                                         \
  |  |   36|     17|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     17|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   38|     17|    }
  ------------------
 1214|     17|    STRLCPY(fdata->value, "End Sponsoring Future Reserves", fdata->value_len);
  ------------------
  |  |   35|     17|    {                                         \
  |  |   36|     17|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     17|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   38|     17|    }
  ------------------
 1215|     17|    return format_operation_source_prepare(fdata);
 1216|     17|}
formatter.c:format_revoke_sponsorship:
 1383|    229|static bool format_revoke_sponsorship(formatter_data_t *fdata) {
 1384|    229|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    229|    {                                         \
  |  |   36|    229|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    229|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 229]
  |  |  ------------------
  |  |   38|    229|    }
  ------------------
 1385|    229|    if (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.type ==
  ------------------
  |  Branch (1385:9): [True: 91, False: 138]
  ------------------
 1386|    229|        REVOKE_SPONSORSHIP_SIGNER) {
 1387|     91|        STRLCPY(fdata->value, "Revoke Sponsorship (SIGNER_KEY)", fdata->value_len);
  ------------------
  |  |   35|     91|    {                                         \
  |  |   36|     91|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     91|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 91]
  |  |  ------------------
  |  |   38|     91|    }
  ------------------
 1388|     91|        FORMATTER_CHECK(
  ------------------
  |  |   30|     91|    {                           \
  |  |   31|     91|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 91]
  |  |  ------------------
  |  |   32|     91|    }
  ------------------
 1389|     91|            push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_account))
 1390|    138|    } else {
 1391|    138|        switch (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.type) {
 1392|     25|            case ACCOUNT:
  ------------------
  |  Branch (1392:13): [True: 25, False: 113]
  ------------------
 1393|     25|                STRLCPY(fdata->value, "Revoke Sponsorship (ACCOUNT)", fdata->value_len);
  ------------------
  |  |   35|     25|    {                                         \
  |  |   36|     25|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     25|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   38|     25|    }
  ------------------
 1394|     25|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_account))
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
 1395|     25|                break;
 1396|     25|            case OFFER:
  ------------------
  |  Branch (1396:13): [True: 8, False: 130]
  ------------------
 1397|      8|                STRLCPY(fdata->value, "Revoke Sponsorship (OFFER)", fdata->value_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
 1398|      8|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_offer_seller_id))
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1399|      8|                break;
 1400|     36|            case TRUSTLINE:
  ------------------
  |  Branch (1400:13): [True: 36, False: 102]
  ------------------
 1401|     36|                STRLCPY(fdata->value, "Revoke Sponsorship (TRUSTLINE)", fdata->value_len);
  ------------------
  |  |   35|     36|    {                                         \
  |  |   36|     36|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     36|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   38|     36|    }
  ------------------
 1402|     36|                FORMATTER_CHECK(
  ------------------
  |  |   30|     36|    {                           \
  |  |   31|     36|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   32|     36|    }
  ------------------
 1403|     36|                    push_to_formatter_stack(&format_revoke_sponsorship_trust_line_account))
 1404|     36|                break;
 1405|     36|            case DATA:
  ------------------
  |  Branch (1405:13): [True: 18, False: 120]
  ------------------
 1406|     18|                STRLCPY(fdata->value, "Revoke Sponsorship (DATA)", fdata->value_len);
  ------------------
  |  |   35|     18|    {                                         \
  |  |   36|     18|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     18|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   38|     18|    }
  ------------------
 1407|     18|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_data_account))
  ------------------
  |  |   30|     18|    {                           \
  |  |   31|     18|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   32|     18|    }
  ------------------
 1408|     18|                break;
 1409|     18|            case CLAIMABLE_BALANCE:
  ------------------
  |  Branch (1409:13): [True: 14, False: 124]
  ------------------
 1410|     14|                STRLCPY(fdata->value, "Revoke Sponsorship (CLAIMABLE_BALANCE)", fdata->value_len);
  ------------------
  |  |   35|     14|    {                                         \
  |  |   36|     14|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     14|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   38|     14|    }
  ------------------
 1411|     14|                FORMATTER_CHECK(
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
 1412|     14|                    push_to_formatter_stack(&format_revoke_sponsorship_claimable_balance))
 1413|     14|                break;
 1414|     37|            case LIQUIDITY_POOL:
  ------------------
  |  Branch (1414:13): [True: 37, False: 101]
  ------------------
 1415|     37|                STRLCPY(fdata->value, "Revoke Sponsorship (LIQUIDITY_POOL)", fdata->value_len);
  ------------------
  |  |   35|     37|    {                                         \
  |  |   36|     37|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     37|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   38|     37|    }
  ------------------
 1416|     37|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_liquidity_pool))
  ------------------
  |  |   30|     37|    {                           \
  |  |   31|     37|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   32|     37|    }
  ------------------
 1417|     37|                break;
 1418|     37|            default:
  ------------------
  |  Branch (1418:13): [True: 0, False: 138]
  ------------------
 1419|      0|                return false;
 1420|    138|        }
 1421|    138|    }
 1422|    229|    return true;
 1423|    229|}
formatter.c:format_revoke_sponsorship_claimable_signer_account:
 1370|     91|static bool format_revoke_sponsorship_claimable_signer_account(formatter_data_t *fdata) {
 1371|     91|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|     91|    {                                         \
  |  |   36|     91|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     91|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 91]
  |  |  ------------------
  |  |   38|     91|    }
  ------------------
 1372|     91|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|     91|    {                           \
  |  |   31|     91|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 91]
  |  |  ------------------
  |  |   32|     91|    }
  ------------------
 1373|     91|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.account_id,
 1374|     91|        fdata->value,
 1375|     91|        fdata->value_len,
 1376|     91|        0,
 1377|     91|        0))
 1378|     91|    FORMATTER_CHECK(
  ------------------
  |  |   30|     91|    {                           \
  |  |   31|     91|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 91]
  |  |  ------------------
  |  |   32|     91|    }
  ------------------
 1379|     91|        push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_signer_key_type))
 1380|     91|    return true;
 1381|     91|}
formatter.c:format_revoke_sponsorship_claimable_signer_signer_key_type:
 1341|     91|static bool format_revoke_sponsorship_claimable_signer_signer_key_type(formatter_data_t *fdata) {
 1342|     91|    STRLCPY(fdata->caption, "Signer Key Type", fdata->caption_len);
  ------------------
  |  |   35|     91|    {                                         \
  |  |   36|     91|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     91|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 91]
  |  |  ------------------
  |  |   38|     91|    }
  ------------------
 1343|     91|    switch (
 1344|     91|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.signer_key.type) {
 1345|     37|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (1345:9): [True: 37, False: 54]
  ------------------
 1346|     37|            STRLCPY(fdata->value, "Public Key", fdata->value_len);
  ------------------
  |  |   35|     37|    {                                         \
  |  |   36|     37|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     37|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   38|     37|    }
  ------------------
 1347|     37|            break;
 1348|     37|        }
 1349|     13|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (1349:9): [True: 13, False: 78]
  ------------------
 1350|     13|            STRLCPY(fdata->value, "Hash(x)", fdata->value_len);
  ------------------
  |  |   35|     13|    {                                         \
  |  |   36|     13|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     13|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 13]
  |  |  ------------------
  |  |   38|     13|    }
  ------------------
 1351|     13|            break;
 1352|     13|        }
 1353|     15|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (1353:9): [True: 15, False: 76]
  ------------------
 1354|     15|            STRLCPY(fdata->value, "Pre-Auth", fdata->value_len);
  ------------------
  |  |   35|     15|    {                                         \
  |  |   36|     15|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     15|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 15]
  |  |  ------------------
  |  |   38|     15|    }
  ------------------
 1355|     15|            break;
 1356|     15|        }
 1357|     26|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (1357:9): [True: 26, False: 65]
  ------------------
 1358|     26|            STRLCPY(fdata->value, "Ed25519 Signed Payload", fdata->value_len);
  ------------------
  |  |   35|     26|    {                                         \
  |  |   36|     26|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     26|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   38|     26|    }
  ------------------
 1359|     26|            break;
 1360|     26|        }
 1361|      0|        default:
  ------------------
  |  Branch (1361:9): [True: 0, False: 91]
  ------------------
 1362|      0|            return false;
 1363|     91|    }
 1364|       |
 1365|     91|    FORMATTER_CHECK(
  ------------------
  |  |   30|     91|    {                           \
  |  |   31|     91|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 91]
  |  |  ------------------
  |  |   32|     91|    }
  ------------------
 1366|     91|        push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_signer_key_detail))
 1367|     91|    return true;
 1368|     91|}
formatter.c:format_revoke_sponsorship_claimable_signer_signer_key_detail:
 1332|     91|static bool format_revoke_sponsorship_claimable_signer_signer_key_detail(formatter_data_t *fdata) {
 1333|     91|    STRLCPY(fdata->caption, "Signer Key", fdata->caption_len);
  ------------------
  |  |   35|     91|    {                                         \
  |  |   36|     91|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     91|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 91]
  |  |  ------------------
  |  |   38|     91|    }
  ------------------
 1334|     91|    signer_key_t *key =
 1335|     91|        &fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.signer_key;
 1336|       |
 1337|     91|    FORMATTER_CHECK(print_signer_key_detail(key, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     91|    {                           \
  |  |   31|     91|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 91]
  |  |  ------------------
  |  |   32|     91|    }
  ------------------
 1338|     91|    return format_operation_source_prepare(fdata);
 1339|     91|}
formatter.c:format_revoke_sponsorship_account:
 1218|     25|static bool format_revoke_sponsorship_account(formatter_data_t *fdata) {
 1219|     25|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|     25|    {                                         \
  |  |   36|     25|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     25|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   38|     25|    }
  ------------------
 1220|     25|    FORMATTER_CHECK(print_account_id(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
 1221|     25|                                         .ledger_key.account.account_id,
 1222|     25|                                     fdata->value,
 1223|     25|                                     fdata->value_len,
 1224|     25|                                     0,
 1225|     25|                                     0))
 1226|     25|    return format_operation_source_prepare(fdata);
 1227|     25|}
formatter.c:format_revoke_sponsorship_offer_seller_id:
 1273|      8|static bool format_revoke_sponsorship_offer_seller_id(formatter_data_t *fdata) {
 1274|      8|    STRLCPY(fdata->caption, "Seller ID", fdata->caption_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
 1275|      8|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1276|      8|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.offer.seller_id,
 1277|      8|        fdata->value,
 1278|      8|        fdata->value_len,
 1279|      8|        0,
 1280|      8|        0))
 1281|      8|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_offer_offer_id))
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1282|      8|    return true;
 1283|      8|}
formatter.c:format_revoke_sponsorship_offer_offer_id:
 1263|      8|static bool format_revoke_sponsorship_offer_offer_id(formatter_data_t *fdata) {
 1264|      8|    STRLCPY(fdata->caption, "Offer ID", fdata->caption_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
 1265|      8|    FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1266|      8|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.offer.offer_id,
 1267|      8|        fdata->value,
 1268|      8|        fdata->value_len))
 1269|       |
 1270|      8|    return format_operation_source_prepare(fdata);
 1271|      8|}
formatter.c:format_revoke_sponsorship_trust_line_account:
 1251|     36|static bool format_revoke_sponsorship_trust_line_account(formatter_data_t *fdata) {
 1252|     36|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|     36|    {                                         \
  |  |   36|     36|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     36|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   38|     36|    }
  ------------------
 1253|     36|    FORMATTER_CHECK(print_account_id(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|     36|    {                           \
  |  |   31|     36|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   32|     36|    }
  ------------------
 1254|     36|                                         .ledger_key.trust_line.account_id,
 1255|     36|                                     fdata->value,
 1256|     36|                                     fdata->value_len,
 1257|     36|                                     0,
 1258|     36|                                     0))
 1259|     36|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_trust_line_asset))
  ------------------
  |  |   30|     36|    {                           \
  |  |   31|     36|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   32|     36|    }
  ------------------
 1260|     36|    return true;
 1261|     36|}
formatter.c:format_revoke_sponsorship_trust_line_asset:
 1229|     36|static bool format_revoke_sponsorship_trust_line_asset(formatter_data_t *fdata) {
 1230|     36|    if (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.trust_line.asset
  ------------------
  |  Branch (1230:9): [True: 9, False: 27]
  ------------------
 1231|     36|            .type == ASSET_TYPE_POOL_SHARE) {
 1232|      9|        STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|      9|    {                                         \
  |  |   36|      9|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      9|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 9]
  |  |  ------------------
  |  |   38|      9|    }
  ------------------
 1233|      9|        FORMATTER_CHECK(print_binary(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|      9|    {                           \
  |  |   31|      9|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 9]
  |  |  ------------------
  |  |   32|      9|    }
  ------------------
 1234|      9|                                         .ledger_key.trust_line.asset.liquidity_pool_id,
 1235|      9|                                     LIQUIDITY_POOL_ID_SIZE,
 1236|      9|                                     fdata->value,
 1237|      9|                                     fdata->value_len,
 1238|      9|                                     0,
 1239|      9|                                     0))
 1240|     27|    } else {
 1241|     27|        STRLCPY(fdata->caption, "Asset", fdata->caption_len);
  ------------------
  |  |   35|     27|    {                                         \
  |  |   36|     27|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     27|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   38|     27|    }
  ------------------
 1242|     27|        FORMATTER_CHECK(print_asset((asset_t *) &fdata->envelope->tx_details.tx.op_details
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
 1243|     27|                                        .revoke_sponsorship_op.ledger_key.trust_line.asset,
 1244|     27|                                    fdata->envelope->network,
 1245|     27|                                    fdata->value,
 1246|     27|                                    fdata->value_len))
 1247|     27|    }
 1248|     36|    return format_operation_source_prepare(fdata);
 1249|     36|}
formatter.c:format_revoke_sponsorship_data_account:
 1296|     18|static bool format_revoke_sponsorship_data_account(formatter_data_t *fdata) {
 1297|     18|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|     18|    {                                         \
  |  |   36|     18|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     18|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   38|     18|    }
  ------------------
 1298|     18|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|     18|    {                           \
  |  |   31|     18|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   32|     18|    }
  ------------------
 1299|     18|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data.account_id,
 1300|     18|        fdata->value,
 1301|     18|        fdata->value_len,
 1302|     18|        0,
 1303|     18|        0))
 1304|     18|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_data_data_name))
  ------------------
  |  |   30|     18|    {                           \
  |  |   31|     18|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   32|     18|    }
  ------------------
 1305|     18|    return true;
 1306|     18|}
formatter.c:format_revoke_sponsorship_data_data_name:
 1285|     18|static bool format_revoke_sponsorship_data_data_name(formatter_data_t *fdata) {
 1286|     18|    STRLCPY(fdata->caption, "Data Name", fdata->caption_len);
  ------------------
  |  |   35|     18|    {                                         \
  |  |   36|     18|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     18|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   38|     18|    }
  ------------------
 1287|     18|    FORMATTER_CHECK(print_string(
  ------------------
  |  |   30|     18|    {                           \
  |  |   31|     18|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   32|     18|    }
  ------------------
 1288|     18|        fdata->value,
 1289|     18|        fdata->value_len,
 1290|     18|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data.data_name,
 1291|     18|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data
 1292|     18|            .data_name_size))
 1293|     18|    return format_operation_source_prepare(fdata);
 1294|     18|}
formatter.c:format_revoke_sponsorship_claimable_balance:
 1308|     14|static bool format_revoke_sponsorship_claimable_balance(formatter_data_t *fdata) {
 1309|     14|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|     14|    {                                         \
  |  |   36|     14|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     14|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   38|     14|    }
  ------------------
 1310|     14|    FORMATTER_CHECK(
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
 1311|     14|        print_claimable_balance_id(&fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
 1312|     14|                                        .ledger_key.claimable_balance.balance_id,
 1313|     14|                                   fdata->value,
 1314|     14|                                   fdata->value_len,
 1315|     14|                                   0,
 1316|     14|                                   0))
 1317|     14|    return format_operation_source_prepare(fdata);
 1318|     14|}
formatter.c:format_revoke_sponsorship_liquidity_pool:
 1320|     37|static bool format_revoke_sponsorship_liquidity_pool(formatter_data_t *fdata) {
 1321|     37|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     37|    {                                         \
  |  |   36|     37|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     37|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   38|     37|    }
  ------------------
 1322|     37|    FORMATTER_CHECK(print_binary(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|     37|    {                           \
  |  |   31|     37|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   32|     37|    }
  ------------------
 1323|     37|                                     .ledger_key.liquidity_pool.liquidity_pool_id,
 1324|     37|                                 LIQUIDITY_POOL_ID_SIZE,
 1325|     37|                                 fdata->value,
 1326|     37|                                 fdata->value_len,
 1327|     37|                                 0,
 1328|     37|                                 0))
 1329|     37|    return format_operation_source_prepare(fdata);
 1330|     37|}
formatter.c:format_clawback:
 1446|     10|static bool format_clawback(formatter_data_t *fdata) {
 1447|     10|    (void) fdata;
 1448|     10|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
 1449|     10|    STRLCPY(fdata->value, "Clawback", fdata->value_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
 1450|     10|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_amount))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
 1451|     10|    return true;
 1452|     10|}
formatter.c:format_clawback_amount:
 1435|     10|static bool format_clawback_amount(formatter_data_t *fdata) {
 1436|     10|    STRLCPY(fdata->caption, "Clawback Balance", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
 1437|     10|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.clawback_op.amount,
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
 1438|     10|                                 &fdata->envelope->tx_details.tx.op_details.clawback_op.asset,
 1439|     10|                                 fdata->envelope->network,
 1440|     10|                                 fdata->value,
 1441|     10|                                 fdata->value_len))
 1442|     10|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_from))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
 1443|     10|    return true;
 1444|     10|}
formatter.c:format_clawback_from:
 1425|     10|static bool format_clawback_from(formatter_data_t *fdata) {
 1426|     10|    STRLCPY(fdata->caption, "From", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
 1427|     10|    FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.op_details.clawback_op.from,
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
 1428|     10|                                        fdata->value,
 1429|     10|                                        fdata->value_len,
 1430|     10|                                        0,
 1431|     10|                                        0))
 1432|     10|    return format_operation_source_prepare(fdata);
 1433|     10|}
formatter.c:format_clawback_claimable_balance:
 1465|     18|static bool format_clawback_claimable_balance(formatter_data_t *fdata) {
 1466|     18|    (void) fdata;
 1467|     18|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     18|    {                                         \
  |  |   36|     18|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     18|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   38|     18|    }
  ------------------
 1468|     18|    STRLCPY(fdata->value, "Clawback Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|     18|    {                                         \
  |  |   36|     18|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     18|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   38|     18|    }
  ------------------
 1469|     18|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_claimable_balance_balance_id))
  ------------------
  |  |   30|     18|    {                           \
  |  |   31|     18|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   32|     18|    }
  ------------------
 1470|     18|    return true;
 1471|     18|}
formatter.c:format_clawback_claimable_balance_balance_id:
 1454|     18|static bool format_clawback_claimable_balance_balance_id(formatter_data_t *fdata) {
 1455|     18|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|     18|    {                                         \
  |  |   36|     18|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     18|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   38|     18|    }
  ------------------
 1456|     18|    FORMATTER_CHECK(print_claimable_balance_id(
  ------------------
  |  |   30|     18|    {                           \
  |  |   31|     18|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   32|     18|    }
  ------------------
 1457|     18|        &fdata->envelope->tx_details.tx.op_details.clawback_claimable_balance_op.balance_id,
 1458|     18|        fdata->value,
 1459|     18|        fdata->value_len,
 1460|     18|        0,
 1461|     18|        0))
 1462|     18|    return format_operation_source_prepare(fdata);
 1463|     18|}
formatter.c:format_set_trust_line_flags:
 1523|     86|static bool format_set_trust_line_flags(formatter_data_t *fdata) {
 1524|     86|    (void) fdata;
 1525|     86|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 1526|     86|    STRLCPY(fdata->value, "Set Trust Line Flags", fdata->value_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 1527|     86|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_trustor))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 1528|     86|    return true;
 1529|     86|}
formatter.c:format_set_trust_line_trustor:
 1511|     86|static bool format_set_trust_line_trustor(formatter_data_t *fdata) {
 1512|     86|    STRLCPY(fdata->caption, "Trustor", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 1513|     86|    FORMATTER_CHECK(
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 1514|     86|        print_account_id(fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.trustor,
 1515|     86|                         fdata->value,
 1516|     86|                         fdata->value_len,
 1517|     86|                         0,
 1518|     86|                         0))
 1519|     86|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_asset))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 1520|     86|    return true;
 1521|     86|}
formatter.c:format_set_trust_line_asset:
 1500|     86|static bool format_set_trust_line_asset(formatter_data_t *fdata) {
 1501|     86|    STRLCPY(fdata->caption, "Asset", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 1502|     86|    FORMATTER_CHECK(
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 1503|     86|        print_asset(&fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.asset,
 1504|     86|                    fdata->envelope->network,
 1505|     86|                    fdata->value,
 1506|     86|                    fdata->value_len))
 1507|     86|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_clear_flags))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 1508|     86|    return true;
 1509|     86|}
formatter.c:format_set_trust_line_clear_flags:
 1486|     86|static bool format_set_trust_line_clear_flags(formatter_data_t *fdata) {
 1487|     86|    STRLCPY(fdata->caption, "Clear Flags", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 1488|     86|    if (fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.clear_flags) {
  ------------------
  |  Branch (1488:9): [True: 48, False: 38]
  ------------------
 1489|     48|        FORMATTER_CHECK(print_trust_line_flags(
  ------------------
  |  |   30|     48|    {                           \
  |  |   31|     48|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 48]
  |  |  ------------------
  |  |   32|     48|    }
  ------------------
 1490|     48|            fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.clear_flags,
 1491|     48|            fdata->value,
 1492|     48|            fdata->value_len))
 1493|     48|    } else {
 1494|     38|        STRLCPY(fdata->value, "[none]", fdata->value_len);
  ------------------
  |  |   35|     38|    {                                         \
  |  |   36|     38|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     38|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 38]
  |  |  ------------------
  |  |   38|     38|    }
  ------------------
 1495|     38|    }
 1496|     86|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_set_flags))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 1497|     86|    return true;
 1498|     86|}
formatter.c:format_set_trust_line_set_flags:
 1473|     86|static bool format_set_trust_line_set_flags(formatter_data_t *fdata) {
 1474|     86|    STRLCPY(fdata->caption, "Set Flags", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 1475|     86|    if (fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.set_flags) {
  ------------------
  |  Branch (1475:9): [True: 45, False: 41]
  ------------------
 1476|     45|        FORMATTER_CHECK(print_trust_line_flags(
  ------------------
  |  |   30|     45|    {                           \
  |  |   31|     45|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 45]
  |  |  ------------------
  |  |   32|     45|    }
  ------------------
 1477|     45|            fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.set_flags,
 1478|     45|            fdata->value,
 1479|     45|            fdata->value_len))
 1480|     45|    } else {
 1481|     41|        STRLCPY(fdata->value, "[none]", fdata->value_len);
  ------------------
  |  |   35|     41|    {                                         \
  |  |   36|     41|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     41|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   38|     41|    }
  ------------------
 1482|     41|    }
 1483|     86|    return format_operation_source_prepare(fdata);
 1484|     86|}
formatter.c:format_liquidity_pool_deposit:
 1595|      8|static bool format_liquidity_pool_deposit(formatter_data_t *fdata) {
 1596|      8|    (void) fdata;
 1597|      8|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
 1598|      8|    STRLCPY(fdata->value, "Liquidity Pool Deposit", fdata->value_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
 1599|      8|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_liquidity_pool_id))
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1600|      8|    return true;
 1601|      8|}
formatter.c:format_liquidity_pool_deposit_liquidity_pool_id:
 1582|      8|static bool format_liquidity_pool_deposit_liquidity_pool_id(formatter_data_t *fdata) {
 1583|      8|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
 1584|      8|    FORMATTER_CHECK(print_binary(
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1585|      8|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.liquidity_pool_id,
 1586|      8|        LIQUIDITY_POOL_ID_SIZE,
 1587|      8|        fdata->value,
 1588|      8|        fdata->value_len,
 1589|      8|        0,
 1590|      8|        0))
 1591|      8|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_amount_a))
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1592|      8|    return true;
 1593|      8|}
formatter.c:format_liquidity_pool_deposit_max_amount_a:
 1570|      8|static bool format_liquidity_pool_deposit_max_amount_a(formatter_data_t *fdata) {
 1571|      8|    STRLCPY(fdata->caption, "Max Amount A", fdata->caption_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
 1572|      8|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1573|      8|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.max_amount_a,
 1574|      8|        NULL,
 1575|      8|        fdata->envelope->network,
 1576|      8|        fdata->value,
 1577|      8|        fdata->value_len))
 1578|      8|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_amount_b))
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1579|      8|    return true;
 1580|      8|}
formatter.c:format_liquidity_pool_deposit_max_amount_b:
 1558|      8|static bool format_liquidity_pool_deposit_max_amount_b(formatter_data_t *fdata) {
 1559|      8|    STRLCPY(fdata->caption, "Max Amount B", fdata->caption_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
 1560|      8|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1561|      8|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.max_amount_b,
 1562|      8|        NULL,
 1563|      8|        fdata->envelope->network,
 1564|      8|        fdata->value,
 1565|      8|        fdata->value_len))
 1566|      8|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_min_price))
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1567|      8|    return true;
 1568|      8|}
formatter.c:format_liquidity_pool_deposit_min_price:
 1544|      8|static bool format_liquidity_pool_deposit_min_price(formatter_data_t *fdata) {
 1545|      8|    liquidity_pool_deposit_op_t *op =
 1546|      8|        &fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op;
 1547|      8|    STRLCPY(fdata->caption, "Min Price", fdata->caption_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
 1548|      8|    FORMATTER_CHECK(print_price(&op->min_price,
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1549|      8|                                NULL,
 1550|      8|                                NULL,
 1551|      8|                                fdata->envelope->network,
 1552|      8|                                fdata->value,
 1553|      8|                                fdata->value_len))
 1554|      8|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_price))
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1555|      8|    return true;
 1556|      8|}
formatter.c:format_liquidity_pool_deposit_max_price:
 1531|      8|static bool format_liquidity_pool_deposit_max_price(formatter_data_t *fdata) {
 1532|      8|    liquidity_pool_deposit_op_t *op =
 1533|      8|        &fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op;
 1534|      8|    STRLCPY(fdata->caption, "Max Price", fdata->caption_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
 1535|      8|    FORMATTER_CHECK(print_price(&op->max_price,
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
 1536|      8|                                NULL,
 1537|      8|                                NULL,
 1538|      8|                                fdata->envelope->network,
 1539|      8|                                fdata->value,
 1540|      8|                                fdata->value_len))
 1541|      8|    return format_operation_source_prepare(fdata);
 1542|      8|}
formatter.c:format_liquidity_pool_withdraw:
 1651|     37|static bool format_liquidity_pool_withdraw(formatter_data_t *fdata) {
 1652|     37|    (void) fdata;
 1653|     37|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     37|    {                                         \
  |  |   36|     37|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     37|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   38|     37|    }
  ------------------
 1654|     37|    STRLCPY(fdata->value, "Liquidity Pool Withdraw", fdata->value_len);
  ------------------
  |  |   35|     37|    {                                         \
  |  |   36|     37|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     37|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   38|     37|    }
  ------------------
 1655|     37|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_liquidity_pool_id))
  ------------------
  |  |   30|     37|    {                           \
  |  |   31|     37|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   32|     37|    }
  ------------------
 1656|     37|    return true;
 1657|     37|}
formatter.c:format_liquidity_pool_withdraw_liquidity_pool_id:
 1638|     37|static bool format_liquidity_pool_withdraw_liquidity_pool_id(formatter_data_t *fdata) {
 1639|     37|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     37|    {                                         \
  |  |   36|     37|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     37|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   38|     37|    }
  ------------------
 1640|     37|    FORMATTER_CHECK(print_binary(
  ------------------
  |  |   30|     37|    {                           \
  |  |   31|     37|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   32|     37|    }
  ------------------
 1641|     37|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.liquidity_pool_id,
 1642|     37|        LIQUIDITY_POOL_ID_SIZE,
 1643|     37|        fdata->value,
 1644|     37|        fdata->value_len,
 1645|     37|        0,
 1646|     37|        0))
 1647|     37|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_amount))
  ------------------
  |  |   30|     37|    {                           \
  |  |   31|     37|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   32|     37|    }
  ------------------
 1648|     37|    return true;
 1649|     37|}
formatter.c:format_liquidity_pool_withdraw_amount:
 1626|     37|static bool format_liquidity_pool_withdraw_amount(formatter_data_t *fdata) {
 1627|     37|    STRLCPY(fdata->caption, "Amount", fdata->caption_len);
  ------------------
  |  |   35|     37|    {                                         \
  |  |   36|     37|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     37|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   38|     37|    }
  ------------------
 1628|     37|    FORMATTER_CHECK(
  ------------------
  |  |   30|     37|    {                           \
  |  |   31|     37|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   32|     37|    }
  ------------------
 1629|     37|        print_amount(fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.amount,
 1630|     37|                     NULL,
 1631|     37|                     fdata->envelope->network,
 1632|     37|                     fdata->value,
 1633|     37|                     fdata->value_len))
 1634|     37|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_min_amount_a))
  ------------------
  |  |   30|     37|    {                           \
  |  |   31|     37|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   32|     37|    }
  ------------------
 1635|     37|    return true;
 1636|     37|}
formatter.c:format_liquidity_pool_withdraw_min_amount_a:
 1614|     37|static bool format_liquidity_pool_withdraw_min_amount_a(formatter_data_t *fdata) {
 1615|     37|    STRLCPY(fdata->caption, "Min Amount A", fdata->caption_len);
  ------------------
  |  |   35|     37|    {                                         \
  |  |   36|     37|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     37|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   38|     37|    }
  ------------------
 1616|     37|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     37|    {                           \
  |  |   31|     37|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   32|     37|    }
  ------------------
 1617|     37|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.min_amount_a,
 1618|     37|        NULL,
 1619|     37|        fdata->envelope->network,
 1620|     37|        fdata->value,
 1621|     37|        fdata->value_len))
 1622|     37|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_min_amount_b))
  ------------------
  |  |   30|     37|    {                           \
  |  |   31|     37|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   32|     37|    }
  ------------------
 1623|     37|    return true;
 1624|     37|}
formatter.c:format_liquidity_pool_withdraw_min_amount_b:
 1603|     37|static bool format_liquidity_pool_withdraw_min_amount_b(formatter_data_t *fdata) {
 1604|     37|    STRLCPY(fdata->caption, "Min Amount B", fdata->caption_len);
  ------------------
  |  |   35|     37|    {                                         \
  |  |   36|     37|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     37|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   38|     37|    }
  ------------------
 1605|     37|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     37|    {                           \
  |  |   31|     37|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   32|     37|    }
  ------------------
 1606|     37|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.min_amount_b,
 1607|     37|        NULL,
 1608|     37|        fdata->envelope->network,
 1609|     37|        fdata->value,
 1610|     37|        fdata->value_len))
 1611|     37|    return format_operation_source_prepare(fdata);
 1612|     37|}
formatter.c:format_invoke_host_function:
 2170|     59|static bool format_invoke_host_function(formatter_data_t *fdata) {
 2171|       |    // avoid the host function op be overwritten by the sub-invocation
 2172|     59|    if (fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocations_count) {
  ------------------
  |  Branch (2172:9): [True: 9, False: 50]
  ------------------
 2173|      9|        if (!parse_transaction_operation(fdata->raw_data,
  ------------------
  |  Branch (2173:13): [True: 0, False: 9]
  ------------------
 2174|      9|                                         fdata->raw_data_len,
 2175|      9|                                         fdata->envelope,
 2176|      9|                                         fdata->envelope->tx_details.tx.operation_index)) {
 2177|      0|            return false;
 2178|      9|        };
 2179|      9|    }
 2180|     59|    switch (fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.host_function_type) {
 2181|     41|        case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:
  ------------------
  |  Branch (2181:9): [True: 41, False: 18]
  ------------------
 2182|     41|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|     41|    {                                         \
  |  |   36|     41|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     41|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   38|     41|    }
  ------------------
 2183|     41|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|     41|    {                                         \
  |  |   36|     41|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     41|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   38|     41|    }
  ------------------
 2184|     41|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_contract_id));
  ------------------
  |  |   30|     41|    {                           \
  |  |   31|     41|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   32|     41|    }
  ------------------
 2185|     41|            break;
 2186|     10|        case HOST_FUNCTION_TYPE_CREATE_CONTRACT:
  ------------------
  |  Branch (2186:9): [True: 10, False: 49]
  ------------------
 2187|     10|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
 2188|     10|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
 2189|       |            // we dont need to care the sub-invocation here
 2190|     10|            return format_operation_source_prepare(fdata);
 2191|      0|            break;
 2192|      8|        case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM:
  ------------------
  |  Branch (2192:9): [True: 8, False: 51]
  ------------------
 2193|      8|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
 2194|      8|            STRLCPY(fdata->value, "Upload Smart Contract Wasm", fdata->value_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
 2195|      8|            return format_operation_source_prepare(fdata);
 2196|      0|            break;
 2197|      0|        default:
  ------------------
  |  Branch (2197:9): [True: 0, False: 59]
  ------------------
 2198|      0|            return false;
 2199|     59|    }
 2200|     41|    return true;
 2201|     59|}
formatter.c:format_extend_footprint_ttl:
 2222|     14|static bool format_extend_footprint_ttl(formatter_data_t *fdata) {
 2223|     14|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     14|    {                                         \
  |  |   36|     14|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     14|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   38|     14|    }
  ------------------
 2224|     14|    STRLCPY(fdata->value, "Extend Footprint TTL", fdata->value_len);
  ------------------
  |  |   35|     14|    {                                         \
  |  |   36|     14|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     14|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   38|     14|    }
  ------------------
 2225|     14|    return format_operation_source_prepare(fdata);
 2226|     14|}
formatter.c:format_restore_footprint:
 2228|     35|static bool format_restore_footprint(formatter_data_t *fdata) {
 2229|     35|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     35|    {                                         \
  |  |   36|     35|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     35|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 35]
  |  |  ------------------
  |  |   38|     35|    }
  ------------------
 2230|     35|    STRLCPY(fdata->value, "Restore Footprint", fdata->value_len);
  ------------------
  |  |   35|     35|    {                                         \
  |  |   36|     35|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     35|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 35]
  |  |  ------------------
  |  |   38|     35|    }
  ------------------
 2231|     35|    return format_operation_source_prepare(fdata);
 2232|     35|}

parse_bool:
   48|  38.9k|bool parse_bool(buffer_t *buffer, bool *b) {
   49|  38.9k|    uint32_t val;
   50|       |
   51|  38.9k|    if (!parse_uint32(buffer, &val)) {
  ------------------
  |  Branch (51:9): [True: 63, False: 38.9k]
  ------------------
   52|     63|        return false;
   53|     63|    }
   54|  38.9k|    if (val != 0 && val != 1) {
  ------------------
  |  Branch (54:9): [True: 6.00k, False: 32.9k]
  |  Branch (54:21): [True: 467, False: 5.53k]
  ------------------
   55|    467|        return false;
   56|    467|    }
   57|  38.4k|    *b = val == 1 ? true : false;
  ------------------
  |  Branch (57:10): [True: 5.53k, False: 32.9k]
  ------------------
   58|  38.4k|    return true;
   59|  38.9k|}
parse_uint64:
   61|  1.80k|bool parse_uint64(buffer_t *buffer, uint64_t *n) {
   62|  1.80k|    return buffer_read_u64(buffer, n, BE);
   63|  1.80k|}
parse_int64:
   65|  18.3k|bool parse_int64(buffer_t *buffer, int64_t *n) {
   66|  18.3k|    if (!buffer_can_read(buffer, 8)) {
  ------------------
  |  Branch (66:9): [True: 30, False: 18.2k]
  ------------------
   67|     30|        *n = 0;
   68|     30|        return false;
   69|     30|    }
   70|  18.2k|    *n = read_i64_be(buffer->ptr, buffer->offset);
   71|  18.2k|    return buffer_seek_cur(buffer, 8);
   72|  18.3k|}
parse_uint32:
   74|   151k|bool parse_uint32(buffer_t *buffer, uint32_t *n) {
   75|   151k|    return buffer_read_u32(buffer, n, BE);
   76|   151k|}
parse_int32:
   78|  1.37k|bool parse_int32(buffer_t *buffer, int32_t *n) {
   79|  1.37k|    if (!buffer_can_read(buffer, 4)) {
  ------------------
  |  Branch (79:9): [True: 8, False: 1.36k]
  ------------------
   80|      8|        *n = 0;
   81|      8|        return false;
   82|      8|    }
   83|  1.36k|    *n = read_i32_be(buffer->ptr, buffer->offset);
   84|  1.36k|    return buffer_seek_cur(buffer, 4);
   85|  1.37k|}
parse_scv_symbol:
  152|     15|bool parse_scv_symbol(buffer_t *buffer, scv_symbol_t *symbol) {
  153|     15|    PARSER_CHECK(
  ------------------
  |  |   15|     15|    {                           \
  |  |   16|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 14]
  |  |  ------------------
  |  |   17|     15|    }
  ------------------
  154|     15|        parse_binary_string_ptr(buffer, &symbol->symbol, &symbol->size, SCV_SYMBOL_MAX_SIZE))
  155|     14|    return true;
  156|     15|}
parse_scv_string:
  158|     41|bool parse_scv_string(buffer_t *buffer, scv_string_t *string) {
  159|     41|    PARSER_CHECK(parse_binary_string_ptr(buffer, &string->string, &string->size, 0))
  ------------------
  |  |   15|     41|    {                           \
  |  |   16|     41|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 40]
  |  |  ------------------
  |  |   17|     41|    }
  ------------------
  160|     40|    return true;
  161|     41|}
parse_sc_address:
  684|  3.49k|bool parse_sc_address(buffer_t *buffer, sc_address_t *sc_address) {
  685|  3.49k|    PARSER_CHECK(parse_uint32(buffer, &sc_address->type))
  ------------------
  |  |   15|  3.49k|    {                           \
  |  |   16|  3.49k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 3.47k]
  |  |  ------------------
  |  |   17|  3.49k|    }
  ------------------
  686|  3.47k|    switch (sc_address->type) {
  687|  2.48k|        case SC_ADDRESS_TYPE_ACCOUNT:
  ------------------
  |  Branch (687:9): [True: 2.48k, False: 990]
  ------------------
  688|  2.48k|            PARSER_CHECK(parse_account_id(buffer, &sc_address->address))
  ------------------
  |  |   15|  2.48k|    {                           \
  |  |   16|  2.48k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 139, False: 2.35k]
  |  |  ------------------
  |  |   17|  2.48k|    }
  ------------------
  689|  2.35k|            return true;
  690|    882|        case SC_ADDRESS_TYPE_CONTRACT:
  ------------------
  |  Branch (690:9): [True: 882, False: 2.59k]
  ------------------
  691|    882|            PARSER_CHECK(buffer_read_bytes(buffer, &sc_address->address, RAW_CONTRACT_KEY_SIZE))
  ------------------
  |  |   15|    882|    {                           \
  |  |   16|    882|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 872]
  |  |  ------------------
  |  |   17|    882|    }
  ------------------
  692|    872|            return true;
  693|    108|        default:
  ------------------
  |  Branch (693:9): [True: 108, False: 3.37k]
  ------------------
  694|    108|            return false;
  695|  3.47k|    }
  696|  3.47k|}
read_scval_advance:
  733|  25.9k|bool read_scval_advance(buffer_t *buffer) {
  734|  25.9k|    uint32_t sc_type;
  735|  25.9k|    PARSER_CHECK(parse_uint32(buffer, &sc_type))
  ------------------
  |  |   15|  25.9k|    {                           \
  |  |   16|  25.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.37k, False: 24.5k]
  |  |  ------------------
  |  |   17|  25.9k|    }
  ------------------
  736|       |
  737|  24.5k|    switch (sc_type) {
  738|  13.2k|        case SCV_BOOL:
  ------------------
  |  Branch (738:9): [True: 13.2k, False: 11.3k]
  ------------------
  739|  13.2k|            PARSER_CHECK(buffer_advance(buffer, 4))
  ------------------
  |  |   15|  13.2k|    {                           \
  |  |   16|  13.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 13.2k]
  |  |  ------------------
  |  |   17|  13.2k|    }
  ------------------
  740|  13.2k|            break;
  741|  13.2k|        case SCV_VOID:
  ------------------
  |  Branch (741:9): [True: 553, False: 24.0k]
  ------------------
  742|    553|            break;  // void
  743|     77|        case SCV_ERROR:
  ------------------
  |  Branch (743:9): [True: 77, False: 24.4k]
  ------------------
  744|     77|            return false;  // not implemented
  745|    241|        case SCV_U32:
  ------------------
  |  Branch (745:9): [True: 241, False: 24.3k]
  ------------------
  746|    755|        case SCV_I32:
  ------------------
  |  Branch (746:9): [True: 514, False: 24.0k]
  ------------------
  747|    755|            PARSER_CHECK(buffer_advance(buffer, 4))
  ------------------
  |  |   15|    755|    {                           \
  |  |   16|    755|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 750]
  |  |  ------------------
  |  |   17|    755|    }
  ------------------
  748|    750|            break;
  749|    750|        case SCV_U64:
  ------------------
  |  Branch (749:9): [True: 110, False: 24.4k]
  ------------------
  750|    242|        case SCV_I64:
  ------------------
  |  Branch (750:9): [True: 132, False: 24.4k]
  ------------------
  751|    699|        case SCV_TIMEPOINT:
  ------------------
  |  Branch (751:9): [True: 457, False: 24.1k]
  ------------------
  752|    856|        case SCV_DURATION:
  ------------------
  |  Branch (752:9): [True: 157, False: 24.4k]
  ------------------
  753|    856|            PARSER_CHECK(buffer_advance(buffer, 8))
  ------------------
  |  |   15|    856|    {                           \
  |  |   16|    856|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 850]
  |  |  ------------------
  |  |   17|    856|    }
  ------------------
  754|    850|            break;
  755|    850|        case SCV_U128:
  ------------------
  |  Branch (755:9): [True: 295, False: 24.2k]
  ------------------
  756|    758|        case SCV_I128:
  ------------------
  |  Branch (756:9): [True: 463, False: 24.1k]
  ------------------
  757|    758|            PARSER_CHECK(buffer_advance(buffer, 16))
  ------------------
  |  |   15|    758|    {                           \
  |  |   16|    758|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 743]
  |  |  ------------------
  |  |   17|    758|    }
  ------------------
  758|    743|            break;
  759|    743|        case SCV_U256:
  ------------------
  |  Branch (759:9): [True: 203, False: 24.3k]
  ------------------
  760|    487|        case SCV_I256:
  ------------------
  |  Branch (760:9): [True: 284, False: 24.2k]
  ------------------
  761|    487|            PARSER_CHECK(buffer_advance(buffer, 32))
  ------------------
  |  |   15|    487|    {                           \
  |  |   16|    487|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 476]
  |  |  ------------------
  |  |   17|    487|    }
  ------------------
  762|    476|            break;
  763|    476|        case SCV_BYTES:
  ------------------
  |  Branch (763:9): [True: 169, False: 24.3k]
  ------------------
  764|    365|        case SCV_STRING:
  ------------------
  |  Branch (764:9): [True: 196, False: 24.3k]
  ------------------
  765|    453|        case SCV_SYMBOL: {
  ------------------
  |  Branch (765:9): [True: 88, False: 24.4k]
  ------------------
  766|    453|            size_t data_size = 0;
  767|    453|            PARSER_CHECK(parse_uint32(buffer, &data_size))
  ------------------
  |  |   15|    453|    {                           \
  |  |   16|    453|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 449]
  |  |  ------------------
  |  |   17|    453|    }
  ------------------
  768|    449|            PARSER_CHECK(num_bytes(data_size, &data_size))
  ------------------
  |  |   15|    449|    {                           \
  |  |   16|    449|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 449]
  |  |  ------------------
  |  |   17|    449|    }
  ------------------
  769|    449|            PARSER_CHECK(buffer_advance(buffer, data_size))
  ------------------
  |  |   15|    449|    {                           \
  |  |   16|    449|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 74, False: 375]
  |  |  ------------------
  |  |   17|    449|    }
  ------------------
  770|    375|            break;
  771|    449|        }
  772|    375|        case SCV_VEC: {
  ------------------
  |  Branch (772:9): [True: 356, False: 24.2k]
  ------------------
  773|    356|            bool vec_exists;
  774|    356|            PARSER_CHECK(parse_bool(buffer, &vec_exists))
  ------------------
  |  |   15|    356|    {                           \
  |  |   16|    356|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 82, False: 274]
  |  |  ------------------
  |  |   17|    356|    }
  ------------------
  775|    274|            if (vec_exists) {
  ------------------
  |  Branch (775:17): [True: 205, False: 69]
  ------------------
  776|    205|                read_scval_vec_advance(buffer);
  777|    205|            }
  778|    274|            break;
  779|    356|        }
  780|  4.20k|        case SCV_MAP: {
  ------------------
  |  Branch (780:9): [True: 4.20k, False: 20.3k]
  ------------------
  781|  4.20k|            bool map_exists;
  782|  4.20k|            PARSER_CHECK(parse_bool(buffer, &map_exists))
  ------------------
  |  |   15|  4.20k|    {                           \
  |  |   16|  4.20k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 97, False: 4.10k]
  |  |  ------------------
  |  |   17|  4.20k|    }
  ------------------
  783|  4.10k|            if (map_exists) {
  ------------------
  |  Branch (783:17): [True: 3.97k, False: 130]
  ------------------
  784|  3.97k|                rad_scval_map_advance(buffer);
  785|  3.97k|            }
  786|  4.10k|            break;
  787|  4.20k|        }
  788|    436|        case SCV_ADDRESS: {
  ------------------
  |  Branch (788:9): [True: 436, False: 24.1k]
  ------------------
  789|    436|            sc_address_t sc_address;
  790|    436|            PARSER_CHECK(parse_sc_address(buffer, &sc_address));
  ------------------
  |  |   15|    436|    {                           \
  |  |   16|    436|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 149, False: 287]
  |  |  ------------------
  |  |   17|    436|    }
  ------------------
  791|    287|            break;
  792|    436|        }
  793|    431|        case SCV_CONTRACT_INSTANCE: {
  ------------------
  |  Branch (793:9): [True: 431, False: 24.1k]
  ------------------
  794|    431|            PARSER_CHECK(read_contract_executable_advance(buffer))
  ------------------
  |  |   15|    431|    {                           \
  |  |   16|    431|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 77, False: 354]
  |  |  ------------------
  |  |   17|    431|    }
  ------------------
  795|    354|            bool map_exists;
  796|    354|            PARSER_CHECK(parse_bool(buffer, &map_exists))
  ------------------
  |  |   15|    354|    {                           \
  |  |   16|    354|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 194, False: 160]
  |  |  ------------------
  |  |   17|    354|    }
  ------------------
  797|    160|            if (map_exists) {
  ------------------
  |  Branch (797:17): [True: 112, False: 48]
  ------------------
  798|    112|                rad_scval_map_advance(buffer);
  799|    112|            }
  800|    160|            break;
  801|    354|        }
  802|    145|        case SCV_LEDGER_KEY_CONTRACT_INSTANCE:
  ------------------
  |  Branch (802:9): [True: 145, False: 24.4k]
  ------------------
  803|    145|            break;  // void
  804|     66|        case SCV_LEDGER_KEY_NONCE:
  ------------------
  |  Branch (804:9): [True: 66, False: 24.4k]
  ------------------
  805|     66|            PARSER_CHECK(buffer_advance(buffer, 8))
  ------------------
  |  |   15|     66|    {                           \
  |  |   16|     66|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 63]
  |  |  ------------------
  |  |   17|     66|    }
  ------------------
  806|     63|            break;
  807|  1.75k|        default:
  ------------------
  |  Branch (807:9): [True: 1.75k, False: 22.8k]
  ------------------
  808|  1.75k|            return false;
  809|  24.5k|    }
  810|  22.0k|    return true;
  811|  24.5k|}
parse_transaction_envelope:
 1307|  1.38k|bool parse_transaction_envelope(const uint8_t *data, size_t data_len, envelope_t *envelope) {
 1308|  1.38k|    PRINTF("parse_transaction_envelope\n");
 1309|  1.38k|    buffer_t buffer = {
 1310|  1.38k|        .ptr = data,
 1311|  1.38k|        .size = data_len,
 1312|  1.38k|        .offset = 0,
 1313|  1.38k|    };
 1314|       |
 1315|  1.38k|    explicit_bzero(&envelope->tx_details, sizeof(tx_details_t));
 1316|  1.38k|    uint32_t envelope_type;
 1317|  1.38k|    PARSER_CHECK(parse_network(&buffer, &envelope->network))
  ------------------
  |  |   15|  1.38k|    {                           \
  |  |   16|  1.38k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.37k]
  |  |  ------------------
  |  |   17|  1.38k|    }
  ------------------
 1318|  1.37k|    PARSER_CHECK(parse_uint32(&buffer, &envelope_type))
  ------------------
  |  |   15|  1.37k|    {                           \
  |  |   16|  1.37k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.37k]
  |  |  ------------------
  |  |   17|  1.37k|    }
  ------------------
 1319|  1.37k|    envelope->type = envelope_type;
 1320|  1.37k|    switch (envelope_type) {
 1321|    901|        case ENVELOPE_TYPE_TX:
  ------------------
  |  Branch (1321:9): [True: 901, False: 473]
  ------------------
 1322|    901|            PARSER_CHECK(parse_transaction_details(&buffer, &envelope->tx_details.tx))
  ------------------
  |  |   15|    901|    {                           \
  |  |   16|    901|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 69, False: 832]
  |  |  ------------------
  |  |   17|    901|    }
  ------------------
 1323|    832|            break;
 1324|    832|        case ENVELOPE_TYPE_TX_FEE_BUMP:
  ------------------
  |  Branch (1324:9): [True: 18, False: 1.35k]
  ------------------
 1325|     18|            PARSER_CHECK(
  ------------------
  |  |   15|     18|    {                           \
  |  |   16|     18|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 9]
  |  |  ------------------
  |  |   17|     18|    }
  ------------------
 1326|     18|                parse_fee_bump_transaction_details(&buffer, &envelope->tx_details.fee_bump_tx))
 1327|      9|            uint32_t inner_envelope_type;
 1328|      9|            PARSER_CHECK(parse_uint32(&buffer, &inner_envelope_type))
  ------------------
  |  |   15|      9|    {                           \
  |  |   16|      9|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 8]
  |  |  ------------------
  |  |   17|      9|    }
  ------------------
 1329|      8|            if (inner_envelope_type != ENVELOPE_TYPE_TX) {
  ------------------
  |  Branch (1329:17): [True: 1, False: 7]
  ------------------
 1330|      1|                return false;
 1331|      1|            }
 1332|      7|            PARSER_CHECK(parse_transaction_details(&buffer, &envelope->tx_details.tx))
  ------------------
  |  |   15|      7|    {                           \
  |  |   16|      7|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 6]
  |  |  ------------------
  |  |   17|      7|    }
  ------------------
 1333|      6|            break;
 1334|    455|        default:
  ------------------
  |  Branch (1334:9): [True: 455, False: 919]
  ------------------
 1335|    455|            return false;
 1336|  1.37k|    }
 1337|       |
 1338|    838|    envelope->tx_details.tx.operation_position = buffer.offset;
 1339|       |
 1340|       |    // check all operations are valid
 1341|    838|    PARSER_CHECK(check_operations(&buffer, envelope->tx_details.tx.operations_count));
  ------------------
  |  |   15|    838|    {                           \
  |  |   16|    838|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 286, False: 552]
  |  |  ------------------
  |  |   17|    838|    }
  ------------------
 1342|    552|    return true;
 1343|    838|}
parse_transaction_operation:
 1348|  3.04k|                                 uint8_t operation_index) {
 1349|  3.04k|    buffer_t buffer = {
 1350|  3.04k|        .ptr = data,
 1351|  3.04k|        .size = data_len,
 1352|  3.04k|        .offset = envelope->tx_details.tx.operation_position,
 1353|  3.04k|    };
 1354|  21.7k|    for (uint8_t i = 0; i <= operation_index; i++) {
  ------------------
  |  Branch (1354:25): [True: 18.7k, False: 3.04k]
  ------------------
 1355|  18.7k|        PARSER_CHECK(parse_operation(&buffer, &envelope->tx_details.tx.op_details));
  ------------------
  |  |   15|  18.7k|    {                           \
  |  |   16|  18.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 18.7k]
  |  |  ------------------
  |  |   17|  18.7k|    }
  ------------------
 1356|  18.7k|    }
 1357|  3.04k|    envelope->tx_details.tx.operation_index = operation_index;
 1358|  3.04k|    return true;
 1359|  3.04k|}
parse_auth_function:
 1361|  1.79k|bool parse_auth_function(buffer_t *buffer, uint32_t *type, invoke_contract_args_t *args) {
 1362|       |    // function
 1363|  1.79k|    PARSER_CHECK(parse_uint32(buffer, type))
  ------------------
  |  |   15|  1.79k|    {                           \
  |  |   16|  1.79k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 1.79k]
  |  |  ------------------
  |  |   17|  1.79k|    }
  ------------------
 1364|  1.79k|    switch (*type) {
 1365|  1.56k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN: {
  ------------------
  |  Branch (1365:9): [True: 1.56k, False: 230]
  ------------------
 1366|       |            // contractFn
 1367|  1.56k|            PARSER_CHECK(parse_invoke_contract_args(buffer, args))
  ------------------
  |  |   15|  1.56k|    {                           \
  |  |   16|  1.56k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 371, False: 1.18k]
  |  |  ------------------
  |  |   17|  1.56k|    }
  ------------------
 1368|  1.18k|            break;
 1369|  1.56k|        }
 1370|  1.18k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1370:9): [True: 52, False: 1.73k]
  ------------------
 1371|       |            // createContractHostFn
 1372|     52|            PARSER_CHECK(read_create_contract_args_advance(buffer))
  ------------------
  |  |   15|     52|    {                           \
  |  |   16|     52|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 42]
  |  |  ------------------
  |  |   17|     52|    }
  ------------------
 1373|     42|            break;
 1374|    178|        default:
  ------------------
  |  Branch (1374:9): [True: 178, False: 1.61k]
  ------------------
 1375|    178|            return false;
 1376|  1.79k|    }
 1377|  1.23k|    return true;
 1378|  1.79k|}
parse_soroban_authorization_envelope:
 1382|  1.77k|                                          envelope_t *envelope) {
 1383|  1.77k|    PRINTF("parse_soroban_authorization_envelope\n");
 1384|  1.77k|    buffer_t buffer = {
 1385|  1.77k|        .ptr = data,
 1386|  1.77k|        .size = data_len,
 1387|  1.77k|        .offset = 0,
 1388|  1.77k|    };
 1389|       |
 1390|  1.77k|    explicit_bzero(&envelope->soroban_authorization, sizeof(soroban_authorization_t));
 1391|       |
 1392|  1.77k|    uint32_t envelope_type;
 1393|  1.77k|    PARSER_CHECK(parse_uint32(&buffer, &envelope_type))
  ------------------
  |  |   15|  1.77k|    {                           \
  |  |   16|  1.77k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.77k]
  |  |  ------------------
  |  |   17|  1.77k|    }
  ------------------
 1394|  1.77k|    if (envelope_type != ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1394:9): [True: 319, False: 1.45k]
  ------------------
 1395|    319|        return false;
 1396|    319|    }
 1397|  1.45k|    envelope->type = envelope_type;
 1398|       |
 1399|  1.45k|    PARSER_CHECK(parse_network(&buffer, &envelope->network))
  ------------------
  |  |   15|  1.45k|    {                           \
  |  |   16|  1.45k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.45k]
  |  |  ------------------
  |  |   17|  1.45k|    }
  ------------------
 1400|  1.45k|    PARSER_CHECK(parse_uint64(&buffer, &envelope->soroban_authorization.nonce))
  ------------------
  |  |   15|  1.45k|    {                           \
  |  |   16|  1.45k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.44k]
  |  |  ------------------
  |  |   17|  1.45k|    }
  ------------------
 1401|  1.44k|    PARSER_CHECK(
  ------------------
  |  |   15|  1.44k|    {                           \
  |  |   16|  1.44k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.44k]
  |  |  ------------------
  |  |   17|  1.44k|    }
  ------------------
 1402|  1.44k|        parse_uint32(&buffer, &envelope->soroban_authorization.signature_expiration_ledger))
 1403|       |
 1404|       |    // function
 1405|  1.44k|    PARSER_CHECK(parse_auth_function(&buffer,
  ------------------
  |  |   15|  1.44k|    {                           \
  |  |   16|  1.44k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 561, False: 887]
  |  |  ------------------
  |  |   17|  1.44k|    }
  ------------------
 1406|  1.44k|                                     &envelope->soroban_authorization.auth_function_type,
 1407|  1.44k|                                     &envelope->soroban_authorization.invoke_contract_args))
 1408|       |    // subInvocations
 1409|    887|    uint32_t len;
 1410|    887|    uint8_t sub_invocations_count = 0;
 1411|    887|    PARSER_CHECK(parse_uint32(&buffer, &len))
  ------------------
  |  |   15|    887|    {                           \
  |  |   16|    887|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 40, False: 847]
  |  |  ------------------
  |  |   17|    887|    }
  ------------------
 1412|  1.17k|    for (uint32_t i = 0; i < len; i++) {
  ------------------
  |  Branch (1412:26): [True: 387, False: 792]
  ------------------
 1413|    387|        PARSER_CHECK(read_soroban_authorized_invocation_advance(
  ------------------
  |  |   15|    387|    {                           \
  |  |   16|    387|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 55, False: 332]
  |  |  ------------------
  |  |   17|    387|    }
  ------------------
 1414|    387|            &buffer,
 1415|    387|            &sub_invocations_count,
 1416|    387|            envelope->soroban_authorization.sub_invocation_positions));
 1417|    332|    }
 1418|    792|    envelope->soroban_authorization.sub_invocations_count = sub_invocations_count;
 1419|    792|    PRINTF("sub_invocations_count=%d\n", sub_invocations_count);
 1420|       |    // for (uint8_t i = 0; i < 16; i++) {
 1421|       |    //     PRINTF("sub_invocation_positions[%d]=%d\n",
 1422|       |    //            i,
 1423|       |    //            envelope->soroban_authorization.sub_invocation_positions[i]);
 1424|       |    // }
 1425|    792|    return true;
 1426|    847|}
parser.c:read_i64_be:
   32|  18.2k|static int64_t read_i64_be(const uint8_t *ptr, size_t offset) {
   33|  18.2k|    uint64_t result = 0;
   34|   164k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (34:21): [True: 146k, False: 18.2k]
  ------------------
   35|   146k|        result = (result << 8) | ptr[offset + i];
   36|   146k|    }
   37|  18.2k|    return (int64_t) result;
   38|  18.2k|}
parser.c:read_i32_be:
   40|  1.36k|static int32_t read_i32_be(const uint8_t *ptr, size_t offset) {
   41|  1.36k|    uint32_t result = 0;
   42|  6.81k|    for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (42:21): [True: 5.44k, False: 1.36k]
  ------------------
   43|  5.44k|        result = (result << 8) | ptr[offset + i];
   44|  5.44k|    }
   45|  1.36k|    return (int32_t) result;
   46|  1.36k|}
parser.c:parse_binary_string_ptr:
  114|  3.59k|                                    size_t max_length) {
  115|       |    /* max_length does not include terminal null character */
  116|  3.59k|    uint32_t size;
  117|       |
  118|  3.59k|    PARSER_CHECK(parse_uint32(buffer, &size))
  ------------------
  |  |   15|  3.59k|    {                           \
  |  |   16|  3.59k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 3.58k]
  |  |  ------------------
  |  |   17|  3.59k|    }
  ------------------
  119|  3.58k|    if (max_length != 0 && size > max_length) {
  ------------------
  |  Branch (119:9): [True: 3.53k, False: 41]
  |  Branch (119:28): [True: 5, False: 3.53k]
  ------------------
  120|      5|        return false;
  121|      5|    }
  122|       |
  123|  3.57k|    size_t data_size = 0;
  124|  3.57k|    PARSER_CHECK(num_bytes(size, &data_size))
  ------------------
  |  |   15|  3.57k|    {                           \
  |  |   16|  3.57k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 3.57k]
  |  |  ------------------
  |  |   17|  3.57k|    }
  ------------------
  125|  3.57k|    PARSER_CHECK(buffer_read_bytes(buffer, string, data_size))
  ------------------
  |  |   15|  3.57k|    {                           \
  |  |   16|  3.57k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 18, False: 3.55k]
  |  |  ------------------
  |  |   17|  3.57k|    }
  ------------------
  126|       |    PARSER_CHECK(check_padding(*string, size, data_size))  // security check
  ------------------
  |  |   15|  3.55k|    {                           \
  |  |   16|  3.55k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 134, False: 3.42k]
  |  |  ------------------
  |  |   17|  3.55k|    }
  ------------------
  127|  3.42k|    if (out_len) {
  ------------------
  |  Branch (127:9): [True: 3.42k, False: 0]
  ------------------
  128|  3.42k|        *out_len = size;
  129|  3.42k|    }
  130|  3.42k|    return true;
  131|  3.55k|}
parser.c:check_padding:
  101|  3.55k|static bool check_padding(const uint8_t *buffer, size_t offset, size_t length) {
  102|  3.55k|    size_t i;
  103|  5.01k|    for (i = 0; i < length - offset; i++) {
  ------------------
  |  Branch (103:17): [True: 1.59k, False: 3.42k]
  ------------------
  104|  1.59k|        if (buffer[offset + i] != 0x00) {
  ------------------
  |  Branch (104:13): [True: 134, False: 1.45k]
  ------------------
  105|    134|            return false;
  106|    134|        }
  107|  1.59k|    }
  108|  3.42k|    return true;
  109|  3.55k|}
parser.c:parse_account_id:
  194|  19.5k|static bool parse_account_id(buffer_t *buffer, const uint8_t **account_id) {
  195|  19.5k|    uint32_t account_type;
  196|       |
  197|  19.5k|    PARSER_CHECK(parse_uint32(buffer, &account_type))
  ------------------
  |  |   15|  19.5k|    {                           \
  |  |   16|  19.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 19.5k]
  |  |  ------------------
  |  |   17|  19.5k|    }
  ------------------
  198|  19.5k|    if (account_type != PUBLIC_KEY_TYPE_ED25519) {
  ------------------
  |  |   50|  19.5k|#define PUBLIC_KEY_TYPE_ED25519 0
  ------------------
  |  Branch (198:9): [True: 125, False: 19.3k]
  ------------------
  199|    125|        return false;
  200|    125|    }
  201|  19.3k|    PARSER_CHECK(buffer_read_bytes(buffer, account_id, RAW_ED25519_PUBLIC_KEY_SIZE))
  ------------------
  |  |   15|  19.3k|    {                           \
  |  |   16|  19.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 19.3k]
  |  |  ------------------
  |  |   17|  19.3k|    }
  ------------------
  202|  19.3k|    return true;
  203|  19.3k|}
parser.c:buffer_read_bytes:
   25|  31.0k|static bool buffer_read_bytes(buffer_t *buffer, const uint8_t **data, size_t size) {
   26|  31.0k|    PARSER_CHECK(buffer_can_read(buffer, size))
  ------------------
  |  |   15|  31.0k|    {                           \
  |  |   16|  31.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 76, False: 30.9k]
  |  |  ------------------
  |  |   17|  31.0k|    }
  ------------------
   27|  30.9k|    *data = buffer->ptr + buffer->offset;
   28|  30.9k|    PARSER_CHECK(buffer_advance(buffer, size))
  ------------------
  |  |   15|  30.9k|    {                           \
  |  |   16|  30.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 30.9k]
  |  |  ------------------
  |  |   17|  30.9k|    }
  ------------------
   29|  30.9k|    return true;
   30|  30.9k|}
parser.c:buffer_advance:
   21|  48.1k|static bool buffer_advance(buffer_t *buffer, size_t num_bytes) {
   22|  48.1k|    return buffer_seek_cur(buffer, num_bytes);
   23|  48.1k|}
parser.c:num_bytes:
   87|  4.15k|static bool num_bytes(size_t size, size_t *out_size) {
   88|  4.15k|    size_t remainder = size % 4;
   89|  4.15k|    if (remainder == 0) {
  ------------------
  |  Branch (89:9): [True: 3.24k, False: 911]
  ------------------
   90|  3.24k|        *out_size = size;
   91|  3.24k|        return true;
   92|  3.24k|    }
   93|    911|    if (size > SIZE_MAX - 4) {
  ------------------
  |  Branch (93:9): [True: 0, False: 911]
  ------------------
   94|       |        // size + 4 would overflow
   95|      0|        return false;
   96|      0|    }
   97|    911|    *out_size = size + 4 - remainder;
   98|    911|    return true;
   99|    911|}
parser.c:read_scval_vec_advance:
  698|    205|static bool read_scval_vec_advance(buffer_t *buffer) {
  699|    205|    uint32_t vec_len;
  700|    205|    PARSER_CHECK(parse_uint32(buffer, &vec_len))
  ------------------
  |  |   15|    205|    {                           \
  |  |   16|    205|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 204]
  |  |  ------------------
  |  |   17|    205|    }
  ------------------
  701|    612|    for (uint32_t i = 0; i < vec_len; i++) {
  ------------------
  |  Branch (701:26): [True: 575, False: 37]
  ------------------
  702|    575|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|    575|    {                           \
  |  |   16|    575|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 167, False: 408]
  |  |  ------------------
  |  |   17|    575|    }
  ------------------
  703|    575|    }
  704|     37|    return true;
  705|    204|}
parser.c:rad_scval_map_advance:
  707|  4.08k|static bool rad_scval_map_advance(buffer_t *buffer) {
  708|  4.08k|    uint32_t map_len;
  709|  4.08k|    PARSER_CHECK(parse_uint32(buffer, &map_len))
  ------------------
  |  |   15|  4.08k|    {                           \
  |  |   16|  4.08k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 4.08k]
  |  |  ------------------
  |  |   17|  4.08k|    }
  ------------------
  710|  9.85k|    for (uint32_t i = 0; i < map_len; i++) {
  ------------------
  |  Branch (710:26): [True: 9.46k, False: 389]
  ------------------
  711|  9.46k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  9.46k|    {                           \
  |  |   16|  9.46k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.26k, False: 7.19k]
  |  |  ------------------
  |  |   17|  9.46k|    }
  ------------------
  712|  7.19k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  7.19k|    {                           \
  |  |   16|  7.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.43k, False: 5.76k]
  |  |  ------------------
  |  |   17|  7.19k|    }
  ------------------
  713|  7.19k|    }
  714|    389|    return true;
  715|  4.08k|}
parser.c:read_contract_executable_advance:
  717|    629|static bool read_contract_executable_advance(buffer_t *buffer) {
  718|    629|    uint32_t type;
  719|    629|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|    629|    {                           \
  |  |   16|    629|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 624]
  |  |  ------------------
  |  |   17|    629|    }
  ------------------
  720|    624|    switch (type) {
  721|    286|        case CONTRACT_EXECUTABLE_WASM:
  ------------------
  |  |  491|    286|#define CONTRACT_EXECUTABLE_WASM          0
  ------------------
  |  Branch (721:9): [True: 286, False: 338]
  ------------------
  722|       |            PARSER_CHECK(buffer_advance(buffer, HASH_SIZE))  // code
  ------------------
  |  |   15|    286|    {                           \
  |  |   16|    286|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 276]
  |  |  ------------------
  |  |   17|    286|    }
  ------------------
  723|    276|            break;
  724|    276|        case CONTRACT_EXECUTABLE_STELLAR_ASSET:
  ------------------
  |  |  492|    270|#define CONTRACT_EXECUTABLE_STELLAR_ASSET 1
  ------------------
  |  Branch (724:9): [True: 270, False: 354]
  ------------------
  725|       |            // void
  726|    270|            break;
  727|     68|        default:
  ------------------
  |  Branch (727:9): [True: 68, False: 556]
  ------------------
  728|     68|            return false;
  729|    624|    }
  730|    546|    return true;
  731|    624|}
parser.c:parse_network:
 1293|  2.83k|static bool parse_network(buffer_t *buffer, uint8_t *network) {
 1294|  2.83k|    const uint8_t *network_id;
 1295|  2.83k|    PARSER_CHECK(buffer_read_bytes(buffer, &network_id, HASH_SIZE))
  ------------------
  |  |   15|  2.83k|    {                           \
  |  |   16|  2.83k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 2.83k]
  |  |  ------------------
  |  |   17|  2.83k|    }
  ------------------
 1296|       |
 1297|  2.83k|    if (memcmp(network_id, NETWORK_ID_PUBLIC_HASH, HASH_SIZE) == 0) {
  ------------------
  |  |   46|  2.83k|#define HASH_SIZE                 32
  ------------------
  |  Branch (1297:9): [True: 63, False: 2.76k]
  ------------------
 1298|     63|        *network = NETWORK_TYPE_PUBLIC;
  ------------------
  |  |   57|     63|#define NETWORK_TYPE_PUBLIC  0
  ------------------
 1299|  2.76k|    } else if (memcmp(network_id, NETWORK_ID_TEST_HASH, HASH_SIZE) == 0) {
  ------------------
  |  |   46|  2.76k|#define HASH_SIZE                 32
  ------------------
  |  Branch (1299:16): [True: 29, False: 2.74k]
  ------------------
 1300|     29|        *network = NETWORK_TYPE_TEST;
  ------------------
  |  |   58|     29|#define NETWORK_TYPE_TEST    1
  ------------------
 1301|  2.74k|    } else {
 1302|  2.74k|        *network = NETWORK_TYPE_UNKNOWN;
  ------------------
  |  |   59|  2.74k|#define NETWORK_TYPE_UNKNOWN 2
  ------------------
 1303|  2.74k|    }
 1304|  2.83k|    return true;
 1305|  2.83k|}
parser.c:parse_transaction_details:
 1242|    908|static bool parse_transaction_details(buffer_t *buffer, transaction_details_t *transaction) {
 1243|       |    // account used to run the (inner)transaction
 1244|    908|    PARSER_CHECK(parse_transaction_source(buffer, &transaction->source_account))
  ------------------
  |  |   15|    908|    {                           \
  |  |   16|    908|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 896]
  |  |  ------------------
  |  |   17|    908|    }
  ------------------
 1245|       |
 1246|       |    // the fee the source_account will pay
 1247|    896|    PARSER_CHECK(parse_transaction_fee(buffer, &transaction->fee))
  ------------------
  |  |   15|    896|    {                           \
  |  |   16|    896|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 895]
  |  |  ------------------
  |  |   17|    896|    }
  ------------------
 1248|       |
 1249|       |    // sequence number to consume in the account
 1250|    895|    PARSER_CHECK(parse_transaction_sequence(buffer, &transaction->sequence_number))
  ------------------
  |  |   15|    895|    {                           \
  |  |   16|    895|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 894]
  |  |  ------------------
  |  |   17|    895|    }
  ------------------
 1251|       |
 1252|       |    // validity conditions
 1253|    894|    PARSER_CHECK(parse_transaction_preconditions(buffer, &transaction->cond))
  ------------------
  |  |   15|    894|    {                           \
  |  |   16|    894|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 29, False: 865]
  |  |  ------------------
  |  |   17|    894|    }
  ------------------
 1254|       |
 1255|    865|    PARSER_CHECK(parse_transaction_memo(buffer, &transaction->memo))
  ------------------
  |  |   15|    865|    {                           \
  |  |   16|    865|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 841]
  |  |  ------------------
  |  |   17|    865|    }
  ------------------
 1256|    841|    PARSER_CHECK(parse_transaction_operation_len(buffer, &transaction->operations_count))
  ------------------
  |  |   15|    841|    {                           \
  |  |   16|    841|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 838]
  |  |  ------------------
  |  |   17|    841|    }
  ------------------
 1257|       |
 1258|       |    // check ops is valid
 1259|       |    // size_t offset = buffer->offset;
 1260|       |    // PARSER_CHECK(check_operations(buffer, transaction->operations_count))
 1261|       |    // buffer->offset = offset;
 1262|       |
 1263|    838|    return true;
 1264|    841|}
parser.c:parse_transaction_source:
 1203|    908|static bool parse_transaction_source(buffer_t *buffer, muxed_account_t *source) {
 1204|    908|    return parse_muxed_account(buffer, source);
 1205|    908|}
parser.c:parse_muxed_account:
  205|  2.37k|static bool parse_muxed_account(buffer_t *buffer, muxed_account_t *muxed_account) {
  206|  2.37k|    PARSER_CHECK(parse_uint32(buffer, &muxed_account->type))
  ------------------
  |  |   15|  2.37k|    {                           \
  |  |   16|  2.37k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 2.36k]
  |  |  ------------------
  |  |   17|  2.37k|    }
  ------------------
  207|       |
  208|  2.36k|    switch (muxed_account->type) {
  209|  2.12k|        case KEY_TYPE_ED25519:
  ------------------
  |  Branch (209:9): [True: 2.12k, False: 248]
  ------------------
  210|  2.12k|            PARSER_CHECK(
  ------------------
  |  |   15|  2.12k|    {                           \
  |  |   16|  2.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 2.11k]
  |  |  ------------------
  |  |   17|  2.12k|    }
  ------------------
  211|  2.12k|                buffer_read_bytes(buffer, &muxed_account->ed25519, RAW_ED25519_PUBLIC_KEY_SIZE))
  212|  2.11k|            return true;
  213|    240|        case KEY_TYPE_MUXED_ED25519:
  ------------------
  |  Branch (213:9): [True: 240, False: 2.12k]
  ------------------
  214|    240|            PARSER_CHECK(parse_uint64(buffer, &muxed_account->med25519.id))
  ------------------
  |  |   15|    240|    {                           \
  |  |   16|    240|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 238]
  |  |  ------------------
  |  |   17|    240|    }
  ------------------
  215|    238|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|    238|    {                           \
  |  |   16|    238|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 235]
  |  |  ------------------
  |  |   17|    238|    }
  ------------------
  216|    238|                                           &muxed_account->med25519.ed25519,
  217|    238|                                           RAW_ED25519_PUBLIC_KEY_SIZE))
  218|    235|            return true;
  219|      8|        default:
  ------------------
  |  Branch (219:9): [True: 8, False: 2.36k]
  ------------------
  220|      8|            return false;
  221|  2.36k|    }
  222|  2.36k|}
parser.c:parse_transaction_fee:
 1207|    896|static bool parse_transaction_fee(buffer_t *buffer, uint32_t *fee) {
 1208|    896|    return parse_uint32(buffer, fee);
 1209|    896|}
parser.c:parse_transaction_sequence:
 1211|    895|static bool parse_transaction_sequence(buffer_t *buffer, sequence_number_t *sequence_number) {
 1212|    895|    return parse_int64(buffer, sequence_number);
 1213|    895|}
parser.c:parse_transaction_preconditions:
 1215|    894|static bool parse_transaction_preconditions(buffer_t *buffer, preconditions_t *preconditions) {
 1216|    894|    return parse_preconditions(buffer, preconditions);
 1217|    894|}
parser.c:parse_preconditions:
  249|    894|static bool parse_preconditions(buffer_t *buffer, preconditions_t *cond) {
  250|    894|    uint32_t precondition_type;
  251|    894|    PARSER_CHECK(parse_uint32(buffer, &precondition_type))
  ------------------
  |  |   15|    894|    {                           \
  |  |   16|    894|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 893]
  |  |  ------------------
  |  |   17|    894|    }
  ------------------
  252|    893|    switch (precondition_type) {
  253|    814|        case PRECOND_NONE:
  ------------------
  |  Branch (253:9): [True: 814, False: 79]
  ------------------
  254|    814|            cond->time_bounds_present = false;
  255|    814|            cond->min_seq_num_present = false;
  256|    814|            cond->ledger_bounds_present = false;
  257|    814|            cond->min_seq_ledger_gap = 0;
  258|    814|            cond->min_seq_age = 0;
  259|    814|            return true;
  260|     43|        case PRECOND_TIME:
  ------------------
  |  Branch (260:9): [True: 43, False: 850]
  ------------------
  261|     43|            cond->time_bounds_present = true;
  262|     43|            PARSER_CHECK(parse_time_bounds(buffer, &cond->time_bounds))
  ------------------
  |  |   15|     43|    {                           \
  |  |   16|     43|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 41]
  |  |  ------------------
  |  |   17|     43|    }
  ------------------
  263|     41|            cond->min_seq_num_present = false;
  264|     41|            cond->ledger_bounds_present = false;
  265|     41|            cond->min_seq_ledger_gap = 0;
  266|     41|            cond->min_seq_age = 0;
  267|     41|            return true;
  268|     35|        case PRECOND_V2:
  ------------------
  |  Branch (268:9): [True: 35, False: 858]
  ------------------
  269|     35|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|     35|    {                           \
  |  |   16|     35|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 33]
  |  |  ------------------
  |  |   17|     35|    }
  ------------------
  270|     35|                                             (xdr_type_reader) parse_time_bounds,
  271|     35|                                             &cond->time_bounds,
  272|     35|                                             &cond->time_bounds_present))
  273|     33|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|     33|    {                           \
  |  |   16|     33|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 29]
  |  |  ------------------
  |  |   17|     33|    }
  ------------------
  274|     33|                                             (xdr_type_reader) parse_ledger_bounds,
  275|     33|                                             &cond->ledger_bounds,
  276|     33|                                             &cond->ledger_bounds_present))
  277|     29|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|     29|    {                           \
  |  |   16|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 27]
  |  |  ------------------
  |  |   17|     29|    }
  ------------------
  278|     29|                                             (xdr_type_reader) parse_int64,
  279|     29|                                             &cond->min_seq_num,
  280|     29|                                             &cond->min_seq_num_present))
  281|     27|            PARSER_CHECK(parse_int64(buffer, &cond->min_seq_age))
  ------------------
  |  |   15|     27|    {                           \
  |  |   16|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 26]
  |  |  ------------------
  |  |   17|     27|    }
  ------------------
  282|     26|            PARSER_CHECK(parse_uint32(buffer, &cond->min_seq_ledger_gap))
  ------------------
  |  |   15|     26|    {                           \
  |  |   16|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 25]
  |  |  ------------------
  |  |   17|     26|    }
  ------------------
  283|     25|            PARSER_CHECK(parse_extra_signers(buffer))
  ------------------
  |  |   15|     25|    {                           \
  |  |   16|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 10]
  |  |  ------------------
  |  |   17|     25|    }
  ------------------
  284|     10|            return true;
  285|      1|        default:
  ------------------
  |  Branch (285:9): [True: 1, False: 892]
  ------------------
  286|      1|            return false;
  287|    893|    }
  288|    893|}
parser.c:parse_time_bounds:
  224|     44|static bool parse_time_bounds(buffer_t *buffer, time_bounds_t *bounds) {
  225|     44|    PARSER_CHECK(parse_uint64(buffer, &bounds->min_time))
  ------------------
  |  |   15|     44|    {                           \
  |  |   16|     44|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 43]
  |  |  ------------------
  |  |   17|     44|    }
  ------------------
  226|     43|    PARSER_CHECK(parse_uint64(buffer, &bounds->max_time))
  ------------------
  |  |   15|     43|    {                           \
  |  |   16|     43|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 42]
  |  |  ------------------
  |  |   17|     43|    }
  ------------------
  227|     42|    return true;
  228|     43|}
parser.c:parse_optional_type:
  135|  32.8k|static bool parse_optional_type(buffer_t *buffer, xdr_type_reader reader, void *dst, bool *opted) {
  136|  32.8k|    bool is_present;
  137|       |
  138|  32.8k|    PARSER_CHECK(parse_bool(buffer, &is_present))
  ------------------
  |  |   15|  32.8k|    {                           \
  |  |   16|  32.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 58, False: 32.7k]
  |  |  ------------------
  |  |   17|  32.8k|    }
  ------------------
  139|  32.7k|    if (is_present) {
  ------------------
  |  Branch (139:9): [True: 1.17k, False: 31.6k]
  ------------------
  140|  1.17k|        if (opted) {
  ------------------
  |  Branch (140:13): [True: 1.17k, False: 0]
  ------------------
  141|  1.17k|            *opted = true;
  142|  1.17k|        }
  143|  1.17k|        return reader(buffer, dst);
  144|  31.6k|    } else {
  145|  31.6k|        if (opted) {
  ------------------
  |  Branch (145:13): [True: 31.6k, False: 0]
  ------------------
  146|  31.6k|            *opted = false;
  147|  31.6k|        }
  148|  31.6k|        return true;
  149|  31.6k|    }
  150|  32.7k|}
parser.c:parse_ledger_bounds:
  230|     13|static bool parse_ledger_bounds(buffer_t *buffer, ledger_bounds_t *ledger_bounds) {
  231|     13|    PARSER_CHECK(parse_uint32(buffer, &ledger_bounds->min_ledger))
  ------------------
  |  |   15|     13|    {                           \
  |  |   16|     13|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 11]
  |  |  ------------------
  |  |   17|     13|    }
  ------------------
  232|     11|    PARSER_CHECK(parse_uint32(buffer, &ledger_bounds->max_ledger))
  ------------------
  |  |   15|     11|    {                           \
  |  |   16|     11|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 10]
  |  |  ------------------
  |  |   17|     11|    }
  ------------------
  233|     10|    return true;
  234|     11|}
parser.c:parse_extra_signers:
  236|     25|static bool parse_extra_signers(buffer_t *buffer) {
  237|     25|    uint32_t length;
  238|     25|    PARSER_CHECK(parse_uint32(buffer, &length))
  ------------------
  |  |   15|     25|    {                           \
  |  |   16|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 24]
  |  |  ------------------
  |  |   17|     25|    }
  ------------------
  239|     24|    if (length > 2) {  // maximum length is 2
  ------------------
  |  Branch (239:9): [True: 1, False: 23]
  ------------------
  240|      1|        return false;
  241|      1|    }
  242|     23|    signer_key_t signer_key;
  243|     31|    for (uint32_t i = 0; i < length; i++) {
  ------------------
  |  Branch (243:26): [True: 21, False: 10]
  ------------------
  244|     21|        PARSER_CHECK(parse_signer_key(buffer, &signer_key))
  ------------------
  |  |   15|     21|    {                           \
  |  |   16|     21|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 8]
  |  |  ------------------
  |  |   17|     21|    }
  ------------------
  245|     21|    }
  246|     10|    return true;
  247|     23|}
parser.c:parse_signer_key:
  163|    597|static bool parse_signer_key(buffer_t *buffer, signer_key_t *key) {
  164|    597|    PARSER_CHECK(parse_uint32(buffer, &key->type))
  ------------------
  |  |   15|    597|    {                           \
  |  |   16|    597|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 591]
  |  |  ------------------
  |  |   17|    597|    }
  ------------------
  165|    591|    switch (key->type) {
  166|    351|        case SIGNER_KEY_TYPE_ED25519:
  ------------------
  |  Branch (166:9): [True: 351, False: 240]
  ------------------
  167|    351|            PARSER_CHECK(buffer_read_bytes(buffer, &key->ed25519, RAW_ED25519_PUBLIC_KEY_SIZE))
  ------------------
  |  |   15|    351|    {                           \
  |  |   16|    351|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 350]
  |  |  ------------------
  |  |   17|    351|    }
  ------------------
  168|    350|            return true;
  169|     91|        case SIGNER_KEY_TYPE_PRE_AUTH_TX:
  ------------------
  |  Branch (169:9): [True: 91, False: 500]
  ------------------
  170|     91|            PARSER_CHECK(buffer_read_bytes(buffer, &key->pre_auth_tx, RAW_PRE_AUTH_TX_KEY_SIZE))
  ------------------
  |  |   15|     91|    {                           \
  |  |   16|     91|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 90]
  |  |  ------------------
  |  |   17|     91|    }
  ------------------
  171|     90|            return true;
  172|     66|        case SIGNER_KEY_TYPE_HASH_X:
  ------------------
  |  Branch (172:9): [True: 66, False: 525]
  ------------------
  173|     66|            PARSER_CHECK(buffer_read_bytes(buffer, &key->hash_x, RAW_HASH_X_KEY_SIZE))
  ------------------
  |  |   15|     66|    {                           \
  |  |   16|     66|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 65]
  |  |  ------------------
  |  |   17|     66|    }
  ------------------
  174|     65|            return true;
  175|     81|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:
  ------------------
  |  Branch (175:9): [True: 81, False: 510]
  ------------------
  176|     81|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|     81|    {                           \
  |  |   16|     81|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 80]
  |  |  ------------------
  |  |   17|     81|    }
  ------------------
  177|     81|                                           &key->ed25519_signed_payload.ed25519,
  178|     81|                                           RAW_ED25519_PUBLIC_KEY_SIZE))
  179|     80|            PARSER_CHECK(parse_uint32(buffer, &key->ed25519_signed_payload.payload_len))
  ------------------
  |  |   15|     80|    {                           \
  |  |   16|     80|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 79]
  |  |  ------------------
  |  |   17|     80|    }
  ------------------
  180|       |            // valid length [1, 64]
  181|     79|            if (key->ed25519_signed_payload.payload_len == 0 ||
  ------------------
  |  Branch (181:17): [True: 1, False: 78]
  ------------------
  182|     79|                key->ed25519_signed_payload.payload_len > 64) {
  ------------------
  |  Branch (182:17): [True: 1, False: 77]
  ------------------
  183|      2|                return false;
  184|      2|            }
  185|     77|            size_t data_size = 0;
  186|     77|            PARSER_CHECK(num_bytes(key->ed25519_signed_payload.payload_len, &data_size))
  ------------------
  |  |   15|     77|    {                           \
  |  |   16|     77|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 77]
  |  |  ------------------
  |  |   17|     77|    }
  ------------------
  187|     77|            PARSER_CHECK(buffer_read_bytes(buffer, &key->ed25519_signed_payload.payload, data_size))
  ------------------
  |  |   15|     77|    {                           \
  |  |   16|     77|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 76]
  |  |  ------------------
  |  |   17|     77|    }
  ------------------
  188|     76|            return true;
  189|      2|        default:
  ------------------
  |  Branch (189:9): [True: 2, False: 589]
  ------------------
  190|      2|            return false;
  191|    591|    }
  192|    591|}
parser.c:parse_transaction_memo:
 1219|    865|static bool parse_transaction_memo(buffer_t *buffer, memo_t *memo) {
 1220|    865|    return parse_memo(buffer, memo);
 1221|    865|}
parser.c:parse_memo:
  290|    865|static bool parse_memo(buffer_t *buffer, memo_t *memo) {
  291|    865|    PARSER_CHECK(parse_uint32(buffer, &memo->type))
  ------------------
  |  |   15|    865|    {                           \
  |  |   16|    865|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 860]
  |  |  ------------------
  |  |   17|    865|    }
  ------------------
  292|    860|    switch (memo->type) {
  293|    795|        case MEMO_NONE:
  ------------------
  |  Branch (293:9): [True: 795, False: 65]
  ------------------
  294|    795|            return true;
  295|      4|        case MEMO_ID:
  ------------------
  |  Branch (295:9): [True: 4, False: 856]
  ------------------
  296|      4|            return parse_uint64(buffer, &memo->id);
  297|     45|        case MEMO_TEXT: {
  ------------------
  |  Branch (297:9): [True: 45, False: 815]
  ------------------
  298|     45|            PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|     45|    {                           \
  |  |   16|     45|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 41]
  |  |  ------------------
  |  |   17|     45|    }
  ------------------
  299|     45|                                                 &memo->text.text,
  300|     45|                                                 &memo->text.text_size,
  301|     45|                                                 MEMO_TEXT_MAX_SIZE))
  302|     41|            return true;
  303|     45|        }
  304|      2|        case MEMO_HASH:
  ------------------
  |  Branch (304:9): [True: 2, False: 858]
  ------------------
  305|      2|            return buffer_read_bytes(buffer, &memo->hash, HASH_SIZE);
  ------------------
  |  |   46|      2|#define HASH_SIZE                 32
  ------------------
  306|      2|        case MEMO_RETURN:
  ------------------
  |  Branch (306:9): [True: 2, False: 858]
  ------------------
  307|      2|            return buffer_read_bytes(buffer, &memo->return_hash, HASH_SIZE);
  ------------------
  |  |   46|      2|#define HASH_SIZE                 32
  ------------------
  308|     12|        default:
  ------------------
  |  Branch (308:9): [True: 12, False: 848]
  ------------------
  309|     12|            return false;  // unknown memo type
  310|    860|    }
  311|    860|}
parser.c:parse_transaction_operation_len:
 1223|    841|static bool parse_transaction_operation_len(buffer_t *buffer, uint8_t *operations_count) {
 1224|    841|    uint32_t len;
 1225|    841|    PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|    841|    {                           \
  |  |   16|    841|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 839]
  |  |  ------------------
  |  |   17|    841|    }
  ------------------
 1226|    839|    if (len > MAX_OPS) {
  ------------------
  |  |   39|    839|#define MAX_OPS 35
  ------------------
  |  Branch (1226:9): [True: 1, False: 838]
  ------------------
 1227|      1|        return false;
 1228|      1|    }
 1229|    838|    *operations_count = len;
 1230|    838|    return true;
 1231|    839|}
parser.c:parse_fee_bump_transaction_details:
 1276|     18|    fee_bump_transaction_details_t *fee_bump_transaction) {
 1277|     18|    PARSER_CHECK(parse_fee_bump_transaction_fee_source(buffer, &fee_bump_transaction->fee_source))
  ------------------
  |  |   15|     18|    {                           \
  |  |   16|     18|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 11]
  |  |  ------------------
  |  |   17|     18|    }
  ------------------
 1278|     11|    PARSER_CHECK(parse_fee_bump_transaction_fee(buffer, &fee_bump_transaction->fee))
  ------------------
  |  |   15|     11|    {                           \
  |  |   16|     11|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 9]
  |  |  ------------------
  |  |   17|     11|    }
  ------------------
 1279|      9|    return true;
 1280|     11|}
parser.c:parse_fee_bump_transaction_fee_source:
 1266|     18|static bool parse_fee_bump_transaction_fee_source(buffer_t *buffer, muxed_account_t *fee_source) {
 1267|     18|    return parse_muxed_account(buffer, fee_source);
 1268|     18|}
parser.c:parse_fee_bump_transaction_fee:
 1270|     11|static bool parse_fee_bump_transaction_fee(buffer_t *buffer, int64_t *fee) {
 1271|     11|    return parse_int64(buffer, fee);
 1272|     11|}
parser.c:check_operations:
 1233|    838|static bool check_operations(buffer_t *buffer, uint8_t op_count) {
 1234|    838|    PRINTF("check_operations: op_count=%d, offset=%d\n", op_count, buffer->offset);
 1235|    838|    operation_t op;
 1236|  3.98k|    for (uint8_t i = 0; i < op_count; i++) {
  ------------------
  |  Branch (1236:25): [True: 3.43k, False: 552]
  ------------------
 1237|  3.43k|        PARSER_CHECK(parse_operation(buffer, &op))
  ------------------
  |  |   15|  3.43k|    {                           \
  |  |   16|  3.43k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 286, False: 3.14k]
  |  |  ------------------
  |  |   17|  3.43k|    }
  ------------------
 1238|  3.43k|    }
 1239|    552|    return true;
 1240|    838|}
parser.c:parse_operation:
 1101|  22.1k|static bool parse_operation(buffer_t *buffer, operation_t *operation) {
 1102|  22.1k|    PRINTF("parse_operation: offset=%d\n", buffer->offset);
 1103|  22.1k|    explicit_bzero(operation, sizeof(operation_t));
 1104|       |
 1105|  22.1k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  22.1k|    {                           \
  |  |   16|  22.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 44, False: 22.1k]
  |  |  ------------------
  |  |   17|  22.1k|    }
  ------------------
 1106|  22.1k|                                     (xdr_type_reader) parse_muxed_account,
 1107|  22.1k|                                     &operation->source_account,
 1108|  22.1k|                                     &operation->source_account_present))
 1109|  22.1k|    PRINTF("operation->source_account_present: %d\n", operation->source_account_present);
 1110|       |
 1111|  22.1k|    PARSER_CHECK(parse_uint32(buffer, &operation->type))
  ------------------
  |  |   15|  22.1k|    {                           \
  |  |   16|  22.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 22.1k]
  |  |  ------------------
  |  |   17|  22.1k|    }
  ------------------
 1112|  22.1k|    PRINTF("sizeof operation->type: %d\n", sizeof(operation->type));
 1113|       |
 1114|  22.1k|    switch (operation->type) {
 1115|  14.3k|        case OPERATION_TYPE_CREATE_ACCOUNT: {
  ------------------
  |  Branch (1115:9): [True: 14.3k, False: 7.72k]
  ------------------
 1116|  14.3k|            return parse_create_account(buffer, &operation->create_account_op);
 1117|      0|        }
 1118|    338|        case OPERATION_TYPE_PAYMENT: {
  ------------------
  |  Branch (1118:9): [True: 338, False: 21.7k]
  ------------------
 1119|    338|            return parse_payment(buffer, &operation->payment_op);
 1120|      0|        }
 1121|    131|        case OPERATION_TYPE_PATH_PAYMENT_STRICT_RECEIVE: {
  ------------------
  |  Branch (1121:9): [True: 131, False: 21.9k]
  ------------------
 1122|    131|            return parse_path_payment_strict_receive(buffer,
 1123|    131|                                                     &operation->path_payment_strict_receive_op);
 1124|      0|        }
 1125|    276|        case OPERATION_TYPE_CREATE_PASSIVE_SELL_OFFER: {
  ------------------
  |  Branch (1125:9): [True: 276, False: 21.8k]
  ------------------
 1126|    276|            return parse_create_passive_sell_offer(buffer,
 1127|    276|                                                   &operation->create_passive_sell_offer_op);
 1128|      0|        }
 1129|    157|        case OPERATION_TYPE_MANAGE_SELL_OFFER: {
  ------------------
  |  Branch (1129:9): [True: 157, False: 21.9k]
  ------------------
 1130|    157|            return parse_manage_sell_offer(buffer, &operation->manage_sell_offer_op);
 1131|      0|        }
 1132|  1.32k|        case OPERATION_TYPE_SET_OPTIONS: {
  ------------------
  |  Branch (1132:9): [True: 1.32k, False: 20.7k]
  ------------------
 1133|  1.32k|            return parse_set_options(buffer, &operation->set_options_op);
 1134|      0|        }
 1135|    223|        case OPERATION_TYPE_CHANGE_TRUST: {
  ------------------
  |  Branch (1135:9): [True: 223, False: 21.8k]
  ------------------
 1136|    223|            return parse_change_trust(buffer, &operation->change_trust_op);
 1137|      0|        }
 1138|     42|        case OPERATION_TYPE_ALLOW_TRUST: {
  ------------------
  |  Branch (1138:9): [True: 42, False: 22.0k]
  ------------------
 1139|     42|            return parse_allow_trust(buffer, &operation->allow_trust_op);
 1140|      0|        }
 1141|    352|        case OPERATION_TYPE_ACCOUNT_MERGE: {
  ------------------
  |  Branch (1141:9): [True: 352, False: 21.7k]
  ------------------
 1142|    352|            return parse_account_merge(buffer, &operation->account_merge_op);
 1143|      0|        }
 1144|    290|        case OPERATION_TYPE_INFLATION: {
  ------------------
  |  Branch (1144:9): [True: 290, False: 21.8k]
  ------------------
 1145|    290|            return true;
 1146|      0|        }
 1147|    233|        case OPERATION_TYPE_MANAGE_DATA: {
  ------------------
  |  Branch (1147:9): [True: 233, False: 21.8k]
  ------------------
 1148|    233|            return parse_manage_data(buffer, &operation->manage_data_op);
 1149|      0|        }
 1150|    173|        case OPERATION_TYPE_BUMP_SEQUENCE: {
  ------------------
  |  Branch (1150:9): [True: 173, False: 21.9k]
  ------------------
 1151|    173|            return parse_bump_sequence(buffer, &operation->bump_sequence_op);
 1152|      0|        }
 1153|    206|        case OPERATION_TYPE_MANAGE_BUY_OFFER: {
  ------------------
  |  Branch (1153:9): [True: 206, False: 21.9k]
  ------------------
 1154|    206|            return parse_manage_buy_offer(buffer, &operation->manage_buy_offer_op);
 1155|      0|        }
 1156|     41|        case OPERATION_TYPE_PATH_PAYMENT_STRICT_SEND: {
  ------------------
  |  Branch (1156:9): [True: 41, False: 22.0k]
  ------------------
 1157|     41|            return parse_path_payment_strict_send(buffer, &operation->path_payment_strict_send_op);
 1158|      0|        }
 1159|    179|        case OPERATION_TYPE_CREATE_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1159:9): [True: 179, False: 21.9k]
  ------------------
 1160|    179|            return parse_create_claimable_balance(buffer, &operation->create_claimable_balance_op);
 1161|      0|        }
 1162|    154|        case OPERATION_TYPE_CLAIM_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1162:9): [True: 154, False: 21.9k]
  ------------------
 1163|    154|            return parse_claim_claimable_balance(buffer, &operation->claim_claimable_balance_op);
 1164|      0|        }
 1165|    337|        case OPERATION_TYPE_BEGIN_SPONSORING_FUTURE_RESERVES: {
  ------------------
  |  Branch (1165:9): [True: 337, False: 21.7k]
  ------------------
 1166|    337|            return parse_begin_sponsoring_future_reserves(
 1167|    337|                buffer,
 1168|    337|                &operation->begin_sponsoring_future_reserves_op);
 1169|      0|        }
 1170|    115|        case OPERATION_TYPE_END_SPONSORING_FUTURE_RESERVES: {
  ------------------
  |  Branch (1170:9): [True: 115, False: 21.9k]
  ------------------
 1171|    115|            return true;
 1172|      0|        }
 1173|  1.53k|        case OPERATION_TYPE_REVOKE_SPONSORSHIP: {
  ------------------
  |  Branch (1173:9): [True: 1.53k, False: 20.5k]
  ------------------
 1174|  1.53k|            return parse_revoke_sponsorship(buffer, &operation->revoke_sponsorship_op);
 1175|      0|        }
 1176|     57|        case OPERATION_TYPE_CLAWBACK: {
  ------------------
  |  Branch (1176:9): [True: 57, False: 22.0k]
  ------------------
 1177|     57|            return parse_clawback(buffer, &operation->clawback_op);
 1178|      0|        }
 1179|    103|        case OPERATION_TYPE_CLAWBACK_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1179:9): [True: 103, False: 22.0k]
  ------------------
 1180|    103|            return parse_clawback_claimable_balance(buffer,
 1181|    103|                                                    &operation->clawback_claimable_balance_op);
 1182|      0|        }
 1183|    457|        case OPERATION_TYPE_SET_TRUST_LINE_FLAGS: {
  ------------------
  |  Branch (1183:9): [True: 457, False: 21.6k]
  ------------------
 1184|    457|            return parse_set_trust_line_flags(buffer, &operation->set_trust_line_flags_op);
 1185|      0|        }
 1186|     30|        case OPERATION_TYPE_LIQUIDITY_POOL_DEPOSIT:
  ------------------
  |  Branch (1186:9): [True: 30, False: 22.0k]
  ------------------
 1187|     30|            return parse_liquidity_pool_deposit(buffer, &operation->liquidity_pool_deposit_op);
 1188|    202|        case OPERATION_TYPE_LIQUIDITY_POOL_WITHDRAW:
  ------------------
  |  Branch (1188:9): [True: 202, False: 21.9k]
  ------------------
 1189|    202|            return parse_liquidity_pool_withdraw(buffer, &operation->liquidity_pool_withdraw_op);
 1190|    404|        case OPERATION_INVOKE_HOST_FUNCTION: {
  ------------------
  |  Branch (1190:9): [True: 404, False: 21.7k]
  ------------------
 1191|    404|            return parse_invoke_host_function(buffer, &operation->invoke_host_function_op);
 1192|      0|        }
 1193|     74|        case OPERATION_EXTEND_FOOTPRINT_TTL:
  ------------------
  |  Branch (1193:9): [True: 74, False: 22.0k]
  ------------------
 1194|     74|            return parse_extend_footprint_ttl(buffer, &operation->extend_footprint_ttl_op);
 1195|    282|        case OPERATION_RESTORE_FOOTPRINT:
  ------------------
  |  Branch (1195:9): [True: 282, False: 21.8k]
  ------------------
 1196|    282|            return parse_restore_footprint(buffer, &operation->restore_footprint_op);
 1197|      1|        default:
  ------------------
  |  Branch (1197:9): [True: 1, False: 22.1k]
  ------------------
 1198|      1|            return false;
 1199|  22.1k|    }
 1200|      0|    return false;
 1201|  22.1k|}
parser.c:parse_create_account:
  401|  14.3k|static bool parse_create_account(buffer_t *buffer, create_account_op_t *create_account_op) {
  402|  14.3k|    PARSER_CHECK(parse_account_id(buffer, &create_account_op->destination))
  ------------------
  |  |   15|  14.3k|    {                           \
  |  |   16|  14.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 14.3k]
  |  |  ------------------
  |  |   17|  14.3k|    }
  ------------------
  403|  14.3k|    PARSER_CHECK(parse_int64(buffer, &create_account_op->starting_balance))
  ------------------
  |  |   15|  14.3k|    {                           \
  |  |   16|  14.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 14.3k]
  |  |  ------------------
  |  |   17|  14.3k|    }
  ------------------
  404|  14.3k|    return true;
  405|  14.3k|}
parser.c:parse_payment:
  407|    338|static bool parse_payment(buffer_t *buffer, payment_op_t *payment_op) {
  408|    338|    PARSER_CHECK(parse_muxed_account(buffer, &payment_op->destination))
  ------------------
  |  |   15|    338|    {                           \
  |  |   16|    338|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 337]
  |  |  ------------------
  |  |   17|    338|    }
  ------------------
  409|    337|    PARSER_CHECK(parse_asset(buffer, &payment_op->asset))
  ------------------
  |  |   15|    337|    {                           \
  |  |   16|    337|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 336]
  |  |  ------------------
  |  |   17|    337|    }
  ------------------
  410|    336|    PARSER_CHECK(parse_int64(buffer, &payment_op->amount))
  ------------------
  |  |   15|    336|    {                           \
  |  |   16|    336|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 335]
  |  |  ------------------
  |  |   17|    336|    }
  ------------------
  411|    335|    return true;
  412|    336|}
parser.c:parse_asset:
  325|  2.89k|static bool parse_asset(buffer_t *buffer, asset_t *asset) {
  326|  2.89k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  2.89k|    {                           \
  |  |   16|  2.89k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 22, False: 2.86k]
  |  |  ------------------
  |  |   17|  2.89k|    }
  ------------------
  327|  2.86k|    switch (asset->type) {
  328|  2.72k|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (328:9): [True: 2.72k, False: 141]
  ------------------
  329|  2.72k|            return true;
  330|      0|        }
  331|     94|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (331:9): [True: 94, False: 2.77k]
  ------------------
  332|     94|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  333|      0|        }
  334|     44|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (334:9): [True: 44, False: 2.82k]
  ------------------
  335|     44|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  336|      0|        }
  337|      3|        default:
  ------------------
  |  Branch (337:9): [True: 3, False: 2.86k]
  ------------------
  338|      3|            return false;  // unknown asset type
  339|  2.86k|    }
  340|  2.86k|}
parser.c:parse_alpha_num4_asset:
  313|    199|static bool parse_alpha_num4_asset(buffer_t *buffer, alpha_num4_t *asset) {
  314|    199|    PARSER_CHECK(buffer_read_bytes(buffer, &asset->asset_code, 4))
  ------------------
  |  |   15|    199|    {                           \
  |  |   16|    199|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 194]
  |  |  ------------------
  |  |   17|    199|    }
  ------------------
  315|    194|    PARSER_CHECK(parse_account_id(buffer, &asset->issuer))
  ------------------
  |  |   15|    194|    {                           \
  |  |   16|    194|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 191]
  |  |  ------------------
  |  |   17|    194|    }
  ------------------
  316|    191|    return true;
  317|    194|}
parser.c:parse_alpha_num12_asset:
  319|    146|static bool parse_alpha_num12_asset(buffer_t *buffer, alpha_num12_t *asset) {
  320|    146|    PARSER_CHECK(buffer_read_bytes(buffer, &asset->asset_code, 12))
  ------------------
  |  |   15|    146|    {                           \
  |  |   16|    146|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 141]
  |  |  ------------------
  |  |   17|    146|    }
  ------------------
  321|    141|    PARSER_CHECK(parse_account_id(buffer, &asset->issuer))
  ------------------
  |  |   15|    141|    {                           \
  |  |   16|    141|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 138]
  |  |  ------------------
  |  |   17|    141|    }
  ------------------
  322|    138|    return true;
  323|    141|}
parser.c:parse_path_payment_strict_receive:
  415|    131|                                              path_payment_strict_receive_op_t *op) {
  416|    131|    uint32_t path_len;
  417|       |
  418|    131|    PARSER_CHECK(parse_asset(buffer, &op->send_asset))
  ------------------
  |  |   15|    131|    {                           \
  |  |   16|    131|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 129]
  |  |  ------------------
  |  |   17|    131|    }
  ------------------
  419|    129|    PARSER_CHECK(parse_int64(buffer, &op->send_max))
  ------------------
  |  |   15|    129|    {                           \
  |  |   16|    129|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 126]
  |  |  ------------------
  |  |   17|    129|    }
  ------------------
  420|    126|    PARSER_CHECK(parse_muxed_account(buffer, &op->destination))
  ------------------
  |  |   15|    126|    {                           \
  |  |   16|    126|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 125]
  |  |  ------------------
  |  |   17|    126|    }
  ------------------
  421|    125|    PARSER_CHECK(parse_asset(buffer, &op->dest_asset))
  ------------------
  |  |   15|    125|    {                           \
  |  |   16|    125|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 124]
  |  |  ------------------
  |  |   17|    125|    }
  ------------------
  422|    124|    PARSER_CHECK(parse_int64(buffer, &op->dest_amount))
  ------------------
  |  |   15|    124|    {                           \
  |  |   16|    124|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 123]
  |  |  ------------------
  |  |   17|    124|    }
  ------------------
  423|       |
  424|    123|    PARSER_CHECK(parse_uint32(buffer, &path_len))
  ------------------
  |  |   15|    123|    {                           \
  |  |   16|    123|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 122]
  |  |  ------------------
  |  |   17|    123|    }
  ------------------
  425|    122|    if (path_len > PATH_PAYMENT_MAX_PATH_LENGTH) {
  ------------------
  |  |   35|    122|#define PATH_PAYMENT_MAX_PATH_LENGTH  5
  ------------------
  |  Branch (425:9): [True: 1, False: 121]
  ------------------
  426|      1|        return false;
  427|      1|    }
  428|    215|    for (uint32_t i = 0; i < path_len; i++) {
  ------------------
  |  Branch (428:26): [True: 96, False: 119]
  ------------------
  429|     96|        asset_t tmp_asset;
  430|     96|        PARSER_CHECK(parse_asset(buffer, &tmp_asset))
  ------------------
  |  |   15|     96|    {                           \
  |  |   16|     96|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 94]
  |  |  ------------------
  |  |   17|     96|    }
  ------------------
  431|     96|    }
  432|    119|    return true;
  433|    121|}
parser.c:parse_create_passive_sell_offer:
  500|    276|static bool parse_create_passive_sell_offer(buffer_t *buffer, create_passive_sell_offer_op_t *op) {
  501|    276|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|    276|    {                           \
  |  |   16|    276|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 275]
  |  |  ------------------
  |  |   17|    276|    }
  ------------------
  502|    275|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|    275|    {                           \
  |  |   16|    275|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 274]
  |  |  ------------------
  |  |   17|    275|    }
  ------------------
  503|    274|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    274|    {                           \
  |  |   16|    274|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 273]
  |  |  ------------------
  |  |   17|    274|    }
  ------------------
  504|    273|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|    273|    {                           \
  |  |   16|    273|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 271]
  |  |  ------------------
  |  |   17|    273|    }
  ------------------
  505|    271|    return true;
  506|    273|}
parser.c:parse_price:
  475|    682|static bool parse_price(buffer_t *buffer, price_t *price) {
  476|    682|    PARSER_CHECK(parse_int32(buffer, &price->n))
  ------------------
  |  |   15|    682|    {                           \
  |  |   16|    682|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 677]
  |  |  ------------------
  |  |   17|    682|    }
  ------------------
  477|    677|    PARSER_CHECK(parse_int32(buffer, &price->d))
  ------------------
  |  |   15|    677|    {                           \
  |  |   16|    677|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 675]
  |  |  ------------------
  |  |   17|    677|    }
  ------------------
  478|       |    // Denominator cannot be null, as it would lead to a division by zero.
  479|    675|    return price->d != 0;
  480|    677|}
parser.c:parse_manage_sell_offer:
  482|    157|static bool parse_manage_sell_offer(buffer_t *buffer, manage_sell_offer_op_t *op) {
  483|    157|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|    157|    {                           \
  |  |   16|    157|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 156]
  |  |  ------------------
  |  |   17|    157|    }
  ------------------
  484|    156|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|    156|    {                           \
  |  |   16|    156|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 155]
  |  |  ------------------
  |  |   17|    156|    }
  ------------------
  485|    155|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    155|    {                           \
  |  |   16|    155|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 154]
  |  |  ------------------
  |  |   17|    155|    }
  ------------------
  486|    154|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|    154|    {                           \
  |  |   16|    154|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 153]
  |  |  ------------------
  |  |   17|    154|    }
  ------------------
  487|    153|    PARSER_CHECK(parse_int64(buffer, &op->offer_id))
  ------------------
  |  |   15|    153|    {                           \
  |  |   16|    153|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 152]
  |  |  ------------------
  |  |   17|    153|    }
  ------------------
  488|    152|    return true;
  489|    153|}
parser.c:parse_set_options:
  521|  1.32k|static bool parse_set_options(buffer_t *buffer, set_options_op_t *set_options) {
  522|  1.32k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.32k|    {                           \
  |  |   16|  1.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.32k]
  |  |  ------------------
  |  |   17|  1.32k|    }
  ------------------
  523|  1.32k|                                     (xdr_type_reader) parse_account_id,
  524|  1.32k|                                     &set_options->inflation_destination,
  525|  1.32k|                                     &set_options->inflation_destination_present))
  526|       |
  527|  1.32k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.32k|    {                           \
  |  |   16|  1.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.32k]
  |  |  ------------------
  |  |   17|  1.32k|    }
  ------------------
  528|  1.32k|                                     (xdr_type_reader) parse_uint32,
  529|  1.32k|                                     &set_options->clear_flags,
  530|  1.32k|                                     &set_options->clear_flags_present))
  531|  1.32k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.32k|    {                           \
  |  |   16|  1.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.32k]
  |  |  ------------------
  |  |   17|  1.32k|    }
  ------------------
  532|  1.32k|                                     (xdr_type_reader) parse_uint32,
  533|  1.32k|                                     &set_options->set_flags,
  534|  1.32k|                                     &set_options->set_flags_present))
  535|  1.32k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.32k|    {                           \
  |  |   16|  1.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.32k]
  |  |  ------------------
  |  |   17|  1.32k|    }
  ------------------
  536|  1.32k|                                     (xdr_type_reader) parse_uint32,
  537|  1.32k|                                     &set_options->master_weight,
  538|  1.32k|                                     &set_options->master_weight_present))
  539|  1.32k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.32k|    {                           \
  |  |   16|  1.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.32k]
  |  |  ------------------
  |  |   17|  1.32k|    }
  ------------------
  540|  1.32k|                                     (xdr_type_reader) parse_uint32,
  541|  1.32k|                                     &set_options->low_threshold,
  542|  1.32k|                                     &set_options->low_threshold_present))
  543|  1.32k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.32k|    {                           \
  |  |   16|  1.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.32k]
  |  |  ------------------
  |  |   17|  1.32k|    }
  ------------------
  544|  1.32k|                                     (xdr_type_reader) parse_uint32,
  545|  1.32k|                                     &set_options->medium_threshold,
  546|  1.32k|                                     &set_options->medium_threshold_present))
  547|  1.32k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.32k|    {                           \
  |  |   16|  1.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.32k]
  |  |  ------------------
  |  |   17|  1.32k|    }
  ------------------
  548|  1.32k|                                     (xdr_type_reader) parse_uint32,
  549|  1.32k|                                     &set_options->high_threshold,
  550|  1.32k|                                     &set_options->high_threshold_present))
  551|       |
  552|  1.32k|    uint32_t home_domain_present;
  553|  1.32k|    PARSER_CHECK(parse_uint32(buffer, &home_domain_present))
  ------------------
  |  |   15|  1.32k|    {                           \
  |  |   16|  1.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.32k]
  |  |  ------------------
  |  |   17|  1.32k|    }
  ------------------
  554|  1.32k|    set_options->home_domain_present = home_domain_present ? true : false;
  ------------------
  |  Branch (554:40): [True: 299, False: 1.02k]
  ------------------
  555|  1.32k|    if (set_options->home_domain_present) {
  ------------------
  |  Branch (555:9): [True: 299, False: 1.02k]
  ------------------
  556|    299|        PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|    299|    {                           \
  |  |   16|    299|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 298]
  |  |  ------------------
  |  |   17|    299|    }
  ------------------
  557|    299|                                             &set_options->home_domain,
  558|    299|                                             &set_options->home_domain_size,
  559|    299|                                             HOME_DOMAIN_MAX_SIZE))
  560|  1.02k|    } else {
  561|  1.02k|        set_options->home_domain_size = 0;
  562|  1.02k|    }
  563|       |
  564|  1.32k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  1.32k|    {                           \
  |  |   16|  1.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.31k]
  |  |  ------------------
  |  |   17|  1.32k|    }
  ------------------
  565|  1.32k|                                     (xdr_type_reader) parse_signer,
  566|  1.32k|                                     &set_options->signer,
  567|  1.32k|                                     &set_options->signer_present))
  568|  1.31k|    return true;
  569|  1.32k|}
parser.c:parse_signer:
  515|    112|static bool parse_signer(buffer_t *buffer, signer_t *signer) {
  516|    112|    PARSER_CHECK(parse_signer_key(buffer, &signer->key))
  ------------------
  |  |   15|    112|    {                           \
  |  |   16|    112|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 111]
  |  |  ------------------
  |  |   17|    112|    }
  ------------------
  517|    111|    PARSER_CHECK(parse_uint32(buffer, &signer->weight))
  ------------------
  |  |   15|    111|    {                           \
  |  |   16|    111|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 110]
  |  |  ------------------
  |  |   17|    111|    }
  ------------------
  518|    110|    return true;
  519|    111|}
parser.c:parse_change_trust:
  508|    223|static bool parse_change_trust(buffer_t *buffer, change_trust_op_t *op) {
  509|    223|    PARSER_CHECK(parse_change_trust_asset(buffer, &op->line))
  ------------------
  |  |   15|    223|    {                           \
  |  |   16|    223|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 213]
  |  |  ------------------
  |  |   17|    223|    }
  ------------------
  510|    213|    PARSER_CHECK(parse_int64(buffer, &op->limit));
  ------------------
  |  |   15|    213|    {                           \
  |  |   16|    213|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 211]
  |  |  ------------------
  |  |   17|    213|    }
  ------------------
  511|       |    // Limit cannot be negative
  512|    211|    return op->limit >= 0;
  513|    213|}
parser.c:parse_change_trust_asset:
  381|    223|static bool parse_change_trust_asset(buffer_t *buffer, change_trust_asset_t *asset) {
  382|    223|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|    223|    {                           \
  |  |   16|    223|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 222]
  |  |  ------------------
  |  |   17|    223|    }
  ------------------
  383|    222|    switch (asset->type) {
  384|     38|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (384:9): [True: 38, False: 184]
  ------------------
  385|     38|            return true;
  386|      0|        }
  387|     84|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (387:9): [True: 84, False: 138]
  ------------------
  388|     84|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  389|      0|        }
  390|     84|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (390:9): [True: 84, False: 138]
  ------------------
  391|     84|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  392|      0|        }
  393|     15|        case ASSET_TYPE_POOL_SHARE: {
  ------------------
  |  Branch (393:9): [True: 15, False: 207]
  ------------------
  394|     15|            return parse_liquidity_pool_parameters(buffer, &asset->liquidity_pool);
  395|      0|        }
  396|      1|        default:
  ------------------
  |  Branch (396:9): [True: 1, False: 221]
  ------------------
  397|      1|            return false;  // unknown asset type
  398|    222|    }
  399|    222|}
parser.c:parse_liquidity_pool_parameters:
  366|     15|    liquidity_pool_parameters_t *liquidity_pool_parameters) {
  367|     15|    uint32_t liquidity_pool_type;
  368|     15|    PARSER_CHECK(parse_uint32(buffer, &liquidity_pool_type))
  ------------------
  |  |   15|     15|    {                           \
  |  |   16|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 14]
  |  |  ------------------
  |  |   17|     15|    }
  ------------------
  369|     14|    switch (liquidity_pool_type) {
  370|     13|        case LIQUIDITY_POOL_CONSTANT_PRODUCT: {
  ------------------
  |  Branch (370:9): [True: 13, False: 1]
  ------------------
  371|     13|            PARSER_CHECK(parse_asset(buffer, &liquidity_pool_parameters->constant_product.asset_a))
  ------------------
  |  |   15|     13|    {                           \
  |  |   16|     13|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 12]
  |  |  ------------------
  |  |   17|     13|    }
  ------------------
  372|     12|            PARSER_CHECK(parse_asset(buffer, &liquidity_pool_parameters->constant_product.asset_b))
  ------------------
  |  |   15|     12|    {                           \
  |  |   16|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 11]
  |  |  ------------------
  |  |   17|     12|    }
  ------------------
  373|     11|            PARSER_CHECK(parse_int32(buffer, &liquidity_pool_parameters->constant_product.fee))
  ------------------
  |  |   15|     11|    {                           \
  |  |   16|     11|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 10]
  |  |  ------------------
  |  |   17|     11|    }
  ------------------
  374|     10|            return true;
  375|     11|        }
  376|      1|        default:
  ------------------
  |  Branch (376:9): [True: 1, False: 13]
  ------------------
  377|      1|            return false;
  378|     14|    }
  379|     14|}
parser.c:parse_allow_trust:
  435|     42|static bool parse_allow_trust(buffer_t *buffer, allow_trust_op_t *op) {
  436|     42|    PARSER_CHECK(parse_account_id(buffer, &op->trustor))
  ------------------
  |  |   15|     42|    {                           \
  |  |   16|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 41]
  |  |  ------------------
  |  |   17|     42|    }
  ------------------
  437|     41|    PARSER_CHECK(parse_uint32(buffer, &op->asset_type))
  ------------------
  |  |   15|     41|    {                           \
  |  |   16|     41|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 40]
  |  |  ------------------
  |  |   17|     41|    }
  ------------------
  438|       |
  439|     40|    switch (op->asset_type) {
  440|     16|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (440:9): [True: 16, False: 24]
  ------------------
  441|     16|            PARSER_CHECK(buffer_read_bytes(buffer, &op->asset_code, 4))
  ------------------
  |  |   15|     16|    {                           \
  |  |   16|     16|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 15]
  |  |  ------------------
  |  |   17|     16|    }
  ------------------
  442|     15|            break;
  443|     23|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (443:9): [True: 23, False: 17]
  ------------------
  444|     23|            PARSER_CHECK(buffer_read_bytes(buffer, &op->asset_code, 12))
  ------------------
  |  |   15|     23|    {                           \
  |  |   16|     23|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 22]
  |  |  ------------------
  |  |   17|     23|    }
  ------------------
  445|     22|            break;
  446|     22|        default:
  ------------------
  |  Branch (446:9): [True: 1, False: 39]
  ------------------
  447|      1|            return false;  // unknown asset type
  448|     40|    }
  449|       |
  450|     37|    PARSER_CHECK(parse_uint32(buffer, &op->authorize))
  ------------------
  |  |   15|     37|    {                           \
  |  |   16|     37|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 35]
  |  |  ------------------
  |  |   17|     37|    }
  ------------------
  451|     35|    return true;
  452|     37|}
parser.c:parse_account_merge:
  454|    352|static bool parse_account_merge(buffer_t *buffer, account_merge_op_t *op) {
  455|    352|    return parse_muxed_account(buffer, &op->destination);
  456|    352|}
parser.c:parse_manage_data:
  458|    233|static bool parse_manage_data(buffer_t *buffer, manage_data_op_t *op) {
  459|    233|    PARSER_CHECK(
  ------------------
  |  |   15|    233|    {                           \
  |  |   16|    233|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 232]
  |  |  ------------------
  |  |   17|    233|    }
  ------------------
  460|    233|        parse_binary_string_ptr(buffer, &op->data_name, &op->data_name_size, DATA_NAME_MAX_SIZE))
  461|       |
  462|    232|    bool has_value;
  463|    232|    PARSER_CHECK(parse_bool(buffer, &has_value))
  ------------------
  |  |   15|    232|    {                           \
  |  |   16|    232|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 231]
  |  |  ------------------
  |  |   17|    232|    }
  ------------------
  464|    231|    if (has_value) {
  ------------------
  |  Branch (464:9): [True: 50, False: 181]
  ------------------
  465|     50|        PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|     50|    {                           \
  |  |   16|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 49]
  |  |  ------------------
  |  |   17|     50|    }
  ------------------
  466|     50|                                             &op->data_value,
  467|     50|                                             &op->data_value_size,
  468|     50|                                             DATA_VALUE_MAX_SIZE))
  469|    181|    } else {
  470|    181|        op->data_value_size = 0;
  471|    181|    }
  472|    230|    return true;
  473|    231|}
parser.c:parse_bump_sequence:
  571|    173|static bool parse_bump_sequence(buffer_t *buffer, bump_sequence_op_t *op) {
  572|    173|    return parse_int64(buffer, &op->bump_to);
  573|    173|}
parser.c:parse_manage_buy_offer:
  491|    206|static bool parse_manage_buy_offer(buffer_t *buffer, manage_buy_offer_op_t *op) {
  492|    206|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|    206|    {                           \
  |  |   16|    206|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 204]
  |  |  ------------------
  |  |   17|    206|    }
  ------------------
  493|    204|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|    204|    {                           \
  |  |   16|    204|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 203]
  |  |  ------------------
  |  |   17|    204|    }
  ------------------
  494|    203|    PARSER_CHECK(parse_int64(buffer, &op->buy_amount))
  ------------------
  |  |   15|    203|    {                           \
  |  |   16|    203|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 202]
  |  |  ------------------
  |  |   17|    203|    }
  ------------------
  495|    202|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|    202|    {                           \
  |  |   16|    202|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 200]
  |  |  ------------------
  |  |   17|    202|    }
  ------------------
  496|    200|    PARSER_CHECK(parse_int64(buffer, &op->offer_id))
  ------------------
  |  |   15|    200|    {                           \
  |  |   16|    200|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 199]
  |  |  ------------------
  |  |   17|    200|    }
  ------------------
  497|    199|    return true;
  498|    200|}
parser.c:parse_path_payment_strict_send:
  575|     41|static bool parse_path_payment_strict_send(buffer_t *buffer, path_payment_strict_send_op_t *op) {
  576|     41|    uint32_t path_len;
  577|       |
  578|     41|    PARSER_CHECK(parse_asset(buffer, &op->send_asset))
  ------------------
  |  |   15|     41|    {                           \
  |  |   16|     41|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 40]
  |  |  ------------------
  |  |   17|     41|    }
  ------------------
  579|     40|    PARSER_CHECK(parse_int64(buffer, &op->send_amount))
  ------------------
  |  |   15|     40|    {                           \
  |  |   16|     40|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 39]
  |  |  ------------------
  |  |   17|     40|    }
  ------------------
  580|     39|    PARSER_CHECK(parse_muxed_account(buffer, &op->destination))
  ------------------
  |  |   15|     39|    {                           \
  |  |   16|     39|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 38]
  |  |  ------------------
  |  |   17|     39|    }
  ------------------
  581|     38|    PARSER_CHECK(parse_asset(buffer, &op->dest_asset))
  ------------------
  |  |   15|     38|    {                           \
  |  |   16|     38|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 37]
  |  |  ------------------
  |  |   17|     38|    }
  ------------------
  582|     37|    PARSER_CHECK(parse_int64(buffer, &op->dest_min))
  ------------------
  |  |   15|     37|    {                           \
  |  |   16|     37|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 36]
  |  |  ------------------
  |  |   17|     37|    }
  ------------------
  583|     36|    PARSER_CHECK(parse_uint32(buffer, &path_len))
  ------------------
  |  |   15|     36|    {                           \
  |  |   16|     36|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 35]
  |  |  ------------------
  |  |   17|     36|    }
  ------------------
  584|     35|    if (path_len > PATH_PAYMENT_MAX_PATH_LENGTH) {
  ------------------
  |  |   35|     35|#define PATH_PAYMENT_MAX_PATH_LENGTH  5
  ------------------
  |  Branch (584:9): [True: 1, False: 34]
  ------------------
  585|      1|        return false;
  586|      1|    }
  587|    119|    for (uint32_t i = 0; i < path_len; i++) {
  ------------------
  |  Branch (587:26): [True: 87, False: 32]
  ------------------
  588|     87|        asset_t tmp_asset;
  589|     87|        PARSER_CHECK(parse_asset(buffer, &tmp_asset))
  ------------------
  |  |   15|     87|    {                           \
  |  |   16|     87|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 85]
  |  |  ------------------
  |  |   17|     87|    }
  ------------------
  590|     87|    }
  591|     32|    return true;
  592|     34|}
parser.c:parse_create_claimable_balance:
  645|    179|static bool parse_create_claimable_balance(buffer_t *buffer, create_claimable_balance_op_t *op) {
  646|    179|    uint32_t claimant_len;
  647|    179|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|    179|    {                           \
  |  |   16|    179|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 178]
  |  |  ------------------
  |  |   17|    179|    }
  ------------------
  648|    178|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    178|    {                           \
  |  |   16|    178|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 177]
  |  |  ------------------
  |  |   17|    178|    }
  ------------------
  649|    177|    PARSER_CHECK(parse_uint32(buffer, &claimant_len))
  ------------------
  |  |   15|    177|    {                           \
  |  |   16|    177|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 176]
  |  |  ------------------
  |  |   17|    177|    }
  ------------------
  650|    176|    if (claimant_len > CLAIMANTS_MAX_LENGTH) {
  ------------------
  |  |   34|    176|#define CLAIMANTS_MAX_LENGTH          10
  ------------------
  |  Branch (650:9): [True: 1, False: 175]
  ------------------
  651|      1|        return false;
  652|      1|    }
  653|    175|    op->claimant_len = claimant_len;
  654|    524|    for (int i = 0; i < op->claimant_len; i++) {
  ------------------
  |  Branch (654:21): [True: 383, False: 141]
  ------------------
  655|    383|        PARSER_CHECK(parse_claimant(buffer, &op->claimants[i]))
  ------------------
  |  |   15|    383|    {                           \
  |  |   16|    383|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 34, False: 349]
  |  |  ------------------
  |  |   17|    383|    }
  ------------------
  656|    383|    }
  657|    141|    return true;
  658|    175|}
parser.c:parse_claimant:
  633|    383|static bool parse_claimant(buffer_t *buffer, claimant_t *claimant) {
  634|    383|    PARSER_CHECK(parse_uint32(buffer, &claimant->type))
  ------------------
  |  |   15|    383|    {                           \
  |  |   16|    383|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 370]
  |  |  ------------------
  |  |   17|    383|    }
  ------------------
  635|    370|    switch (claimant->type) {
  636|    369|        case CLAIMANT_TYPE_V0:
  ------------------
  |  Branch (636:9): [True: 369, False: 1]
  ------------------
  637|    369|            PARSER_CHECK(parse_account_id(buffer, &claimant->v0.destination))
  ------------------
  |  |   15|    369|    {                           \
  |  |   16|    369|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 368]
  |  |  ------------------
  |  |   17|    369|    }
  ------------------
  638|    368|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|    368|    {                           \
  |  |   16|    368|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 19, False: 349]
  |  |  ------------------
  |  |   17|    368|    }
  ------------------
  639|    349|            return true;
  640|      1|        default:
  ------------------
  |  Branch (640:9): [True: 1, False: 369]
  ------------------
  641|      1|            return false;
  642|    370|    }
  643|    370|}
parser.c:parse_claimant_predicate:
  594|    454|static bool parse_claimant_predicate(buffer_t *buffer) {
  595|       |    // Currently, does not support displaying claimant details.
  596|       |    // So here we will not store the parsed data, just to ensure that the data can be parsed
  597|       |    // correctly.
  598|    454|    uint32_t claim_predicate_type;
  599|    454|    uint32_t predicates_len;
  600|    454|    bool not_predicate_present;
  601|    454|    int64_t abs_before;
  602|    454|    int64_t rel_before;
  603|    454|    PARSER_CHECK(parse_uint32(buffer, &claim_predicate_type))
  ------------------
  |  |   15|    454|    {                           \
  |  |   16|    454|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 447]
  |  |  ------------------
  |  |   17|    454|    }
  ------------------
  604|    447|    switch (claim_predicate_type) {
  605|    322|        case CLAIM_PREDICATE_UNCONDITIONAL:
  ------------------
  |  Branch (605:9): [True: 322, False: 125]
  ------------------
  606|    322|            return true;
  607|     40|        case CLAIM_PREDICATE_AND:
  ------------------
  |  Branch (607:9): [True: 40, False: 407]
  ------------------
  608|     54|        case CLAIM_PREDICATE_OR:
  ------------------
  |  Branch (608:9): [True: 14, False: 433]
  ------------------
  609|     54|            PARSER_CHECK(parse_uint32(buffer, &predicates_len))
  ------------------
  |  |   15|     54|    {                           \
  |  |   16|     54|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 47]
  |  |  ------------------
  |  |   17|     54|    }
  ------------------
  610|     47|            if (predicates_len != 2) {
  ------------------
  |  Branch (610:17): [True: 1, False: 46]
  ------------------
  611|      1|                return false;
  612|      1|            }
  613|     46|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|     46|    {                           \
  |  |   16|     46|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 21, False: 25]
  |  |  ------------------
  |  |   17|     46|    }
  ------------------
  614|     25|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|     25|    {                           \
  |  |   16|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 22]
  |  |  ------------------
  |  |   17|     25|    }
  ------------------
  615|     22|            return true;
  616|     34|        case CLAIM_PREDICATE_NOT:
  ------------------
  |  Branch (616:9): [True: 34, False: 413]
  ------------------
  617|     34|            PARSER_CHECK(parse_bool(buffer, &not_predicate_present))
  ------------------
  |  |   15|     34|    {                           \
  |  |   16|     34|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 33]
  |  |  ------------------
  |  |   17|     34|    }
  ------------------
  618|     33|            if (not_predicate_present) {
  ------------------
  |  Branch (618:17): [True: 15, False: 18]
  ------------------
  619|     15|                PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|     15|    {                           \
  |  |   16|     15|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 12]
  |  |  ------------------
  |  |   17|     15|    }
  ------------------
  620|     15|            }
  621|     30|            return true;
  622|     23|        case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:
  ------------------
  |  Branch (622:9): [True: 23, False: 424]
  ------------------
  623|     23|            PARSER_CHECK(parse_int64(buffer, &abs_before))
  ------------------
  |  |   15|     23|    {                           \
  |  |   16|     23|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 22]
  |  |  ------------------
  |  |   17|     23|    }
  ------------------
  624|     22|            return true;
  625|     13|        case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:
  ------------------
  |  Branch (625:9): [True: 13, False: 434]
  ------------------
  626|     13|            PARSER_CHECK(parse_int64(buffer, &rel_before))
  ------------------
  |  |   15|     13|    {                           \
  |  |   16|     13|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 12]
  |  |  ------------------
  |  |   17|     13|    }
  ------------------
  627|     12|            return true;
  628|      1|        default:
  ------------------
  |  Branch (628:9): [True: 1, False: 446]
  ------------------
  629|      1|            return false;
  630|    447|    }
  631|    447|}
parser.c:parse_claim_claimable_balance:
  673|    154|static bool parse_claim_claimable_balance(buffer_t *buffer, claim_claimable_balance_op_t *op) {
  674|    154|    PARSER_CHECK(parse_claimable_balance_id(buffer, &op->balance_id))
  ------------------
  |  |   15|    154|    {                           \
  |  |   16|    154|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 152]
  |  |  ------------------
  |  |   17|    154|    }
  ------------------
  675|    152|    return true;
  676|    154|}
parser.c:parse_claimable_balance_id:
  661|    325|                                       claimable_balance_id_t *claimable_balance_id_t) {
  662|    325|    PARSER_CHECK(parse_uint32(buffer, &claimable_balance_id_t->type))
  ------------------
  |  |   15|    325|    {                           \
  |  |   16|    325|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 322]
  |  |  ------------------
  |  |   17|    325|    }
  ------------------
  663|    322|    switch (claimable_balance_id_t->type) {
  664|    321|        case CLAIMABLE_BALANCE_ID_TYPE_V0:
  ------------------
  |  Branch (664:9): [True: 321, False: 1]
  ------------------
  665|    321|            PARSER_CHECK(
  ------------------
  |  |   15|    321|    {                           \
  |  |   16|    321|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 320]
  |  |  ------------------
  |  |   17|    321|    }
  ------------------
  666|    321|                buffer_read_bytes(buffer, &claimable_balance_id_t->v0, CLAIMABLE_BALANCE_ID_SIZE))
  667|    320|            return true;
  668|      1|        default:
  ------------------
  |  Branch (668:9): [True: 1, False: 321]
  ------------------
  669|      1|            return false;
  670|    322|    }
  671|    322|}
parser.c:parse_begin_sponsoring_future_reserves:
  679|    337|                                                   begin_sponsoring_future_reserves_op_t *op) {
  680|    337|    PARSER_CHECK(parse_account_id(buffer, &op->sponsored_id))
  ------------------
  |  |   15|    337|    {                           \
  |  |   16|    337|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 335]
  |  |  ------------------
  |  |   17|    337|    }
  ------------------
  681|    335|    return true;
  682|    337|}
parser.c:parse_revoke_sponsorship:
  849|  1.53k|static bool parse_revoke_sponsorship(buffer_t *buffer, revoke_sponsorship_op_t *op) {
  850|  1.53k|    PARSER_CHECK(parse_uint32(buffer, &op->type))
  ------------------
  |  |   15|  1.53k|    {                           \
  |  |   16|  1.53k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.53k]
  |  |  ------------------
  |  |   17|  1.53k|    }
  ------------------
  851|  1.53k|    switch (op->type) {
  852|  1.06k|        case REVOKE_SPONSORSHIP_LEDGER_ENTRY:
  ------------------
  |  Branch (852:9): [True: 1.06k, False: 466]
  ------------------
  853|  1.06k|            PARSER_CHECK(parse_ledger_key(buffer, &op->ledger_key))
  ------------------
  |  |   15|  1.06k|    {                           \
  |  |   16|  1.06k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 1.05k]
  |  |  ------------------
  |  |   17|  1.06k|    }
  ------------------
  854|  1.05k|            return true;
  855|    465|        case REVOKE_SPONSORSHIP_SIGNER:
  ------------------
  |  Branch (855:9): [True: 465, False: 1.06k]
  ------------------
  856|    465|            PARSER_CHECK(parse_account_id(buffer, &op->signer.account_id))
  ------------------
  |  |   15|    465|    {                           \
  |  |   16|    465|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 464]
  |  |  ------------------
  |  |   17|    465|    }
  ------------------
  857|    464|            PARSER_CHECK(parse_signer_key(buffer, &op->signer.signer_key))
  ------------------
  |  |   15|    464|    {                           \
  |  |   16|    464|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 462]
  |  |  ------------------
  |  |   17|    464|    }
  ------------------
  858|    462|            return true;
  859|      1|        default:
  ------------------
  |  Branch (859:9): [True: 1, False: 1.53k]
  ------------------
  860|      1|            return false;
  861|  1.53k|    }
  862|  1.53k|}
parser.c:parse_ledger_key:
  813|  1.06k|static bool parse_ledger_key(buffer_t *buffer, ledger_key_t *ledger_key) {
  814|  1.06k|    PARSER_CHECK(parse_uint32(buffer, &ledger_key->type))
  ------------------
  |  |   15|  1.06k|    {                           \
  |  |   16|  1.06k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 1.06k]
  |  |  ------------------
  |  |   17|  1.06k|    }
  ------------------
  815|  1.06k|    switch (ledger_key->type) {
  816|    256|        case ACCOUNT:
  ------------------
  |  Branch (816:9): [True: 256, False: 811]
  ------------------
  817|    256|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->account.account_id))
  ------------------
  |  |   15|    256|    {                           \
  |  |   16|    256|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 255]
  |  |  ------------------
  |  |   17|    256|    }
  ------------------
  818|    255|            return true;
  819|    160|        case TRUSTLINE:
  ------------------
  |  Branch (819:9): [True: 160, False: 907]
  ------------------
  820|    160|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->trust_line.account_id))
  ------------------
  |  |   15|    160|    {                           \
  |  |   16|    160|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 159]
  |  |  ------------------
  |  |   17|    160|    }
  ------------------
  821|    159|            PARSER_CHECK(parse_trust_line_asset(buffer, &ledger_key->trust_line.asset))
  ------------------
  |  |   15|    159|    {                           \
  |  |   16|    159|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 154]
  |  |  ------------------
  |  |   17|    159|    }
  ------------------
  822|    154|            return true;
  823|     38|        case OFFER:
  ------------------
  |  Branch (823:9): [True: 38, False: 1.02k]
  ------------------
  824|     38|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->offer.seller_id))
  ------------------
  |  |   15|     38|    {                           \
  |  |   16|     38|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 37]
  |  |  ------------------
  |  |   17|     38|    }
  ------------------
  825|     37|            PARSER_CHECK(parse_int64(buffer, &ledger_key->offer.offer_id))
  ------------------
  |  |   15|     37|    {                           \
  |  |   16|     37|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 36]
  |  |  ------------------
  |  |   17|     37|    }
  ------------------
  826|     36|            return true;
  827|    194|        case DATA:
  ------------------
  |  Branch (827:9): [True: 194, False: 873]
  ------------------
  828|    194|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->data.account_id))
  ------------------
  |  |   15|    194|    {                           \
  |  |   16|    194|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 193]
  |  |  ------------------
  |  |   17|    194|    }
  ------------------
  829|    193|            PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|    193|    {                           \
  |  |   16|    193|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 192]
  |  |  ------------------
  |  |   17|    193|    }
  ------------------
  830|    193|                                                 &ledger_key->data.data_name,
  831|    193|                                                 &ledger_key->data.data_name_size,
  832|    193|                                                 DATA_NAME_MAX_SIZE))
  833|    192|            return true;
  834|     68|        case CLAIMABLE_BALANCE:
  ------------------
  |  Branch (834:9): [True: 68, False: 999]
  ------------------
  835|     68|            PARSER_CHECK(
  ------------------
  |  |   15|     68|    {                           \
  |  |   16|     68|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 67]
  |  |  ------------------
  |  |   17|     68|    }
  ------------------
  836|     68|                parse_claimable_balance_id(buffer, &ledger_key->claimable_balance.balance_id))
  837|     67|            return true;
  838|    350|        case LIQUIDITY_POOL:
  ------------------
  |  Branch (838:9): [True: 350, False: 717]
  ------------------
  839|    350|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|    350|    {                           \
  |  |   16|    350|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 349]
  |  |  ------------------
  |  |   17|    350|    }
  ------------------
  840|    350|                                           &ledger_key->liquidity_pool.liquidity_pool_id,
  841|    350|                                           LIQUIDITY_POOL_ID_SIZE))
  842|       |
  843|    349|            return true;
  844|      1|        default:
  ------------------
  |  Branch (844:9): [True: 1, False: 1.06k]
  ------------------
  845|      1|            return false;
  846|  1.06k|    }
  847|  1.06k|}
parser.c:parse_trust_line_asset:
  342|    159|static bool parse_trust_line_asset(buffer_t *buffer, trust_line_asset_t *asset) {
  343|    159|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|    159|    {                           \
  |  |   16|    159|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 158]
  |  |  ------------------
  |  |   17|    159|    }
  ------------------
  344|    158|    switch (asset->type) {
  345|     83|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (345:9): [True: 83, False: 75]
  ------------------
  346|     83|            return true;
  347|      0|        }
  348|     21|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (348:9): [True: 21, False: 137]
  ------------------
  349|     21|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  350|      0|        }
  351|     18|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (351:9): [True: 18, False: 140]
  ------------------
  352|     18|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  353|      0|        }
  354|     35|        case ASSET_TYPE_POOL_SHARE: {
  ------------------
  |  Branch (354:9): [True: 35, False: 123]
  ------------------
  355|     35|            PARSER_CHECK(
  ------------------
  |  |   15|     35|    {                           \
  |  |   16|     35|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 34]
  |  |  ------------------
  |  |   17|     35|    }
  ------------------
  356|     35|                buffer_read_bytes(buffer, &asset->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  357|     34|            return true;
  358|     35|        }
  359|      1|        default:
  ------------------
  |  Branch (359:9): [True: 1, False: 157]
  ------------------
  360|      1|            return false;  // unknown asset type
  361|    158|    }
  362|    158|}
parser.c:parse_clawback:
  864|     57|static bool parse_clawback(buffer_t *buffer, clawback_op_t *op) {
  865|     57|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|     57|    {                           \
  |  |   16|     57|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 56]
  |  |  ------------------
  |  |   17|     57|    }
  ------------------
  866|     56|    PARSER_CHECK(parse_muxed_account(buffer, &op->from))
  ------------------
  |  |   15|     56|    {                           \
  |  |   16|     56|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 55]
  |  |  ------------------
  |  |   17|     56|    }
  ------------------
  867|     55|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|     55|    {                           \
  |  |   16|     55|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 54]
  |  |  ------------------
  |  |   17|     55|    }
  ------------------
  868|     54|    return true;
  869|     55|}
parser.c:parse_clawback_claimable_balance:
  872|    103|                                             clawback_claimable_balance_op_t *op) {
  873|    103|    PARSER_CHECK(parse_claimable_balance_id(buffer, &op->balance_id))
  ------------------
  |  |   15|    103|    {                           \
  |  |   16|    103|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 101]
  |  |  ------------------
  |  |   17|    103|    }
  ------------------
  874|    101|    return true;
  875|    103|}
parser.c:parse_set_trust_line_flags:
  877|    457|static bool parse_set_trust_line_flags(buffer_t *buffer, set_trust_line_flags_op_t *op) {
  878|    457|    PARSER_CHECK(parse_account_id(buffer, &op->trustor))
  ------------------
  |  |   15|    457|    {                           \
  |  |   16|    457|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 456]
  |  |  ------------------
  |  |   17|    457|    }
  ------------------
  879|    456|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|    456|    {                           \
  |  |   16|    456|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 455]
  |  |  ------------------
  |  |   17|    456|    }
  ------------------
  880|    455|    PARSER_CHECK(parse_uint32(buffer, &op->clear_flags))
  ------------------
  |  |   15|    455|    {                           \
  |  |   16|    455|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 454]
  |  |  ------------------
  |  |   17|    455|    }
  ------------------
  881|    454|    PARSER_CHECK(parse_uint32(buffer, &op->set_flags))
  ------------------
  |  |   15|    454|    {                           \
  |  |   16|    454|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 453]
  |  |  ------------------
  |  |   17|    454|    }
  ------------------
  882|    453|    return true;
  883|    454|}
parser.c:parse_liquidity_pool_deposit:
  885|     30|static bool parse_liquidity_pool_deposit(buffer_t *buffer, liquidity_pool_deposit_op_t *op) {
  886|     30|    PARSER_CHECK(buffer_read_bytes(buffer, &op->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  ------------------
  |  |   15|     30|    {                           \
  |  |   16|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 29]
  |  |  ------------------
  |  |   17|     30|    }
  ------------------
  887|     29|    PARSER_CHECK(parse_int64(buffer, &op->max_amount_a))
  ------------------
  |  |   15|     29|    {                           \
  |  |   16|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 28]
  |  |  ------------------
  |  |   17|     29|    }
  ------------------
  888|     28|    PARSER_CHECK(parse_int64(buffer, &op->max_amount_b))
  ------------------
  |  |   15|     28|    {                           \
  |  |   16|     28|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 27]
  |  |  ------------------
  |  |   17|     28|    }
  ------------------
  889|     27|    PARSER_CHECK(parse_price(buffer, &op->min_price))
  ------------------
  |  |   15|     27|    {                           \
  |  |   16|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 26]
  |  |  ------------------
  |  |   17|     27|    }
  ------------------
  890|     26|    PARSER_CHECK(parse_price(buffer, &op->max_price))
  ------------------
  |  |   15|     26|    {                           \
  |  |   16|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 24]
  |  |  ------------------
  |  |   17|     26|    }
  ------------------
  891|     24|    return true;
  892|     26|}
parser.c:parse_liquidity_pool_withdraw:
  894|    202|static bool parse_liquidity_pool_withdraw(buffer_t *buffer, liquidity_pool_withdraw_op_t *op) {
  895|    202|    PARSER_CHECK(buffer_read_bytes(buffer, &op->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  ------------------
  |  |   15|    202|    {                           \
  |  |   16|    202|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 200]
  |  |  ------------------
  |  |   17|    202|    }
  ------------------
  896|    200|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    200|    {                           \
  |  |   16|    200|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 199]
  |  |  ------------------
  |  |   17|    200|    }
  ------------------
  897|    199|    PARSER_CHECK(parse_int64(buffer, &op->min_amount_a))
  ------------------
  |  |   15|    199|    {                           \
  |  |   16|    199|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 198]
  |  |  ------------------
  |  |   17|    199|    }
  ------------------
  898|    198|    PARSER_CHECK(parse_int64(buffer, &op->min_amount_b))
  ------------------
  |  |   15|    198|    {                           \
  |  |   16|    198|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 197]
  |  |  ------------------
  |  |   17|    198|    }
  ------------------
  899|    197|    return true;
  900|    198|}
parser.c:parse_invoke_host_function:
 1035|    404|static bool parse_invoke_host_function(buffer_t *buffer, invoke_host_function_op_t *op) {
 1036|       |    // hostFunction
 1037|    404|    PARSER_CHECK(parse_uint32(buffer, &op->host_function_type));
  ------------------
  |  |   15|    404|    {                           \
  |  |   16|    404|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 403]
  |  |  ------------------
  |  |   17|    404|    }
  ------------------
 1038|    403|    PRINTF("host_function_type=%d\n", op->host_function_type);
 1039|    403|    switch (op->host_function_type) {
 1040|    251|        case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:
  ------------------
  |  Branch (1040:9): [True: 251, False: 152]
  ------------------
 1041|    251|            PARSER_CHECK(parse_invoke_contract_args(buffer, &op->invoke_contract_args))
  ------------------
  |  |   15|    251|    {                           \
  |  |   16|    251|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 242]
  |  |  ------------------
  |  |   17|    251|    }
  ------------------
 1042|    242|            break;
 1043|    242|        case HOST_FUNCTION_TYPE_CREATE_CONTRACT:
  ------------------
  |  Branch (1043:9): [True: 93, False: 310]
  ------------------
 1044|     93|            PARSER_CHECK(read_create_contract_args_advance(buffer))
  ------------------
  |  |   15|     93|    {                           \
  |  |   16|     93|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 81]
  |  |  ------------------
  |  |   17|     93|    }
  ------------------
 1045|     81|            break;
 1046|     81|        case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM: {
  ------------------
  |  Branch (1046:9): [True: 58, False: 345]
  ------------------
 1047|     58|            size_t data_size = 0;
 1048|     58|            PARSER_CHECK(parse_uint32(buffer, &data_size))
  ------------------
  |  |   15|     58|    {                           \
  |  |   16|     58|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 57]
  |  |  ------------------
  |  |   17|     58|    }
  ------------------
 1049|     57|            PARSER_CHECK(num_bytes(data_size, &data_size))
  ------------------
  |  |   15|     57|    {                           \
  |  |   16|     57|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 57]
  |  |  ------------------
  |  |   17|     57|    }
  ------------------
 1050|     57|            PARSER_CHECK(buffer_advance(buffer, data_size))
  ------------------
  |  |   15|     57|    {                           \
  |  |   16|     57|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 56]
  |  |  ------------------
  |  |   17|     57|    }
  ------------------
 1051|     56|            break;
 1052|     57|        }
 1053|     56|        default:
  ------------------
  |  Branch (1053:9): [True: 1, False: 402]
  ------------------
 1054|      1|            return false;
 1055|    403|    }
 1056|       |
 1057|       |    // auth<>
 1058|    379|    uint32_t auth_len;
 1059|    379|    uint8_t sub_invocations_count = 0;
 1060|    379|    PARSER_CHECK(parse_uint32(buffer, &auth_len))
  ------------------
  |  |   15|    379|    {                           \
  |  |   16|    379|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 375]
  |  |  ------------------
  |  |   17|    379|    }
  ------------------
 1061|    527|    for (uint32_t i = 0; i < auth_len; i++) {
  ------------------
  |  Branch (1061:26): [True: 194, False: 333]
  ------------------
 1062|       |        // PARSER_CHECK(read_soroban_authorization_entry_advance(buffer,
 1063|       |        //                                                       &sub_invocations_count,
 1064|       |        //                                                       op->sub_invocation_positions))
 1065|       |        // PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, count, positions))
 1066|       |        // 1. read credentials
 1067|    194|        uint32_t credentials_type;
 1068|    194|        PARSER_CHECK(read_parse_soroban_credentials_advance(buffer, &credentials_type))
  ------------------
  |  |   15|    194|    {                           \
  |  |   16|    194|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 184]
  |  |  ------------------
  |  |   17|    194|    }
  ------------------
 1069|       |        // 2. read rootInvocation.function
 1070|    184|        PARSER_CHECK(read_soroban_authorized_function_advance(buffer))
  ------------------
  |  |   15|    184|    {                           \
  |  |   16|    184|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 172]
  |  |  ------------------
  |  |   17|    184|    }
  ------------------
 1071|       |        // 3. read rootInvocation.subInvocations
 1072|       |        // subInvocations
 1073|    172|        uint32_t len;
 1074|    172|        PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|    172|    {                           \
  |  |   16|    172|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 171]
  |  |  ------------------
  |  |   17|    172|    }
  ------------------
 1075|    303|        for (uint32_t j = 0; j < len; j++) {
  ------------------
  |  Branch (1075:30): [True: 151, False: 152]
  ------------------
 1076|    151|            if (credentials_type == SOROBAN_CREDENTIALS_SOURCE_ACCOUNT) {
  ------------------
  |  Branch (1076:17): [True: 93, False: 58]
  ------------------
 1077|     93|                PARSER_CHECK(
  ------------------
  |  |   15|     93|    {                           \
  |  |   16|     93|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 83]
  |  |  ------------------
  |  |   17|     93|    }
  ------------------
 1078|     93|                    read_soroban_authorized_invocation_advance(buffer,
 1079|     93|                                                               &sub_invocations_count,
 1080|     93|                                                               op->sub_invocation_positions))
 1081|     93|            } else {
 1082|     58|                PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, NULL, NULL))
  ------------------
  |  |   15|     58|    {                           \
  |  |   16|     58|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 49]
  |  |  ------------------
  |  |   17|     58|    }
  ------------------
 1083|     58|            }
 1084|    151|        }
 1085|    171|    }
 1086|    333|    op->sub_invocations_count = sub_invocations_count;
 1087|       |
 1088|    333|    PRINTF("sub_invocations_count=%d\n", sub_invocations_count);
 1089|       |    // for (uint8_t i = 0; i < 16; i++) {
 1090|       |    //     PRINTF("sub_invocation_positions[%d]=%d\n", i, op->sub_invocation_positions[i]);
 1091|       |    // }
 1092|    333|    return true;
 1093|    375|}
parser.c:read_parse_soroban_credentials_advance:
  917|    194|static bool read_parse_soroban_credentials_advance(buffer_t *buffer, uint32_t *credentials_type) {
  918|    194|    PARSER_CHECK(parse_uint32(buffer, credentials_type))
  ------------------
  |  |   15|    194|    {                           \
  |  |   16|    194|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 191]
  |  |  ------------------
  |  |   17|    194|    }
  ------------------
  919|    191|    switch (*credentials_type) {
  920|    167|        case SOROBAN_CREDENTIALS_SOURCE_ACCOUNT:
  ------------------
  |  Branch (920:9): [True: 167, False: 24]
  ------------------
  921|       |            // void
  922|    167|            break;
  923|     21|        case SOROBAN_CREDENTIALS_ADDRESS: {
  ------------------
  |  Branch (923:9): [True: 21, False: 170]
  ------------------
  924|     21|            sc_address_t address;
  925|     21|            PARSER_CHECK(parse_sc_address(buffer, &address))
  ------------------
  |  |   15|     21|    {                           \
  |  |   16|     21|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 20]
  |  |  ------------------
  |  |   17|     21|    }
  ------------------
  926|       |            PARSER_CHECK(buffer_advance(buffer, 8))   // nonce
  ------------------
  |  |   15|     20|    {                           \
  |  |   16|     20|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 19]
  |  |  ------------------
  |  |   17|     20|    }
  ------------------
  927|       |            PARSER_CHECK(buffer_advance(buffer, 4))   // signatureExpirationLedger
  ------------------
  |  |   15|     19|    {                           \
  |  |   16|     19|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 18]
  |  |  ------------------
  |  |   17|     19|    }
  ------------------
  928|       |            PARSER_CHECK(read_scval_advance(buffer))  // signature
  ------------------
  |  |   15|     18|    {                           \
  |  |   16|     18|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 17]
  |  |  ------------------
  |  |   17|     18|    }
  ------------------
  929|     17|            break;
  930|     18|        }
  931|     17|        default:
  ------------------
  |  Branch (931:9): [True: 3, False: 188]
  ------------------
  932|      3|            return false;
  933|    191|    }
  934|    184|    return true;
  935|    191|}
parser.c:read_soroban_authorized_function_advance:
  994|  1.14k|static bool read_soroban_authorized_function_advance(buffer_t *buffer) {
  995|  1.14k|    uint32_t type;
  996|  1.14k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  1.14k|    {                           \
  |  |   16|  1.14k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 30, False: 1.11k]
  |  |  ------------------
  |  |   17|  1.14k|    }
  ------------------
  997|  1.11k|    switch (type) {
  998|  1.01k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN: {
  ------------------
  |  Branch (998:9): [True: 1.01k, False: 99]
  ------------------
  999|       |            // contractFn
 1000|  1.01k|            invoke_contract_args_t args;
 1001|  1.01k|            PARSER_CHECK(parse_invoke_contract_args(buffer, &args));
  ------------------
  |  |   15|  1.01k|    {                           \
  |  |   16|  1.01k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 998]
  |  |  ------------------
  |  |   17|  1.01k|    }
  ------------------
 1002|    998|            break;
 1003|  1.01k|        }
 1004|     83|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1004:9): [True: 83, False: 1.03k]
  ------------------
 1005|       |            // createContractHostFn
 1006|     83|            PARSER_CHECK(read_create_contract_args_advance(buffer));
  ------------------
  |  |   15|     83|    {                           \
  |  |   16|     83|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 69]
  |  |  ------------------
  |  |   17|     83|    }
  ------------------
 1007|     69|            break;
 1008|     16|        default:
  ------------------
  |  Branch (1008:9): [True: 16, False: 1.10k]
  ------------------
 1009|     16|            return false;
 1010|  1.11k|    }
 1011|  1.06k|    return true;
 1012|  1.11k|}
parser.c:parse_extend_footprint_ttl:
 1095|     74|static bool parse_extend_footprint_ttl(buffer_t *buffer, extend_footprint_ttl_op_t *op) {
 1096|     74|    PARSER_CHECK(parse_extension_point_v0(buffer))
  ------------------
  |  |   15|     74|    {                           \
  |  |   16|     74|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 72]
  |  |  ------------------
  |  |   17|     74|    }
  ------------------
 1097|     72|    PARSER_CHECK(parse_uint32(buffer, &op->extend_to))
  ------------------
  |  |   15|     72|    {                           \
  |  |   16|     72|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 71]
  |  |  ------------------
  |  |   17|     72|    }
  ------------------
 1098|     71|    return true;
 1099|     72|}
parser.c:parse_extension_point_v0:
  902|    356|static bool parse_extension_point_v0(buffer_t *buffer) {
  903|    356|    uint32_t v;
  904|    356|    PARSER_CHECK(parse_uint32(buffer, &v))
  ------------------
  |  |   15|    356|    {                           \
  |  |   16|    356|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 354]
  |  |  ------------------
  |  |   17|    356|    }
  ------------------
  905|    354|    if (v != 0) {
  ------------------
  |  Branch (905:9): [True: 1, False: 353]
  ------------------
  906|      1|        return false;
  907|      1|    }
  908|    353|    return true;
  909|    354|}
parser.c:parse_restore_footprint:
  911|    282|static bool parse_restore_footprint(buffer_t *buffer, restore_footprint_op_t *op) {
  912|    282|    (void) op;
  913|    282|    PARSER_CHECK(parse_extension_point_v0(buffer))
  ------------------
  |  |   15|    282|    {                           \
  |  |   16|    282|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 281]
  |  |  ------------------
  |  |   17|    282|    }
  ------------------
  914|    281|    return true;
  915|    282|}
parser.c:parse_invoke_contract_args:
  962|  2.82k|static bool parse_invoke_contract_args(buffer_t *buffer, invoke_contract_args_t *args) {
  963|       |    // contractAddress
  964|  2.82k|    PARSER_CHECK(parse_sc_address(buffer, &args->address))
  ------------------
  |  |   15|  2.82k|    {                           \
  |  |   16|  2.82k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 115, False: 2.71k]
  |  |  ------------------
  |  |   17|  2.82k|    }
  ------------------
  965|       |    // functionName
  966|  2.71k|    PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  2.71k|    {                           \
  |  |   16|  2.71k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 157, False: 2.55k]
  |  |  ------------------
  |  |   17|  2.71k|    }
  ------------------
  967|  2.71k|                                         &args->function.name,
  968|  2.71k|                                         &args->function.name_size,
  969|  2.71k|                                         SCV_SYMBOL_MAX_SIZE))
  970|       |
  971|       |    // args
  972|  2.55k|    uint32_t args_len;
  973|  2.55k|    PARSER_CHECK(parse_uint32(buffer, &args_len))
  ------------------
  |  |   15|  2.55k|    {                           \
  |  |   16|  2.55k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 2.55k]
  |  |  ------------------
  |  |   17|  2.55k|    }
  ------------------
  974|       |
  975|  2.55k|    args->parameters_length = args_len;
  976|  2.55k|    args->parameters_position = buffer->offset;
  977|       |
  978|  2.55k|    if (args_len > HOST_FUNCTION_ARGS_MAX_LENGTH) {
  ------------------
  |  |   36|  2.55k|#define HOST_FUNCTION_ARGS_MAX_LENGTH 10
  ------------------
  |  Branch (978:9): [True: 58, False: 2.49k]
  ------------------
  979|       |        // We dont support more than 10 arguments
  980|     58|        return false;
  981|     58|    }
  982|       |
  983|       |    // PRINTF("function_name.text_size=%d, function_name.text=%s, args->parameters_length=%d\n",
  984|       |    //        args->function.name_size,
  985|       |    //        args->function.name,
  986|       |    //        args->parameters_length);
  987|       |
  988|  6.62k|    for (uint32_t i = 0; i < args_len; i++) {
  ------------------
  |  Branch (988:26): [True: 4.19k, False: 2.42k]
  ------------------
  989|  4.19k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  4.19k|    {                           \
  |  |   16|  4.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 63, False: 4.12k]
  |  |  ------------------
  |  |   17|  4.19k|    }
  ------------------
  990|  4.19k|    }
  991|  2.42k|    return true;
  992|  2.49k|}
parser.c:read_create_contract_args_advance:
  937|    228|static bool read_create_contract_args_advance(buffer_t *buffer) {
  938|       |    // contract_id_preimage
  939|    228|    uint32_t type;
  940|    228|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|    228|    {                           \
  |  |   16|    228|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 222]
  |  |  ------------------
  |  |   17|    228|    }
  ------------------
  941|    222|    switch (type) {
  942|    173|        case CONTRACT_ID_PREIMAGE_FROM_ADDRESS: {
  ------------------
  |  |  489|    173|#define CONTRACT_ID_PREIMAGE_FROM_ADDRESS 0
  ------------------
  |  Branch (942:9): [True: 173, False: 49]
  ------------------
  943|    173|            sc_address_t address;
  944|    173|            PARSER_CHECK(parse_sc_address(buffer, &address))
  ------------------
  |  |   15|    173|    {                           \
  |  |   16|    173|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 170]
  |  |  ------------------
  |  |   17|    173|    }
  ------------------
  945|       |            PARSER_CHECK(buffer_advance(buffer, 32))  // salt
  ------------------
  |  |   15|    170|    {                           \
  |  |   16|    170|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 167]
  |  |  ------------------
  |  |   17|    170|    }
  ------------------
  946|    167|            break;
  947|    170|        }
  948|    167|        case CONTRACT_ID_PREIMAGE_FROM_ASSET: {
  ------------------
  |  |  490|     45|#define CONTRACT_ID_PREIMAGE_FROM_ASSET   1
  ------------------
  |  Branch (948:9): [True: 45, False: 177]
  ------------------
  949|     45|            asset_t asset;
  950|     45|            PARSER_CHECK(parse_asset(buffer, &asset))
  ------------------
  |  |   15|     45|    {                           \
  |  |   16|     45|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 31]
  |  |  ------------------
  |  |   17|     45|    }
  ------------------
  951|     31|            break;
  952|     45|        }
  953|     31|        default:
  ------------------
  |  Branch (953:9): [True: 4, False: 218]
  ------------------
  954|      4|            return false;
  955|    222|    }
  956|       |
  957|       |    // executable
  958|    198|    PARSER_CHECK(read_contract_executable_advance(buffer))
  ------------------
  |  |   15|    198|    {                           \
  |  |   16|    198|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 192]
  |  |  ------------------
  |  |   17|    198|    }
  ------------------
  959|    192|    return true;
  960|    198|}
parser.c:read_soroban_authorized_invocation_advance:
 1016|    965|                                                       size_t *positions) {
 1017|    965|    if (count != NULL && positions != NULL) {
  ------------------
  |  Branch (1017:9): [True: 900, False: 65]
  |  Branch (1017:26): [True: 900, False: 0]
  ------------------
 1018|    900|        if (*count >= MAX_SUB_INVOCATIONS_SIZE) {
  ------------------
  |  |   44|    900|#define MAX_SUB_INVOCATIONS_SIZE 16
  ------------------
  |  Branch (1018:13): [True: 2, False: 898]
  ------------------
 1019|      2|            return false;
 1020|      2|        }
 1021|    898|        positions[(*count)++] = buffer->offset;
 1022|    898|    }
 1023|       |    // function
 1024|    963|    PARSER_CHECK(read_soroban_authorized_function_advance(buffer))
  ------------------
  |  |   15|    963|    {                           \
  |  |   16|    963|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 68, False: 895]
  |  |  ------------------
  |  |   17|    963|    }
  ------------------
 1025|       |
 1026|       |    // subInvocations
 1027|    895|    uint32_t len;
 1028|    895|    PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|    895|    {                           \
  |  |   16|    895|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 891]
  |  |  ------------------
  |  |   17|    895|    }
  ------------------
 1029|  1.28k|    for (uint32_t i = 0; i < len; i++) {
  ------------------
  |  Branch (1029:26): [True: 427, False: 862]
  ------------------
 1030|    427|        PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, count, positions))
  ------------------
  |  |   15|    427|    {                           \
  |  |   16|    427|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 29, False: 398]
  |  |  ------------------
  |  |   17|    427|    }
  ------------------
 1031|    427|    }
 1032|    862|    return true;
 1033|    891|}

crc16:
   15|  3.88k|uint16_t crc16(const uint8_t *input_str, uint32_t num_bytes) {
   16|  3.88k|    uint16_t crc = 0;
   17|   133k|    while (num_bytes-- > 0) {
  ------------------
  |  Branch (17:12): [True: 129k, False: 3.88k]
  ------------------
   18|   129k|        crc = crc ^ (uint32_t) *input_str++ << 8;
   19|   129k|        int i = 8;
   20|  1.03M|        do {
   21|  1.03M|            if (crc & 0x8000)
  ------------------
  |  Branch (21:17): [True: 508k, False: 528k]
  ------------------
   22|   508k|                crc = crc << 1 ^ 0x1021;
   23|   528k|            else
   24|   528k|                crc = crc << 1;
   25|  1.03M|        } while (--i);
  ------------------
  |  Branch (25:18): [True: 907k, False: 129k]
  ------------------
   26|   129k|    }
   27|  3.88k|    return crc;
   28|  3.88k|}
encode_key:
   30|  3.81k|bool encode_key(const uint8_t *in, uint8_t version_byte, char *out, uint8_t out_len) {
   31|  3.81k|    if (in == NULL || out_len < 56 + 1) {
  ------------------
  |  Branch (31:9): [True: 0, False: 3.81k]
  |  Branch (31:23): [True: 0, False: 3.81k]
  ------------------
   32|      0|        return false;
   33|      0|    }
   34|  3.81k|    uint8_t buffer[35] = {0};
   35|  3.81k|    buffer[0] = version_byte;
   36|   125k|    for (uint8_t i = 0; i < 32; i++) {
  ------------------
  |  Branch (36:25): [True: 122k, False: 3.81k]
  ------------------
   37|   122k|        buffer[i + 1] = in[i];
   38|   122k|    }
   39|  3.81k|    uint16_t crc = crc16(buffer, 33);  // checksum
   40|  3.81k|    buffer[33] = crc;
   41|  3.81k|    buffer[34] = crc >> 8;
   42|  3.81k|    if (base32_encode(buffer, 35, (uint8_t *) out, 56) == -1) {
  ------------------
  |  Branch (42:9): [True: 0, False: 3.81k]
  ------------------
   43|      0|        return false;
   44|      0|    }
   45|  3.81k|    out[56] = '\0';
   46|  3.81k|    return true;
   47|  3.81k|}
encode_ed25519_public_key:
   51|  3.53k|                               size_t out_len) {
   52|  3.53k|    return encode_key(raw_public_key, VERSION_BYTE_ED25519_PUBLIC_KEY, out, out_len);
  ------------------
  |  |   25|  3.53k|#define VERSION_BYTE_ED25519_PUBLIC_KEY     6 << 3
  ------------------
   53|  3.53k|}
encode_hash_x_key:
   57|     14|                       size_t out_len) {
   58|     14|    return encode_key(raw_hash_x, VERSION_BYTE_HASH_X, out, out_len);
  ------------------
  |  |   28|     14|#define VERSION_BYTE_HASH_X                 23 << 3
  ------------------
   59|     14|}
encode_pre_auth_x_key:
   63|     16|                           size_t out_len) {
   64|     16|    return encode_key(raw_pre_auth_tx, VERSION_BYTE_PRE_AUTH_TX_KEY, out, out_len);
  ------------------
  |  |   27|     16|#define VERSION_BYTE_PRE_AUTH_TX_KEY        19 << 3
  ------------------
   65|     16|}
encode_contract:
   69|    248|                     size_t out_len) {
   70|    248|    return encode_key(raw_contract, VERSION_BYTE_CONTRACT, out, out_len);
  ------------------
  |  |   31|    248|#define VERSION_BYTE_CONTRACT               2 << 3
  ------------------
   71|    248|}
encode_ed25519_signed_payload:
   75|     27|                                   size_t out_len) {
   76|     27|    if (out_len < ED25519_SIGNED_PAYLOAD_MAX_LENGTH) {  // (103 * 8 + 4) / 5
  ------------------
  |  |   12|     27|#define ED25519_SIGNED_PAYLOAD_MAX_LENGTH 166  // include the null terminator
  ------------------
  |  Branch (76:9): [True: 0, False: 27]
  ------------------
   77|      0|        return false;
   78|      0|    }
   79|     27|    if (signed_payload->payload_len > 64 || signed_payload->payload_len <= 0) {
  ------------------
  |  Branch (79:9): [True: 0, False: 27]
  |  Branch (79:45): [True: 0, False: 27]
  ------------------
   80|      0|        return false;
   81|      0|    }
   82|     27|    uint8_t data_len = RAW_ED25519_PUBLIC_KEY_SIZE + 4 + signed_payload->payload_len +
  ------------------
  |  |   18|     27|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
   83|     27|                       ((4 - signed_payload->payload_len % 4) % 4);
   84|     27|    uint8_t buffer[1 + 32 + 4 + 64 + 2] = {0};
   85|     27|    buffer[0] = VERSION_BYTE_ED25519_SIGNED_PAYLOAD;
  ------------------
  |  |   30|     27|#define VERSION_BYTE_ED25519_SIGNED_PAYLOAD 15 << 3
  ------------------
   86|    891|    for (uint8_t i = 0; i < 32; i++) {
  ------------------
  |  Branch (86:25): [True: 864, False: 27]
  ------------------
   87|    864|        buffer[i + 1] = signed_payload->ed25519[i];
   88|    864|    }
   89|     27|    buffer[36] = signed_payload->payload_len;
   90|    829|    for (uint32_t i = 0; i < signed_payload->payload_len; i++) {
  ------------------
  |  Branch (90:26): [True: 802, False: 27]
  ------------------
   91|    802|        buffer[i + 37] = signed_payload->payload[i];
   92|    802|    }
   93|     27|    uint16_t crc = crc16(buffer, data_len + 1);  // checksum
   94|     27|    buffer[1 + data_len] = crc;
   95|     27|    buffer[1 + data_len + 1] = crc >> 8;
   96|     27|    int ret = base32_encode(buffer, data_len + 3, (uint8_t *) out, out_len);
   97|     27|    if (ret == -1) {
  ------------------
  |  Branch (97:9): [True: 0, False: 27]
  ------------------
   98|      0|        return false;
   99|      0|    }
  100|     27|    out[ret] = '\0';
  101|     27|    return true;
  102|     27|}
encode_muxed_account:
  104|    782|bool encode_muxed_account(const muxed_account_t *raw_muxed_account, char *out, size_t out_len) {
  105|    782|    if (raw_muxed_account == NULL) {
  ------------------
  |  Branch (105:9): [True: 0, False: 782]
  ------------------
  106|      0|        return false;
  107|      0|    }
  108|    782|    if (raw_muxed_account->type == KEY_TYPE_ED25519) {
  ------------------
  |  Branch (108:9): [True: 736, False: 46]
  ------------------
  109|    736|        return encode_ed25519_public_key(raw_muxed_account->ed25519, out, out_len);
  110|    736|    } else {
  111|     46|        if (out_len < ENCODED_MUXED_ACCOUNT_KEY_LENGTH) {
  ------------------
  |  |   16|     46|#define ENCODED_MUXED_ACCOUNT_KEY_LENGTH   70
  ------------------
  |  Branch (111:13): [True: 0, False: 46]
  ------------------
  112|      0|            return false;
  113|      0|        }
  114|     46|        uint8_t buffer[MUXED_ACCOUNT_MED_25519_SIZE] = {0};
  115|     46|        buffer[0] = VERSION_BYTE_MUXED_ACCOUNT;
  ------------------
  |  |   29|     46|#define VERSION_BYTE_MUXED_ACCOUNT          12 << 3
  ------------------
  116|     46|        memcpy(buffer + 1, raw_muxed_account->med25519.ed25519, RAW_ED25519_PUBLIC_KEY_SIZE);
  ------------------
  |  |   18|     46|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  117|    414|        for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (117:25): [True: 368, False: 46]
  ------------------
  118|    368|            buffer[33 + i] = raw_muxed_account->med25519.id >> 8 * (7 - i);
  119|    368|        }
  120|     46|        uint16_t crc = crc16(buffer, MUXED_ACCOUNT_MED_25519_SIZE - 2);  // checksum
  ------------------
  |  |   10|     46|#define MUXED_ACCOUNT_MED_25519_SIZE      43
  ------------------
  121|     46|        buffer[41] = crc;
  122|     46|        buffer[42] = crc >> 8;
  123|     46|        if (base32_encode(buffer,
  ------------------
  |  Branch (123:13): [True: 0, False: 46]
  ------------------
  124|     46|                          MUXED_ACCOUNT_MED_25519_SIZE,
  ------------------
  |  |   10|     46|#define MUXED_ACCOUNT_MED_25519_SIZE      43
  ------------------
  125|     46|                          (uint8_t *) out,
  126|     46|                          ENCODED_MUXED_ACCOUNT_KEY_LENGTH) == -1) {
  ------------------
  |  |   16|     46|#define ENCODED_MUXED_ACCOUNT_KEY_LENGTH   70
  ------------------
  127|      0|            return false;
  128|      0|        }
  129|     46|        out[69] = '\0';
  130|     46|        return true;
  131|     46|    }
  132|    782|}
print_binary:
  162|    144|                  uint8_t num_chars_r) {
  163|    144|    if (num_chars_l > 0) {
  ------------------
  |  Branch (163:9): [True: 19, False: 125]
  ------------------
  164|     19|        char buffer[BINARY_MAX_SIZE * 2 + 1];
  165|     19|        if (!format_hex(in, in_len, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (165:13): [True: 0, False: 19]
  ------------------
  166|      0|            return false;
  167|      0|        }
  168|     19|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  169|     19|    }
  170|    125|    return format_hex(in, in_len, out, out_len);
  171|    144|}
print_account_id:
  177|  2.80k|                      uint8_t num_chars_r) {
  178|  2.80k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (178:9): [True: 82, False: 2.71k]
  ------------------
  179|     82|        char buffer[ENCODED_ED25519_PUBLIC_KEY_LENGTH];
  180|     82|        if (!encode_ed25519_public_key(account_id, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (180:13): [True: 0, False: 82]
  ------------------
  181|      0|            return false;
  182|      0|        }
  183|     82|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  184|     82|    }
  185|  2.71k|    return encode_ed25519_public_key(account_id, out, out_len);
  186|  2.80k|}
print_contract_id:
  192|    248|                       uint8_t num_chars_r) {
  193|    248|    if (num_chars_l > 0) {
  ------------------
  |  Branch (193:9): [True: 0, False: 248]
  ------------------
  194|      0|        char buffer[ENCODED_CONTRACT_KEY_LENGTH];
  195|      0|        if (!encode_contract(contract_id, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (195:13): [True: 0, False: 0]
  ------------------
  196|      0|            return false;
  197|      0|        }
  198|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  199|      0|    }
  200|    248|    return encode_contract(contract_id, out, out_len);
  201|    248|}
print_hash_x_key:
  207|     14|                      uint8_t num_chars_r) {
  208|     14|    if (num_chars_l > 0) {
  ------------------
  |  Branch (208:9): [True: 0, False: 14]
  ------------------
  209|      0|        char buffer[ENCODED_HASH_X_KEY_LENGTH];
  210|      0|        if (!encode_hash_x_key(raw_hash_x, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|            return false;
  212|      0|        }
  213|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  214|      0|    }
  215|     14|    return encode_hash_x_key(raw_hash_x, out, out_len);
  216|     14|}
print_pre_auth_x_key:
  222|     16|                          uint8_t num_chars_r) {
  223|     16|    if (num_chars_l > 0) {
  ------------------
  |  Branch (223:9): [True: 0, False: 16]
  ------------------
  224|      0|        char buffer[ENCODED_PRE_AUTH_TX_KEY_LENGTH];
  225|      0|        if (!encode_pre_auth_x_key(raw_pre_auth_tx, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (225:13): [True: 0, False: 0]
  ------------------
  226|      0|            return false;
  227|      0|        }
  228|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  229|      0|    }
  230|     16|    return encode_pre_auth_x_key(raw_pre_auth_tx, out, out_len);
  231|     16|}
print_ed25519_signed_payload:
  237|     27|                                  uint8_t num_chars_r) {
  238|     27|    char tmp[ED25519_SIGNED_PAYLOAD_MAX_LENGTH];
  239|     27|    if (!encode_ed25519_signed_payload(signed_payload, tmp, sizeof(tmp))) {
  ------------------
  |  Branch (239:9): [True: 0, False: 27]
  ------------------
  240|      0|        return false;
  241|     27|    };
  242|       |
  243|     27|    if (num_chars_l > 0) {
  ------------------
  |  Branch (243:9): [True: 27, False: 0]
  ------------------
  244|     27|        if (out_len < num_chars_l + num_chars_r + 2 + 1) {
  ------------------
  |  Branch (244:13): [True: 0, False: 27]
  ------------------
  245|      0|            return false;
  246|      0|        }
  247|     27|        return print_summary(tmp, out, out_len, num_chars_l, num_chars_r);
  248|     27|    } else {
  249|      0|        if (strlcpy(out, tmp, out_len) >= out_len) {
  ------------------
  |  Branch (249:13): [True: 0, False: 0]
  ------------------
  250|      0|            return false;
  251|      0|        }
  252|      0|    }
  253|      0|    return true;
  254|     27|}
print_sc_address:
  260|    778|                      uint8_t num_chars_r) {
  261|    778|    if (sc_address->type == SC_ADDRESS_TYPE_ACCOUNT) {
  ------------------
  |  Branch (261:9): [True: 530, False: 248]
  ------------------
  262|    530|        return print_account_id(sc_address->address, out, out_len, num_chars_l, num_chars_r);
  263|    530|    } else {
  264|    248|        return print_contract_id(sc_address->address, out, out_len, num_chars_l, num_chars_r);
  265|    248|    }
  266|      0|    return true;
  267|    778|}
print_muxed_account:
  273|    782|                         uint8_t num_chars_r) {
  274|    782|    if (num_chars_l > 0) {
  ------------------
  |  Branch (274:9): [True: 86, False: 696]
  ------------------
  275|     86|        char buffer[ENCODED_MUXED_ACCOUNT_KEY_LENGTH];
  276|     86|        if (!encode_muxed_account(muxed_account, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (276:13): [True: 0, False: 86]
  ------------------
  277|      0|            return false;
  278|      0|        }
  279|     86|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  280|     86|    }
  281|    696|    return encode_muxed_account(muxed_account, out, out_len);
  282|    782|}
print_claimable_balance_id:
  288|     51|                                uint8_t num_chars_r) {
  289|     51|    if (out_len < (4 + CLAIMABLE_BALANCE_ID_SIZE) * 2 + 1) {
  ------------------
  |  |   48|     51|#define CLAIMABLE_BALANCE_ID_SIZE 32
  ------------------
  |  Branch (289:9): [True: 0, False: 51]
  ------------------
  290|      0|        return false;
  291|      0|    }
  292|     51|    uint8_t data[(4 + CLAIMABLE_BALANCE_ID_SIZE)];
  293|    255|    for (uint8_t i = 0; i < 4; i++) {
  ------------------
  |  Branch (293:25): [True: 204, False: 51]
  ------------------
  294|    204|        data[i] = claimable_balance_id_t->type >> (8 * (3 - i));
  295|    204|    }
  296|     51|    memcpy(data + 4, claimable_balance_id_t->v0, CLAIMABLE_BALANCE_ID_SIZE);
  ------------------
  |  |   48|     51|#define CLAIMABLE_BALANCE_ID_SIZE 32
  ------------------
  297|     51|    return print_binary(data, sizeof(data), out, out_len, num_chars_l, num_chars_r);
  298|     51|}
print_uint64_num:
  300|  11.3k|bool print_uint64_num(uint64_t num, char *out, size_t out_len) {
  301|  11.3k|    uint8_t data[8] = {0};
  302|   102k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (302:21): [True: 91.1k, False: 11.3k]
  ------------------
  303|  91.1k|        data[i] = num >> (8 * (7 - i));
  304|  91.1k|    }
  305|  11.3k|    return print_uint64(data, 0, out, out_len, false);
  306|  11.3k|}
print_int64_num:
  308|     26|bool print_int64_num(int64_t num, char *out, size_t out_len) {
  309|     26|    uint8_t data[8] = {0};
  310|    234|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (310:21): [True: 208, False: 26]
  ------------------
  311|    208|        data[i] = num >> (8 * (7 - i));
  312|    208|    }
  313|     26|    return print_int64(data, 0, out, out_len, false);
  314|     26|}
print_time:
  316|     59|bool print_time(uint64_t seconds, char *out, size_t out_len) {
  317|     59|    if (seconds > 253402300799) {
  ------------------
  |  Branch (317:9): [True: 12, False: 47]
  ------------------
  318|       |        // valid range 1970-01-01 00:00:00 - 9999-12-31 23:59:59
  319|     12|        return false;
  320|     12|    }
  321|     47|    char time_str[20] = {0};  // 1970-01-01 00:00:00
  322|       |
  323|     47|    if (out_len < sizeof(time_str)) {
  ------------------
  |  Branch (323:9): [True: 0, False: 47]
  ------------------
  324|      0|        return false;
  325|      0|    }
  326|     47|    struct tm tm;
  327|     47|    if (!gmtime_r((time_t *) &seconds, &tm)) {
  ------------------
  |  Branch (327:9): [True: 0, False: 47]
  ------------------
  328|      0|        return false;
  329|     47|    };
  330|       |
  331|     47|    if (snprintf(time_str,
  ------------------
  |  Branch (331:9): [True: 0, False: 47]
  ------------------
  332|     47|                 sizeof(time_str),
  333|     47|                 "%04d-%02d-%02d %02d:%02d:%02d",
  334|     47|                 tm.tm_year + 1900,
  335|     47|                 tm.tm_mon + 1,
  336|     47|                 tm.tm_mday,
  337|     47|                 tm.tm_hour,
  338|     47|                 tm.tm_min,
  339|     47|                 tm.tm_sec) < 0) {
  340|      0|        return false;
  341|     47|    };
  342|     47|    if (strlcpy(out, time_str, out_len) >= out_len) {
  ------------------
  |  Branch (342:9): [True: 0, False: 47]
  ------------------
  343|      0|        return false;
  344|      0|    }
  345|     47|    return true;
  346|     47|}
print_asset_name:
  348|  2.96k|bool print_asset_name(const asset_t *asset, uint8_t network_id, char *out, size_t out_len) {
  349|  2.96k|    switch (asset->type) {
  350|  2.88k|        case ASSET_TYPE_NATIVE:
  ------------------
  |  Branch (350:9): [True: 2.88k, False: 85]
  ------------------
  351|  2.88k|            if (network_id == NETWORK_TYPE_UNKNOWN) {
  ------------------
  |  |   59|  2.88k|#define NETWORK_TYPE_UNKNOWN 2
  ------------------
  |  Branch (351:17): [True: 2.73k, False: 142]
  ------------------
  352|  2.73k|                if (strlcpy(out, "native", out_len) >= out_len) {
  ------------------
  |  Branch (352:21): [True: 0, False: 2.73k]
  ------------------
  353|      0|                    return false;
  354|      0|                }
  355|  2.73k|            } else {
  356|    142|                if (strlcpy(out, "XLM", out_len) >= out_len) {
  ------------------
  |  Branch (356:21): [True: 0, False: 142]
  ------------------
  357|      0|                    return false;
  358|      0|                }
  359|    142|            }
  360|  2.88k|            return true;
  361|     54|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (361:9): [True: 54, False: 2.91k]
  ------------------
  362|    186|            for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (362:29): [True: 161, False: 25]
  ------------------
  363|    161|                out[i] = asset->alpha_num4.asset_code[i];
  364|    161|                if (out[i] == 0) {
  ------------------
  |  Branch (364:21): [True: 29, False: 132]
  ------------------
  365|     29|                    break;
  366|     29|                }
  367|    161|            }
  368|     54|            out[4] = 0;
  369|     54|            return true;
  370|     31|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (370:9): [True: 31, False: 2.93k]
  ------------------
  371|     73|            for (int i = 0; i < 12; i++) {
  ------------------
  |  Branch (371:29): [True: 72, False: 1]
  ------------------
  372|     72|                out[i] = asset->alpha_num12.asset_code[i];
  373|     72|                if (out[i] == 0) {
  ------------------
  |  Branch (373:21): [True: 30, False: 42]
  ------------------
  374|     30|                    break;
  375|     30|                }
  376|     72|            }
  377|     31|            out[12] = 0;
  378|     31|            return true;
  379|      0|        default:
  ------------------
  |  Branch (379:9): [True: 0, False: 2.96k]
  ------------------
  380|      0|            return false;
  381|  2.96k|    }
  382|  2.96k|}
print_asset:
  384|  2.82k|bool print_asset(const asset_t *asset, uint8_t network_id, char *out, size_t out_len) {
  385|  2.82k|    char asset_code[12 + 1];
  386|  2.82k|    char asset_issuer[3 + 2 + 4 + 1];
  387|  2.82k|    print_asset_name(asset, network_id, asset_code, sizeof(asset_code));
  388|       |
  389|  2.82k|    switch (asset->type) {
  390|     51|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (390:9): [True: 51, False: 2.77k]
  ------------------
  391|     51|            print_account_id(asset->alpha_num4.issuer, asset_issuer, sizeof(asset_issuer), 3, 4);
  392|     51|            break;
  393|     31|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (393:9): [True: 31, False: 2.79k]
  ------------------
  394|     31|            print_account_id(asset->alpha_num12.issuer, asset_issuer, sizeof(asset_issuer), 3, 4);
  395|     31|            break;
  396|  2.74k|        default:
  ------------------
  |  Branch (396:9): [True: 2.74k, False: 82]
  ------------------
  397|  2.74k|            break;
  398|  2.82k|    }
  399|  2.82k|    if (strlcpy(out, asset_code, out_len) >= out_len) {
  ------------------
  |  Branch (399:9): [True: 0, False: 2.82k]
  ------------------
  400|      0|        return false;
  401|      0|    }
  402|  2.82k|    if (asset->type != ASSET_TYPE_NATIVE) {
  ------------------
  |  Branch (402:9): [True: 82, False: 2.74k]
  ------------------
  403|     82|        if (strlcat(out, "@", out_len) >= out_len) {
  ------------------
  |  Branch (403:13): [True: 0, False: 82]
  ------------------
  404|      0|            return false;
  405|      0|        }
  406|     82|        if (strlcat(out, asset_issuer, out_len) >= out_len) {
  ------------------
  |  Branch (406:13): [True: 0, False: 82]
  ------------------
  407|      0|            return false;
  408|      0|        }
  409|     82|    }
  410|  2.82k|    return true;
  411|  2.82k|}
print_flag:
  413|    181|bool print_flag(const char *flag, char *out, size_t out_len) {
  414|    181|    if (out[0]) {
  ------------------
  |  Branch (414:9): [True: 97, False: 84]
  ------------------
  415|     97|        if (strlcat(out, ", ", out_len) >= out_len) {
  ------------------
  |  Branch (415:13): [True: 0, False: 97]
  ------------------
  416|      0|            return false;
  417|      0|        }
  418|     97|    }
  419|    181|    if (strlcat(out, flag, out_len) >= out_len) {
  ------------------
  |  Branch (419:9): [True: 0, False: 181]
  ------------------
  420|      0|        return false;
  421|      0|    }
  422|    181|    return true;
  423|    181|}
print_account_flags:
  425|     55|bool print_account_flags(uint32_t flags, char *out, size_t out_len) {
  426|     55|    explicit_bzero(out, out_len);
  427|     55|    if (flags & 0x01u) {
  ------------------
  |  Branch (427:9): [True: 23, False: 32]
  ------------------
  428|     23|        if (!print_flag("AUTH_REQUIRED", out, out_len)) {
  ------------------
  |  Branch (428:13): [True: 0, False: 23]
  ------------------
  429|      0|            return false;
  430|      0|        }
  431|     23|    }
  432|     55|    if (flags & 0x02u) {
  ------------------
  |  Branch (432:9): [True: 19, False: 36]
  ------------------
  433|     19|        if (!print_flag("AUTH_REVOCABLE", out, out_len)) {
  ------------------
  |  Branch (433:13): [True: 0, False: 19]
  ------------------
  434|      0|            return false;
  435|      0|        }
  436|     19|    }
  437|     55|    if (flags & 0x04u) {
  ------------------
  |  Branch (437:9): [True: 18, False: 37]
  ------------------
  438|     18|        if (!print_flag("AUTH_IMMUTABLE", out, out_len)) {
  ------------------
  |  Branch (438:13): [True: 0, False: 18]
  ------------------
  439|      0|            return false;
  440|      0|        }
  441|     18|    }
  442|     55|    if (flags & 0x08u) {
  ------------------
  |  Branch (442:9): [True: 18, False: 37]
  ------------------
  443|     18|        if (!print_flag("AUTH_CLAWBACK_ENABLED", out, out_len)) {
  ------------------
  |  Branch (443:13): [True: 0, False: 18]
  ------------------
  444|      0|            return false;
  445|      0|        }
  446|     18|    }
  447|     55|    return true;
  448|     55|}
print_trust_line_flags:
  450|     93|bool print_trust_line_flags(uint32_t flags, char *out, size_t out_len) {
  451|     93|    explicit_bzero(out, out_len);
  452|     93|    if (flags & AUTHORIZED_FLAG) {
  ------------------
  |  Branch (452:9): [True: 42, False: 51]
  ------------------
  453|     42|        if (!print_flag("AUTHORIZED", out, out_len)) {
  ------------------
  |  Branch (453:13): [True: 0, False: 42]
  ------------------
  454|      0|            return false;
  455|      0|        }
  456|     42|    }
  457|     93|    if (flags & AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG) {
  ------------------
  |  Branch (457:9): [True: 35, False: 58]
  ------------------
  458|     35|        if (!print_flag("AUTHORIZED_TO_MAINTAIN_LIABILITIES", out, out_len)) {
  ------------------
  |  Branch (458:13): [True: 0, False: 35]
  ------------------
  459|      0|            return false;
  460|      0|        }
  461|     35|    }
  462|     93|    if (flags & TRUSTLINE_CLAWBACK_ENABLED_FLAG) {
  ------------------
  |  Branch (462:9): [True: 26, False: 67]
  ------------------
  463|     26|        if (!print_flag("TRUSTLINE_CLAWBACK_ENABLED", out, out_len)) {
  ------------------
  |  Branch (463:13): [True: 0, False: 26]
  ------------------
  464|      0|            return false;
  465|      0|        }
  466|     26|    }
  467|     93|    return true;
  468|     93|}
print_allow_trust_flags:
  470|     10|bool print_allow_trust_flags(uint32_t flag, char *out, size_t out_len) {
  471|     10|    explicit_bzero(out, out_len);
  472|     10|    if (flag & AUTHORIZED_FLAG) {
  ------------------
  |  Branch (472:9): [True: 1, False: 9]
  ------------------
  473|      1|        if (strlcpy(out, "AUTHORIZED", out_len) >= out_len) {
  ------------------
  |  Branch (473:13): [True: 0, False: 1]
  ------------------
  474|      0|            return false;
  475|      0|        }
  476|      9|    } else if (flag & AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG) {
  ------------------
  |  Branch (476:16): [True: 2, False: 7]
  ------------------
  477|      2|        if (strlcpy(out, "AUTHORIZED_TO_MAINTAIN_LIABILITIES", out_len) >= out_len) {
  ------------------
  |  Branch (477:13): [True: 0, False: 2]
  ------------------
  478|      0|            return false;
  479|      0|        }
  480|      7|    } else {
  481|      7|        if (strlcpy(out, "UNAUTHORIZED", out_len) >= out_len) {
  ------------------
  |  Branch (481:13): [True: 0, False: 7]
  ------------------
  482|      0|            return false;
  483|      0|        }
  484|      7|    }
  485|     10|    return true;
  486|     10|}
print_amount:
  492|  2.84k|                  size_t out_len) {
  493|  2.84k|    uint8_t data[8] = {0};
  494|  25.5k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (494:21): [True: 22.7k, False: 2.84k]
  ------------------
  495|  22.7k|        data[i] = amount >> (8 * (7 - i));
  496|  22.7k|    }
  497|       |
  498|  2.84k|    if (!print_uint64(data, 7, out, out_len, true)) {
  ------------------
  |  Branch (498:9): [True: 0, False: 2.84k]
  ------------------
  499|      0|        return false;
  500|      0|    }
  501|       |
  502|  2.84k|    if (asset) {
  ------------------
  |  Branch (502:9): [True: 2.59k, False: 246]
  ------------------
  503|  2.59k|        if (strlcat(out, " ", out_len) >= out_len) {
  ------------------
  |  Branch (503:13): [True: 0, False: 2.59k]
  ------------------
  504|      0|            return false;
  505|      0|        }
  506|  2.59k|        size_t length = strlen(out);
  507|  2.59k|        if (!print_asset(asset, network_id, out + length, out_len - length)) {
  ------------------
  |  Branch (507:13): [True: 0, False: 2.59k]
  ------------------
  508|      0|            return false;
  509|  2.59k|        };
  510|  2.59k|    }
  511|  2.84k|    return true;
  512|  2.84k|}
is_printable_binary:
  514|     62|bool is_printable_binary(const uint8_t *str, size_t str_len) {
  515|    414|    for (size_t i = 0; i < str_len; i++) {
  ------------------
  |  Branch (515:24): [True: 385, False: 29]
  ------------------
  516|    385|        if (str[i] > 0x7e || str[i] < 0x20) {
  ------------------
  |  Branch (516:13): [True: 11, False: 374]
  |  Branch (516:30): [True: 22, False: 352]
  ------------------
  517|     33|            return false;
  518|     33|        }
  519|    385|    }
  520|     29|    return true;
  521|     62|}
add_decimal_point:
  661|  14.6k|bool add_decimal_point(char *out, size_t out_len, uint8_t decimals) {
  662|  14.6k|    if (out == NULL || out_len == 0) {
  ------------------
  |  Branch (662:9): [True: 0, False: 14.6k]
  |  Branch (662:24): [True: 0, False: 14.6k]
  ------------------
  663|      0|        return false;
  664|      0|    }
  665|  14.6k|    if (decimals == 0) {
  ------------------
  |  Branch (665:9): [True: 11.7k, False: 2.84k]
  ------------------
  666|  11.7k|        return true;
  667|  11.7k|    }
  668|       |
  669|  2.84k|    bool is_negative = out[0] == '-';
  670|  2.84k|    char *start = is_negative ? out + 1 : out;
  ------------------
  |  Branch (670:19): [True: 1, False: 2.84k]
  ------------------
  671|       |
  672|  2.84k|    size_t len = strlen(start);
  673|  2.84k|    if (len == 0) {
  ------------------
  |  Branch (673:9): [True: 0, False: 2.84k]
  ------------------
  674|      0|        return true;
  675|      0|    }
  676|       |
  677|  2.84k|    if (is_negative) {
  ------------------
  |  Branch (677:9): [True: 1, False: 2.84k]
  ------------------
  678|      1|        if (decimals >= out_len - 2) {
  ------------------
  |  Branch (678:13): [True: 0, False: 1]
  ------------------
  679|       |            // Not enough space to add decimal point and leading zero.
  680|      0|            return false;
  681|      0|        }
  682|  2.84k|    } else {
  683|  2.84k|        if (decimals >= out_len - 1) {
  ------------------
  |  Branch (683:13): [True: 0, False: 2.84k]
  ------------------
  684|       |            // Not enough space to add decimal point.
  685|      0|            return false;
  686|      0|        }
  687|  2.84k|    }
  688|       |
  689|  2.84k|    if (len <= decimals) {
  ------------------
  |  Branch (689:9): [True: 2.07k, False: 774]
  ------------------
  690|       |        // Shift the number to the right and add leading zeros
  691|  2.07k|        memmove(start + decimals - len + 2, start, len + 1);
  692|  2.07k|        start[0] = '0';
  693|  2.07k|        start[1] = '.';
  694|  2.07k|        memset(start + 2, '0', decimals - len);
  695|  2.07k|    } else {
  696|       |        // Insert the decimal point at the appropriate position
  697|    774|        memmove(start + len - decimals + 1, start + len - decimals, decimals + 1);
  698|    774|        start[len - decimals] = '.';
  699|    774|    }
  700|       |
  701|       |    // Remove trailing zeros after decimal point
  702|  2.84k|    char *p = start + strlen(start) - 1;
  703|  12.5k|    while (p > start && *p == '0') {
  ------------------
  |  Branch (703:12): [True: 12.5k, False: 0]
  |  Branch (703:25): [True: 9.73k, False: 2.84k]
  ------------------
  704|  9.73k|        *p-- = '\0';
  705|  9.73k|    }
  706|       |
  707|       |    // Remove decimal point if it's the last character
  708|  2.84k|    if (p > start && *p == '.') {
  ------------------
  |  Branch (708:9): [True: 2.84k, False: 0]
  |  Branch (708:22): [True: 1.34k, False: 1.50k]
  ------------------
  709|  1.34k|        *p = '\0';
  710|  1.34k|    }
  711|       |
  712|       |    // Add the negative sign back if necessary
  713|  2.84k|    if (is_negative && out[0] != '-') {
  ------------------
  |  Branch (713:9): [True: 1, False: 2.84k]
  |  Branch (713:24): [True: 0, False: 1]
  ------------------
  714|      0|        memmove(out + 1, out, strlen(out) + 1);
  715|      0|        out[0] = '-';
  716|      0|    }
  717|       |
  718|  2.84k|    return true;
  719|  2.84k|}
add_separator_to_number:
  721|  3.20k|bool add_separator_to_number(char *out, size_t out_len) {
  722|  3.20k|    if (out == NULL || out_len == 0) {
  ------------------
  |  Branch (722:9): [True: 0, False: 3.20k]
  |  Branch (722:24): [True: 0, False: 3.20k]
  ------------------
  723|      0|        return false;
  724|      0|    }
  725|       |
  726|  3.20k|    size_t length = strlen(out);
  727|  3.20k|    uint8_t negative = (out[0] == '-') ? 1 : 0;  // Check if the number is negative
  ------------------
  |  Branch (727:24): [True: 59, False: 3.14k]
  ------------------
  728|       |
  729|       |    // Find the position of the decimal point
  730|  3.20k|    char *decimal_point = strchr(out, '.');
  731|  3.20k|    size_t decimal_index = decimal_point ? decimal_point - out : length;
  ------------------
  |  Branch (731:28): [True: 1.49k, False: 1.70k]
  ------------------
  732|       |
  733|       |    // Calculate the new length of the string with the commas
  734|  3.20k|    size_t new_length = 0;
  735|  3.20k|    if (negative) {
  ------------------
  |  Branch (735:9): [True: 59, False: 3.14k]
  ------------------
  736|     59|        if (decimal_index < 2) {
  ------------------
  |  Branch (736:13): [True: 0, False: 59]
  ------------------
  737|       |            // The string is too short to have a negative number
  738|      0|            return false;
  739|      0|        }
  740|     59|        new_length = decimal_index + (decimal_index - 2) / 3;
  741|  3.14k|    } else {
  742|  3.14k|        if (decimal_index < 1) {
  ------------------
  |  Branch (742:13): [True: 0, False: 3.14k]
  ------------------
  743|       |            // The string is too short to have a positive number
  744|      0|            return false;
  745|      0|        }
  746|  3.14k|        new_length = decimal_index + (decimal_index - 1) / 3;
  747|  3.14k|    }
  748|       |
  749|       |    // If the new length is greater than the maximum length, return false
  750|  3.20k|    if (new_length >= out_len || new_length >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  3.20k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (750:9): [True: 0, False: 3.20k]
  |  Branch (750:34): [True: 0, False: 3.20k]
  ------------------
  751|      0|        return false;
  752|      0|    }
  753|       |
  754|  3.20k|    char temp[NUMBER_WITH_COMMAS_MAX_LENGTH];
  755|  3.20k|    if (strlcpy(temp, out, NUMBER_WITH_COMMAS_MAX_LENGTH) >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  3.20k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
                  if (strlcpy(temp, out, NUMBER_WITH_COMMAS_MAX_LENGTH) >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  3.20k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (755:9): [True: 0, False: 3.20k]
  ------------------
  756|      0|        return false;
  757|      0|    }
  758|       |
  759|  3.20k|    temp[new_length] = '\0';  // Set the end of the new string
  760|       |
  761|       |    // Start from the end of the string and move the digits to their new positions
  762|  19.0k|    for (int i = decimal_index - 1, j = new_length - 1; i >= 0; i--, j--) {
  ------------------
  |  Branch (762:57): [True: 15.8k, False: 3.20k]
  ------------------
  763|  15.8k|        temp[j] = out[i];
  764|       |
  765|       |        // If the current position is a multiple of 3 and it's not the first digit, add a comma
  766|  15.8k|        if ((decimal_index - i) % 3 == 0 && i != negative && j > 0) {
  ------------------
  |  Branch (766:13): [True: 4.25k, False: 11.5k]
  |  Branch (766:45): [True: 3.84k, False: 408]
  |  Branch (766:62): [True: 3.80k, False: 35]
  ------------------
  767|  3.80k|            temp[--j] = ',';
  768|  3.80k|        }
  769|  15.8k|    }
  770|       |
  771|       |    // If there is a decimal point, append the part after the decimal point
  772|  3.20k|    if (decimal_point) {
  ------------------
  |  Branch (772:9): [True: 1.49k, False: 1.70k]
  ------------------
  773|  1.49k|        if (strlcpy(temp + new_length, decimal_point, NUMBER_WITH_COMMAS_MAX_LENGTH - new_length) >=
  ------------------
  |  |   13|  1.49k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (773:13): [True: 0, False: 1.49k]
  ------------------
  774|  1.49k|            NUMBER_WITH_COMMAS_MAX_LENGTH - new_length) {
  ------------------
  |  |   13|  1.49k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  775|      0|            return false;
  776|      0|        }
  777|  1.49k|    }
  778|       |
  779|  3.20k|    if (strlcpy(out, temp, out_len) >= out_len) {
  ------------------
  |  Branch (779:9): [True: 0, False: 3.20k]
  ------------------
  780|      0|        return false;
  781|      0|    }
  782|       |
  783|  3.20k|    return true;
  784|  3.20k|}
print_int32:
  790|     66|                 bool add_separator) {
  791|     66|    return int256_to_decimal(value, 4, out, out_len) && add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (791:12): [True: 66, False: 0]
  |  Branch (791:57): [True: 66, False: 0]
  ------------------
  792|     66|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (792:13): [True: 4, False: 62]
  |  Branch (792:31): [True: 62, False: 0]
  ------------------
  793|     66|}
print_uint32:
  799|     33|                  bool add_separator) {
  800|     33|    return uint256_to_decimal(value, 4, out, out_len) &&
  ------------------
  |  Branch (800:12): [True: 33, False: 0]
  ------------------
  801|     33|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (801:12): [True: 33, False: 0]
  ------------------
  802|     33|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (802:13): [True: 0, False: 33]
  |  Branch (802:31): [True: 33, False: 0]
  ------------------
  803|     33|}
print_int64:
  809|     78|                 bool add_separator) {
  810|     78|    return int256_to_decimal(value, 8, out, out_len) && add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (810:12): [True: 78, False: 0]
  |  Branch (810:57): [True: 78, False: 0]
  ------------------
  811|     78|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (811:13): [True: 26, False: 52]
  |  Branch (811:31): [True: 52, False: 0]
  ------------------
  812|     78|}
print_uint64:
  818|  14.2k|                  bool add_separator) {
  819|  14.2k|    return uint256_to_decimal(value, 8, out, out_len) &&
  ------------------
  |  Branch (819:12): [True: 14.2k, False: 0]
  ------------------
  820|  14.2k|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (820:12): [True: 14.2k, False: 0]
  ------------------
  821|  14.2k|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (821:13): [True: 11.3k, False: 2.85k]
  |  Branch (821:31): [True: 2.85k, False: 0]
  ------------------
  822|  14.2k|}
print_int128:
  828|    100|                  bool add_separator) {
  829|    100|    return int256_to_decimal(value, 16, out, out_len) &&
  ------------------
  |  Branch (829:12): [True: 100, False: 0]
  ------------------
  830|    100|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (830:12): [True: 100, False: 0]
  ------------------
  831|    100|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (831:13): [True: 0, False: 100]
  |  Branch (831:31): [True: 100, False: 0]
  ------------------
  832|    100|}
print_uint128:
  838|     35|                   bool add_separator) {
  839|     35|    return uint256_to_decimal(value, 16, out, out_len) &&
  ------------------
  |  Branch (839:12): [True: 35, False: 0]
  ------------------
  840|     35|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (840:12): [True: 35, False: 0]
  ------------------
  841|     35|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (841:13): [True: 0, False: 35]
  |  Branch (841:31): [True: 35, False: 0]
  ------------------
  842|     35|}
print_int256:
  848|     46|                  bool add_separator) {
  849|     46|    return int256_to_decimal(value, 32, out, out_len) &&
  ------------------
  |  Branch (849:12): [True: 46, False: 0]
  ------------------
  850|     46|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (850:12): [True: 46, False: 0]
  ------------------
  851|     46|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (851:13): [True: 0, False: 46]
  |  Branch (851:31): [True: 46, False: 0]
  ------------------
  852|     46|}
print_uint256:
  858|     25|                   bool add_separator) {
  859|     25|    return uint256_to_decimal(value, 32, out, out_len) &&
  ------------------
  |  Branch (859:12): [True: 25, False: 0]
  ------------------
  860|     25|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (860:12): [True: 25, False: 0]
  ------------------
  861|     25|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (861:13): [True: 0, False: 25]
  |  Branch (861:31): [True: 25, False: 0]
  ------------------
  862|     25|}
print_scv_symbol:
  864|     14|bool print_scv_symbol(const scv_symbol_t *scv_symbol, char *out, size_t out_len) {
  865|     14|    if (scv_symbol == NULL || out == NULL) {
  ------------------
  |  Branch (865:9): [True: 0, False: 14]
  |  Branch (865:31): [True: 0, False: 14]
  ------------------
  866|      0|        return false;
  867|      0|    }
  868|     14|    if (scv_symbol->size > SCV_SYMBOL_MAX_SIZE || scv_symbol->size > out_len - 1) {
  ------------------
  |  |   55|     28|#define SCV_SYMBOL_MAX_SIZE     32
  ------------------
  |  Branch (868:9): [True: 0, False: 14]
  |  Branch (868:51): [True: 0, False: 14]
  ------------------
  869|      0|        return false;
  870|      0|    }
  871|     14|    if (scv_symbol->size == 0) {
  ------------------
  |  Branch (871:9): [True: 12, False: 2]
  ------------------
  872|       |        // print empty symbol
  873|     12|        if (strlcpy(out, "[empty symbol]", out_len) >= out_len) {
  ------------------
  |  Branch (873:13): [True: 0, False: 12]
  ------------------
  874|      0|            return false;
  875|      0|        }
  876|     12|        return true;
  877|     12|    }
  878|      2|    if (!is_printable_binary(scv_symbol->symbol, scv_symbol->size)) {
  ------------------
  |  Branch (878:9): [True: 1, False: 1]
  ------------------
  879|      1|        return false;
  880|      1|    }
  881|      1|    if (!print_string(out, out_len, scv_symbol->symbol, scv_symbol->size)) {
  ------------------
  |  Branch (881:9): [True: 0, False: 1]
  ------------------
  882|      0|        return false;
  883|      0|    }
  884|      1|    return true;
  885|      1|}
print_scv_string:
  887|     40|bool print_scv_string(const scv_string_t *scv_string, char *out, size_t out_len) {
  888|     40|    if (scv_string == NULL || out == NULL) {
  ------------------
  |  Branch (888:9): [True: 0, False: 40]
  |  Branch (888:31): [True: 0, False: 40]
  ------------------
  889|      0|        return false;
  890|      0|    }
  891|       |
  892|     40|    if (scv_string->size == 0) {
  ------------------
  |  Branch (892:9): [True: 24, False: 16]
  ------------------
  893|       |        // print empty symbol
  894|     24|        if (strlcpy(out, "[empty string]", out_len) >= out_len) {
  ------------------
  |  Branch (894:13): [True: 0, False: 24]
  ------------------
  895|      0|            return false;
  896|      0|        }
  897|     24|        return true;
  898|     24|    }
  899|       |
  900|       |    // if the string is not printable, print [unprintable string]
  901|     16|    if (!is_printable_binary(scv_string->string, scv_string->size)) {
  ------------------
  |  Branch (901:9): [True: 15, False: 1]
  ------------------
  902|     15|        if (strlcpy(out, "[unprintable string]", out_len) >= out_len) {
  ------------------
  |  Branch (902:13): [True: 0, False: 15]
  ------------------
  903|      0|            return false;
  904|      0|        }
  905|     15|        return true;
  906|     15|    }
  907|       |
  908|      1|    size_t copy_len = scv_string->size;
  909|       |
  910|       |    // If the output buffer is large enough to hold the entire scv_string, copy it directly and
  911|       |    // append a null terminator.
  912|      1|    if (out_len > copy_len) {
  ------------------
  |  Branch (912:9): [True: 1, False: 0]
  ------------------
  913|      1|        memcpy(out, scv_string->string, copy_len);
  914|      1|        out[copy_len] = '\0';  // Ensure the string is null-terminated.
  915|      1|    } else {
  916|      0|        if (out_len < 3) {
  ------------------
  |  Branch (916:13): [True: 0, False: 0]
  ------------------
  917|      0|            return false;
  918|      0|        }
  919|       |        // Calculate the lengths of the beginning and end parts that can be displayed.
  920|      0|        size_t dots_len = 2;                 // The length of two dots.
  921|      0|        size_t available_len = out_len - 1;  // Subtract 1 to reserve space for the null terminator.
  922|      0|        size_t start_copy_len = available_len / 2;
  923|      0|        size_t end_copy_len = available_len - start_copy_len - dots_len;
  924|       |
  925|       |        // Copy the beginning part of the string.
  926|      0|        memcpy(out, scv_string->string, start_copy_len);
  927|      0|        out[start_copy_len] = '.';
  928|      0|        out[start_copy_len + 1] = '.';
  929|       |
  930|       |        // Copy the end part of the string if there is space for it after the dots.
  931|      0|        if (end_copy_len > 0) {
  ------------------
  |  Branch (931:13): [True: 0, False: 0]
  ------------------
  932|      0|            memcpy(out + start_copy_len + dots_len,
  933|      0|                   scv_string->string + copy_len - end_copy_len,
  934|      0|                   end_copy_len);
  935|      0|        }
  936|       |
  937|       |        // Ensure the output string is null-terminated by placing a null character at the end of the
  938|       |        // buffer.
  939|      0|        out[out_len - 1] = '\0';
  940|      0|    }
  941|       |
  942|      1|    return true;
  943|      1|}
print_string:
  945|    860|bool print_string(char *out, size_t out_len, const uint8_t *src, size_t src_size) {
  946|    860|    if (out == NULL || src == NULL || out_len == 0) {
  ------------------
  |  Branch (946:9): [True: 0, False: 860]
  |  Branch (946:24): [True: 0, False: 860]
  |  Branch (946:39): [True: 0, False: 860]
  ------------------
  947|      0|        return false;
  948|      0|    }
  949|    860|    if (src_size + 1 > out_len) {
  ------------------
  |  Branch (949:9): [True: 0, False: 860]
  ------------------
  950|      0|        return false;
  951|      0|    }
  952|    860|    memcpy(out, src, src_size);
  953|    860|    out[src_size] = '\0';
  954|    860|    return true;
  955|    860|}
print_price:
  962|     85|                 size_t out_len) {
  963|     85|    uint64_t scaled_price = ((uint64_t) price->n * 10000000) / price->d;
  964|     85|    if (!print_amount(scaled_price, NULL, network_id, out, out_len)) {
  ------------------
  |  Branch (964:9): [True: 0, False: 85]
  ------------------
  965|      0|        return false;
  966|      0|    }
  967|       |
  968|     85|    if (asset_a != NULL && asset_b != NULL) {
  ------------------
  |  Branch (968:9): [True: 69, False: 16]
  |  Branch (968:28): [True: 69, False: 0]
  ------------------
  969|     69|        char tmp_asset_code[ASSET_CODE_MAX_LENGTH] = {0};
  970|     69|        if (strlcat(out, " ", out_len) >= out_len ||
  ------------------
  |  Branch (970:13): [True: 0, False: 69]
  ------------------
  971|     69|            !print_asset_name(asset_a, network_id, tmp_asset_code, sizeof(tmp_asset_code)) ||
  ------------------
  |  Branch (971:13): [True: 0, False: 69]
  ------------------
  972|     69|            strlcat(out, tmp_asset_code, out_len) >= out_len ||
  ------------------
  |  Branch (972:13): [True: 0, False: 69]
  ------------------
  973|     69|            strlcat(out, "/", out_len) >= out_len ||
  ------------------
  |  Branch (973:13): [True: 0, False: 69]
  ------------------
  974|     69|            !print_asset_name(asset_b, network_id, tmp_asset_code, sizeof(tmp_asset_code)) ||
  ------------------
  |  Branch (974:13): [True: 0, False: 69]
  ------------------
  975|     69|            strlcat(out, tmp_asset_code, out_len) >= out_len) {
  ------------------
  |  Branch (975:13): [True: 0, False: 69]
  ------------------
  976|      0|            return false;
  977|      0|        }
  978|     69|    }
  979|     85|    return true;
  980|     85|}
printer.c:print_summary:
  138|    214|                          uint8_t num_chars_r) {
  139|    214|    uint8_t result_len = num_chars_l + num_chars_r + 2;
  140|    214|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (140:9): [True: 0, False: 214]
  ------------------
  141|      0|        return false;
  142|      0|    }
  143|    214|    uint16_t in_len = strlen(in);
  144|    214|    if (in_len > result_len) {
  ------------------
  |  Branch (144:9): [True: 214, False: 0]
  ------------------
  145|    214|        memcpy(out, in, num_chars_l);
  146|    214|        out[num_chars_l] = '.';
  147|    214|        out[num_chars_l + 1] = '.';
  148|    214|        memcpy(out + num_chars_l + 2, in + in_len - num_chars_r, num_chars_r);
  149|    214|        out[result_len] = '\0';
  150|    214|    } else {
  151|      0|        memcpy(out, in, in_len);
  152|      0|        out[in_len] = '\0';
  153|      0|    }
  154|    214|    return true;
  155|    214|}
printer.c:int256_to_decimal:
  595|    290|static bool int256_to_decimal(const uint8_t *value, size_t value_len, char *out, size_t out_len) {
  596|    290|    if (value_len > INT256_LENGTH) {
  ------------------
  |  |    9|    290|#define INT256_LENGTH                     32
  ------------------
  |  Branch (596:9): [True: 0, False: 290]
  ------------------
  597|       |        // Value length is bigger than INT256_LENGTH
  598|      0|        return false;
  599|      0|    }
  600|       |
  601|    290|    bool is_negative = (value[0] & 0x80) != 0;
  602|    290|    uint8_t n[INT256_LENGTH] = {0};
  603|       |
  604|    290|    if (is_negative) {
  ------------------
  |  Branch (604:9): [True: 60, False: 230]
  ------------------
  605|       |        // Compute the absolute value using two's complement
  606|     60|        bool carry = true;
  607|  1.46k|        for (size_t i = value_len; i-- > 0;) {
  ------------------
  |  Branch (607:36): [True: 1.40k, False: 60]
  ------------------
  608|  1.40k|            n[INT256_LENGTH - value_len + i] = ~value[i] + carry;
  ------------------
  |  |    9|  1.40k|#define INT256_LENGTH                     32
  ------------------
  609|  1.40k|            carry = carry && (value[i] == 0);
  ------------------
  |  Branch (609:21): [True: 701, False: 699]
  |  Branch (609:30): [True: 641, False: 60]
  ------------------
  610|  1.40k|        }
  611|    230|    } else {
  612|    230|        memcpy(n + INT256_LENGTH - value_len, value, value_len);
  ------------------
  |  |    9|    230|#define INT256_LENGTH                     32
  ------------------
  613|    230|    }
  614|       |
  615|    290|    char *p = out + out_len;
  616|    290|    size_t result_len = 0;
  617|       |
  618|  5.78k|    do {
  619|  5.78k|        if (p == out) {
  ------------------
  |  Branch (619:13): [True: 0, False: 5.78k]
  ------------------
  620|       |            // Not enough space in the output buffer
  621|      0|            return false;
  622|      0|        }
  623|       |
  624|  5.78k|        uint32_t remainder = 0;
  625|   191k|        for (size_t i = 0; i < INT256_LENGTH; ++i) {
  ------------------
  |  |    9|   191k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (625:28): [True: 185k, False: 5.78k]
  ------------------
  626|   185k|            uint32_t temp = (remainder << 8) | n[i];
  627|   185k|            n[i] = temp / 10;
  628|   185k|            remainder = temp % 10;
  629|   185k|        }
  630|       |
  631|  5.78k|        *--p = '0' + remainder;
  632|  5.78k|        result_len++;
  633|  5.78k|    } while (!allzeroes(n, INT256_LENGTH));
  ------------------
  |  |    9|  5.78k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (633:14): [True: 5.49k, False: 290]
  ------------------
  634|       |
  635|    290|    if (is_negative) {
  ------------------
  |  Branch (635:9): [True: 60, False: 230]
  ------------------
  636|     60|        if (p == out) {
  ------------------
  |  Branch (636:13): [True: 0, False: 60]
  ------------------
  637|       |            // Not enough space in the output buffer
  638|      0|            return false;
  639|      0|        }
  640|     60|        *--p = '-';
  641|     60|        result_len++;
  642|     60|    }
  643|       |
  644|    290|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (644:9): [True: 0, False: 290]
  ------------------
  645|       |        // Not enough space to hold the result and \0.
  646|      0|        return false;
  647|      0|    }
  648|       |
  649|    290|    memmove(out, p, result_len);
  650|    290|    out[result_len] = '\0';
  651|       |
  652|       |    // Clear the rest of the 'out' array
  653|       |    // Generally speaking, this is unnecessary,
  654|       |    // but handler_get_app_configuration requires that it must be followed by `\0`.
  655|    290|    if (result_len + 1 < out_len) {
  ------------------
  |  Branch (655:9): [True: 290, False: 0]
  ------------------
  656|    290|        memset(out + result_len + 1, 0, out_len - result_len - 1);
  657|    290|    }
  658|    290|    return true;
  659|    290|}
printer.c:allzeroes:
  523|  74.9k|static int allzeroes(const void *buf, size_t n) {
  524|  74.9k|    uint8_t *p = (uint8_t *) buf;
  525|  2.23M|    for (size_t i = 0; i < n; ++i) {
  ------------------
  |  Branch (525:24): [True: 2.21M, False: 14.6k]
  ------------------
  526|  2.21M|        if (p[i]) {
  ------------------
  |  Branch (526:13): [True: 60.3k, False: 2.15M]
  ------------------
  527|  60.3k|            return 0;
  528|  60.3k|        }
  529|  2.21M|    }
  530|  14.6k|    return 1;
  531|  74.9k|}
printer.c:uint256_to_decimal:
  533|  14.3k|static bool uint256_to_decimal(const uint8_t *value, size_t value_len, char *out, size_t out_len) {
  534|  14.3k|    if (value_len > INT256_LENGTH) {
  ------------------
  |  |    9|  14.3k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (534:9): [True: 0, False: 14.3k]
  ------------------
  535|      0|        return false;
  536|      0|    }
  537|       |
  538|  14.3k|    uint16_t n[16] = {0};
  539|       |    // Copy and right-align the number
  540|  14.3k|    memcpy((uint8_t *) n + INT256_LENGTH - value_len, value, value_len);
  ------------------
  |  |    9|  14.3k|#define INT256_LENGTH                     32
  ------------------
  541|       |
  542|       |    // Special case when value is 0
  543|  14.3k|    if (allzeroes(n, sizeof(n))) {
  ------------------
  |  Branch (543:9): [True: 1.80k, False: 12.5k]
  ------------------
  544|  1.80k|        if (out_len < 2) {
  ------------------
  |  Branch (544:13): [True: 0, False: 1.80k]
  ------------------
  545|       |            // Not enough space to hold "0" and \0.
  546|      0|            return false;
  547|      0|        }
  548|  1.80k|        out[0] = '0';
  549|  1.80k|        out[1] = '\0';
  550|  1.80k|        return true;
  551|  1.80k|    }
  552|       |
  553|       |    // Swap the byte order of each uint16_t element in the array
  554|   213k|    for (int i = 0; i < 16; i++) {
  ------------------
  |  Branch (554:21): [True: 200k, False: 12.5k]
  ------------------
  555|   200k|        n[i] = __builtin_bswap16(n[i]);
  556|   200k|    }
  557|       |
  558|  12.5k|    size_t result_len = 0;
  559|  12.5k|    int pos = out_len;
  560|       |
  561|  54.8k|    while (!allzeroes(n, sizeof(n))) {
  ------------------
  |  Branch (561:12): [True: 42.3k, False: 12.5k]
  ------------------
  562|  42.3k|        if (pos == 0) {
  ------------------
  |  Branch (562:13): [True: 0, False: 42.3k]
  ------------------
  563|      0|            return false;
  564|      0|        }
  565|  42.3k|        pos--;
  566|  42.3k|        result_len++;
  567|       |
  568|  42.3k|        uint32_t carry = 0;
  569|   719k|        for (int i = 0; i < 16; i++) {
  ------------------
  |  Branch (569:25): [True: 677k, False: 42.3k]
  ------------------
  570|   677k|            uint32_t digit = ((carry << 16) | n[i]);
  571|   677k|            n[i] = digit / 10;
  572|   677k|            carry = digit % 10;
  573|   677k|        }
  574|  42.3k|        out[pos] = '0' + carry;
  575|  42.3k|    }
  576|       |
  577|  12.5k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (577:9): [True: 0, False: 12.5k]
  ------------------
  578|       |        // Not enough space to hold the result and \0.
  579|      0|        return false;
  580|      0|    }
  581|       |
  582|       |    // Move the result to the beginning of the output buffer
  583|  12.5k|    memmove(out, out + pos, result_len);
  584|  12.5k|    out[result_len] = '\0';
  585|       |
  586|       |    // Clear the rest of the 'out' array
  587|       |    // Generally speaking, this is unnecessary,
  588|       |    // but handler_get_app_configuration requires that it must be followed by `\0`.
  589|  12.5k|    if (result_len + 1 < out_len) {
  ------------------
  |  Branch (589:9): [True: 12.5k, False: 0]
  ------------------
  590|  12.5k|        memset(out + result_len + 1, 0, out_len - result_len - 1);
  591|  12.5k|    }
  592|  12.5k|    return true;
  593|  12.5k|}

