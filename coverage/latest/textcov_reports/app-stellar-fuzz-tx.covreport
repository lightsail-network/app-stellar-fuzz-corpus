buffer_can_read:
   28|  1.22M|{
   29|  1.22M|    return buffer->size - buffer->offset >= n;
   30|  1.22M|}
buffer_seek_cur:
   44|  1.44M|{
   45|  1.44M|    if (buffer->offset + offset < buffer->offset ||  // overflow
  ------------------
  |  Branch (45:9): [True: 0, False: 1.44M]
  ------------------
   46|  1.44M|        buffer->offset + offset > buffer->size) {    // exceed buffer size
  ------------------
  |  Branch (46:9): [True: 711, False: 1.43M]
  ------------------
   47|    711|        return false;
   48|    711|    }
   49|       |
   50|  1.43M|    buffer->offset += offset;
   51|       |
   52|  1.43M|    return true;
   53|  1.44M|}
buffer_read_u32:
   97|   929k|{
   98|   929k|    if (!buffer_can_read(buffer, 4)) {
  ------------------
  |  Branch (98:9): [True: 3.70k, False: 926k]
  ------------------
   99|  3.70k|        *value = 0;
  100|       |
  101|  3.70k|        return false;
  102|  3.70k|    }
  103|       |
  104|   926k|    *value = ((endianness == BE) ? read_u32_be(buffer->ptr, buffer->offset)
  ------------------
  |  Branch (104:15): [True: 926k, False: 0]
  ------------------
  105|   926k|                                 : read_u32_le(buffer->ptr, buffer->offset));
  106|       |
  107|   926k|    buffer_seek_cur(buffer, 4);
  108|       |
  109|   926k|    return true;
  110|   929k|}
buffer_read_u64:
  113|  11.1k|{
  114|  11.1k|    if (!buffer_can_read(buffer, 8)) {
  ------------------
  |  Branch (114:9): [True: 24, False: 11.1k]
  ------------------
  115|     24|        *value = 0;
  116|       |
  117|     24|        return false;
  118|     24|    }
  119|       |
  120|  11.1k|    *value = ((endianness == BE) ? read_u64_be(buffer->ptr, buffer->offset)
  ------------------
  |  Branch (120:15): [True: 11.1k, False: 0]
  ------------------
  121|  11.1k|                                 : read_u64_le(buffer->ptr, buffer->offset));
  122|       |
  123|  11.1k|    buffer_seek_cur(buffer, 8);
  124|       |
  125|  11.1k|    return true;
  126|  11.1k|}

format_hex:
  157|    588|{
  158|    588|    if (out_len < 2 * in_len + 1) {
  ------------------
  |  Branch (158:9): [True: 0, False: 588]
  ------------------
  159|      0|        return -1;
  160|      0|    }
  161|       |
  162|    588|    const char hex[]   = "0123456789ABCDEF";
  163|    588|    size_t     i       = 0;
  164|    588|    int        written = 0;
  165|       |
  166|  20.4k|    while (i < in_len && (i * 2 + (2 + 1)) <= out_len) {
  ------------------
  |  Branch (166:12): [True: 19.8k, False: 588]
  |  Branch (166:26): [True: 19.8k, False: 0]
  ------------------
  167|  19.8k|        uint8_t high_nibble = (in[i] & 0xF0) >> 4;
  168|  19.8k|        *out                = hex[high_nibble];
  169|  19.8k|        out++;
  170|       |
  171|  19.8k|        uint8_t low_nibble = in[i] & 0x0F;
  172|  19.8k|        *out               = hex[low_nibble];
  173|  19.8k|        out++;
  174|       |
  175|  19.8k|        i++;
  176|  19.8k|        written += 2;
  177|  19.8k|    }
  178|       |
  179|    588|    *out = '\0';
  180|       |
  181|    588|    return written + 1;
  182|    588|}

read_u32_be:
   27|   926k|{
   28|   926k|    return (uint32_t) ptr[offset + 0] << 24 |  //
   29|   926k|           (uint32_t) ptr[offset + 1] << 16 |  //
   30|   926k|           (uint32_t) ptr[offset + 2] << 8 |   //
   31|   926k|           (uint32_t) ptr[offset + 3] << 0;
   32|   926k|}
read_u64_be:
   35|  11.1k|{
   36|  11.1k|    return (uint64_t) ptr[offset + 0] << 56 |  //
   37|  11.1k|           (uint64_t) ptr[offset + 1] << 48 |  //
   38|  11.1k|           (uint64_t) ptr[offset + 2] << 40 |  //
   39|  11.1k|           (uint64_t) ptr[offset + 3] << 32 |  //
   40|  11.1k|           (uint64_t) ptr[offset + 4] << 24 |  //
   41|  11.1k|           (uint64_t) ptr[offset + 5] << 16 |  //
   42|  11.1k|           (uint64_t) ptr[offset + 6] << 8 |   //
   43|  11.1k|           (uint64_t) ptr[offset + 7] << 0;
   44|  11.1k|}

LLVMFuzzerTestOneInput:
   23|  7.59k|int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   24|  7.59k|    envelope_t envelope;
   25|  7.59k|    bool data_exists = true;
   26|  7.59k|    bool is_op_header = false;
   27|  7.59k|    char detail_caption[DETAIL_CAPTION_MAX_LENGTH];
   28|  7.59k|    char detail_value[DETAIL_VALUE_MAX_LENGTH];
   29|  7.59k|    uint8_t signing_key[] = {0xe9, 0x33, 0x88, 0xbb, 0xfd, 0x2f, 0xbd, 0x11, 0x80, 0x6d, 0xd0,
   30|  7.59k|                             0xbd, 0x59, 0xce, 0xa9, 0x7,  0x9e, 0x7c, 0xc7, 0xc,  0xe7, 0xb1,
   31|  7.59k|                             0xe1, 0x54, 0xf1, 0x14, 0xcd, 0xfe, 0x4e, 0x46, 0x6e, 0xcd};
   32|       |
   33|  7.59k|    memset(&envelope, 0, sizeof(envelope_t));
   34|  7.59k|    if (parse_transaction_envelope(data, size, &envelope)) {
  ------------------
  |  Branch (34:9): [True: 2.89k, False: 4.70k]
  ------------------
   35|  2.89k|        formatter_data_t tx_fdata = {
   36|  2.89k|            .raw_data = data,
   37|  2.89k|            .raw_data_len = size,
   38|  2.89k|            .envelope = &envelope,
   39|  2.89k|            .caption = detail_caption,
   40|  2.89k|            .value = detail_value,
   41|  2.89k|            .signing_key = signing_key,
   42|  2.89k|            .caption_len = DETAIL_CAPTION_MAX_LENGTH,
  ------------------
  |  |    9|  2.89k|#define DETAIL_CAPTION_MAX_LENGTH 21
  ------------------
   43|  2.89k|            .value_len = DETAIL_VALUE_MAX_LENGTH,
  ------------------
  |  |   10|  2.89k|#define DETAIL_VALUE_MAX_LENGTH   105
  ------------------
   44|  2.89k|            .display_sequence = true,
   45|  2.89k|        };
   46|  2.89k|        reset_formatter();
   47|       |
   48|  86.2k|        while (true) {
   49|  86.2k|            if (!get_next_data(&tx_fdata, true, &data_exists, &is_op_header)) {
  ------------------
  |  Branch (49:17): [True: 111, False: 86.1k]
  ------------------
   50|    111|                break;
   51|    111|            }
   52|       |
   53|  86.1k|            if (!data_exists) {
  ------------------
  |  Branch (53:17): [True: 2.77k, False: 83.3k]
  ------------------
   54|  2.77k|                break;
   55|  2.77k|            }
   56|  86.1k|        }
   57|  2.89k|    }
   58|       |
   59|  7.59k|    memset(&envelope, 0, sizeof(envelope_t));
   60|  7.59k|    if (parse_soroban_authorization_envelope(data, size, &envelope)) {
  ------------------
  |  Branch (60:9): [True: 2.52k, False: 5.06k]
  ------------------
   61|  2.52k|        formatter_data_t auth_fdata = {
   62|  2.52k|            .raw_data = data,
   63|  2.52k|            .raw_data_len = size,
   64|  2.52k|            .envelope = &envelope,
   65|  2.52k|            .caption = detail_caption,
   66|  2.52k|            .value = detail_value,
   67|  2.52k|            .signing_key = signing_key,
   68|  2.52k|            .caption_len = DETAIL_CAPTION_MAX_LENGTH,
  ------------------
  |  |    9|  2.52k|#define DETAIL_CAPTION_MAX_LENGTH 21
  ------------------
   69|  2.52k|            .value_len = DETAIL_VALUE_MAX_LENGTH,
  ------------------
  |  |   10|  2.52k|#define DETAIL_VALUE_MAX_LENGTH   105
  ------------------
   70|  2.52k|            .display_sequence = true,
   71|  2.52k|            .plugin_check_presence = &plugin_check_presence,
   72|  2.52k|            .plugin_init_contract = &plugin_init_contract,
   73|  2.52k|            .plugin_query_data_pair_count = &plugin_query_data_pair_count,
   74|  2.52k|            .plugin_query_data_pair = &plugin_query_data_pair,
   75|  2.52k|        };
   76|       |
   77|  2.52k|        reset_formatter();
   78|       |
   79|  30.5k|        while (true) {
   80|  30.5k|            if (!get_next_data(&auth_fdata, true, &data_exists, &is_op_header)) {
  ------------------
  |  Branch (80:17): [True: 1.17k, False: 29.4k]
  ------------------
   81|  1.17k|                break;
   82|  1.17k|            }
   83|       |
   84|  29.4k|            if (!data_exists) {
  ------------------
  |  Branch (84:17): [True: 1.34k, False: 28.0k]
  ------------------
   85|  1.34k|                break;
   86|  1.34k|            }
   87|  29.4k|        }
   88|  2.52k|    }
   89|       |
   90|  7.59k|    return 0;
   91|  7.59k|}
fuzz_tx.c:plugin_check_presence:
   93|  5.39k|static bool plugin_check_presence(const uint8_t *contract_address) {
   94|  5.39k|    uint8_t expected[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   95|  5.39k|                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   96|  5.39k|                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
   97|  5.39k|    return memcmp(contract_address, expected, 32) == 0;
   98|  5.39k|}
fuzz_tx.c:plugin_init_contract:
  100|    392|stellar_plugin_result_t plugin_init_contract(const uint8_t *contract_address) {
  101|       |    // Build-in token plugin
  102|    392|    if (plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (102:9): [True: 392, False: 0]
  ------------------
  103|    392|        return STELLAR_PLUGIN_RESULT_OK;
  104|    392|    }
  105|      0|    return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  106|    392|}
fuzz_tx.c:plugin_query_data_pair_count:
  109|    392|                                                     uint8_t *data_pair_count) {
  110|       |    // Build-in token plugin
  111|    392|    if (plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (111:9): [True: 392, False: 0]
  ------------------
  112|    392|        *data_pair_count = 3;
  113|    392|        return STELLAR_PLUGIN_RESULT_OK;
  114|    392|    }
  115|      0|    return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  116|    392|}
fuzz_tx.c:plugin_query_data_pair:
  123|  1.17k|                                               uint8_t value_len) {
  124|  1.17k|    if (!plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (124:9): [True: 0, False: 1.17k]
  ------------------
  125|      0|        return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  126|      0|    }
  127|  1.17k|    switch (data_pair_index) {
  128|    392|        case 0:
  ------------------
  |  Branch (128:9): [True: 392, False: 784]
  ------------------
  129|    392|            strcpy(caption, "caption 0");
  130|    392|            strcpy(value, "value 0");
  131|    392|            break;
  132|    392|        case 1:
  ------------------
  |  Branch (132:9): [True: 392, False: 784]
  ------------------
  133|    392|            strcpy(caption, "caption 1");
  134|    392|            strcpy(value, "value 1");
  135|    392|            break;
  136|    392|        case 2:
  ------------------
  |  Branch (136:9): [True: 392, False: 784]
  ------------------
  137|    392|            strcpy(caption, "caption 2");
  138|    392|            strcpy(value, "value 2");
  139|    392|            break;
  140|      0|        default:
  ------------------
  |  Branch (140:9): [True: 0, False: 1.17k]
  ------------------
  141|      0|            return STELLAR_PLUGIN_RESULT_ERROR;
  142|  1.17k|    }
  143|  1.17k|    return STELLAR_PLUGIN_RESULT_OK;
  144|  1.17k|}

base32_encode:
   64|  23.1k|int base32_encode(const uint8_t *data, int length, uint8_t *result, int buf_size) {
   65|  23.1k|    if (length < 0 || length > (1 << 28)) {
  ------------------
  |  Branch (65:9): [True: 0, False: 23.1k]
  |  Branch (65:23): [True: 0, False: 23.1k]
  ------------------
   66|      0|        return -1;
   67|      0|    }
   68|  23.1k|    int count = 0;
   69|  23.1k|    if (length > 0) {
  ------------------
  |  Branch (69:9): [True: 23.1k, False: 0]
  ------------------
   70|  23.1k|        uint32_t buffer = data[0];
   71|  23.1k|        int next = 1;
   72|  23.1k|        int bits_left = 8;
   73|  1.33M|        while (count < buf_size && (bits_left > 0 || next < length)) {
  ------------------
  |  Branch (73:16): [True: 1.30M, False: 22.7k]
  |  Branch (73:37): [True: 1.16M, False: 140k]
  |  Branch (73:54): [True: 140k, False: 379]
  ------------------
   74|  1.30M|            if (bits_left < 5) {
  ------------------
  |  Branch (74:17): [True: 794k, False: 513k]
  ------------------
   75|   794k|                if (next < length) {
  ------------------
  |  Branch (75:21): [True: 793k, False: 370]
  ------------------
   76|   793k|                    buffer <<= 8;
   77|   793k|                    buffer |= data[next++] & 0xFF;
   78|   793k|                    bits_left += 8;
   79|   793k|                } else {
   80|    370|                    int pad = 5 - bits_left;
   81|    370|                    buffer <<= pad;
   82|    370|                    bits_left += pad;
   83|    370|                }
   84|   794k|            }
   85|  1.30M|            int index = 0x1F & (buffer >> (bits_left - 5));
   86|  1.30M|            bits_left -= 5;
   87|  1.30M|            result[count++] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"[index];
   88|  1.30M|        }
   89|  23.1k|    }
   90|  23.1k|    if (count < buf_size) {
  ------------------
  |  Branch (90:9): [True: 379, False: 22.7k]
  ------------------
   91|    379|        result[count] = '\000';
   92|    379|    }
   93|  23.1k|    return count;
   94|  23.1k|}

base64_encode:
   11|     70|bool base64_encode(const uint8_t *data, size_t in_len, char *out, size_t out_len) {
   12|     70|    size_t encoded_len = 4 * ((in_len + 2) / 3);
   13|     70|    if (encoded_len > out_len) {
  ------------------
  |  Branch (13:9): [True: 0, False: 70]
  ------------------
   14|      0|        return false;
   15|      0|    }
   16|       |
   17|    398|    for (unsigned int i = 0, j = 0; i < in_len;) {
  ------------------
  |  Branch (17:37): [True: 328, False: 70]
  ------------------
   18|    328|        uint32_t octet_a = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (18:28): [True: 328, False: 0]
  ------------------
   19|    328|        uint32_t octet_b = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (19:28): [True: 294, False: 34]
  ------------------
   20|    328|        uint32_t octet_c = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (20:28): [True: 280, False: 48]
  ------------------
   21|       |
   22|    328|        uint32_t triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;
   23|       |
   24|    328|        out[j++] = BASE64_ALPHABET[(triple >> 3 * 6) & 0x3F];
   25|    328|        out[j++] = BASE64_ALPHABET[(triple >> 2 * 6) & 0x3F];
   26|    328|        out[j++] = BASE64_ALPHABET[(triple >> 1 * 6) & 0x3F];
   27|    328|        out[j++] = BASE64_ALPHABET[(triple >> 0 * 6) & 0x3F];
   28|    328|    }
   29|       |
   30|    152|    for (int i = 0; i < BASE64_MOD_TABLE[in_len % 3]; i++) {
  ------------------
  |  Branch (30:21): [True: 82, False: 70]
  ------------------
   31|     82|        out[encoded_len - 1 - i] = '=';
   32|     82|    }
   33|       |
   34|     70|    out[encoded_len] = '\0';
   35|     70|    return true;
   36|     70|}

reset_formatter:
 2428|  5.41k|void reset_formatter(void) {
 2429|  5.41k|    explicit_bzero(formatter_stack, sizeof(formatter_stack));
 2430|  5.41k|    formatter_index = 0;
 2431|  5.41k|    current_data_index = 0;
 2432|  5.41k|}
get_next_data:
 2434|   116k|bool get_next_data(formatter_data_t *fdata, bool forward, bool *data_exists, bool *is_op_header) {
 2435|   116k|    if (current_data_index == 0 && formatter_index == 0 && !forward) {
  ------------------
  |  Branch (2435:9): [True: 45.2k, False: 71.5k]
  |  Branch (2435:36): [True: 5.41k, False: 39.8k]
  |  Branch (2435:60): [True: 0, False: 5.41k]
  ------------------
 2436|      0|        return false;
 2437|      0|    }
 2438|   116k|    explicit_bzero(fdata->caption, fdata->caption_len);
 2439|   116k|    explicit_bzero(fdata->value, fdata->value_len);
 2440|   116k|    *is_op_header = false;
 2441|   116k|    uint8_t total_data = get_data_count(fdata);
 2442|       |    // printf("current_data_index: %d, formatter_index: %d\n", current_data_index,
 2443|       |    // formatter_index);
 2444|   116k|    if (forward) {
  ------------------
  |  Branch (2444:9): [True: 116k, False: 0]
  ------------------
 2445|   116k|        if (current_data_index == 0 && formatter_index == 0) {
  ------------------
  |  Branch (2445:13): [True: 45.2k, False: 71.5k]
  |  Branch (2445:40): [True: 5.41k, False: 39.8k]
  ------------------
 2446|  5.41k|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|  5.41k|    {                           \
  |  |   31|  5.41k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.41k]
  |  |  ------------------
  |  |   32|  5.41k|    }
  ------------------
 2447|  5.41k|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2447:17): [True: 0, False: 5.41k]
  ------------------
 2448|      0|                return false;
 2449|      0|            }
 2450|  5.41k|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|  5.41k|    {                           \
  |  |   31|  5.41k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.41k]
  |  |  ------------------
  |  |   32|  5.41k|    }
  ------------------
 2451|  5.41k|            *data_exists = true;
 2452|   111k|        } else if (current_data_index < total_data - 1 &&
  ------------------
  |  Branch (2452:20): [True: 72.1k, False: 39.2k]
  ------------------
 2453|   111k|                   formatter_stack[formatter_index - 1] == NULL) {
  ------------------
  |  Branch (2453:20): [True: 17.8k, False: 54.2k]
  ------------------
 2454|  17.8k|            current_data_index++;
 2455|  17.8k|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|  17.8k|    {                           \
  |  |   31|  17.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17.8k]
  |  |  ------------------
  |  |   32|  17.8k|    }
  ------------------
 2456|  17.8k|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2456:17): [True: 0, False: 17.8k]
  ------------------
 2457|      0|                return false;
 2458|      0|            }
 2459|  17.8k|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|  17.8k|    {                           \
  |  |   31|  17.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 9, False: 17.8k]
  |  |  ------------------
  |  |   32|  17.8k|    }
  ------------------
 2460|  17.8k|            *is_op_header = true;
 2461|  17.8k|            *data_exists = true;
 2462|  93.5k|        } else if (current_data_index == total_data - 1 &&
  ------------------
  |  Branch (2462:20): [True: 39.2k, False: 54.2k]
  ------------------
 2463|  93.5k|                   formatter_stack[formatter_index - 1] == NULL) {
  ------------------
  |  Branch (2463:20): [True: 4.12k, False: 35.0k]
  ------------------
 2464|  4.12k|            formatter_index++;  // we can back from the approve page
 2465|  4.12k|            *data_exists = false;
 2466|  89.3k|        } else {
 2467|  89.3k|            FORMATTER_CHECK(formatter_stack[formatter_index - 1](fdata));
  ------------------
  |  |   30|  89.3k|    {                           \
  |  |   31|  89.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1.28k, False: 88.0k]
  |  |  ------------------
  |  |   32|  89.3k|    }
  ------------------
 2468|  88.0k|            *data_exists = true;
 2469|  88.0k|        }
 2470|   116k|    } else {
 2471|      0|        if (current_data_index == 0 && formatter_index == 2) {
  ------------------
  |  Branch (2471:13): [True: 0, False: 0]
  |  Branch (2471:40): [True: 0, False: 0]
  ------------------
 2472|      0|            formatter_index = 0;
 2473|      0|            *data_exists = false;
 2474|      0|        } else if (current_data_index > 0 && formatter_index == 2) {
  ------------------
  |  Branch (2474:20): [True: 0, False: 0]
  |  Branch (2474:46): [True: 0, False: 0]
  ------------------
 2475|      0|            current_data_index -= 1;
 2476|      0|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2477|      0|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2477:17): [True: 0, False: 0]
  ------------------
 2478|      0|                return false;
 2479|      0|            }
 2480|      0|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2481|      0|            *data_exists = true;
 2482|      0|            if (current_data_index > 0) {
  ------------------
  |  Branch (2482:17): [True: 0, False: 0]
  ------------------
 2483|      0|                *is_op_header = true;
 2484|      0|            }
 2485|      0|        } else {
 2486|      0|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2487|      0|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2487:17): [True: 0, False: 0]
  ------------------
 2488|      0|                return false;
 2489|      0|            }
 2490|      0|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2491|      0|            *data_exists = true;
 2492|      0|            if (current_data_index > 0) {
  ------------------
  |  Branch (2492:17): [True: 0, False: 0]
  ------------------
 2493|      0|                *is_op_header = true;
 2494|      0|            }
 2495|      0|        }
 2496|      0|    }
 2497|       |
 2498|   115k|    return true;
 2499|   116k|}
formatter.c:get_data_count:
 2420|   116k|static uint8_t get_data_count(formatter_data_t *fdata) {
 2421|   116k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2421:9): [True: 30.5k, False: 86.2k]
  ------------------
 2422|  30.5k|        return 1;
 2423|  30.5k|    }
 2424|  86.2k|    uint8_t op_cnt = fdata->envelope->tx_details.tx.operations_count;
 2425|  86.2k|    return op_cnt + 1;
 2426|   116k|}
formatter.c:format:
 2398|  23.3k|static bool format(formatter_data_t *fdata, uint8_t data_index) {
 2399|  23.3k|    explicit_bzero(formatter_stack, sizeof(formatter_stack));
 2400|  23.3k|    formatter_index = 0;
 2401|  23.3k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2401:9): [True: 2.52k, False: 20.7k]
  ------------------
 2402|  2.52k|        return format_soroban_authorization(fdata);
 2403|  20.7k|    } else {
 2404|  20.7k|        if (data_index == 0) {
  ------------------
  |  Branch (2404:13): [True: 2.89k, False: 17.8k]
  ------------------
 2405|  2.89k|            return format_transaction_info(fdata);
 2406|  17.8k|        } else {
 2407|  17.8k|            uint8_t op_index = data_index - 1;
 2408|  17.8k|            if (!parse_transaction_operation(fdata->raw_data,
  ------------------
  |  Branch (2408:17): [True: 0, False: 17.8k]
  ------------------
 2409|  17.8k|                                             fdata->raw_data_len,
 2410|  17.8k|                                             fdata->envelope,
 2411|  17.8k|                                             op_index)) {
 2412|      0|                return false;
 2413|  17.8k|            };
 2414|  17.8k|            FORMATTER_CHECK(push_to_formatter_stack(&format_confirm_operation))
  ------------------
  |  |   30|  17.8k|    {                           \
  |  |   31|  17.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17.8k]
  |  |  ------------------
  |  |   32|  17.8k|    }
  ------------------
 2415|  17.8k|        }
 2416|  20.7k|    }
 2417|  17.8k|    return true;
 2418|  23.3k|}
formatter.c:format_soroban_authorization:
 2389|  2.52k|static bool format_soroban_authorization(formatter_data_t *fdata) {
 2390|  2.52k|    if (fdata->envelope->network != 0) {
  ------------------
  |  Branch (2390:9): [True: 2.50k, False: 17]
  ------------------
 2391|  2.50k|        FORMATTER_CHECK(push_to_formatter_stack(&format_network))
  ------------------
  |  |   30|  2.50k|    {                           \
  |  |   31|  2.50k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.50k]
  |  |  ------------------
  |  |   32|  2.50k|    }
  ------------------
 2392|  2.50k|    } else {
 2393|     17|        FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_nonce))
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
 2394|     17|    }
 2395|  2.52k|    return true;
 2396|  2.52k|}
formatter.c:format_network:
 2369|  5.35k|static bool format_network(formatter_data_t *fdata) {
 2370|  5.35k|    STRLCPY(fdata->caption, "Network", fdata->caption_len);
  ------------------
  |  |   35|  5.35k|    {                                         \
  |  |   36|  5.35k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  5.35k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.35k]
  |  |  ------------------
  |  |   38|  5.35k|    }
  ------------------
 2371|  5.35k|    STRLCPY(fdata->value, (char *) PIC(NETWORK_NAMES[fdata->envelope->network]), fdata->value_len);
  ------------------
  |  |   35|  5.35k|    {                                         \
  |  |   36|  5.35k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  5.35k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.35k]
  |  |  ------------------
  |  |   38|  5.35k|    }
  ------------------
 2372|  5.35k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2372:9): [True: 2.50k, False: 2.84k]
  ------------------
 2373|  2.50k|        FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_nonce))
  ------------------
  |  |   30|  2.50k|    {                           \
  |  |   31|  2.50k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.50k]
  |  |  ------------------
  |  |   32|  2.50k|    }
  ------------------
 2374|  2.84k|    } else {
 2375|  2.84k|        return get_tx_details_formatter(fdata);
 2376|  2.84k|    }
 2377|  2.50k|    return true;
 2378|  5.35k|}
formatter.c:get_tx_details_formatter:
 2328|  2.89k|static bool get_tx_details_formatter(formatter_data_t *fdata) {
 2329|  2.89k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX_FEE_BUMP) {
  ------------------
  |  Branch (2329:9): [True: 30, False: 2.86k]
  ------------------
 2330|     30|        FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_details))
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 2331|     30|    }
 2332|       |
 2333|  2.89k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX) {
  ------------------
  |  Branch (2333:9): [True: 2.86k, False: 30]
  ------------------
 2334|  2.86k|        if (fdata->envelope->tx_details.tx.memo.type != MEMO_NONE) {
  ------------------
  |  Branch (2334:13): [True: 87, False: 2.77k]
  ------------------
 2335|     87|            FORMATTER_CHECK(push_to_formatter_stack(&format_memo))
  ------------------
  |  |   30|     87|    {                           \
  |  |   31|     87|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 87]
  |  |  ------------------
  |  |   32|     87|    }
  ------------------
 2336|  2.77k|        } else {
 2337|  2.77k|            FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|  2.77k|    {                           \
  |  |   31|  2.77k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.77k]
  |  |  ------------------
  |  |   32|  2.77k|    }
  ------------------
 2338|  2.77k|        }
 2339|  2.86k|    }
 2340|       |
 2341|  2.89k|    return true;
 2342|  2.89k|}
formatter.c:format_fee_bump_transaction_details:
 2320|     30|static bool format_fee_bump_transaction_details(formatter_data_t *fdata) {
 2321|     30|    (void) fdata;
 2322|     30|    STRLCPY(fdata->caption, "Fee Bump", fdata->caption_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
 2323|     30|    STRLCPY(fdata->value, "Transaction Details", fdata->value_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
 2324|     30|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_source))
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 2325|     30|    return true;
 2326|     30|}
formatter.c:format_fee_bump_transaction_source:
 2297|     30|static bool format_fee_bump_transaction_source(formatter_data_t *fdata) {
 2298|     30|    STRLCPY(fdata->caption, "Fee Source", fdata->caption_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
 2299|     30|    if (fdata->envelope->type == ENVELOPE_TYPE_TX_FEE_BUMP &&
  ------------------
  |  Branch (2299:9): [True: 30, False: 0]
  ------------------
 2300|     30|        fdata->envelope->tx_details.fee_bump_tx.fee_source.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (2300:9): [True: 28, False: 2]
  ------------------
 2301|     30|        memcmp(fdata->envelope->tx_details.fee_bump_tx.fee_source.ed25519,
  ------------------
  |  Branch (2301:9): [True: 5, False: 23]
  ------------------
 2302|     28|               fdata->signing_key,
 2303|     28|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|     28|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 2304|      5|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.fee_bump_tx.fee_source,
  ------------------
  |  |   30|      5|    {                           \
  |  |   31|      5|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   32|      5|    }
  ------------------
 2305|      5|                                            fdata->value,
 2306|      5|                                            fdata->value_len,
 2307|      5|                                            6,
 2308|      5|                                            6))
 2309|     25|    } else {
 2310|     25|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.fee_bump_tx.fee_source,
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
 2311|     25|                                            fdata->value,
 2312|     25|                                            fdata->value_len,
 2313|     25|                                            0,
 2314|     25|                                            0))
 2315|     25|    }
 2316|     30|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_fee))
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 2317|     30|    return true;
 2318|     30|}
formatter.c:format_fee_bump_transaction_fee:
 2285|     30|static bool format_fee_bump_transaction_fee(formatter_data_t *fdata) {
 2286|     30|    STRLCPY(fdata->caption, "Max Fee", fdata->caption_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
 2287|     30|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
 2288|     30|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.fee_bump_tx.fee,
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 2289|     30|                                 &asset,
 2290|     30|                                 fdata->envelope->network,
 2291|     30|                                 fdata->value,
 2292|     30|                                 fdata->value_len))
 2293|     30|    FORMATTER_CHECK(push_to_formatter_stack(&format_transaction_details))
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 2294|     30|    return true;
 2295|     30|}
formatter.c:format_transaction_details:
  285|     30|static bool format_transaction_details(formatter_data_t *fdata) {
  286|     30|    switch (fdata->envelope->type) {
  287|     30|        case ENVELOPE_TYPE_TX_FEE_BUMP:
  ------------------
  |  Branch (287:9): [True: 30, False: 0]
  ------------------
  288|     30|            STRLCPY(fdata->caption, "InnerTx", fdata->caption_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
  289|     30|            break;
  290|      0|        case ENVELOPE_TYPE_TX:
  ------------------
  |  Branch (290:9): [True: 0, False: 30]
  ------------------
  291|      0|            STRLCPY(fdata->caption, "Transaction", fdata->caption_len);
  ------------------
  |  |   35|      0|    {                                         \
  |  |   36|      0|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      0|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   38|      0|    }
  ------------------
  292|      0|            break;
  293|      0|        default:
  ------------------
  |  Branch (293:9): [True: 0, False: 30]
  ------------------
  294|      0|            return false;
  295|     30|    }
  296|     30|    STRLCPY(fdata->value, "Details", fdata->value_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
  297|     30|    if (fdata->envelope->tx_details.tx.memo.type != MEMO_NONE) {
  ------------------
  |  Branch (297:9): [True: 7, False: 23]
  ------------------
  298|      7|        FORMATTER_CHECK(push_to_formatter_stack(&format_memo))
  ------------------
  |  |   30|      7|    {                           \
  |  |   31|      7|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   32|      7|    }
  ------------------
  299|     23|    } else {
  300|     23|        FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|     23|    {                           \
  |  |   31|     23|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 23]
  |  |  ------------------
  |  |   32|     23|    }
  ------------------
  301|     23|    }
  302|     30|    return true;
  303|     30|}
formatter.c:format_memo:
  242|     94|static bool format_memo(formatter_data_t *fdata) {
  243|     94|    memo_t *memo = &fdata->envelope->tx_details.tx.memo;
  244|     94|    switch (memo->type) {
  245|     18|        case MEMO_ID: {
  ------------------
  |  Branch (245:9): [True: 18, False: 76]
  ------------------
  246|     18|            STRLCPY(fdata->caption, "Memo ID", fdata->caption_len);
  ------------------
  |  |   35|     18|    {                                         \
  |  |   36|     18|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     18|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   38|     18|    }
  ------------------
  247|     18|            FORMATTER_CHECK(print_uint64_num(memo->id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     18|    {                           \
  |  |   31|     18|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 18]
  |  |  ------------------
  |  |   32|     18|    }
  ------------------
  248|     18|            break;
  249|     18|        }
  250|     69|        case MEMO_TEXT: {
  ------------------
  |  Branch (250:9): [True: 69, False: 25]
  ------------------
  251|     69|            STRLCPY(fdata->caption, "Memo Text", fdata->caption_len);
  ------------------
  |  |   35|     69|    {                                         \
  |  |   36|     69|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     69|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   38|     69|    }
  ------------------
  252|     69|            if (is_printable_binary(memo->text.text, memo->text.text_size)) {
  ------------------
  |  Branch (252:17): [True: 5, False: 64]
  ------------------
  253|      5|                FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|      5|    {                           \
  |  |   31|      5|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   32|      5|    }
  ------------------
  254|      5|                                             fdata->value_len,
  255|      5|                                             memo->text.text,
  256|      5|                                             memo->text.text_size))
  257|     64|            } else {
  258|     64|                STRLCPY(fdata->value, "Base64: ", fdata->value_len)
  ------------------
  |  |   35|     64|    {                                         \
  |  |   36|     64|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     64|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 64]
  |  |  ------------------
  |  |   38|     64|    }
  ------------------
  259|     64|                FORMATTER_CHECK(base64_encode(memo->text.text,
  ------------------
  |  |   30|     64|    {                           \
  |  |   31|     64|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 64]
  |  |  ------------------
  |  |   32|     64|    }
  ------------------
  260|     64|                                              memo->text.text_size,
  261|     64|                                              fdata->value + strlen(fdata->value),
  262|     64|                                              fdata->value_len - strlen(fdata->value)))
  263|     64|            }
  264|     69|            break;
  265|     69|        }
  266|     69|        case MEMO_HASH: {
  ------------------
  |  Branch (266:9): [True: 4, False: 90]
  ------------------
  267|      4|            STRLCPY(fdata->caption, "Memo Hash", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  268|      4|            FORMATTER_CHECK(
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  269|      4|                print_binary(memo->hash, HASH_SIZE, fdata->value, fdata->value_len, 0, 0))
  270|      4|            break;
  271|      4|        }
  272|      4|        case MEMO_RETURN: {
  ------------------
  |  Branch (272:9): [True: 3, False: 91]
  ------------------
  273|      3|            STRLCPY(fdata->caption, "Memo Return", fdata->caption_len);
  ------------------
  |  |   35|      3|    {                                         \
  |  |   36|      3|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      3|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   38|      3|    }
  ------------------
  274|      3|            FORMATTER_CHECK(
  ------------------
  |  |   30|      3|    {                           \
  |  |   31|      3|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   32|      3|    }
  ------------------
  275|      3|                print_binary(memo->hash, HASH_SIZE, fdata->value, fdata->value_len, 0, 0))
  276|      3|            break;
  277|      3|        }
  278|      3|        default:
  ------------------
  |  Branch (278:9): [True: 0, False: 94]
  ------------------
  279|      0|            return false;
  280|     94|    }
  281|     94|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|     94|    {                           \
  |  |   31|     94|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 94]
  |  |  ------------------
  |  |   32|     94|    }
  ------------------
  282|     94|    return true;
  283|     94|}
formatter.c:format_fee:
  226|  2.89k|static bool format_fee(formatter_data_t *fdata) {
  227|  2.89k|    STRLCPY(fdata->caption, "Max Fee", fdata->caption_len);
  ------------------
  |  |   35|  2.89k|    {                                         \
  |  |   36|  2.89k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.89k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.89k]
  |  |  ------------------
  |  |   38|  2.89k|    }
  ------------------
  228|  2.89k|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
  229|  2.89k|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.fee,
  ------------------
  |  |   30|  2.89k|    {                           \
  |  |   31|  2.89k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.89k]
  |  |  ------------------
  |  |   32|  2.89k|    }
  ------------------
  230|  2.89k|                                 &asset,
  231|  2.89k|                                 fdata->envelope->network,
  232|  2.89k|                                 fdata->value,
  233|  2.89k|                                 fdata->value_len))
  234|  2.89k|    if (fdata->display_sequence) {
  ------------------
  |  Branch (234:9): [True: 2.89k, False: 0]
  ------------------
  235|  2.89k|        FORMATTER_CHECK(push_to_formatter_stack(&format_sequence))
  ------------------
  |  |   30|  2.89k|    {                           \
  |  |   31|  2.89k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.89k]
  |  |  ------------------
  |  |   32|  2.89k|    }
  ------------------
  236|  2.89k|    } else {
  237|      0|        FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds))
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
  238|      0|    }
  239|  2.89k|    return true;
  240|  2.89k|}
formatter.c:format_sequence:
  217|  2.89k|static bool format_sequence(formatter_data_t *fdata) {
  218|  2.89k|    STRLCPY(fdata->caption, "Sequence Num", fdata->caption_len);
  ------------------
  |  |   35|  2.89k|    {                                         \
  |  |   36|  2.89k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.89k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.89k]
  |  |  ------------------
  |  |   38|  2.89k|    }
  ------------------
  219|  2.89k|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.sequence_number,
  ------------------
  |  |   30|  2.89k|    {                           \
  |  |   31|  2.89k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.89k]
  |  |  ------------------
  |  |   32|  2.89k|    }
  ------------------
  220|  2.89k|                                     fdata->value,
  221|  2.89k|                                     fdata->value_len))
  222|  2.89k|    FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds))
  ------------------
  |  |   30|  2.89k|    {                           \
  |  |   31|  2.89k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.89k]
  |  |  ------------------
  |  |   32|  2.89k|    }
  ------------------
  223|  2.89k|    return true;
  224|  2.89k|}
formatter.c:format_time_bounds:
  204|  2.89k|static bool format_time_bounds(formatter_data_t *fdata) {
  205|  2.89k|    if (!fdata->envelope->tx_details.tx.cond.time_bounds_present ||
  ------------------
  |  Branch (205:9): [True: 2.83k, False: 51]
  ------------------
  206|  2.89k|        (fdata->envelope->tx_details.tx.cond.time_bounds.min_time == 0 &&
  ------------------
  |  Branch (206:10): [True: 12, False: 39]
  ------------------
  207|  2.84k|         fdata->envelope->tx_details.tx.cond.time_bounds.max_time == 0)) {
  ------------------
  |  Branch (207:10): [True: 7, False: 5]
  ------------------
  208|  2.84k|        return format_ledger_bounds(fdata);
  209|  2.84k|    } else if (fdata->envelope->tx_details.tx.cond.time_bounds.min_time != 0) {
  ------------------
  |  Branch (209:16): [True: 39, False: 5]
  ------------------
  210|     39|        return format_time_bounds_min_time(fdata);
  211|     39|    } else {
  212|      5|        return format_time_bounds_max_time(fdata);
  213|      5|    }
  214|      0|    return true;
  215|  2.89k|}
formatter.c:format_ledger_bounds:
  168|  2.85k|static bool format_ledger_bounds(formatter_data_t *fdata) {
  169|  2.85k|    if (!fdata->envelope->tx_details.tx.cond.ledger_bounds_present ||
  ------------------
  |  Branch (169:9): [True: 2.82k, False: 32]
  ------------------
  170|  2.85k|        (fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger == 0 &&
  ------------------
  |  Branch (170:10): [True: 12, False: 20]
  ------------------
  171|  2.83k|         fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger == 0)) {
  ------------------
  |  Branch (171:10): [True: 5, False: 7]
  ------------------
  172|  2.83k|        return format_min_seq_num_prepare(fdata);
  173|  2.83k|    } else if (fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger != 0) {
  ------------------
  |  Branch (173:16): [True: 20, False: 7]
  ------------------
  174|     20|        return format_ledger_bounds_min_ledger(fdata);
  175|     20|    } else {
  176|      7|        return format_ledger_bounds_max_ledger(fdata);
  177|      7|    }
  178|      0|    return true;
  179|  2.85k|}
formatter.c:format_min_seq_num_prepare:
  137|  2.85k|static bool format_min_seq_num_prepare(formatter_data_t *fdata) {
  138|  2.85k|    if (!fdata->envelope->tx_details.tx.cond.min_seq_num_present ||
  ------------------
  |  Branch (138:9): [True: 2.84k, False: 10]
  ------------------
  139|  2.85k|        fdata->envelope->tx_details.tx.cond.min_seq_num == 0) {
  ------------------
  |  Branch (139:9): [True: 6, False: 4]
  ------------------
  140|  2.85k|        return format_min_seq_age_prepare(fdata);
  141|  2.85k|    } else {
  142|      4|        return format_min_seq_num(fdata);
  143|      4|    }
  144|  2.85k|}
formatter.c:format_min_seq_age_prepare:
  119|  2.85k|static bool format_min_seq_age_prepare(formatter_data_t *fdata) {
  120|  2.85k|    if (fdata->envelope->tx_details.tx.cond.min_seq_age == 0) {
  ------------------
  |  Branch (120:9): [True: 2.83k, False: 24]
  ------------------
  121|  2.83k|        format_min_seq_ledger_gap_prepare(fdata);
  122|  2.83k|    } else {
  123|     24|        format_min_seq_age(fdata);
  124|     24|    }
  125|  2.85k|    return true;
  126|  2.85k|}
formatter.c:format_min_seq_ledger_gap_prepare:
  102|  2.85k|static bool format_min_seq_ledger_gap_prepare(formatter_data_t *fdata) {
  103|  2.85k|    if (fdata->envelope->tx_details.tx.cond.min_seq_ledger_gap == 0) {
  ------------------
  |  Branch (103:9): [True: 2.84k, False: 12]
  ------------------
  104|  2.84k|        return format_transaction_source(fdata);
  105|  2.84k|    } else {
  106|     12|        return format_min_seq_ledger_gap(fdata);
  107|     12|    }
  108|  2.85k|}
formatter.c:format_transaction_source:
   70|  2.85k|static bool format_transaction_source(formatter_data_t *fdata) {
   71|  2.85k|    STRLCPY(fdata->caption, "Tx Source", fdata->caption_len);
  ------------------
  |  |   35|  2.85k|    {                                         \
  |  |   36|  2.85k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.85k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.85k]
  |  |  ------------------
  |  |   38|  2.85k|    }
  ------------------
   72|  2.85k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (72:9): [True: 2.82k, False: 30]
  ------------------
   73|  2.85k|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (73:9): [True: 2.78k, False: 46]
  ------------------
   74|  2.85k|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (74:9): [True: 103, False: 2.67k]
  ------------------
   75|  2.78k|               fdata->signing_key,
   76|  2.78k|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|  2.78k|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
   77|    103|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.source_account,
  ------------------
  |  |   30|    103|    {                           \
  |  |   31|    103|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 103]
  |  |  ------------------
  |  |   32|    103|    }
  ------------------
   78|    103|                                            fdata->value,
   79|    103|                                            fdata->value_len,
   80|    103|                                            6,
   81|    103|                                            6))
   82|  2.75k|    } else {
   83|  2.75k|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.source_account,
  ------------------
  |  |   30|  2.75k|    {                           \
  |  |   31|  2.75k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.75k]
  |  |  ------------------
  |  |   32|  2.75k|    }
  ------------------
   84|  2.75k|                                            fdata->value,
   85|  2.75k|                                            fdata->value_len,
   86|  2.75k|                                            0,
   87|  2.75k|                                            0))
   88|  2.75k|    }
   89|  2.85k|    FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  2.85k|    {                           \
  |  |   31|  2.85k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.85k]
  |  |  ------------------
  |  |   32|  2.85k|    }
  ------------------
   90|  2.85k|    return true;
   91|  2.85k|}
formatter.c:format_min_seq_ledger_gap:
   93|     12|static bool format_min_seq_ledger_gap(formatter_data_t *fdata) {
   94|     12|    STRLCPY(fdata->caption, "Min Seq Ledger Gap", fdata->caption_len);
  ------------------
  |  |   35|     12|    {                                         \
  |  |   36|     12|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     12|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   38|     12|    }
  ------------------
   95|     12|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_ledger_gap,
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
   96|     12|                                     fdata->value,
   97|     12|                                     fdata->value_len))
   98|     12|    FORMATTER_CHECK(push_to_formatter_stack(&format_transaction_source))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
   99|     12|    return true;
  100|     12|}
formatter.c:format_min_seq_age:
  110|     24|static bool format_min_seq_age(formatter_data_t *fdata) {
  111|     24|    STRLCPY(fdata->caption, "Min Seq Age", fdata->caption_len);
  ------------------
  |  |   35|     24|    {                                         \
  |  |   36|     24|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     24|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   38|     24|    }
  ------------------
  112|     24|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_age,
  ------------------
  |  |   30|     24|    {                           \
  |  |   31|     24|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   32|     24|    }
  ------------------
  113|     24|                                     fdata->value,
  114|     24|                                     fdata->value_len))
  115|     24|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_ledger_gap_prepare))
  ------------------
  |  |   30|     24|    {                           \
  |  |   31|     24|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   32|     24|    }
  ------------------
  116|     24|    return true;
  117|     24|}
formatter.c:format_min_seq_num:
  128|      4|static bool format_min_seq_num(formatter_data_t *fdata) {
  129|      4|    STRLCPY(fdata->caption, "Min Seq Num", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  130|      4|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_num,
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  131|      4|                                     fdata->value,
  132|      4|                                     fdata->value_len))
  133|      4|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_age_prepare))
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  134|      4|    return true;
  135|      4|}
formatter.c:format_ledger_bounds_min_ledger:
  155|     20|static bool format_ledger_bounds_min_ledger(formatter_data_t *fdata) {
  156|     20|    STRLCPY(fdata->caption, "Ledger Bounds Min", fdata->caption_len);
  ------------------
  |  |   35|     20|    {                                         \
  |  |   36|     20|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     20|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   38|     20|    }
  ------------------
  157|     20|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger,
  ------------------
  |  |   30|     20|    {                           \
  |  |   31|     20|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   32|     20|    }
  ------------------
  158|     20|                                     fdata->value,
  159|     20|                                     fdata->value_len))
  160|     20|    if (fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger != 0) {
  ------------------
  |  Branch (160:9): [True: 10, False: 10]
  ------------------
  161|     10|        FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds_max_ledger))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
  162|     10|    } else {
  163|     10|        FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_num_prepare))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
  164|     10|    }
  165|     20|    return true;
  166|     20|}
formatter.c:format_ledger_bounds_max_ledger:
  146|     17|static bool format_ledger_bounds_max_ledger(formatter_data_t *fdata) {
  147|     17|    STRLCPY(fdata->caption, "Ledger Bounds Max", fdata->caption_len);
  ------------------
  |  |   35|     17|    {                                         \
  |  |   36|     17|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     17|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   38|     17|    }
  ------------------
  148|     17|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger,
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
  149|     17|                                     fdata->value,
  150|     17|                                     fdata->value_len))
  151|     17|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_num_prepare))
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
  152|     17|    return true;
  153|     17|}
formatter.c:format_time_bounds_min_time:
  190|     39|static bool format_time_bounds_min_time(formatter_data_t *fdata) {
  191|     39|    STRLCPY(fdata->caption, "Valid After (UTC)", fdata->caption_len);
  ------------------
  |  |   35|     39|    {                                         \
  |  |   36|     39|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     39|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   38|     39|    }
  ------------------
  192|     39|    FORMATTER_CHECK(print_time(fdata->envelope->tx_details.tx.cond.time_bounds.min_time,
  ------------------
  |  |   30|     39|    {                           \
  |  |   31|     39|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 21, False: 18]
  |  |  ------------------
  |  |   32|     39|    }
  ------------------
  193|     39|                               fdata->value,
  194|     39|                               fdata->value_len))
  195|       |
  196|     18|    if (fdata->envelope->tx_details.tx.cond.time_bounds.max_time != 0) {
  ------------------
  |  Branch (196:9): [True: 9, False: 9]
  ------------------
  197|      9|        FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds_max_time))
  ------------------
  |  |   30|      9|    {                           \
  |  |   31|      9|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 9]
  |  |  ------------------
  |  |   32|      9|    }
  ------------------
  198|      9|    } else {
  199|      9|        FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds))
  ------------------
  |  |   30|      9|    {                           \
  |  |   31|      9|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 9]
  |  |  ------------------
  |  |   32|      9|    }
  ------------------
  200|      9|    }
  201|     18|    return true;
  202|     18|}
formatter.c:format_time_bounds_max_time:
  181|     14|static bool format_time_bounds_max_time(formatter_data_t *fdata) {
  182|     14|    STRLCPY(fdata->caption, "Valid Before (UTC)", fdata->caption_len);
  ------------------
  |  |   35|     14|    {                                         \
  |  |   36|     14|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     14|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   38|     14|    }
  ------------------
  183|     14|    FORMATTER_CHECK(print_time(fdata->envelope->tx_details.tx.cond.time_bounds.max_time,
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 11, False: 3]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
  184|     14|                               fdata->value,
  185|     14|                               fdata->value_len))
  186|      3|    FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds))
  ------------------
  |  |   30|      3|    {                           \
  |  |   31|      3|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   32|      3|    }
  ------------------
  187|      3|    return true;
  188|      3|}
formatter.c:format_soroban_authorization_nonce:
 2354|  2.52k|static bool format_soroban_authorization_nonce(formatter_data_t *fdata) {
 2355|       |    // avoid the root invoke_contract_args be overwritten by the sub-invocation
 2356|  2.52k|    if (!parse_soroban_authorization_envelope(fdata->raw_data,
  ------------------
  |  Branch (2356:9): [True: 0, False: 2.52k]
  ------------------
 2357|  2.52k|                                              fdata->raw_data_len,
 2358|  2.52k|                                              fdata->envelope)) {
 2359|      0|        return false;
 2360|  2.52k|    };
 2361|  2.52k|    STRLCPY(fdata->caption, "Nonce", fdata->caption_len);
  ------------------
  |  |   35|  2.52k|    {                                         \
  |  |   36|  2.52k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.52k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.52k]
  |  |  ------------------
  |  |   38|  2.52k|    }
  ------------------
 2362|  2.52k|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->soroban_authorization.nonce,
  ------------------
  |  |   30|  2.52k|    {                           \
  |  |   31|  2.52k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.52k]
  |  |  ------------------
  |  |   32|  2.52k|    }
  ------------------
 2363|  2.52k|                                     fdata->value,
 2364|  2.52k|                                     fdata->value_len))
 2365|  2.52k|    FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_sig_exp))
  ------------------
  |  |   30|  2.52k|    {                           \
  |  |   31|  2.52k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.52k]
  |  |  ------------------
  |  |   32|  2.52k|    }
  ------------------
 2366|  2.52k|    return true;
 2367|  2.52k|}
formatter.c:format_soroban_authorization_sig_exp:
 2344|  2.52k|static bool format_soroban_authorization_sig_exp(formatter_data_t *fdata) {
 2345|  2.52k|    STRLCPY(fdata->caption, "Sig Exp Ledger", fdata->caption_len);
  ------------------
  |  |   35|  2.52k|    {                                         \
  |  |   36|  2.52k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.52k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.52k]
  |  |  ------------------
  |  |   38|  2.52k|    }
  ------------------
 2346|  2.52k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  2.52k|    {                           \
  |  |   31|  2.52k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.52k]
  |  |  ------------------
  |  |   32|  2.52k|    }
  ------------------
 2347|  2.52k|        print_uint64_num(fdata->envelope->soroban_authorization.signature_expiration_ledger,
 2348|  2.52k|                         fdata->value,
 2349|  2.52k|                         fdata->value_len))
 2350|  2.52k|    FORMATTER_CHECK(push_to_formatter_stack(&format_auth_function));
  ------------------
  |  |   30|  2.52k|    {                           \
  |  |   31|  2.52k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.52k]
  |  |  ------------------
  |  |   32|  2.52k|    }
  ------------------
 2351|  2.52k|    return true;
 2352|  2.52k|}
formatter.c:format_auth_function:
 2203|  2.52k|static bool format_auth_function(formatter_data_t *fdata) {
 2204|  2.52k|    switch (fdata->envelope->soroban_authorization.auth_function_type) {
 2205|  2.49k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
  ------------------
  |  Branch (2205:9): [True: 2.49k, False: 31]
  ------------------
 2206|  2.49k|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|  2.49k|    {                                         \
  |  |   36|  2.49k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.49k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.49k]
  |  |  ------------------
  |  |   38|  2.49k|    }
  ------------------
 2207|  2.49k|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|  2.49k|    {                                         \
  |  |   36|  2.49k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.49k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.49k]
  |  |  ------------------
  |  |   38|  2.49k|    }
  ------------------
 2208|  2.49k|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_contract_id));
  ------------------
  |  |   30|  2.49k|    {                           \
  |  |   31|  2.49k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.49k]
  |  |  ------------------
  |  |   32|  2.49k|    }
  ------------------
 2209|  2.49k|            break;
 2210|     31|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (2210:9): [True: 31, False: 2.49k]
  ------------------
 2211|     31|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|     31|    {                                         \
  |  |   36|     31|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     31|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   38|     31|    }
  ------------------
 2212|     31|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|     31|    {                                         \
  |  |   36|     31|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     31|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   38|     31|    }
  ------------------
 2213|       |            // we dont need to care the sub-invocation here
 2214|     31|            FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|     31|    {                           \
  |  |   31|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   32|     31|    }
  ------------------
 2215|     31|            break;
 2216|     31|        default:
  ------------------
  |  Branch (2216:9): [True: 0, False: 2.52k]
  ------------------
 2217|      0|            return false;
 2218|  2.52k|    }
 2219|  2.52k|    return true;
 2220|  2.52k|}
formatter.c:format_invoke_host_function_contract_id:
 2156|  2.59k|static bool format_invoke_host_function_contract_id(formatter_data_t *fdata) {
 2157|  2.59k|    sc_address_t *address =
 2158|  2.59k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2158:9): [True: 2.49k, False: 105]
  ------------------
 2159|  2.59k|            ? &fdata->envelope->soroban_authorization.invoke_contract_args.address
 2160|  2.59k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2161|    105|                   .invoke_contract_args.address;
 2162|       |
 2163|  2.59k|    STRLCPY(fdata->caption, "Contract ID", fdata->caption_len);
  ------------------
  |  |   35|  2.59k|    {                                         \
  |  |   36|  2.59k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.59k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.59k]
  |  |  ------------------
  |  |   38|  2.59k|    }
  ------------------
 2164|       |
 2165|  2.59k|    FORMATTER_CHECK(print_sc_address(address, fdata->value, fdata->value_len, 0, 0))
  ------------------
  |  |   30|  2.59k|    {                           \
  |  |   31|  2.59k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.59k]
  |  |  ------------------
  |  |   32|  2.59k|    }
  ------------------
 2166|  2.59k|    push_to_formatter_stack(&format_invoke_host_function_func_name);
 2167|  2.59k|    return true;
 2168|  2.59k|}
formatter.c:format_invoke_host_function_func_name:
 2124|  2.59k|static bool format_invoke_host_function_func_name(formatter_data_t *fdata) {
 2125|  2.59k|    invoke_contract_args_t invoke_contract_args;
 2126|  2.59k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2126:9): [True: 2.49k, False: 105]
  ------------------
 2127|  2.49k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2128|  2.49k|    } else {
 2129|    105|        invoke_contract_args =
 2130|    105|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2131|    105|    }
 2132|  2.59k|    STRLCPY(fdata->caption, "Function", fdata->caption_len);
  ------------------
  |  |   35|  2.59k|    {                                         \
  |  |   36|  2.59k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.59k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.59k]
  |  |  ------------------
  |  |   38|  2.59k|    }
  ------------------
 2133|  2.59k|    FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|  2.59k|    {                           \
  |  |   31|  2.59k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.59k]
  |  |  ------------------
  |  |   32|  2.59k|    }
  ------------------
 2134|  2.59k|                                 fdata->value_len,
 2135|  2.59k|                                 invoke_contract_args.function.name,
 2136|  2.59k|                                 invoke_contract_args.function.name_size))
 2137|       |
 2138|  2.59k|    uint8_t data_count = should_move_control_to_plugin(fdata);
 2139|  2.59k|    if (data_count == 0) {
  ------------------
  |  Branch (2139:9): [True: 2.56k, False: 33]
  ------------------
 2140|       |        // we should not move control to plugin
 2141|  2.56k|        if (invoke_contract_args.parameters_length == 0) {
  ------------------
  |  Branch (2141:13): [True: 723, False: 1.84k]
  ------------------
 2142|    723|            return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2143|  1.84k|        } else {
 2144|  1.84k|            parameters_index = 0;
 2145|  1.84k|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args))
  ------------------
  |  |   30|  1.84k|    {                           \
  |  |   31|  1.84k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.84k]
  |  |  ------------------
  |  |   32|  1.84k|    }
  ------------------
 2146|  1.84k|        }
 2147|  2.56k|    } else {
 2148|     33|        PRINTF("we should move control to plugin\n");
 2149|     33|        parameters_index = 0;
 2150|     33|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args_with_plugin))
  ------------------
  |  |   30|     33|    {                           \
  |  |   31|     33|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 33]
  |  |  ------------------
  |  |   32|     33|    }
  ------------------
 2151|     33|    }
 2152|       |
 2153|  1.87k|    return true;
 2154|  2.59k|}
formatter.c:should_move_control_to_plugin:
 1662|  3.54k|static bool should_move_control_to_plugin(formatter_data_t *fdata) {
 1663|  3.54k|    if (fdata->plugin_check_presence == NULL || fdata->plugin_init_contract == NULL ||
  ------------------
  |  Branch (1663:9): [True: 105, False: 3.43k]
  |  Branch (1663:49): [True: 0, False: 3.43k]
  ------------------
 1664|  3.54k|        fdata->plugin_query_data_pair_count == NULL || fdata->plugin_query_data_pair == NULL) {
  ------------------
  |  Branch (1664:9): [True: 0, False: 3.43k]
  |  Branch (1664:56): [True: 0, False: 3.43k]
  ------------------
 1665|    105|        return false;
 1666|    105|    }
 1667|       |
 1668|  3.43k|    invoke_contract_args_t invoke_contract_args;
 1669|  3.43k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1669:9): [True: 3.43k, False: 0]
  ------------------
 1670|  3.43k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1671|  3.43k|    } else {
 1672|      0|        invoke_contract_args =
 1673|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1674|      0|    }
 1675|       |
 1676|  3.43k|    const uint8_t *contract_address = invoke_contract_args.address.address;
 1677|       |
 1678|       |    // check if plugin exists
 1679|  3.43k|    if (!fdata->plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (1679:9): [True: 3.04k, False: 392]
  ------------------
 1680|  3.04k|        return false;
 1681|  3.04k|    }
 1682|       |
 1683|       |    // init plugin
 1684|    392|    if (fdata->plugin_init_contract(contract_address) != STELLAR_PLUGIN_RESULT_OK) {
  ------------------
  |  Branch (1684:9): [True: 0, False: 392]
  ------------------
 1685|      0|        return false;
 1686|      0|    }
 1687|       |
 1688|       |    // get data count
 1689|    392|    if (fdata->plugin_query_data_pair_count(contract_address, &plugin_data_pair_count) !=
  ------------------
  |  Branch (1689:9): [True: 0, False: 392]
  ------------------
 1690|    392|        STELLAR_PLUGIN_RESULT_OK) {
 1691|      0|        return false;
 1692|      0|    }
 1693|       |
 1694|    392|    return plugin_data_pair_count != 0;
 1695|    392|}
formatter.c:format_operation_source_prepare_for_invoke_host_function_op:
 2025|  1.44k|static bool format_operation_source_prepare_for_invoke_host_function_op(formatter_data_t *fdata) {
 2026|  1.44k|    if (fdata->envelope->type != ENVELOPE_TYPE_SOROBAN_AUTHORIZATION &&
  ------------------
  |  Branch (2026:9): [True: 89, False: 1.35k]
  ------------------
 2027|  1.44k|        fdata->envelope->tx_details.tx.op_details.source_account_present) {
  ------------------
  |  Branch (2027:9): [True: 0, False: 89]
  ------------------
 2028|       |        // If the source exists, when the user clicks the next button,
 2029|       |        // it will jump to the page showing the source
 2030|      0|        FORMATTER_CHECK(
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2031|      0|            push_to_formatter_stack(&format_operation_source_for_invoke_host_function_op))
 2032|  1.44k|    } else {
 2033|  1.44k|        uint8_t sub_invocations_count =
 2034|  1.44k|            fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2034:13): [True: 1.35k, False: 89]
  ------------------
 2035|  1.44k|                ? fdata->envelope->soroban_authorization.sub_invocations_count
 2036|  1.44k|                : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2037|     89|                      .sub_invocations_count;
 2038|  1.44k|        if (sub_invocations_count > 0) {
  ------------------
  |  Branch (2038:13): [True: 238, False: 1.20k]
  ------------------
 2039|    238|            formatter_index = 0;
 2040|    238|            FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_start))
  ------------------
  |  |   30|    238|    {                           \
  |  |   31|    238|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 238]
  |  |  ------------------
  |  |   32|    238|    }
  ------------------
 2041|  1.20k|        } else {
 2042|  1.20k|            FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  1.20k|    {                           \
  |  |   31|  1.20k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 14, False: 1.19k]
  |  |  ------------------
  |  |   32|  1.20k|    }
  ------------------
 2043|  1.20k|        }
 2044|  1.44k|    }
 2045|  1.43k|    return true;
 2046|  1.44k|}
formatter.c:format_sub_invocation_start:
 1939|  1.05k|static bool format_sub_invocation_start(formatter_data_t *fdata) {
 1940|  1.05k|    uint8_t sub_invocation_index = 0;
 1941|  1.05k|    uint8_t sub_invocations_count = 0;
 1942|  1.05k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1942:9): [True: 1.05k, False: 0]
  ------------------
 1943|  1.05k|        sub_invocation_index = fdata->envelope->soroban_authorization.sub_invocation_index;
 1944|  1.05k|        sub_invocations_count = fdata->envelope->soroban_authorization.sub_invocations_count;
 1945|  1.05k|    } else {
 1946|      0|        sub_invocation_index =
 1947|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocation_index;
 1948|      0|        sub_invocations_count =
 1949|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocations_count;
 1950|      0|    }
 1951|       |
 1952|  1.05k|    STRLCPY(fdata->caption, "Nested Authorization", fdata->caption_len);
  ------------------
  |  |   35|  1.05k|    {                                         \
  |  |   36|  1.05k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.05k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.05k]
  |  |  ------------------
  |  |   38|  1.05k|    }
  ------------------
 1953|       |
 1954|  1.05k|    FORMATTER_CHECK(print_uint64_num(sub_invocation_index + 1, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  1.05k|    {                           \
  |  |   31|  1.05k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.05k]
  |  |  ------------------
  |  |   32|  1.05k|    }
  ------------------
 1955|  1.05k|    STRLCAT(fdata->value, " of ", fdata->value_len)
  ------------------
  |  |   41|  1.05k|    {                                         \
  |  |   42|  1.05k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  1.05k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 1.05k]
  |  |  ------------------
  |  |   44|  1.05k|    }
  ------------------
 1956|  1.05k|    FORMATTER_CHECK(print_uint64_num(sub_invocations_count,
  ------------------
  |  |   30|  1.05k|    {                           \
  |  |   31|  1.05k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.05k]
  |  |  ------------------
  |  |   32|  1.05k|    }
  ------------------
 1957|  1.05k|                                     fdata->value + strlen(fdata->value),
 1958|  1.05k|                                     fdata->value_len - strlen(fdata->value)))
 1959|       |
 1960|  1.05k|    buffer_t buffer = {
 1961|  1.05k|        .ptr = fdata->raw_data,
 1962|  1.05k|        .size = fdata->raw_data_len,
 1963|  1.05k|        .offset = fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1963:19): [True: 1.05k, False: 0]
  ------------------
 1964|  1.05k|                      ? fdata->envelope->soroban_authorization
 1965|  1.05k|                            .sub_invocation_positions[sub_invocation_index]
 1966|  1.05k|                      : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1967|      0|                            .sub_invocation_positions[sub_invocation_index]};
 1968|       |
 1969|       |    // here we parse the sub-invocation, and store it in the invoke_contract_args
 1970|  1.05k|    FORMATTER_CHECK(parse_auth_function(
  ------------------
  |  |   30|  1.05k|    {                           \
  |  |   31|  4.21k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.05k]
  |  |  |  Branch (31:15): [True: 1.05k, False: 0]
  |  |  |  Branch (31:15): [True: 1.05k, False: 0]
  |  |  ------------------
  |  |   32|  1.05k|    }
  ------------------
 1971|  1.05k|        &buffer,
 1972|  1.05k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
 1973|  1.05k|            ? &fdata->envelope->soroban_authorization.auth_function_type
 1974|  1.05k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.auth_function_type,
 1975|  1.05k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
 1976|  1.05k|            ? &fdata->envelope->soroban_authorization.invoke_contract_args
 1977|  1.05k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1978|  1.05k|                   .invoke_contract_args))
 1979|       |
 1980|  1.05k|    FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_auth_function))
  ------------------
  |  |   30|  1.05k|    {                           \
  |  |   31|  1.05k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.05k]
  |  |  ------------------
  |  |   32|  1.05k|    }
  ------------------
 1981|  1.05k|    return true;
 1982|  1.05k|}
formatter.c:format_sub_invocation_auth_function:
 1915|  1.05k|static bool format_sub_invocation_auth_function(formatter_data_t *fdata) {
 1916|  1.05k|    soroban_authorization_function_type_t auth_function_type =
 1917|  1.05k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1917:9): [True: 1.05k, False: 0]
  ------------------
 1918|  1.05k|            ? fdata->envelope->soroban_authorization.auth_function_type
 1919|  1.05k|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.auth_function_type;
 1920|  1.05k|    PRINTF("auth_function_type: %d\n", auth_function_type);
 1921|  1.05k|    switch (auth_function_type) {
 1922|    945|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
  ------------------
  |  Branch (1922:9): [True: 945, False: 109]
  ------------------
 1923|    945|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    945|    {                                         \
  |  |   36|    945|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    945|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 945]
  |  |  ------------------
  |  |   38|    945|    }
  ------------------
 1924|    945|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|    945|    {                                         \
  |  |   36|    945|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    945|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 945]
  |  |  ------------------
  |  |   38|    945|    }
  ------------------
 1925|    945|            FORMATTER_CHECK(
  ------------------
  |  |   30|    945|    {                           \
  |  |   31|    945|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 945]
  |  |  ------------------
  |  |   32|    945|    }
  ------------------
 1926|    945|                push_to_formatter_stack(&format_sub_invocation_invoke_host_function_contract_id));
 1927|    945|            break;
 1928|    109|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1928:9): [True: 109, False: 945]
  ------------------
 1929|    109|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    109|    {                                         \
  |  |   36|    109|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    109|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 109]
  |  |  ------------------
  |  |   38|    109|    }
  ------------------
 1930|    109|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|    109|    {                                         \
  |  |   36|    109|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    109|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 109]
  |  |  ------------------
  |  |   38|    109|    }
  ------------------
 1931|    109|            FORMATTER_CHECK(format_next_sub_invocation(fdata));
  ------------------
  |  |   30|    109|    {                           \
  |  |   31|    109|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 109]
  |  |  ------------------
  |  |   32|    109|    }
  ------------------
 1932|    109|            break;
 1933|      0|        default:
  ------------------
  |  Branch (1933:9): [True: 0, False: 1.05k]
  ------------------
 1934|      0|            return false;
 1935|  1.05k|    }
 1936|  1.05k|    return true;
 1937|  1.05k|}
formatter.c:format_sub_invocation_invoke_host_function_contract_id:
 1898|    945|static bool format_sub_invocation_invoke_host_function_contract_id(formatter_data_t *fdata) {
 1899|    945|    invoke_contract_args_t invoke_contract_args;
 1900|    945|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1900:9): [True: 945, False: 0]
  ------------------
 1901|    945|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1902|    945|    } else {
 1903|      0|        invoke_contract_args =
 1904|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1905|      0|    }
 1906|       |
 1907|    945|    STRLCPY(fdata->caption, "Contract ID", fdata->caption_len);
  ------------------
  |  |   35|    945|    {                                         \
  |  |   36|    945|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    945|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 945]
  |  |  ------------------
  |  |   38|    945|    }
  ------------------
 1908|       |
 1909|    945|    FORMATTER_CHECK(
  ------------------
  |  |   30|    945|    {                           \
  |  |   31|    945|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 945]
  |  |  ------------------
  |  |   32|    945|    }
  ------------------
 1910|    945|        print_sc_address(&invoke_contract_args.address, fdata->value, fdata->value_len, 0, 0))
 1911|    945|    push_to_formatter_stack(&format_sub_invocation_invoke_host_function_func_name);
 1912|    945|    return true;
 1913|    945|}
formatter.c:format_sub_invocation_invoke_host_function_func_name:
 1864|    945|static bool format_sub_invocation_invoke_host_function_func_name(formatter_data_t *fdata) {
 1865|    945|    invoke_contract_args_t invoke_contract_args;
 1866|    945|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1866:9): [True: 945, False: 0]
  ------------------
 1867|    945|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1868|    945|    } else {
 1869|      0|        invoke_contract_args =
 1870|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1871|      0|    }
 1872|    945|    STRLCPY(fdata->caption, "Function", fdata->caption_len);
  ------------------
  |  |   35|    945|    {                                         \
  |  |   36|    945|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    945|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 945]
  |  |  ------------------
  |  |   38|    945|    }
  ------------------
 1873|    945|    FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|    945|    {                           \
  |  |   31|    945|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 945]
  |  |  ------------------
  |  |   32|    945|    }
  ------------------
 1874|    945|                                 fdata->value_len,
 1875|    945|                                 invoke_contract_args.function.name,
 1876|    945|                                 invoke_contract_args.function.name_size))
 1877|       |
 1878|    945|    uint8_t data_count = should_move_control_to_plugin(fdata);
 1879|    945|    if (data_count == 0) {
  ------------------
  |  Branch (1879:9): [True: 586, False: 359]
  ------------------
 1880|       |        // we should not move control to plugin
 1881|    586|        if (invoke_contract_args.parameters_length == 0) {
  ------------------
  |  Branch (1881:13): [True: 506, False: 80]
  ------------------
 1882|    506|            return format_next_sub_invocation(fdata);
 1883|    506|        } else {
 1884|     80|            parameters_index = 0;
 1885|     80|            FORMATTER_CHECK(
  ------------------
  |  |   30|     80|    {                           \
  |  |   31|     80|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 80]
  |  |  ------------------
  |  |   32|     80|    }
  ------------------
 1886|     80|                push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args))
 1887|     80|        }
 1888|    586|    } else {
 1889|    359|        PRINTF("we should move control to plugin\n");
 1890|    359|        parameters_index = 0;
 1891|    359|        FORMATTER_CHECK(
  ------------------
  |  |   30|    359|    {                           \
  |  |   31|    359|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 359]
  |  |  ------------------
  |  |   32|    359|    }
  ------------------
 1892|    359|            push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args_with_plugin))
 1893|    359|    }
 1894|       |
 1895|    439|    return true;
 1896|    945|}
formatter.c:format_sub_invocation_invoke_host_function_args:
 1792|    408|static bool format_sub_invocation_invoke_host_function_args(formatter_data_t *fdata) {
 1793|    408|    invoke_contract_args_t invoke_contract_args;
 1794|    408|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1794:9): [True: 408, False: 0]
  ------------------
 1795|    408|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1796|    408|    } else {
 1797|      0|        invoke_contract_args =
 1798|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1799|      0|    }
 1800|       |
 1801|    408|    size_t length;
 1802|    408|    STRLCPY(fdata->caption, "Arg ", fdata->caption_len);
  ------------------
  |  |   35|    408|    {                                         \
  |  |   36|    408|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    408|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 408]
  |  |  ------------------
  |  |   38|    408|    }
  ------------------
 1803|    408|    length = strlen(fdata->caption);
 1804|    408|    FORMATTER_CHECK(print_uint64_num(parameters_index + 1,
  ------------------
  |  |   30|    408|    {                           \
  |  |   31|    408|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 408]
  |  |  ------------------
  |  |   32|    408|    }
  ------------------
 1805|    408|                                     fdata->caption + length,
 1806|    408|                                     fdata->caption_len - length))
 1807|       |
 1808|    408|    STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|    408|    {                                         \
  |  |   42|    408|        size_t len = strlcat(dst, src, size); \
  |  |   43|    408|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 408]
  |  |  ------------------
  |  |   44|    408|    }
  ------------------
 1809|    408|    length = strlen(fdata->caption);
 1810|    408|    FORMATTER_CHECK(print_uint64_num(invoke_contract_args.parameters_length,
  ------------------
  |  |   30|    408|    {                           \
  |  |   31|    408|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 408]
  |  |  ------------------
  |  |   32|    408|    }
  ------------------
 1811|    408|                                     fdata->caption + length,
 1812|    408|                                     fdata->caption_len - length))
 1813|       |
 1814|    408|    buffer_t buffer = {.ptr = fdata->raw_data,
 1815|    408|                       .size = fdata->raw_data_len,
 1816|    408|                       .offset = invoke_contract_args.parameters_position};
 1817|       |    // Content
 1818|  1.72k|    for (uint8_t i = 0; i < parameters_index; i++) {
  ------------------
  |  Branch (1818:25): [True: 1.31k, False: 408]
  ------------------
 1819|  1.31k|        FORMATTER_CHECK(read_scval_advance(&buffer))
  ------------------
  |  |   30|  1.31k|    {                           \
  |  |   31|  1.31k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.31k]
  |  |  ------------------
  |  |   32|  1.31k|    }
  ------------------
 1820|  1.31k|    }
 1821|       |
 1822|    408|    FORMATTER_CHECK(print_scval(buffer, fdata->value, fdata->value_len))
  ------------------
  |  |   30|    408|    {                           \
  |  |   31|    408|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 27, False: 381]
  |  |  ------------------
  |  |   32|    408|    }
  ------------------
 1823|       |
 1824|    381|    parameters_index++;
 1825|    381|    if (parameters_index == invoke_contract_args.parameters_length) {
  ------------------
  |  Branch (1825:9): [True: 53, False: 328]
  ------------------
 1826|     53|        return format_next_sub_invocation(fdata);
 1827|    328|    } else {
 1828|    328|        FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args))
  ------------------
  |  |   30|    328|    {                           \
  |  |   31|    328|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 328]
  |  |  ------------------
  |  |   32|    328|    }
  ------------------
 1829|    328|    }
 1830|    328|    return true;
 1831|    381|}
formatter.c:print_scval:
 1697|  9.08k|static bool print_scval(buffer_t buffer, char *value, uint8_t value_len) {
 1698|  9.08k|    uint32_t sc_type;
 1699|  9.08k|    FORMATTER_CHECK(parse_uint32(&buffer, &sc_type))
  ------------------
  |  |   30|  9.08k|    {                           \
  |  |   31|  9.08k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 9.08k]
  |  |  ------------------
  |  |   32|  9.08k|    }
  ------------------
 1700|       |
 1701|  9.08k|    switch (sc_type) {
 1702|  5.76k|        case SCV_BOOL: {
  ------------------
  |  Branch (1702:9): [True: 5.76k, False: 3.32k]
  ------------------
 1703|  5.76k|            bool b;
 1704|  5.76k|            FORMATTER_CHECK(parse_bool(&buffer, &b))
  ------------------
  |  |   30|  5.76k|    {                           \
  |  |   31|  5.76k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 613, False: 5.14k]
  |  |  ------------------
  |  |   32|  5.76k|    }
  ------------------
 1705|  5.14k|            STRLCPY(value, b ? "true" : "false", value_len);
  ------------------
  |  |   35|  5.14k|    {                                         \
  |  |   36|  10.2k|        size_t len = strlcpy(dst, src, size); \
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 12, False: 5.13k]
  |  |  ------------------
  |  |   37|  5.14k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.14k]
  |  |  ------------------
  |  |   38|  5.14k|    }
  ------------------
 1706|  5.14k|            break;
 1707|  5.14k|        }
 1708|    104|        case SCV_VOID:
  ------------------
  |  Branch (1708:9): [True: 104, False: 8.98k]
  ------------------
 1709|    104|            STRLCPY(value, "[void]", value_len);
  ------------------
  |  |   35|    104|    {                                         \
  |  |   36|    104|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    104|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 104]
  |  |  ------------------
  |  |   38|    104|    }
  ------------------
 1710|    104|            break;  // void
 1711|     89|        case SCV_U32:
  ------------------
  |  Branch (1711:9): [True: 89, False: 8.99k]
  ------------------
 1712|     89|            FORMATTER_CHECK(print_uint32(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     89|    {                           \
  |  |   31|     89|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 89]
  |  |  ------------------
  |  |   32|     89|    }
  ------------------
 1713|     89|            break;
 1714|    230|        case SCV_I32:
  ------------------
  |  Branch (1714:9): [True: 230, False: 8.85k]
  ------------------
 1715|    230|            FORMATTER_CHECK(print_int32(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    230|    {                           \
  |  |   31|    230|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 230]
  |  |  ------------------
  |  |   32|    230|    }
  ------------------
 1716|    230|            break;
 1717|     46|        case SCV_U64:
  ------------------
  |  Branch (1717:9): [True: 46, False: 9.04k]
  ------------------
 1718|     46|            FORMATTER_CHECK(print_uint64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     46|    {                           \
  |  |   31|     46|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 46]
  |  |  ------------------
  |  |   32|     46|    }
  ------------------
 1719|     46|            break;
 1720|    124|        case SCV_I64:
  ------------------
  |  Branch (1720:9): [True: 124, False: 8.96k]
  ------------------
 1721|    124|            FORMATTER_CHECK(print_int64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    124|    {                           \
  |  |   31|    124|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   32|    124|    }
  ------------------
 1722|    124|            break;
 1723|    714|        case SCV_TIMEPOINT: {
  ------------------
  |  Branch (1723:9): [True: 714, False: 8.37k]
  ------------------
 1724|    714|            uint64_t timepoint;
 1725|    714|            FORMATTER_CHECK(parse_uint64(&buffer, &timepoint));
  ------------------
  |  |   30|    714|    {                           \
  |  |   31|    714|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 714]
  |  |  ------------------
  |  |   32|    714|    }
  ------------------
 1726|    714|            FORMATTER_CHECK(print_time(timepoint, value, value_len));
  ------------------
  |  |   30|    714|    {                           \
  |  |   31|    714|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 560, False: 154]
  |  |  ------------------
  |  |   32|    714|    }
  ------------------
 1727|    154|            break;
 1728|    714|        }
 1729|    105|        case SCV_DURATION:
  ------------------
  |  Branch (1729:9): [True: 105, False: 8.98k]
  ------------------
 1730|    105|            FORMATTER_CHECK(print_int64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    105|    {                           \
  |  |   31|    105|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 105]
  |  |  ------------------
  |  |   32|    105|    }
  ------------------
 1731|    105|            break;
 1732|    204|        case SCV_U128:
  ------------------
  |  Branch (1732:9): [True: 204, False: 8.88k]
  ------------------
 1733|    204|            FORMATTER_CHECK(print_uint128(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    204|    {                           \
  |  |   31|    204|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 204]
  |  |  ------------------
  |  |   32|    204|    }
  ------------------
 1734|    204|            break;
 1735|    389|        case SCV_I128:
  ------------------
  |  Branch (1735:9): [True: 389, False: 8.69k]
  ------------------
 1736|    389|            FORMATTER_CHECK(print_int128(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    389|    {                           \
  |  |   31|    389|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 389]
  |  |  ------------------
  |  |   32|    389|    }
  ------------------
 1737|    389|            break;
 1738|     77|        case SCV_U256:
  ------------------
  |  Branch (1738:9): [True: 77, False: 9.00k]
  ------------------
 1739|     77|            FORMATTER_CHECK(print_uint256(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     77|    {                           \
  |  |   31|     77|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 77]
  |  |  ------------------
  |  |   32|     77|    }
  ------------------
 1740|     77|            break;
 1741|    256|        case SCV_I256:
  ------------------
  |  Branch (1741:9): [True: 256, False: 8.83k]
  ------------------
 1742|    256|            FORMATTER_CHECK(print_int256(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    256|    {                           \
  |  |   31|    256|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 256]
  |  |  ------------------
  |  |   32|    256|    }
  ------------------
 1743|    256|            break;
 1744|     62|        case SCV_BYTES:
  ------------------
  |  Branch (1744:9): [True: 62, False: 9.02k]
  ------------------
 1745|     62|            STRLCPY(value, "[Bytes Data]", value_len);
  ------------------
  |  |   35|     62|    {                                         \
  |  |   36|     62|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     62|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 62]
  |  |  ------------------
  |  |   38|     62|    }
  ------------------
 1746|     62|            break;
 1747|    297|        case SCV_STRING: {
  ------------------
  |  Branch (1747:9): [True: 297, False: 8.78k]
  ------------------
 1748|    297|            scv_string_t scv_string;
 1749|    297|            FORMATTER_CHECK(parse_scv_string(&buffer, &scv_string));
  ------------------
  |  |   30|    297|    {                           \
  |  |   31|    297|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 2, False: 295]
  |  |  ------------------
  |  |   32|    297|    }
  ------------------
 1750|    295|            FORMATTER_CHECK(print_scv_string(&scv_string, value, value_len));
  ------------------
  |  |   30|    295|    {                           \
  |  |   31|    295|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 295]
  |  |  ------------------
  |  |   32|    295|    }
  ------------------
 1751|    295|            break;
 1752|    295|        }
 1753|     54|        case SCV_SYMBOL: {
  ------------------
  |  Branch (1753:9): [True: 54, False: 9.03k]
  ------------------
 1754|     54|            scv_symbol_t scv_symbol;
 1755|     54|            FORMATTER_CHECK(parse_scv_symbol(&buffer, &scv_symbol));
  ------------------
  |  |   30|     54|    {                           \
  |  |   31|     54|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 3, False: 51]
  |  |  ------------------
  |  |   32|     54|    }
  ------------------
 1756|     51|            FORMATTER_CHECK(print_scv_symbol(&scv_symbol, value, value_len));
  ------------------
  |  |   30|     51|    {                           \
  |  |   31|     51|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 3, False: 48]
  |  |  ------------------
  |  |   32|     51|    }
  ------------------
 1757|     48|            break;
 1758|     51|        }
 1759|     97|        case SCV_ADDRESS: {
  ------------------
  |  Branch (1759:9): [True: 97, False: 8.98k]
  ------------------
 1760|     97|            sc_address_t sc_address;
 1761|     97|            FORMATTER_CHECK(parse_sc_address(&buffer, &sc_address));
  ------------------
  |  |   30|     97|    {                           \
  |  |   31|     97|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 97]
  |  |  ------------------
  |  |   32|     97|    }
  ------------------
 1762|     97|            FORMATTER_CHECK(print_sc_address(&sc_address, value, value_len, 0, 0));
  ------------------
  |  |   30|     97|    {                           \
  |  |   31|     97|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 97]
  |  |  ------------------
  |  |   32|     97|    }
  ------------------
 1763|     97|            break;
 1764|     97|        }
 1765|    478|        default:
  ------------------
  |  Branch (1765:9): [True: 478, False: 8.60k]
  ------------------
 1766|    478|            STRLCPY(value, "[unable to display]", value_len);
  ------------------
  |  |   35|    478|    {                                         \
  |  |   36|    478|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    478|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 478]
  |  |  ------------------
  |  |   38|    478|    }
  ------------------
 1767|  9.08k|    }
 1768|  7.90k|    return true;
 1769|  9.08k|}
formatter.c:format_sub_invocation_invoke_host_function_args_with_plugin:
 1833|  1.07k|static bool format_sub_invocation_invoke_host_function_args_with_plugin(formatter_data_t *fdata) {
 1834|  1.07k|    invoke_contract_args_t invoke_contract_args;
 1835|  1.07k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1835:9): [True: 1.07k, False: 0]
  ------------------
 1836|  1.07k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1837|  1.07k|    } else {
 1838|      0|        invoke_contract_args =
 1839|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1840|      0|    }
 1841|       |
 1842|  1.07k|    const uint8_t *contract_address = invoke_contract_args.address.address;
 1843|       |
 1844|       |    // get data pair
 1845|  1.07k|    if (fdata->plugin_query_data_pair(contract_address,
  ------------------
  |  Branch (1845:9): [True: 0, False: 1.07k]
  ------------------
 1846|  1.07k|                                      parameters_index,
 1847|  1.07k|                                      fdata->caption,
 1848|  1.07k|                                      fdata->caption_len,
 1849|  1.07k|                                      fdata->value,
 1850|  1.07k|                                      fdata->value_len) != STELLAR_PLUGIN_RESULT_OK) {
 1851|      0|        return false;
 1852|      0|    }
 1853|       |
 1854|  1.07k|    parameters_index++;
 1855|  1.07k|    if (parameters_index == plugin_data_pair_count) {
  ------------------
  |  Branch (1855:9): [True: 359, False: 718]
  ------------------
 1856|    359|        return format_next_sub_invocation(fdata);
 1857|    718|    } else {
 1858|    718|        FORMATTER_CHECK(
  ------------------
  |  |   30|    718|    {                           \
  |  |   31|    718|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 718]
  |  |  ------------------
  |  |   32|    718|    }
  ------------------
 1859|    718|            push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args_with_plugin))
 1860|    718|    }
 1861|    718|    return true;
 1862|  1.07k|}
formatter.c:format_next_sub_invocation:
 1772|  1.02k|static bool format_next_sub_invocation(formatter_data_t *fdata) {
 1773|  1.02k|    uint8_t sub_invocations_count =
 1774|  1.02k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1774:9): [True: 1.02k, False: 0]
  ------------------
 1775|  1.02k|            ? fdata->envelope->soroban_authorization.sub_invocations_count
 1776|  1.02k|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1777|      0|                  .sub_invocations_count;
 1778|  1.02k|    uint8_t *sub_invocation_index =
 1779|  1.02k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1779:9): [True: 1.02k, False: 0]
  ------------------
 1780|  1.02k|            ? &fdata->envelope->soroban_authorization.sub_invocation_index
 1781|  1.02k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1782|      0|                   .sub_invocation_index;
 1783|  1.02k|    (*sub_invocation_index)++;
 1784|  1.02k|    if (*sub_invocation_index == sub_invocations_count) {
  ------------------
  |  Branch (1784:9): [True: 211, False: 816]
  ------------------
 1785|    211|        return push_to_formatter_stack(NULL);
 1786|    816|    } else {
 1787|    816|        formatter_index = 0;
 1788|    816|        return push_to_formatter_stack(format_sub_invocation_start);
 1789|    816|    }
 1790|  1.02k|}
formatter.c:format_invoke_host_function_args:
 2048|  8.67k|static bool format_invoke_host_function_args(formatter_data_t *fdata) {
 2049|  8.67k|    invoke_contract_args_t invoke_contract_args;
 2050|  8.67k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2050:9): [True: 8.58k, False: 89]
  ------------------
 2051|  8.58k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2052|  8.58k|    } else {
 2053|     89|        invoke_contract_args =
 2054|     89|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2055|     89|    }
 2056|       |
 2057|  8.67k|    size_t length;
 2058|  8.67k|    STRLCPY(fdata->caption, "Arg ", fdata->caption_len);
  ------------------
  |  |   35|  8.67k|    {                                         \
  |  |   36|  8.67k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  8.67k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8.67k]
  |  |  ------------------
  |  |   38|  8.67k|    }
  ------------------
 2059|  8.67k|    length = strlen(fdata->caption);
 2060|  8.67k|    FORMATTER_CHECK(print_uint64_num(parameters_index + 1,
  ------------------
  |  |   30|  8.67k|    {                           \
  |  |   31|  8.67k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8.67k]
  |  |  ------------------
  |  |   32|  8.67k|    }
  ------------------
 2061|  8.67k|                                     fdata->caption + length,
 2062|  8.67k|                                     fdata->caption_len - length))
 2063|       |
 2064|  8.67k|    STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  8.67k|    {                                         \
  |  |   42|  8.67k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  8.67k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 8.67k]
  |  |  ------------------
  |  |   44|  8.67k|    }
  ------------------
 2065|  8.67k|    length = strlen(fdata->caption);
 2066|  8.67k|    FORMATTER_CHECK(print_uint64_num(invoke_contract_args.parameters_length,
  ------------------
  |  |   30|  8.67k|    {                           \
  |  |   31|  8.67k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8.67k]
  |  |  ------------------
  |  |   32|  8.67k|    }
  ------------------
 2067|  8.67k|                                     fdata->caption + length,
 2068|  8.67k|                                     fdata->caption_len - length))
 2069|       |
 2070|  8.67k|    buffer_t buffer = {.ptr = fdata->raw_data,
 2071|  8.67k|                       .size = fdata->raw_data_len,
 2072|  8.67k|                       .offset = invoke_contract_args.parameters_position};
 2073|       |    // Content
 2074|  33.1k|    for (uint8_t i = 0; i < parameters_index; i++) {
  ------------------
  |  Branch (2074:25): [True: 24.5k, False: 8.67k]
  ------------------
 2075|  24.5k|        FORMATTER_CHECK(read_scval_advance(&buffer))
  ------------------
  |  |   30|  24.5k|    {                           \
  |  |   31|  24.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 24.5k]
  |  |  ------------------
  |  |   32|  24.5k|    }
  ------------------
 2076|  24.5k|    }
 2077|       |
 2078|  8.67k|    FORMATTER_CHECK(print_scval(buffer, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  8.67k|    {                           \
  |  |   31|  8.67k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1.15k, False: 7.52k]
  |  |  ------------------
  |  |   32|  8.67k|    }
  ------------------
 2079|       |
 2080|  7.52k|    parameters_index++;
 2081|  7.52k|    if (parameters_index == invoke_contract_args.parameters_length) {
  ------------------
  |  Branch (2081:9): [True: 688, False: 6.83k]
  ------------------
 2082|    688|        return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2083|  6.83k|    } else {
 2084|  6.83k|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args))
  ------------------
  |  |   30|  6.83k|    {                           \
  |  |   31|  6.83k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.83k]
  |  |  ------------------
  |  |   32|  6.83k|    }
  ------------------
 2085|  6.83k|    }
 2086|  6.83k|    return true;
 2087|  7.52k|}
formatter.c:format_invoke_host_function_args_with_plugin:
 2089|     99|static bool format_invoke_host_function_args_with_plugin(formatter_data_t *fdata) {
 2090|     99|    invoke_contract_args_t invoke_contract_args;
 2091|     99|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2091:9): [True: 99, False: 0]
  ------------------
 2092|     99|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2093|     99|    } else {
 2094|      0|        invoke_contract_args =
 2095|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2096|      0|    }
 2097|       |
 2098|     99|    const uint8_t *contract_address = invoke_contract_args.address.address;
 2099|       |
 2100|       |    // get data pair
 2101|     99|    if (fdata->plugin_query_data_pair(contract_address,
  ------------------
  |  Branch (2101:9): [True: 0, False: 99]
  ------------------
 2102|     99|                                      parameters_index,
 2103|     99|                                      fdata->caption,
 2104|     99|                                      fdata->caption_len,
 2105|     99|                                      fdata->value,
 2106|     99|                                      fdata->value_len) != STELLAR_PLUGIN_RESULT_OK) {
 2107|      0|        return false;
 2108|      0|    }
 2109|       |
 2110|     99|    parameters_index++;
 2111|     99|    if (parameters_index == plugin_data_pair_count) {
  ------------------
  |  Branch (2111:9): [True: 33, False: 66]
  ------------------
 2112|       |        // if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
 2113|       |        //     FORMATTER_CHECK(push_to_formatter_stack(NULL))
 2114|       |        // } else {
 2115|       |        //     return format_operation_source_prepare(fdata);
 2116|       |        // }
 2117|     33|        return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2118|     66|    } else {
 2119|     66|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args_with_plugin))
  ------------------
  |  |   30|     66|    {                           \
  |  |   31|     66|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 66]
  |  |  ------------------
  |  |   32|     66|    }
  ------------------
 2120|     66|    }
 2121|     66|    return true;
 2122|     99|}
formatter.c:format_transaction_info:
 2380|  2.89k|static bool format_transaction_info(formatter_data_t *fdata) {
 2381|  2.89k|    if (fdata->envelope->network != 0) {
  ------------------
  |  Branch (2381:9): [True: 2.84k, False: 43]
  ------------------
 2382|  2.84k|        FORMATTER_CHECK(push_to_formatter_stack(&format_network))
  ------------------
  |  |   30|  2.84k|    {                           \
  |  |   31|  2.84k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.84k]
  |  |  ------------------
  |  |   32|  2.84k|    }
  ------------------
 2383|  2.84k|    } else {
 2384|     43|        return get_tx_details_formatter(fdata);
 2385|     43|    }
 2386|  2.84k|    return true;
 2387|  2.89k|}
formatter.c:push_to_formatter_stack:
   59|   134k|static bool push_to_formatter_stack(format_function_t formatter) {
   60|   134k|    if (formatter_index >= MAX_FORMATTERS_PER_OPERATION) {
  ------------------
  |  |   47|   134k|#define MAX_FORMATTERS_PER_OPERATION 16
  ------------------
  |  Branch (60:9): [True: 14, False: 134k]
  ------------------
   61|     14|        PRINTF("Formatter stack overflow\n");
   62|     14|        return false;
   63|     14|    }
   64|       |
   65|   134k|    formatter_stack[formatter_index++] = formatter;
   66|       |
   67|   134k|    return true;
   68|   134k|}
formatter.c:format_confirm_operation:
 2262|  17.8k|static bool format_confirm_operation(formatter_data_t *fdata) {
 2263|  17.8k|    if (fdata->envelope->tx_details.tx.operations_count > 1) {
  ------------------
  |  Branch (2263:9): [True: 17.5k, False: 378]
  ------------------
 2264|  17.5k|        size_t length;
 2265|  17.5k|        STRLCPY(fdata->caption, "Operation ", fdata->caption_len);
  ------------------
  |  |   35|  17.5k|    {                                         \
  |  |   36|  17.5k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  17.5k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 17.5k]
  |  |  ------------------
  |  |   38|  17.5k|    }
  ------------------
 2266|  17.5k|        length = strlen(fdata->caption);
 2267|  17.5k|        FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.operation_index + 1,
  ------------------
  |  |   30|  17.5k|    {                           \
  |  |   31|  17.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17.5k]
  |  |  ------------------
  |  |   32|  17.5k|    }
  ------------------
 2268|  17.5k|                                         fdata->caption + length,
 2269|  17.5k|                                         fdata->caption_len - length))
 2270|  17.5k|        STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  17.5k|    {                                         \
  |  |   42|  17.5k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  17.5k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 17.5k]
  |  |  ------------------
  |  |   44|  17.5k|    }
  ------------------
 2271|  17.5k|        length = strlen(fdata->caption);
 2272|  17.5k|        FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.operations_count,
  ------------------
  |  |   30|  17.5k|    {                           \
  |  |   31|  17.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17.5k]
  |  |  ------------------
  |  |   32|  17.5k|    }
  ------------------
 2273|  17.5k|                                         fdata->caption + length,
 2274|  17.5k|                                         fdata->caption_len - length))
 2275|       |
 2276|  17.5k|        FORMATTER_CHECK(push_to_formatter_stack(
  ------------------
  |  |   30|  17.5k|    {                           \
  |  |   31|  17.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17.5k]
  |  |  ------------------
  |  |   32|  17.5k|    }
  ------------------
 2277|  17.5k|            ((format_function_t) PIC(formatters[fdata->envelope->tx_details.tx.op_details.type]))));
 2278|  17.5k|    } else {
 2279|    378|        format_function_t func = PIC(formatters[fdata->envelope->tx_details.tx.op_details.type]);
  ------------------
  |  |    6|    378|#define PIC(x) x
  ------------------
 2280|    378|        FORMATTER_CHECK(func(fdata));
  ------------------
  |  |   30|    378|    {                           \
  |  |   31|    378|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 9, False: 369]
  |  |  ------------------
  |  |   32|    378|    }
  ------------------
 2281|    369|    }
 2282|  17.8k|    return true;
 2283|  17.8k|}
formatter.c:format_create_account:
 1134|  12.3k|static bool format_create_account(formatter_data_t *fdata) {
 1135|  12.3k|    (void) fdata;
 1136|  12.3k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  12.3k|    {                                         \
  |  |   36|  12.3k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  12.3k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 12.3k]
  |  |  ------------------
  |  |   38|  12.3k|    }
  ------------------
 1137|  12.3k|    STRLCPY(fdata->value, "Create Account", fdata->value_len);
  ------------------
  |  |   35|  12.3k|    {                                         \
  |  |   36|  12.3k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  12.3k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 12.3k]
  |  |  ------------------
  |  |   38|  12.3k|    }
  ------------------
 1138|  12.3k|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_account_destination))
  ------------------
  |  |   30|  12.3k|    {                           \
  |  |   31|  12.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12.3k]
  |  |  ------------------
  |  |   32|  12.3k|    }
  ------------------
 1139|  12.3k|    return true;
 1140|  12.3k|}
formatter.c:format_create_account_destination:
 1122|  12.3k|static bool format_create_account_destination(formatter_data_t *fdata) {
 1123|  12.3k|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|  12.3k|    {                                         \
  |  |   36|  12.3k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  12.3k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 12.3k]
  |  |  ------------------
  |  |   38|  12.3k|    }
  ------------------
 1124|  12.3k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  12.3k|    {                           \
  |  |   31|  12.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12.3k]
  |  |  ------------------
  |  |   32|  12.3k|    }
  ------------------
 1125|  12.3k|        print_account_id(fdata->envelope->tx_details.tx.op_details.create_account_op.destination,
 1126|  12.3k|                         fdata->value,
 1127|  12.3k|                         fdata->value_len,
 1128|  12.3k|                         0,
 1129|  12.3k|                         0))
 1130|  12.3k|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_account_amount))
  ------------------
  |  |   30|  12.3k|    {                           \
  |  |   31|  12.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12.3k]
  |  |  ------------------
  |  |   32|  12.3k|    }
  ------------------
 1131|  12.3k|    return true;
 1132|  12.3k|}
formatter.c:format_create_account_amount:
 1110|  12.3k|static bool format_create_account_amount(formatter_data_t *fdata) {
 1111|  12.3k|    STRLCPY(fdata->caption, "Starting Balance", fdata->caption_len);
  ------------------
  |  |   35|  12.3k|    {                                         \
  |  |   36|  12.3k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  12.3k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 12.3k]
  |  |  ------------------
  |  |   38|  12.3k|    }
  ------------------
 1112|  12.3k|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
 1113|  12.3k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  12.3k|    {                           \
  |  |   31|  12.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12.3k]
  |  |  ------------------
  |  |   32|  12.3k|    }
  ------------------
 1114|  12.3k|        print_amount(fdata->envelope->tx_details.tx.op_details.create_account_op.starting_balance,
 1115|  12.3k|                     &asset,
 1116|  12.3k|                     fdata->envelope->network,
 1117|  12.3k|                     fdata->value,
 1118|  12.3k|                     fdata->value_len))
 1119|  12.3k|    return format_operation_source_prepare(fdata);
 1120|  12.3k|}
formatter.c:format_operation_source_prepare:
  334|  17.7k|static bool format_operation_source_prepare(formatter_data_t *fdata) {
  335|  17.7k|    if (fdata->envelope->tx_details.tx.op_details.source_account_present) {
  ------------------
  |  Branch (335:9): [True: 447, False: 17.2k]
  ------------------
  336|       |        // If the source exists, when the user clicks the next button,
  337|       |        // it will jump to the page showing the source
  338|    447|        FORMATTER_CHECK(push_to_formatter_stack(&format_operation_source))
  ------------------
  |  |   30|    447|    {                           \
  |  |   31|    447|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 447]
  |  |  ------------------
  |  |   32|    447|    }
  ------------------
  339|  17.2k|    } else {
  340|  17.2k|        FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  17.2k|    {                           \
  |  |   31|  17.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17.2k]
  |  |  ------------------
  |  |   32|  17.2k|    }
  ------------------
  341|  17.2k|    }
  342|  17.7k|    return true;
  343|  17.7k|}
formatter.c:format_operation_source:
  305|    447|static bool format_operation_source(formatter_data_t *fdata) {
  306|    447|    STRLCPY(fdata->caption, "Op Source", fdata->caption_len);
  ------------------
  |  |   35|    447|    {                                         \
  |  |   36|    447|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    447|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 447]
  |  |  ------------------
  |  |   38|    447|    }
  ------------------
  307|    447|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (307:9): [True: 447, False: 0]
  ------------------
  308|    447|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (308:9): [True: 418, False: 29]
  ------------------
  309|    447|        fdata->envelope->tx_details.tx.op_details.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (309:9): [True: 311, False: 107]
  ------------------
  310|    447|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (310:9): [True: 167, False: 144]
  ------------------
  311|    311|               fdata->signing_key,
  312|    311|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0 &&
  ------------------
  |  |   18|    311|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  313|    447|        memcmp(fdata->envelope->tx_details.tx.op_details.source_account.ed25519,
  ------------------
  |  Branch (313:9): [True: 52, False: 115]
  ------------------
  314|    167|               fdata->signing_key,
  315|    167|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|    167|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  316|     52|        FORMATTER_CHECK(
  ------------------
  |  |   30|     52|    {                           \
  |  |   31|     52|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 52]
  |  |  ------------------
  |  |   32|     52|    }
  ------------------
  317|     52|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
  318|     52|                                fdata->value,
  319|     52|                                fdata->value_len,
  320|     52|                                6,
  321|     52|                                6))
  322|    395|    } else {
  323|    395|        FORMATTER_CHECK(
  ------------------
  |  |   30|    395|    {                           \
  |  |   31|    395|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 395]
  |  |  ------------------
  |  |   32|    395|    }
  ------------------
  324|    395|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
  325|    395|                                fdata->value,
  326|    395|                                fdata->value_len,
  327|    395|                                0,
  328|    395|                                0))
  329|    395|    }
  330|    447|    FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|    447|    {                           \
  |  |   31|    447|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 447]
  |  |  ------------------
  |  |   32|    447|    }
  ------------------
  331|    447|    return true;
  332|    447|}
formatter.c:format_payment:
 1099|    288|static bool format_payment(formatter_data_t *fdata) {
 1100|    288|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|    288|    {                                         \
  |  |   36|    288|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    288|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 288]
  |  |  ------------------
  |  |   38|    288|    }
  ------------------
 1101|    288|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.payment_op.amount,
  ------------------
  |  |   30|    288|    {                           \
  |  |   31|    288|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 288]
  |  |  ------------------
  |  |   32|    288|    }
  ------------------
 1102|    288|                                 &fdata->envelope->tx_details.tx.op_details.payment_op.asset,
 1103|    288|                                 fdata->envelope->network,
 1104|    288|                                 fdata->value,
 1105|    288|                                 fdata->value_len))
 1106|    288|    FORMATTER_CHECK(push_to_formatter_stack(&format_payment_destination))
  ------------------
  |  |   30|    288|    {                           \
  |  |   31|    288|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 288]
  |  |  ------------------
  |  |   32|    288|    }
  ------------------
 1107|    288|    return true;
 1108|    288|}
formatter.c:format_payment_destination:
 1088|    288|static bool format_payment_destination(formatter_data_t *fdata) {
 1089|    288|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    288|    {                                         \
  |  |   36|    288|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    288|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 288]
  |  |  ------------------
  |  |   38|    288|    }
  ------------------
 1090|    288|    FORMATTER_CHECK(
  ------------------
  |  |   30|    288|    {                           \
  |  |   31|    288|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 288]
  |  |  ------------------
  |  |   32|    288|    }
  ------------------
 1091|    288|        print_muxed_account(&fdata->envelope->tx_details.tx.op_details.payment_op.destination,
 1092|    288|                            fdata->value,
 1093|    288|                            fdata->value_len,
 1094|    288|                            0,
 1095|    288|                            0))
 1096|    288|    return format_operation_source_prepare(fdata);
 1097|    288|}
formatter.c:format_path_payment_strict_receive:
 1041|    208|static bool format_path_payment_strict_receive(formatter_data_t *fdata) {
 1042|    208|    STRLCPY(fdata->caption, "Send Max", fdata->caption_len);
  ------------------
  |  |   35|    208|    {                                         \
  |  |   36|    208|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    208|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 208]
  |  |  ------------------
  |  |   38|    208|    }
  ------------------
 1043|    208|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    208|    {                           \
  |  |   31|    208|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 208]
  |  |  ------------------
  |  |   32|    208|    }
  ------------------
 1044|    208|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.send_max,
 1045|    208|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.send_asset,
 1046|    208|        fdata->envelope->network,
 1047|    208|        fdata->value,
 1048|    208|        fdata->value_len))
 1049|    208|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_receive_destination))
  ------------------
  |  |   30|    208|    {                           \
  |  |   31|    208|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 208]
  |  |  ------------------
  |  |   32|    208|    }
  ------------------
 1050|    208|    return true;
 1051|    208|}
formatter.c:format_path_payment_strict_receive_destination:
 1029|    208|static bool format_path_payment_strict_receive_destination(formatter_data_t *fdata) {
 1030|    208|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    208|    {                                         \
  |  |   36|    208|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    208|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 208]
  |  |  ------------------
  |  |   38|    208|    }
  ------------------
 1031|    208|    FORMATTER_CHECK(print_muxed_account(
  ------------------
  |  |   30|    208|    {                           \
  |  |   31|    208|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 208]
  |  |  ------------------
  |  |   32|    208|    }
  ------------------
 1032|    208|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.destination,
 1033|    208|        fdata->value,
 1034|    208|        fdata->value_len,
 1035|    208|        0,
 1036|    208|        0))
 1037|    208|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_receive_receive))
  ------------------
  |  |   30|    208|    {                           \
  |  |   31|    208|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 208]
  |  |  ------------------
  |  |   32|    208|    }
  ------------------
 1038|    208|    return true;
 1039|    208|}
formatter.c:format_path_payment_strict_receive_receive:
 1018|    208|static bool format_path_payment_strict_receive_receive(formatter_data_t *fdata) {
 1019|    208|    STRLCPY(fdata->caption, "Receive", fdata->caption_len);
  ------------------
  |  |   35|    208|    {                                         \
  |  |   36|    208|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    208|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 208]
  |  |  ------------------
  |  |   38|    208|    }
  ------------------
 1020|    208|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    208|    {                           \
  |  |   31|    208|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 208]
  |  |  ------------------
  |  |   32|    208|    }
  ------------------
 1021|    208|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.dest_amount,
 1022|    208|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.dest_asset,
 1023|    208|        fdata->envelope->network,
 1024|    208|        fdata->value,
 1025|    208|        fdata->value_len))
 1026|    208|    return format_operation_source_prepare(fdata);
 1027|    208|}
formatter.c:format_manage_sell_offer:
  897|     60|static bool format_manage_sell_offer(formatter_data_t *fdata) {
  898|     60|    if (!fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.amount) {
  ------------------
  |  Branch (898:9): [True: 10, False: 50]
  ------------------
  899|     10|        STRLCPY(fdata->caption, "Remove Offer", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
  900|     10|        FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
  901|     10|            fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id,
  902|     10|            fdata->value,
  903|     10|            fdata->value_len))
  904|     10|        return format_operation_source_prepare(fdata);
  905|     50|    } else {
  906|     50|        if (fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id) {
  ------------------
  |  Branch (906:13): [True: 30, False: 20]
  ------------------
  907|     30|            STRLCPY(fdata->caption, "Change Offer", fdata->caption_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
  908|     30|            FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
  909|     30|                fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id,
  910|     30|                fdata->value,
  911|     30|                fdata->value_len))
  912|     30|        } else {
  913|     20|            STRLCPY(fdata->caption, "Create Offer", fdata->caption_len);
  ------------------
  |  |   35|     20|    {                                         \
  |  |   36|     20|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     20|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   38|     20|    }
  ------------------
  914|     20|        }
  915|     50|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_buy))
  ------------------
  |  |   30|     50|    {                           \
  |  |   31|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   32|     50|    }
  ------------------
  916|     50|    }
  917|     50|    return true;
  918|     60|}
formatter.c:format_manage_sell_offer_buy:
  886|     50|static bool format_manage_sell_offer_buy(formatter_data_t *fdata) {
  887|     50|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|     50|    {                                         \
  |  |   36|     50|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     50|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   38|     50|    }
  ------------------
  888|     50|    FORMATTER_CHECK(
  ------------------
  |  |   30|     50|    {                           \
  |  |   31|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   32|     50|    }
  ------------------
  889|     50|        print_asset(&fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.buying,
  890|     50|                    fdata->envelope->network,
  891|     50|                    fdata->value,
  892|     50|                    fdata->value_len))
  893|     50|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_sell))
  ------------------
  |  |   30|     50|    {                           \
  |  |   31|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   32|     50|    }
  ------------------
  894|     50|    return true;
  895|     50|}
formatter.c:format_manage_sell_offer_sell:
  874|     50|static bool format_manage_sell_offer_sell(formatter_data_t *fdata) {
  875|     50|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|     50|    {                                         \
  |  |   36|     50|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     50|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   38|     50|    }
  ------------------
  876|     50|    FORMATTER_CHECK(
  ------------------
  |  |   30|     50|    {                           \
  |  |   31|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   32|     50|    }
  ------------------
  877|     50|        print_amount(fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.amount,
  878|     50|                     &fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.selling,
  879|     50|                     fdata->envelope->network,
  880|     50|                     fdata->value,
  881|     50|                     fdata->value_len))
  882|     50|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_price))
  ------------------
  |  |   30|     50|    {                           \
  |  |   31|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   32|     50|    }
  ------------------
  883|     50|    return true;
  884|     50|}
formatter.c:format_manage_sell_offer_price:
  862|     50|static bool format_manage_sell_offer_price(formatter_data_t *fdata) {
  863|     50|    manage_sell_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op;
  864|     50|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|     50|    {                                         \
  |  |   36|     50|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     50|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   38|     50|    }
  ------------------
  865|     50|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|     50|    {                           \
  |  |   31|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   32|     50|    }
  ------------------
  866|     50|                                &op->buying,
  867|     50|                                &op->selling,
  868|     50|                                fdata->envelope->network,
  869|     50|                                fdata->value,
  870|     50|                                fdata->value_len))
  871|     50|    return format_operation_source_prepare(fdata);
  872|     50|}
formatter.c:format_create_passive_sell_offer:
 1010|    199|static bool format_create_passive_sell_offer(formatter_data_t *fdata) {
 1011|    199|    (void) fdata;
 1012|    199|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    199|    {                                         \
  |  |   36|    199|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    199|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   38|    199|    }
  ------------------
 1013|    199|    STRLCPY(fdata->value, "Create Passive Sell Offer", fdata->value_len);
  ------------------
  |  |   35|    199|    {                                         \
  |  |   36|    199|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    199|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   38|    199|    }
  ------------------
 1014|    199|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_buy))
  ------------------
  |  |   30|    199|    {                           \
  |  |   31|    199|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   32|    199|    }
  ------------------
 1015|    199|    return true;
 1016|    199|}
formatter.c:format_create_passive_sell_offer_buy:
  999|    199|static bool format_create_passive_sell_offer_buy(formatter_data_t *fdata) {
 1000|    199|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|    199|    {                                         \
  |  |   36|    199|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    199|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   38|    199|    }
  ------------------
 1001|    199|    FORMATTER_CHECK(
  ------------------
  |  |   30|    199|    {                           \
  |  |   31|    199|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   32|    199|    }
  ------------------
 1002|    199|        print_asset(&fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.buying,
 1003|    199|                    fdata->envelope->network,
 1004|    199|                    fdata->value,
 1005|    199|                    fdata->value_len))
 1006|    199|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_sell))
  ------------------
  |  |   30|    199|    {                           \
  |  |   31|    199|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   32|    199|    }
  ------------------
 1007|    199|    return true;
 1008|    199|}
formatter.c:format_create_passive_sell_offer_sell:
  987|    199|static bool format_create_passive_sell_offer_sell(formatter_data_t *fdata) {
  988|    199|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|    199|    {                                         \
  |  |   36|    199|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    199|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   38|    199|    }
  ------------------
  989|    199|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    199|    {                           \
  |  |   31|    199|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   32|    199|    }
  ------------------
  990|    199|        fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.amount,
  991|    199|        &fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.selling,
  992|    199|        fdata->envelope->network,
  993|    199|        fdata->value,
  994|    199|        fdata->value_len))
  995|    199|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_price))
  ------------------
  |  |   30|    199|    {                           \
  |  |   31|    199|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   32|    199|    }
  ------------------
  996|    199|    return true;
  997|    199|}
formatter.c:format_create_passive_sell_offer_price:
  974|    199|static bool format_create_passive_sell_offer_price(formatter_data_t *fdata) {
  975|    199|    create_passive_sell_offer_op_t *op =
  976|    199|        &fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op;
  977|    199|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|    199|    {                                         \
  |  |   36|    199|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    199|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   38|    199|    }
  ------------------
  978|    199|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|    199|    {                           \
  |  |   31|    199|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   32|    199|    }
  ------------------
  979|    199|                                &op->buying,
  980|    199|                                &op->selling,
  981|    199|                                fdata->envelope->network,
  982|    199|                                fdata->value,
  983|    199|                                fdata->value_len))
  984|    199|    return format_operation_source_prepare(fdata);
  985|    199|}
formatter.c:format_set_options:
  763|    633|static bool format_set_options(formatter_data_t *fdata) {
  764|       |    // this operation is a special one among all operations, because all its
  765|       |    // fields are optional.
  766|    633|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    633|    {                                         \
  |  |   36|    633|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    633|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 633]
  |  |  ------------------
  |  |   38|    633|    }
  ------------------
  767|    633|    STRLCPY(fdata->value, "Set Options", fdata->value_len);
  ------------------
  |  |   35|    633|    {                                         \
  |  |   36|    633|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    633|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 633]
  |  |  ------------------
  |  |   38|    633|    }
  ------------------
  768|    633|    if (is_empty_set_options_body(fdata)) {
  ------------------
  |  Branch (768:9): [True: 247, False: 386]
  ------------------
  769|    247|        FORMATTER_CHECK(push_to_formatter_stack(format_set_options_empty_body))
  ------------------
  |  |   30|    247|    {                           \
  |  |   31|    247|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   32|    247|    }
  ------------------
  770|    386|    } else {
  771|    386|        format_set_option_inflation_destination_prepare(fdata);
  772|    386|    }
  773|    633|    return true;
  774|    633|}
formatter.c:is_empty_set_options_body:
  750|    633|static bool is_empty_set_options_body(formatter_data_t *fdata) {
  751|    633|    return !(
  752|    633|        fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination_present ||
  ------------------
  |  Branch (752:9): [True: 8, False: 625]
  ------------------
  753|    633|        fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags_present ||
  ------------------
  |  Branch (753:9): [True: 8, False: 617]
  ------------------
  754|    633|        fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags_present ||
  ------------------
  |  Branch (754:9): [True: 1, False: 616]
  ------------------
  755|    633|        fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight_present ||
  ------------------
  |  Branch (755:9): [True: 27, False: 589]
  ------------------
  756|    633|        fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold_present ||
  ------------------
  |  Branch (756:9): [True: 70, False: 519]
  ------------------
  757|    633|        fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold_present ||
  ------------------
  |  Branch (757:9): [True: 54, False: 465]
  ------------------
  758|    633|        fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold_present ||
  ------------------
  |  Branch (758:9): [True: 4, False: 461]
  ------------------
  759|    633|        fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_present ||
  ------------------
  |  Branch (759:9): [True: 203, False: 258]
  ------------------
  760|    633|        fdata->envelope->tx_details.tx.op_details.set_options_op.signer_present);
  ------------------
  |  Branch (760:9): [True: 11, False: 247]
  ------------------
  761|    633|}
formatter.c:format_set_options_empty_body:
  743|    247|static bool format_set_options_empty_body(formatter_data_t *fdata) {
  744|    247|    (void) fdata;
  745|    247|    STRLCPY(fdata->caption, "SET OPTIONS", fdata->caption_len);
  ------------------
  |  |   35|    247|    {                                         \
  |  |   36|    247|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    247|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   38|    247|    }
  ------------------
  746|    247|    STRLCPY(fdata->value, "[BODY IS EMPTY]", fdata->value_len);
  ------------------
  |  |   35|    247|    {                                         \
  |  |   36|    247|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    247|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   38|    247|    }
  ------------------
  747|    247|    return format_operation_source_prepare(fdata);
  748|    247|}
formatter.c:format_set_option_inflation_destination_prepare:
  734|    386|static bool format_set_option_inflation_destination_prepare(formatter_data_t *fdata) {
  735|    386|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination_present) {
  ------------------
  |  Branch (735:9): [True: 8, False: 378]
  ------------------
  736|      8|        FORMATTER_CHECK(push_to_formatter_stack(format_set_option_inflation_destination))
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
  737|    378|    } else {
  738|    378|        format_set_option_clear_flags_prepare(fdata);
  739|    378|    }
  740|    386|    return true;
  741|    386|}
formatter.c:format_set_option_inflation_destination:
  722|      8|static bool format_set_option_inflation_destination(formatter_data_t *fdata) {
  723|      8|    STRLCPY(fdata->caption, "Inflation Dest", fdata->caption_len);
  ------------------
  |  |   35|      8|    {                                         \
  |  |   36|      8|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      8|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   38|      8|    }
  ------------------
  724|      8|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|      8|    {                           \
  |  |   31|      8|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 8]
  |  |  ------------------
  |  |   32|      8|    }
  ------------------
  725|      8|        fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination,
  726|      8|        fdata->value,
  727|      8|        fdata->value_len,
  728|      8|        0,
  729|      8|        0))
  730|      8|    format_set_option_clear_flags_prepare(fdata);
  731|      8|    return true;
  732|      8|}
formatter.c:format_set_option_clear_flags_prepare:
  713|    386|static bool format_set_option_clear_flags_prepare(formatter_data_t *fdata) {
  714|    386|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags_present) {
  ------------------
  |  Branch (714:9): [True: 13, False: 373]
  ------------------
  715|     13|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_clear_flags))
  ------------------
  |  |   30|     13|    {                           \
  |  |   31|     13|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 13]
  |  |  ------------------
  |  |   32|     13|    }
  ------------------
  716|    373|    } else {
  717|    373|        format_set_option_set_flags_prepare(fdata);
  718|    373|    }
  719|    386|    return true;
  720|    386|}
formatter.c:format_set_option_clear_flags:
  703|     13|static bool format_set_option_clear_flags(formatter_data_t *fdata) {
  704|     13|    STRLCPY(fdata->caption, "Clear Flags", fdata->caption_len);
  ------------------
  |  |   35|     13|    {                                         \
  |  |   36|     13|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     13|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 13]
  |  |  ------------------
  |  |   38|     13|    }
  ------------------
  705|     13|    FORMATTER_CHECK(
  ------------------
  |  |   30|     13|    {                           \
  |  |   31|     13|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 13]
  |  |  ------------------
  |  |   32|     13|    }
  ------------------
  706|     13|        print_account_flags(fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags,
  707|     13|                            fdata->value,
  708|     13|                            fdata->value_len))
  709|     13|    format_set_option_set_flags_prepare(fdata);
  710|     13|    return true;
  711|     13|}
formatter.c:format_set_option_set_flags_prepare:
  694|    386|static bool format_set_option_set_flags_prepare(formatter_data_t *fdata) {
  695|    386|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags_present) {
  ------------------
  |  Branch (695:9): [True: 4, False: 382]
  ------------------
  696|      4|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_set_flags))
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  697|    382|    } else {
  698|    382|        format_set_option_master_weight_prepare(fdata);
  699|    382|    }
  700|    386|    return true;
  701|    386|}
formatter.c:format_set_option_set_flags:
  684|      4|static bool format_set_option_set_flags(formatter_data_t *fdata) {
  685|      4|    STRLCPY(fdata->caption, "Set Flags", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  686|      4|    FORMATTER_CHECK(
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  687|      4|        print_account_flags(fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags,
  688|      4|                            fdata->value,
  689|      4|                            fdata->value_len))
  690|      4|    format_set_option_master_weight_prepare(fdata);
  691|      4|    return true;
  692|      4|}
formatter.c:format_set_option_master_weight_prepare:
  675|    386|static bool format_set_option_master_weight_prepare(formatter_data_t *fdata) {
  676|    386|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight_present) {
  ------------------
  |  Branch (676:9): [True: 27, False: 359]
  ------------------
  677|     27|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_master_weight))
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
  678|    359|    } else {
  679|    359|        format_set_option_low_threshold_prepare(fdata);
  680|    359|    }
  681|    386|    return true;
  682|    386|}
formatter.c:format_set_option_master_weight:
  665|     27|static bool format_set_option_master_weight(formatter_data_t *fdata) {
  666|     27|    STRLCPY(fdata->caption, "Master Weight", fdata->caption_len);
  ------------------
  |  |   35|     27|    {                                         \
  |  |   36|     27|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     27|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   38|     27|    }
  ------------------
  667|     27|    FORMATTER_CHECK(
  ------------------
  |  |   30|     27|    {                           \
  |  |   31|     27|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   32|     27|    }
  ------------------
  668|     27|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight,
  669|     27|                         fdata->value,
  670|     27|                         fdata->value_len))
  671|     27|    format_set_option_low_threshold_prepare(fdata);
  672|     27|    return true;
  673|     27|}
formatter.c:format_set_option_low_threshold_prepare:
  656|    386|static bool format_set_option_low_threshold_prepare(formatter_data_t *fdata) {
  657|    386|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold_present) {
  ------------------
  |  Branch (657:9): [True: 74, False: 312]
  ------------------
  658|     74|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_low_threshold))
  ------------------
  |  |   30|     74|    {                           \
  |  |   31|     74|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 74]
  |  |  ------------------
  |  |   32|     74|    }
  ------------------
  659|    312|    } else {
  660|    312|        format_set_option_medium_threshold_prepare(fdata);
  661|    312|    }
  662|    386|    return true;
  663|    386|}
formatter.c:format_set_option_low_threshold:
  646|     74|static bool format_set_option_low_threshold(formatter_data_t *fdata) {
  647|     74|    STRLCPY(fdata->caption, "Low Threshold", fdata->caption_len);
  ------------------
  |  |   35|     74|    {                                         \
  |  |   36|     74|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     74|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 74]
  |  |  ------------------
  |  |   38|     74|    }
  ------------------
  648|     74|    FORMATTER_CHECK(
  ------------------
  |  |   30|     74|    {                           \
  |  |   31|     74|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 74]
  |  |  ------------------
  |  |   32|     74|    }
  ------------------
  649|     74|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold,
  650|     74|                         fdata->value,
  651|     74|                         fdata->value_len))
  652|     74|    format_set_option_medium_threshold_prepare(fdata);
  653|     74|    return true;
  654|     74|}
formatter.c:format_set_option_medium_threshold_prepare:
  637|    386|static bool format_set_option_medium_threshold_prepare(formatter_data_t *fdata) {
  638|    386|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold_present) {
  ------------------
  |  Branch (638:9): [True: 57, False: 329]
  ------------------
  639|     57|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_medium_threshold))
  ------------------
  |  |   30|     57|    {                           \
  |  |   31|     57|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 57]
  |  |  ------------------
  |  |   32|     57|    }
  ------------------
  640|    329|    } else {
  641|    329|        format_set_option_high_threshold_prepare(fdata);
  642|    329|    }
  643|    386|    return true;
  644|    386|}
formatter.c:format_set_option_medium_threshold:
  627|     57|static bool format_set_option_medium_threshold(formatter_data_t *fdata) {
  628|     57|    STRLCPY(fdata->caption, "Medium Threshold", fdata->caption_len);
  ------------------
  |  |   35|     57|    {                                         \
  |  |   36|     57|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     57|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 57]
  |  |  ------------------
  |  |   38|     57|    }
  ------------------
  629|     57|    FORMATTER_CHECK(
  ------------------
  |  |   30|     57|    {                           \
  |  |   31|     57|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 57]
  |  |  ------------------
  |  |   32|     57|    }
  ------------------
  630|     57|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold,
  631|     57|                         fdata->value,
  632|     57|                         fdata->value_len))
  633|     57|    format_set_option_high_threshold_prepare(fdata);
  634|     57|    return true;
  635|     57|}
formatter.c:format_set_option_high_threshold_prepare:
  618|    386|static bool format_set_option_high_threshold_prepare(formatter_data_t *fdata) {
  619|    386|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold_present) {
  ------------------
  |  Branch (619:9): [True: 4, False: 382]
  ------------------
  620|      4|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_high_threshold))
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  621|    382|    } else {
  622|    382|        format_set_option_home_domain_prepare(fdata);
  623|    382|    }
  624|    386|    return true;
  625|    386|}
formatter.c:format_set_option_high_threshold:
  608|      4|static bool format_set_option_high_threshold(formatter_data_t *fdata) {
  609|      4|    STRLCPY(fdata->caption, "High Threshold", fdata->caption_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  610|      4|    FORMATTER_CHECK(
  ------------------
  |  |   30|      4|    {                           \
  |  |   31|      4|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   32|      4|    }
  ------------------
  611|      4|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold,
  612|      4|                         fdata->value,
  613|      4|                         fdata->value_len))
  614|      4|    format_set_option_home_domain_prepare(fdata);
  615|      4|    return true;
  616|      4|}
formatter.c:format_set_option_home_domain_prepare:
  599|    386|static bool format_set_option_home_domain_prepare(formatter_data_t *fdata) {
  600|    386|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_present) {
  ------------------
  |  Branch (600:9): [True: 206, False: 180]
  ------------------
  601|    206|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_home_domain))
  ------------------
  |  |   30|    206|    {                           \
  |  |   31|    206|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 206]
  |  |  ------------------
  |  |   32|    206|    }
  ------------------
  602|    206|    } else {
  603|    180|        format_set_option_signer_prepare(fdata);
  604|    180|    }
  605|    386|    return true;
  606|    386|}
formatter.c:format_set_option_home_domain:
  584|    206|static bool format_set_option_home_domain(formatter_data_t *fdata) {
  585|    206|    STRLCPY(fdata->caption, "Home Domain", fdata->caption_len);
  ------------------
  |  |   35|    206|    {                                         \
  |  |   36|    206|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    206|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 206]
  |  |  ------------------
  |  |   38|    206|    }
  ------------------
  586|    206|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_size) {
  ------------------
  |  Branch (586:9): [True: 126, False: 80]
  ------------------
  587|    126|        FORMATTER_CHECK(
  ------------------
  |  |   30|    126|    {                           \
  |  |   31|    126|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 126]
  |  |  ------------------
  |  |   32|    126|    }
  ------------------
  588|    126|            print_string(fdata->value,
  589|    126|                         fdata->value_len,
  590|    126|                         fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain,
  591|    126|                         fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_size))
  592|    126|    } else {
  593|     80|        STRLCPY(fdata->value, "[remove home domain from account]", fdata->value_len);
  ------------------
  |  |   35|     80|    {                                         \
  |  |   36|     80|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     80|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 80]
  |  |  ------------------
  |  |   38|     80|    }
  ------------------
  594|     80|    }
  595|    206|    format_set_option_signer_prepare(fdata);
  596|    206|    return true;
  597|    206|}
formatter.c:format_set_option_signer_prepare:
  575|    386|static bool format_set_option_signer_prepare(formatter_data_t *fdata) {
  576|    386|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.signer_present) {
  ------------------
  |  Branch (576:9): [True: 29, False: 357]
  ------------------
  577|     29|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer))
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  578|    357|    } else {
  579|    357|        return format_operation_source_prepare(fdata);
  580|    357|    }
  581|     29|    return true;
  582|    386|}
formatter.c:format_set_option_signer:
  544|     29|static bool format_set_option_signer(formatter_data_t *fdata) {
  545|     29|    signer_t *signer = &fdata->envelope->tx_details.tx.op_details.set_options_op.signer;
  546|     29|    if (signer->weight) {
  ------------------
  |  Branch (546:9): [True: 12, False: 17]
  ------------------
  547|     12|        STRLCPY(fdata->caption, "Add Signer", fdata->caption_len);
  ------------------
  |  |   35|     12|    {                                         \
  |  |   36|     12|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     12|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   38|     12|    }
  ------------------
  548|     17|    } else {
  549|     17|        STRLCPY(fdata->caption, "Remove Signer", fdata->caption_len);
  ------------------
  |  |   35|     17|    {                                         \
  |  |   36|     17|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     17|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   38|     17|    }
  ------------------
  550|     17|    }
  551|     29|    switch (signer->key.type) {
  552|     25|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (552:9): [True: 25, False: 4]
  ------------------
  553|     25|            STRLCPY(fdata->value, "Type Public Key", fdata->value_len);
  ------------------
  |  |   35|     25|    {                                         \
  |  |   36|     25|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     25|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   38|     25|    }
  ------------------
  554|     25|            break;
  555|     25|        }
  556|      2|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (556:9): [True: 2, False: 27]
  ------------------
  557|      2|            STRLCPY(fdata->value, "Type Hash(x)", fdata->value_len);
  ------------------
  |  |   35|      2|    {                                         \
  |  |   36|      2|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      2|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   38|      2|    }
  ------------------
  558|      2|            break;
  559|      2|        }
  560|      2|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (560:9): [True: 2, False: 27]
  ------------------
  561|      2|            STRLCPY(fdata->value, "Type Pre-Auth", fdata->value_len);
  ------------------
  |  |   35|      2|    {                                         \
  |  |   36|      2|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      2|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2]
  |  |  ------------------
  |  |   38|      2|    }
  ------------------
  562|      2|            break;
  563|      2|        }
  564|      0|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (564:9): [True: 0, False: 29]
  ------------------
  565|      0|            STRLCPY(fdata->value, "Type Ed25519 Signed Payload", fdata->value_len);
  ------------------
  |  |   35|      0|    {                                         \
  |  |   36|      0|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      0|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   38|      0|    }
  ------------------
  566|      0|            break;
  567|      0|        }
  568|      0|        default:
  ------------------
  |  Branch (568:9): [True: 0, False: 29]
  ------------------
  569|      0|            return false;
  570|     29|    }
  571|     29|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer_detail))
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  572|     29|    return true;
  573|     29|}
formatter.c:format_set_option_signer_detail:
  530|     29|static bool format_set_option_signer_detail(formatter_data_t *fdata) {
  531|     29|    STRLCPY(fdata->caption, "Signer Key", fdata->caption_len);
  ------------------
  |  |   35|     29|    {                                         \
  |  |   36|     29|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     29|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   38|     29|    }
  ------------------
  532|     29|    signer_key_t *key = &fdata->envelope->tx_details.tx.op_details.set_options_op.signer.key;
  533|       |
  534|     29|    FORMATTER_CHECK(print_signer_key_detail(key, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  535|       |
  536|     29|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.signer.weight != 0) {
  ------------------
  |  Branch (536:9): [True: 12, False: 17]
  ------------------
  537|     12|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer_weight))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  538|     17|    } else {
  539|     17|        return format_operation_source_prepare(fdata);
  540|     17|    }
  541|     12|    return true;
  542|     29|}
formatter.c:print_signer_key_detail:
  502|    613|static bool print_signer_key_detail(signer_key_t *key, char *value, size_t value_len) {
  503|    613|    switch (key->type) {
  504|    255|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (504:9): [True: 255, False: 358]
  ------------------
  505|    255|            FORMATTER_CHECK(print_account_id(key->ed25519, value, value_len, 0, 0))
  ------------------
  |  |   30|    255|    {                           \
  |  |   31|    255|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 255]
  |  |  ------------------
  |  |   32|    255|    }
  ------------------
  506|    255|            break;
  507|    255|        }
  508|    255|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (508:9): [True: 66, False: 547]
  ------------------
  509|     66|            FORMATTER_CHECK(print_hash_x_key(key->hash_x, value, value_len, 0, 0))
  ------------------
  |  |   30|     66|    {                           \
  |  |   31|     66|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 66]
  |  |  ------------------
  |  |   32|     66|    }
  ------------------
  510|     66|            break;
  511|     66|        }
  512|    154|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (512:9): [True: 154, False: 459]
  ------------------
  513|    154|            FORMATTER_CHECK(print_pre_auth_x_key(key->pre_auth_tx, value, value_len, 0, 0))
  ------------------
  |  |   30|    154|    {                           \
  |  |   31|    154|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 154]
  |  |  ------------------
  |  |   32|    154|    }
  ------------------
  514|    154|            break;
  515|    154|        }
  516|    154|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (516:9): [True: 138, False: 475]
  ------------------
  517|    138|            FORMATTER_CHECK(print_ed25519_signed_payload(&key->ed25519_signed_payload,
  ------------------
  |  |   30|    138|    {                           \
  |  |   31|    138|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 138]
  |  |  ------------------
  |  |   32|    138|    }
  ------------------
  518|    138|                                                         value,
  519|    138|                                                         value_len,
  520|    138|                                                         12,
  521|    138|                                                         12))
  522|    138|            break;
  523|    138|        }
  524|    138|        default:
  ------------------
  |  Branch (524:9): [True: 0, False: 613]
  ------------------
  525|      0|            return false;
  526|    613|    }
  527|    613|    return true;
  528|    613|}
formatter.c:format_set_option_signer_weight:
  493|     12|static bool format_set_option_signer_weight(formatter_data_t *fdata) {
  494|     12|    STRLCPY(fdata->caption, "Weight", fdata->caption_len);
  ------------------
  |  |   35|     12|    {                                         \
  |  |   36|     12|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     12|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   38|     12|    }
  ------------------
  495|     12|    FORMATTER_CHECK(
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  496|     12|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.signer.weight,
  497|     12|                         fdata->value,
  498|     12|                         fdata->value_len))
  499|     12|    return format_operation_source_prepare(fdata);
  500|     12|}
formatter.c:format_change_trust:
  829|    288|static bool format_change_trust(formatter_data_t *fdata) {
  830|    288|    if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit) {
  ------------------
  |  Branch (830:9): [True: 203, False: 85]
  ------------------
  831|    203|        STRLCPY(fdata->caption, "Change Trust", fdata->caption_len);
  ------------------
  |  |   35|    203|    {                                         \
  |  |   36|    203|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    203|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 203]
  |  |  ------------------
  |  |   38|    203|    }
  ------------------
  832|    203|    } else {
  833|     85|        STRLCPY(fdata->caption, "Remove Trust", fdata->caption_len);
  ------------------
  |  |   35|     85|    {                                         \
  |  |   36|     85|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     85|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 85]
  |  |  ------------------
  |  |   38|     85|    }
  ------------------
  834|     85|    }
  835|    288|    uint8_t asset_type = fdata->envelope->tx_details.tx.op_details.change_trust_op.line.type;
  836|    288|    switch (asset_type) {
  837|    155|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (837:9): [True: 155, False: 133]
  ------------------
  838|    208|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (838:9): [True: 53, False: 235]
  ------------------
  839|    208|            FORMATTER_CHECK(print_asset(
  ------------------
  |  |   30|    208|    {                           \
  |  |   31|    208|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 208]
  |  |  ------------------
  |  |   32|    208|    }
  ------------------
  840|    208|                (asset_t *) &fdata->envelope->tx_details.tx.op_details.change_trust_op.line,
  841|    208|                fdata->envelope->network,
  842|    208|                fdata->value,
  843|    208|                fdata->value_len))
  844|    208|            if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit &&
  ------------------
  |  Branch (844:17): [True: 157, False: 51]
  ------------------
  845|    208|                fdata->envelope->tx_details.tx.op_details.change_trust_op.limit != INT64_MAX) {
  ------------------
  |  Branch (845:17): [True: 157, False: 0]
  ------------------
  846|    157|                FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_limit))
  ------------------
  |  |   30|    157|    {                           \
  |  |   31|    157|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 157]
  |  |  ------------------
  |  |   32|    157|    }
  ------------------
  847|    157|            } else {
  848|     51|                return format_operation_source_prepare(fdata);
  849|     51|            }
  850|    157|            break;
  851|    157|        case ASSET_TYPE_POOL_SHARE:
  ------------------
  |  Branch (851:9): [True: 17, False: 271]
  ------------------
  852|     17|            STRLCPY(fdata->value, "Liquidity Pool Asset", fdata->value_len);
  ------------------
  |  |   35|     17|    {                                         \
  |  |   36|     17|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     17|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   38|     17|    }
  ------------------
  853|     17|            FORMATTER_CHECK(
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
  854|     17|                push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_asset_a))
  855|     17|            break;
  856|     63|        default:
  ------------------
  |  Branch (856:9): [True: 63, False: 225]
  ------------------
  857|     63|            return false;
  858|    288|    }
  859|    174|    return true;
  860|    288|}
formatter.c:format_change_trust_limit:
  776|    167|static bool format_change_trust_limit(formatter_data_t *fdata) {
  777|    167|    STRLCPY(fdata->caption, "Trust Limit", fdata->caption_len);
  ------------------
  |  |   35|    167|    {                                         \
  |  |   36|    167|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    167|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 167]
  |  |  ------------------
  |  |   38|    167|    }
  ------------------
  778|    167|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.change_trust_op.limit,
  ------------------
  |  |   30|    167|    {                           \
  |  |   31|    167|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 167]
  |  |  ------------------
  |  |   32|    167|    }
  ------------------
  779|    167|                                 NULL,
  780|    167|                                 fdata->envelope->network,
  781|    167|                                 fdata->value,
  782|    167|                                 fdata->value_len))
  783|    167|    return format_operation_source_prepare(fdata);
  784|    167|}
formatter.c:format_change_trust_detail_liquidity_pool_asset_a:
  818|     17|static bool format_change_trust_detail_liquidity_pool_asset_a(formatter_data_t *fdata) {
  819|     17|    STRLCPY(fdata->caption, "Asset A", fdata->caption_len);
  ------------------
  |  |   35|     17|    {                                         \
  |  |   36|     17|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     17|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   38|     17|    }
  ------------------
  820|     17|    FORMATTER_CHECK(print_asset(&fdata->envelope->tx_details.tx.op_details.change_trust_op.line
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
  821|     17|                                     .liquidity_pool.constant_product.asset_a,
  822|     17|                                fdata->envelope->network,
  823|     17|                                fdata->value,
  824|     17|                                fdata->value_len))
  825|     17|    FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_asset_b))
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
  826|     17|    return true;
  827|     17|}
formatter.c:format_change_trust_detail_liquidity_pool_asset_b:
  807|     17|static bool format_change_trust_detail_liquidity_pool_asset_b(formatter_data_t *fdata) {
  808|     17|    STRLCPY(fdata->caption, "Asset B", fdata->caption_len);
  ------------------
  |  |   35|     17|    {                                         \
  |  |   36|     17|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     17|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   38|     17|    }
  ------------------
  809|     17|    FORMATTER_CHECK(print_asset(&fdata->envelope->tx_details.tx.op_details.change_trust_op.line
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
  810|     17|                                     .liquidity_pool.constant_product.asset_b,
  811|     17|                                fdata->envelope->network,
  812|     17|                                fdata->value,
  813|     17|                                fdata->value_len))
  814|     17|    FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_fee))
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
  815|     17|    return true;
  816|     17|}
formatter.c:format_change_trust_detail_liquidity_pool_fee:
  786|     17|static bool format_change_trust_detail_liquidity_pool_fee(formatter_data_t *fdata) {
  787|     17|    STRLCPY(fdata->caption, "Pool Fee Rate", fdata->caption_len);
  ------------------
  |  |   35|     17|    {                                         \
  |  |   36|     17|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     17|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   38|     17|    }
  ------------------
  788|       |
  789|     17|    uint8_t fee[4] = {0};
  790|     85|    for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (790:21): [True: 68, False: 17]
  ------------------
  791|     68|        fee[i] = fdata->envelope->tx_details.tx.op_details.change_trust_op.line.liquidity_pool
  792|     68|                     .constant_product.fee >>
  793|     68|                 (8 * (3 - i));
  794|     68|    }
  795|     17|    FORMATTER_CHECK(print_int32(fee, 2, fdata->value, fdata->value_len, false))
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
  796|       |
  797|     17|    STRLCAT(fdata->value, "%", fdata->value_len);
  ------------------
  |  |   41|     17|    {                                         \
  |  |   42|     17|        size_t len = strlcat(dst, src, size); \
  |  |   43|     17|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   44|     17|    }
  ------------------
  798|     17|    if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit &&
  ------------------
  |  Branch (798:9): [True: 10, False: 7]
  ------------------
  799|     17|        fdata->envelope->tx_details.tx.op_details.change_trust_op.limit != INT64_MAX) {
  ------------------
  |  Branch (799:9): [True: 10, False: 0]
  ------------------
  800|     10|        FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_limit))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
  801|     10|    } else {
  802|      7|        return format_operation_source_prepare(fdata);
  803|      7|    }
  804|     10|    return true;
  805|     17|}
formatter.c:format_allow_trust:
  485|     54|static bool format_allow_trust(formatter_data_t *fdata) {
  486|     54|    (void) fdata;
  487|     54|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     54|    {                                         \
  |  |   36|     54|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     54|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 54]
  |  |  ------------------
  |  |   38|     54|    }
  ------------------
  488|     54|    STRLCPY(fdata->value, "Allow Trust", fdata->value_len);
  ------------------
  |  |   35|     54|    {                                         \
  |  |   36|     54|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     54|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 54]
  |  |  ------------------
  |  |   38|     54|    }
  ------------------
  489|     54|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_trustor))
  ------------------
  |  |   30|     54|    {                           \
  |  |   31|     54|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 54]
  |  |  ------------------
  |  |   32|     54|    }
  ------------------
  490|     54|    return true;
  491|     54|}
formatter.c:format_allow_trust_trustor:
  473|     54|static bool format_allow_trust_trustor(formatter_data_t *fdata) {
  474|     54|    STRLCPY(fdata->caption, "Trustor", fdata->caption_len);
  ------------------
  |  |   35|     54|    {                                         \
  |  |   36|     54|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     54|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 54]
  |  |  ------------------
  |  |   38|     54|    }
  ------------------
  475|     54|    FORMATTER_CHECK(
  ------------------
  |  |   30|     54|    {                           \
  |  |   31|     54|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 54]
  |  |  ------------------
  |  |   32|     54|    }
  ------------------
  476|     54|        print_account_id(fdata->envelope->tx_details.tx.op_details.allow_trust_op.trustor,
  477|     54|                         fdata->value,
  478|     54|                         fdata->value_len,
  479|     54|                         0,
  480|     54|                         0))
  481|     54|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_asset_code))
  ------------------
  |  |   30|     54|    {                           \
  |  |   31|     54|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 54]
  |  |  ------------------
  |  |   32|     54|    }
  ------------------
  482|     54|    return true;
  483|     54|}
formatter.c:format_allow_trust_asset_code:
  446|     54|static bool format_allow_trust_asset_code(formatter_data_t *fdata) {
  447|     54|    STRLCPY(fdata->caption, "Asset Code", fdata->caption_len);
  ------------------
  |  |   35|     54|    {                                         \
  |  |   36|     54|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     54|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 54]
  |  |  ------------------
  |  |   38|     54|    }
  ------------------
  448|     54|    switch (fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_type) {
  449|     12|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (449:9): [True: 12, False: 42]
  ------------------
  450|     12|            FORMATTER_CHECK(
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  451|     12|                print_string(fdata->value,
  452|     12|                             fdata->value_len,
  453|     12|                             fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_code,
  454|     12|                             4))
  455|       |
  456|     12|            break;
  457|     12|        }
  458|     42|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (458:9): [True: 42, False: 12]
  ------------------
  459|     42|            FORMATTER_CHECK(
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
  460|     42|                print_string(fdata->value,
  461|     42|                             fdata->value_len,
  462|     42|                             fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_code,
  463|     42|                             12))
  464|     42|            break;
  465|     42|        }
  466|     42|        default:
  ------------------
  |  Branch (466:9): [True: 0, False: 54]
  ------------------
  467|      0|            return false;  // unknown asset type
  468|     54|    }
  469|     54|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_authorize))
  ------------------
  |  |   30|     54|    {                           \
  |  |   31|     54|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 54]
  |  |  ------------------
  |  |   32|     54|    }
  ------------------
  470|     54|    return true;
  471|     54|}
formatter.c:format_allow_trust_authorize:
  437|     54|static bool format_allow_trust_authorize(formatter_data_t *fdata) {
  438|     54|    STRLCPY(fdata->caption, "Authorize Flag", fdata->caption_len);
  ------------------
  |  |   35|     54|    {                                         \
  |  |   36|     54|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     54|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 54]
  |  |  ------------------
  |  |   38|     54|    }
  ------------------
  439|     54|    FORMATTER_CHECK(
  ------------------
  |  |   30|     54|    {                           \
  |  |   31|     54|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 54]
  |  |  ------------------
  |  |   32|     54|    }
  ------------------
  440|     54|        print_allow_trust_flags(fdata->envelope->tx_details.tx.op_details.allow_trust_op.authorize,
  441|     54|                                fdata->value,
  442|     54|                                fdata->value_len))
  443|     54|    return format_operation_source_prepare(fdata);
  444|     54|}
formatter.c:format_account_merge:
  387|    121|static bool format_account_merge(formatter_data_t *fdata) {
  388|    121|    (void) fdata;
  389|    121|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    121|    {                                         \
  |  |   36|    121|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    121|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 121]
  |  |  ------------------
  |  |   38|    121|    }
  ------------------
  390|    121|    STRLCPY(fdata->value, "Account Merge", fdata->value_len);
  ------------------
  |  |   35|    121|    {                                         \
  |  |   36|    121|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    121|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 121]
  |  |  ------------------
  |  |   38|    121|    }
  ------------------
  391|    121|    FORMATTER_CHECK(push_to_formatter_stack(&format_account_merge_detail))
  ------------------
  |  |   30|    121|    {                           \
  |  |   31|    121|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 121]
  |  |  ------------------
  |  |   32|    121|    }
  ------------------
  392|    121|    return true;
  393|    121|}
formatter.c:format_account_merge_detail:
  380|    121|static bool format_account_merge_detail(formatter_data_t *fdata) {
  381|    121|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|    121|    {                                         \
  |  |   36|    121|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    121|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 121]
  |  |  ------------------
  |  |   38|    121|    }
  ------------------
  382|    121|    STRLCPY(fdata->value, "All Funds", fdata->value_len);
  ------------------
  |  |   35|    121|    {                                         \
  |  |   36|    121|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    121|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 121]
  |  |  ------------------
  |  |   38|    121|    }
  ------------------
  383|    121|    FORMATTER_CHECK(push_to_formatter_stack(&format_account_merge_destination))
  ------------------
  |  |   30|    121|    {                           \
  |  |   31|    121|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 121]
  |  |  ------------------
  |  |   32|    121|    }
  ------------------
  384|    121|    return true;
  385|    121|}
formatter.c:format_account_merge_destination:
  369|    121|static bool format_account_merge_destination(formatter_data_t *fdata) {
  370|    121|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    121|    {                                         \
  |  |   36|    121|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    121|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 121]
  |  |  ------------------
  |  |   38|    121|    }
  ------------------
  371|    121|    FORMATTER_CHECK(
  ------------------
  |  |   30|    121|    {                           \
  |  |   31|    121|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 121]
  |  |  ------------------
  |  |   32|    121|    }
  ------------------
  372|    121|        print_muxed_account(&fdata->envelope->tx_details.tx.op_details.account_merge_op.destination,
  373|    121|                            fdata->value,
  374|    121|                            fdata->value_len,
  375|    121|                            0,
  376|    121|                            0))
  377|    121|    return format_operation_source_prepare(fdata);
  378|    121|}
formatter.c:format_inflation:
  362|    184|static bool format_inflation(formatter_data_t *fdata) {
  363|    184|    (void) fdata;
  364|    184|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    184|    {                                         \
  |  |   36|    184|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    184|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 184]
  |  |  ------------------
  |  |   38|    184|    }
  ------------------
  365|    184|    STRLCPY(fdata->value, "Inflation", fdata->value_len);
  ------------------
  |  |   35|    184|    {                                         \
  |  |   36|    184|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    184|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 184]
  |  |  ------------------
  |  |   38|    184|    }
  ------------------
  366|    184|    return format_operation_source_prepare(fdata);
  367|    184|}
formatter.c:format_manage_data:
  420|    237|static bool format_manage_data(formatter_data_t *fdata) {
  421|    237|    FORMATTER_CHECK(
  ------------------
  |  |   30|    237|    {                           \
  |  |   31|    237|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 237]
  |  |  ------------------
  |  |   32|    237|    }
  ------------------
  422|    237|        print_string(fdata->value,
  423|    237|                     fdata->value_len,
  424|    237|                     fdata->envelope->tx_details.tx.op_details.manage_data_op.data_name,
  425|    237|                     fdata->envelope->tx_details.tx.op_details.manage_data_op.data_name_size))
  426|       |
  427|    237|    if (fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size) {
  ------------------
  |  Branch (427:9): [True: 9, False: 228]
  ------------------
  428|      9|        STRLCPY(fdata->caption, "Set Data", fdata->caption_len);
  ------------------
  |  |   35|      9|    {                                         \
  |  |   36|      9|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      9|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 9]
  |  |  ------------------
  |  |   38|      9|    }
  ------------------
  429|      9|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_data_value))
  ------------------
  |  |   30|      9|    {                           \
  |  |   31|      9|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 9]
  |  |  ------------------
  |  |   32|      9|    }
  ------------------
  430|    228|    } else {
  431|    228|        STRLCPY(fdata->caption, "Remove Data", fdata->caption_len);
  ------------------
  |  |   35|    228|    {                                         \
  |  |   36|    228|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    228|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 228]
  |  |  ------------------
  |  |   38|    228|    }
  ------------------
  432|    228|        return format_operation_source_prepare(fdata);
  433|    228|    }
  434|      9|    return true;
  435|    237|}
formatter.c:format_manage_data_value:
  395|      9|static bool format_manage_data_value(formatter_data_t *fdata) {
  396|      9|    STRLCPY(fdata->caption, "Data Value", fdata->caption_len);
  ------------------
  |  |   35|      9|    {                                         \
  |  |   36|      9|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      9|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 9]
  |  |  ------------------
  |  |   38|      9|    }
  ------------------
  397|      9|    if (is_printable_binary(
  ------------------
  |  Branch (397:9): [True: 3, False: 6]
  ------------------
  398|      9|            fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  399|      9|            fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size)) {
  400|      3|        if (fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size >=
  ------------------
  |  Branch (400:13): [True: 0, False: 3]
  ------------------
  401|      3|            fdata->value_len) {
  402|      0|            return false;
  403|      0|        }
  404|      3|        FORMATTER_CHECK(
  ------------------
  |  |   30|      3|    {                           \
  |  |   31|      3|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   32|      3|    }
  ------------------
  405|      3|            print_string(fdata->value,
  406|      3|                         fdata->value_len,
  407|      3|                         fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  408|      3|                         fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size))
  409|      6|    } else {
  410|      6|        STRLCPY(fdata->value, "Base64: ", fdata->value_len)
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
  411|      6|        FORMATTER_CHECK(
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
  412|      6|            base64_encode(fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  413|      6|                          fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size,
  414|      6|                          fdata->value + strlen(fdata->value),
  415|      6|                          fdata->value_len - strlen(fdata->value)))
  416|      6|    }
  417|      9|    return format_operation_source_prepare(fdata);
  418|      9|}
formatter.c:format_bump_sequence:
  354|     29|static bool format_bump_sequence(formatter_data_t *fdata) {
  355|     29|    (void) fdata;
  356|     29|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     29|    {                                         \
  |  |   36|     29|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     29|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   38|     29|    }
  ------------------
  357|     29|    STRLCPY(fdata->value, "Bump Sequence", fdata->value_len);
  ------------------
  |  |   35|     29|    {                                         \
  |  |   36|     29|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     29|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   38|     29|    }
  ------------------
  358|     29|    FORMATTER_CHECK(push_to_formatter_stack(&format_bump_sequence_bump_to))
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  359|     29|    return true;
  360|     29|}
formatter.c:format_bump_sequence_bump_to:
  345|     29|static bool format_bump_sequence_bump_to(formatter_data_t *fdata) {
  346|     29|    STRLCPY(fdata->caption, "Bump To", fdata->caption_len);
  ------------------
  |  |   35|     29|    {                                         \
  |  |   36|     29|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     29|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   38|     29|    }
  ------------------
  347|     29|    FORMATTER_CHECK(
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  348|     29|        print_int64_num(fdata->envelope->tx_details.tx.op_details.bump_sequence_op.bump_to,
  349|     29|                        fdata->value,
  350|     29|                        fdata->value_len))
  351|     29|    return format_operation_source_prepare(fdata);
  352|     29|}
formatter.c:format_manage_buy_offer:
  955|     36|static bool format_manage_buy_offer(formatter_data_t *fdata) {
  956|     36|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  957|       |
  958|     36|    if (op->buy_amount == 0) {
  ------------------
  |  Branch (958:9): [True: 10, False: 26]
  ------------------
  959|     10|        STRLCPY(fdata->caption, "Remove Offer", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
  960|     10|        FORMATTER_CHECK(print_uint64_num(op->offer_id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
  961|     10|        return format_operation_source_prepare(fdata);
  962|     26|    } else {
  963|     26|        if (op->offer_id) {
  ------------------
  |  Branch (963:13): [True: 10, False: 16]
  ------------------
  964|     10|            STRLCPY(fdata->caption, "Change Offer", fdata->caption_len);
  ------------------
  |  |   35|     10|    {                                         \
  |  |   36|     10|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     10|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   38|     10|    }
  ------------------
  965|     10|            FORMATTER_CHECK(print_uint64_num(op->offer_id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     10|    {                           \
  |  |   31|     10|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 10]
  |  |  ------------------
  |  |   32|     10|    }
  ------------------
  966|     16|        } else {
  967|     16|            STRLCPY(fdata->caption, "Create Offer", fdata->caption_len);
  ------------------
  |  |   35|     16|    {                                         \
  |  |   36|     16|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     16|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 16]
  |  |  ------------------
  |  |   38|     16|    }
  ------------------
  968|     16|        }
  969|     26|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_sell))
  ------------------
  |  |   30|     26|    {                           \
  |  |   31|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   32|     26|    }
  ------------------
  970|     26|    }
  971|     26|    return true;
  972|     36|}
formatter.c:format_manage_buy_offer_sell:
  945|     26|static bool format_manage_buy_offer_sell(formatter_data_t *fdata) {
  946|     26|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  947|       |
  948|     26|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|     26|    {                                         \
  |  |   36|     26|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     26|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   38|     26|    }
  ------------------
  949|     26|    FORMATTER_CHECK(
  ------------------
  |  |   30|     26|    {                           \
  |  |   31|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   32|     26|    }
  ------------------
  950|     26|        print_asset(&op->selling, fdata->envelope->network, fdata->value, fdata->value_len))
  951|     26|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_buy))
  ------------------
  |  |   30|     26|    {                           \
  |  |   31|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   32|     26|    }
  ------------------
  952|     26|    return true;
  953|     26|}
formatter.c:format_manage_buy_offer_buy:
  932|     26|static bool format_manage_buy_offer_buy(formatter_data_t *fdata) {
  933|     26|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  934|       |
  935|     26|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|     26|    {                                         \
  |  |   36|     26|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     26|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   38|     26|    }
  ------------------
  936|     26|    FORMATTER_CHECK(print_amount(op->buy_amount,
  ------------------
  |  |   30|     26|    {                           \
  |  |   31|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   32|     26|    }
  ------------------
  937|     26|                                 &op->buying,
  938|     26|                                 fdata->envelope->network,
  939|     26|                                 fdata->value,
  940|     26|                                 fdata->value_len))
  941|     26|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_price))
  ------------------
  |  |   30|     26|    {                           \
  |  |   31|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   32|     26|    }
  ------------------
  942|     26|    return true;
  943|     26|}
formatter.c:format_manage_buy_offer_price:
  920|     26|static bool format_manage_buy_offer_price(formatter_data_t *fdata) {
  921|     26|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  922|     26|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|     26|    {                                         \
  |  |   36|     26|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     26|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   38|     26|    }
  ------------------
  923|     26|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|     26|    {                           \
  |  |   31|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   32|     26|    }
  ------------------
  924|     26|                                &op->selling,
  925|     26|                                &op->buying,
  926|     26|                                fdata->envelope->network,
  927|     26|                                fdata->value,
  928|     26|                                fdata->value_len))
  929|     26|    return format_operation_source_prepare(fdata);
  930|     26|}
formatter.c:format_path_payment_strict_send:
 1076|     39|static bool format_path_payment_strict_send(formatter_data_t *fdata) {
 1077|     39|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|     39|    {                                         \
  |  |   36|     39|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     39|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   38|     39|    }
  ------------------
 1078|     39|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     39|    {                           \
  |  |   31|     39|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   32|     39|    }
  ------------------
 1079|     39|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.send_amount,
 1080|     39|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.send_asset,
 1081|     39|        fdata->envelope->network,
 1082|     39|        fdata->value,
 1083|     39|        fdata->value_len))
 1084|     39|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_send_destination))
  ------------------
  |  |   30|     39|    {                           \
  |  |   31|     39|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   32|     39|    }
  ------------------
 1085|     39|    return true;
 1086|     39|}
formatter.c:format_path_payment_strict_send_destination:
 1064|     39|static bool format_path_payment_strict_send_destination(formatter_data_t *fdata) {
 1065|     39|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|     39|    {                                         \
  |  |   36|     39|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     39|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   38|     39|    }
  ------------------
 1066|     39|    FORMATTER_CHECK(print_muxed_account(
  ------------------
  |  |   30|     39|    {                           \
  |  |   31|     39|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   32|     39|    }
  ------------------
 1067|     39|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.destination,
 1068|     39|        fdata->value,
 1069|     39|        fdata->value_len,
 1070|     39|        0,
 1071|     39|        0))
 1072|     39|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_send_receive))
  ------------------
  |  |   30|     39|    {                           \
  |  |   31|     39|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   32|     39|    }
  ------------------
 1073|     39|    return true;
 1074|     39|}
formatter.c:format_path_payment_strict_send_receive:
 1053|     39|static bool format_path_payment_strict_send_receive(formatter_data_t *fdata) {
 1054|     39|    STRLCPY(fdata->caption, "Receive Min", fdata->caption_len);
  ------------------
  |  |   35|     39|    {                                         \
  |  |   36|     39|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     39|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   38|     39|    }
  ------------------
 1055|     39|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     39|    {                           \
  |  |   31|     39|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   32|     39|    }
  ------------------
 1056|     39|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.dest_min,
 1057|     39|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.dest_asset,
 1058|     39|        fdata->envelope->network,
 1059|     39|        fdata->value,
 1060|     39|        fdata->value_len))
 1061|     39|    return format_operation_source_prepare(fdata);
 1062|     39|}
formatter.c:format_create_claimable_balance:
 1165|    147|static bool format_create_claimable_balance(formatter_data_t *fdata) {
 1166|    147|    (void) fdata;
 1167|    147|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    147|    {                                         \
  |  |   36|    147|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    147|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 147]
  |  |  ------------------
  |  |   38|    147|    }
  ------------------
 1168|    147|    STRLCPY(fdata->value, "Create Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|    147|    {                                         \
  |  |   36|    147|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    147|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 147]
  |  |  ------------------
  |  |   38|    147|    }
  ------------------
 1169|    147|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_claimable_balance_balance))
  ------------------
  |  |   30|    147|    {                           \
  |  |   31|    147|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 147]
  |  |  ------------------
  |  |   32|    147|    }
  ------------------
 1170|    147|    return true;
 1171|    147|}
formatter.c:format_create_claimable_balance_balance:
 1153|    147|static bool format_create_claimable_balance_balance(formatter_data_t *fdata) {
 1154|    147|    STRLCPY(fdata->caption, "Balance", fdata->caption_len);
  ------------------
  |  |   35|    147|    {                                         \
  |  |   36|    147|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    147|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 147]
  |  |  ------------------
  |  |   38|    147|    }
  ------------------
 1155|    147|    FORMATTER_CHECK(
  ------------------
  |  |   30|    147|    {                           \
  |  |   31|    147|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 147]
  |  |  ------------------
  |  |   32|    147|    }
  ------------------
 1156|    147|        print_amount(fdata->envelope->tx_details.tx.op_details.create_claimable_balance_op.amount,
 1157|    147|                     &fdata->envelope->tx_details.tx.op_details.create_claimable_balance_op.asset,
 1158|    147|                     fdata->envelope->network,
 1159|    147|                     fdata->value,
 1160|    147|                     fdata->value_len))
 1161|    147|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_claimable_balance_warning))
  ------------------
  |  |   30|    147|    {                           \
  |  |   31|    147|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 147]
  |  |  ------------------
  |  |   32|    147|    }
  ------------------
 1162|    147|    return true;
 1163|    147|}
formatter.c:format_create_claimable_balance_warning:
 1142|    147|static bool format_create_claimable_balance_warning(formatter_data_t *fdata) {
 1143|    147|    (void) fdata;
 1144|       |    // The claimant can be very complicated. I haven't figured out how to
 1145|       |    // display it for the time being, so let's display an WARNING here first.
 1146|    147|    STRLCPY(fdata->caption, "WARNING", fdata->caption_len);
  ------------------
  |  |   35|    147|    {                                         \
  |  |   36|    147|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    147|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 147]
  |  |  ------------------
  |  |   38|    147|    }
  ------------------
 1147|    147|    STRLCPY(fdata->value,
  ------------------
  |  |   35|    147|    {                                         \
  |  |   36|    147|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    147|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 147]
  |  |  ------------------
  |  |   38|    147|    }
  ------------------
 1148|    147|            "Currently does not support displaying claimant details",
 1149|    147|            fdata->value_len);
 1150|    147|    return format_operation_source_prepare(fdata);
 1151|    147|}
formatter.c:format_claim_claimable_balance:
 1184|     97|static bool format_claim_claimable_balance(formatter_data_t *fdata) {
 1185|     97|    (void) fdata;
 1186|     97|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     97|    {                                         \
  |  |   36|     97|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     97|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 97]
  |  |  ------------------
  |  |   38|     97|    }
  ------------------
 1187|     97|    STRLCPY(fdata->value, "Claim Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|     97|    {                                         \
  |  |   36|     97|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     97|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 97]
  |  |  ------------------
  |  |   38|     97|    }
  ------------------
 1188|     97|    FORMATTER_CHECK(push_to_formatter_stack(&format_claim_claimable_balance_balance_id))
  ------------------
  |  |   30|     97|    {                           \
  |  |   31|     97|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 97]
  |  |  ------------------
  |  |   32|     97|    }
  ------------------
 1189|     97|    return true;
 1190|     97|}
formatter.c:format_claim_claimable_balance_balance_id:
 1173|     97|static bool format_claim_claimable_balance_balance_id(formatter_data_t *fdata) {
 1174|     97|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|     97|    {                                         \
  |  |   36|     97|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     97|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 97]
  |  |  ------------------
  |  |   38|     97|    }
  ------------------
 1175|     97|    FORMATTER_CHECK(print_claimable_balance_id(
  ------------------
  |  |   30|     97|    {                           \
  |  |   31|     97|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 97]
  |  |  ------------------
  |  |   32|     97|    }
  ------------------
 1176|     97|        &fdata->envelope->tx_details.tx.op_details.claim_claimable_balance_op.balance_id,
 1177|     97|        fdata->value,
 1178|     97|        fdata->value_len,
 1179|     97|        12,
 1180|     97|        12))
 1181|     97|    return format_operation_source_prepare(fdata);
 1182|     97|}
formatter.c:format_begin_sponsoring_future_reserves:
 1203|    177|static bool format_begin_sponsoring_future_reserves(formatter_data_t *fdata) {
 1204|    177|    (void) fdata;
 1205|    177|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    177|    {                                         \
  |  |   36|    177|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    177|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 177]
  |  |  ------------------
  |  |   38|    177|    }
  ------------------
 1206|    177|    STRLCPY(fdata->value, "Begin Sponsoring Future Reserves", fdata->value_len);
  ------------------
  |  |   35|    177|    {                                         \
  |  |   36|    177|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    177|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 177]
  |  |  ------------------
  |  |   38|    177|    }
  ------------------
 1207|    177|    FORMATTER_CHECK(push_to_formatter_stack(&format_claim_claimable_balance_sponsored_id))
  ------------------
  |  |   30|    177|    {                           \
  |  |   31|    177|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 177]
  |  |  ------------------
  |  |   32|    177|    }
  ------------------
 1208|    177|    return true;
 1209|    177|}
formatter.c:format_claim_claimable_balance_sponsored_id:
 1192|    177|static bool format_claim_claimable_balance_sponsored_id(formatter_data_t *fdata) {
 1193|    177|    STRLCPY(fdata->caption, "Sponsored ID", fdata->caption_len);
  ------------------
  |  |   35|    177|    {                                         \
  |  |   36|    177|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    177|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 177]
  |  |  ------------------
  |  |   38|    177|    }
  ------------------
 1194|    177|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|    177|    {                           \
  |  |   31|    177|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 177]
  |  |  ------------------
  |  |   32|    177|    }
  ------------------
 1195|    177|        fdata->envelope->tx_details.tx.op_details.begin_sponsoring_future_reserves_op.sponsored_id,
 1196|    177|        fdata->value,
 1197|    177|        fdata->value_len,
 1198|    177|        0,
 1199|    177|        0))
 1200|    177|    return format_operation_source_prepare(fdata);
 1201|    177|}
formatter.c:format_end_sponsoring_future_reserves:
 1211|    100|static bool format_end_sponsoring_future_reserves(formatter_data_t *fdata) {
 1212|    100|    (void) fdata;
 1213|    100|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    100|    {                                         \
  |  |   36|    100|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    100|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 100]
  |  |  ------------------
  |  |   38|    100|    }
  ------------------
 1214|    100|    STRLCPY(fdata->value, "End Sponsoring Future Reserves", fdata->value_len);
  ------------------
  |  |   35|    100|    {                                         \
  |  |   36|    100|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    100|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 100]
  |  |  ------------------
  |  |   38|    100|    }
  ------------------
 1215|    100|    return format_operation_source_prepare(fdata);
 1216|    100|}
formatter.c:format_revoke_sponsorship:
 1383|  1.02k|static bool format_revoke_sponsorship(formatter_data_t *fdata) {
 1384|  1.02k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  1.02k|    {                                         \
  |  |   36|  1.02k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.02k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.02k]
  |  |  ------------------
  |  |   38|  1.02k|    }
  ------------------
 1385|  1.02k|    if (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.type ==
  ------------------
  |  Branch (1385:9): [True: 584, False: 439]
  ------------------
 1386|  1.02k|        REVOKE_SPONSORSHIP_SIGNER) {
 1387|    584|        STRLCPY(fdata->value, "Revoke Sponsorship (SIGNER_KEY)", fdata->value_len);
  ------------------
  |  |   35|    584|    {                                         \
  |  |   36|    584|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    584|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 584]
  |  |  ------------------
  |  |   38|    584|    }
  ------------------
 1388|    584|        FORMATTER_CHECK(
  ------------------
  |  |   30|    584|    {                           \
  |  |   31|    584|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 584]
  |  |  ------------------
  |  |   32|    584|    }
  ------------------
 1389|    584|            push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_account))
 1390|    584|    } else {
 1391|    439|        switch (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.type) {
 1392|     43|            case ACCOUNT:
  ------------------
  |  Branch (1392:13): [True: 43, False: 396]
  ------------------
 1393|     43|                STRLCPY(fdata->value, "Revoke Sponsorship (ACCOUNT)", fdata->value_len);
  ------------------
  |  |   35|     43|    {                                         \
  |  |   36|     43|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     43|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   38|     43|    }
  ------------------
 1394|     43|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_account))
  ------------------
  |  |   30|     43|    {                           \
  |  |   31|     43|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   32|     43|    }
  ------------------
 1395|     43|                break;
 1396|     43|            case OFFER:
  ------------------
  |  Branch (1396:13): [True: 31, False: 408]
  ------------------
 1397|     31|                STRLCPY(fdata->value, "Revoke Sponsorship (OFFER)", fdata->value_len);
  ------------------
  |  |   35|     31|    {                                         \
  |  |   36|     31|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     31|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   38|     31|    }
  ------------------
 1398|     31|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_offer_seller_id))
  ------------------
  |  |   30|     31|    {                           \
  |  |   31|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   32|     31|    }
  ------------------
 1399|     31|                break;
 1400|    220|            case TRUSTLINE:
  ------------------
  |  Branch (1400:13): [True: 220, False: 219]
  ------------------
 1401|    220|                STRLCPY(fdata->value, "Revoke Sponsorship (TRUSTLINE)", fdata->value_len);
  ------------------
  |  |   35|    220|    {                                         \
  |  |   36|    220|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    220|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 220]
  |  |  ------------------
  |  |   38|    220|    }
  ------------------
 1402|    220|                FORMATTER_CHECK(
  ------------------
  |  |   30|    220|    {                           \
  |  |   31|    220|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 220]
  |  |  ------------------
  |  |   32|    220|    }
  ------------------
 1403|    220|                    push_to_formatter_stack(&format_revoke_sponsorship_trust_line_account))
 1404|    220|                break;
 1405|    220|            case DATA:
  ------------------
  |  Branch (1405:13): [True: 20, False: 419]
  ------------------
 1406|     20|                STRLCPY(fdata->value, "Revoke Sponsorship (DATA)", fdata->value_len);
  ------------------
  |  |   35|     20|    {                                         \
  |  |   36|     20|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     20|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   38|     20|    }
  ------------------
 1407|     20|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_data_account))
  ------------------
  |  |   30|     20|    {                           \
  |  |   31|     20|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   32|     20|    }
  ------------------
 1408|     20|                break;
 1409|     77|            case CLAIMABLE_BALANCE:
  ------------------
  |  Branch (1409:13): [True: 77, False: 362]
  ------------------
 1410|     77|                STRLCPY(fdata->value, "Revoke Sponsorship (CLAIMABLE_BALANCE)", fdata->value_len);
  ------------------
  |  |   35|     77|    {                                         \
  |  |   36|     77|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     77|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 77]
  |  |  ------------------
  |  |   38|     77|    }
  ------------------
 1411|     77|                FORMATTER_CHECK(
  ------------------
  |  |   30|     77|    {                           \
  |  |   31|     77|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 77]
  |  |  ------------------
  |  |   32|     77|    }
  ------------------
 1412|     77|                    push_to_formatter_stack(&format_revoke_sponsorship_claimable_balance))
 1413|     77|                break;
 1414|     77|            case LIQUIDITY_POOL:
  ------------------
  |  Branch (1414:13): [True: 48, False: 391]
  ------------------
 1415|     48|                STRLCPY(fdata->value, "Revoke Sponsorship (LIQUIDITY_POOL)", fdata->value_len);
  ------------------
  |  |   35|     48|    {                                         \
  |  |   36|     48|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     48|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 48]
  |  |  ------------------
  |  |   38|     48|    }
  ------------------
 1416|     48|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_liquidity_pool))
  ------------------
  |  |   30|     48|    {                           \
  |  |   31|     48|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 48]
  |  |  ------------------
  |  |   32|     48|    }
  ------------------
 1417|     48|                break;
 1418|     48|            default:
  ------------------
  |  Branch (1418:13): [True: 0, False: 439]
  ------------------
 1419|      0|                return false;
 1420|    439|        }
 1421|    439|    }
 1422|  1.02k|    return true;
 1423|  1.02k|}
formatter.c:format_revoke_sponsorship_claimable_signer_account:
 1370|    584|static bool format_revoke_sponsorship_claimable_signer_account(formatter_data_t *fdata) {
 1371|    584|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    584|    {                                         \
  |  |   36|    584|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    584|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 584]
  |  |  ------------------
  |  |   38|    584|    }
  ------------------
 1372|    584|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|    584|    {                           \
  |  |   31|    584|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 584]
  |  |  ------------------
  |  |   32|    584|    }
  ------------------
 1373|    584|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.account_id,
 1374|    584|        fdata->value,
 1375|    584|        fdata->value_len,
 1376|    584|        0,
 1377|    584|        0))
 1378|    584|    FORMATTER_CHECK(
  ------------------
  |  |   30|    584|    {                           \
  |  |   31|    584|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 584]
  |  |  ------------------
  |  |   32|    584|    }
  ------------------
 1379|    584|        push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_signer_key_type))
 1380|    584|    return true;
 1381|    584|}
formatter.c:format_revoke_sponsorship_claimable_signer_signer_key_type:
 1341|    584|static bool format_revoke_sponsorship_claimable_signer_signer_key_type(formatter_data_t *fdata) {
 1342|    584|    STRLCPY(fdata->caption, "Signer Key Type", fdata->caption_len);
  ------------------
  |  |   35|    584|    {                                         \
  |  |   36|    584|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    584|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 584]
  |  |  ------------------
  |  |   38|    584|    }
  ------------------
 1343|    584|    switch (
 1344|    584|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.signer_key.type) {
 1345|    230|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (1345:9): [True: 230, False: 354]
  ------------------
 1346|    230|            STRLCPY(fdata->value, "Public Key", fdata->value_len);
  ------------------
  |  |   35|    230|    {                                         \
  |  |   36|    230|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    230|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 230]
  |  |  ------------------
  |  |   38|    230|    }
  ------------------
 1347|    230|            break;
 1348|    230|        }
 1349|     64|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (1349:9): [True: 64, False: 520]
  ------------------
 1350|     64|            STRLCPY(fdata->value, "Hash(x)", fdata->value_len);
  ------------------
  |  |   35|     64|    {                                         \
  |  |   36|     64|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     64|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 64]
  |  |  ------------------
  |  |   38|     64|    }
  ------------------
 1351|     64|            break;
 1352|     64|        }
 1353|    152|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (1353:9): [True: 152, False: 432]
  ------------------
 1354|    152|            STRLCPY(fdata->value, "Pre-Auth", fdata->value_len);
  ------------------
  |  |   35|    152|    {                                         \
  |  |   36|    152|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    152|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 152]
  |  |  ------------------
  |  |   38|    152|    }
  ------------------
 1355|    152|            break;
 1356|    152|        }
 1357|    138|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (1357:9): [True: 138, False: 446]
  ------------------
 1358|    138|            STRLCPY(fdata->value, "Ed25519 Signed Payload", fdata->value_len);
  ------------------
  |  |   35|    138|    {                                         \
  |  |   36|    138|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    138|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 138]
  |  |  ------------------
  |  |   38|    138|    }
  ------------------
 1359|    138|            break;
 1360|    138|        }
 1361|      0|        default:
  ------------------
  |  Branch (1361:9): [True: 0, False: 584]
  ------------------
 1362|      0|            return false;
 1363|    584|    }
 1364|       |
 1365|    584|    FORMATTER_CHECK(
  ------------------
  |  |   30|    584|    {                           \
  |  |   31|    584|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 584]
  |  |  ------------------
  |  |   32|    584|    }
  ------------------
 1366|    584|        push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_signer_key_detail))
 1367|    584|    return true;
 1368|    584|}
formatter.c:format_revoke_sponsorship_claimable_signer_signer_key_detail:
 1332|    584|static bool format_revoke_sponsorship_claimable_signer_signer_key_detail(formatter_data_t *fdata) {
 1333|    584|    STRLCPY(fdata->caption, "Signer Key", fdata->caption_len);
  ------------------
  |  |   35|    584|    {                                         \
  |  |   36|    584|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    584|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 584]
  |  |  ------------------
  |  |   38|    584|    }
  ------------------
 1334|    584|    signer_key_t *key =
 1335|    584|        &fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.signer_key;
 1336|       |
 1337|    584|    FORMATTER_CHECK(print_signer_key_detail(key, fdata->value, fdata->value_len))
  ------------------
  |  |   30|    584|    {                           \
  |  |   31|    584|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 584]
  |  |  ------------------
  |  |   32|    584|    }
  ------------------
 1338|    584|    return format_operation_source_prepare(fdata);
 1339|    584|}
formatter.c:format_revoke_sponsorship_account:
 1218|     43|static bool format_revoke_sponsorship_account(formatter_data_t *fdata) {
 1219|     43|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|     43|    {                                         \
  |  |   36|     43|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     43|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   38|     43|    }
  ------------------
 1220|     43|    FORMATTER_CHECK(print_account_id(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|     43|    {                           \
  |  |   31|     43|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   32|     43|    }
  ------------------
 1221|     43|                                         .ledger_key.account.account_id,
 1222|     43|                                     fdata->value,
 1223|     43|                                     fdata->value_len,
 1224|     43|                                     0,
 1225|     43|                                     0))
 1226|     43|    return format_operation_source_prepare(fdata);
 1227|     43|}
formatter.c:format_revoke_sponsorship_offer_seller_id:
 1273|     31|static bool format_revoke_sponsorship_offer_seller_id(formatter_data_t *fdata) {
 1274|     31|    STRLCPY(fdata->caption, "Seller ID", fdata->caption_len);
  ------------------
  |  |   35|     31|    {                                         \
  |  |   36|     31|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     31|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   38|     31|    }
  ------------------
 1275|     31|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|     31|    {                           \
  |  |   31|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   32|     31|    }
  ------------------
 1276|     31|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.offer.seller_id,
 1277|     31|        fdata->value,
 1278|     31|        fdata->value_len,
 1279|     31|        0,
 1280|     31|        0))
 1281|     31|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_offer_offer_id))
  ------------------
  |  |   30|     31|    {                           \
  |  |   31|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   32|     31|    }
  ------------------
 1282|     31|    return true;
 1283|     31|}
formatter.c:format_revoke_sponsorship_offer_offer_id:
 1263|     31|static bool format_revoke_sponsorship_offer_offer_id(formatter_data_t *fdata) {
 1264|     31|    STRLCPY(fdata->caption, "Offer ID", fdata->caption_len);
  ------------------
  |  |   35|     31|    {                                         \
  |  |   36|     31|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     31|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   38|     31|    }
  ------------------
 1265|     31|    FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|     31|    {                           \
  |  |   31|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   32|     31|    }
  ------------------
 1266|     31|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.offer.offer_id,
 1267|     31|        fdata->value,
 1268|     31|        fdata->value_len))
 1269|       |
 1270|     31|    return format_operation_source_prepare(fdata);
 1271|     31|}
formatter.c:format_revoke_sponsorship_trust_line_account:
 1251|    220|static bool format_revoke_sponsorship_trust_line_account(formatter_data_t *fdata) {
 1252|    220|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    220|    {                                         \
  |  |   36|    220|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    220|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 220]
  |  |  ------------------
  |  |   38|    220|    }
  ------------------
 1253|    220|    FORMATTER_CHECK(print_account_id(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|    220|    {                           \
  |  |   31|    220|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 220]
  |  |  ------------------
  |  |   32|    220|    }
  ------------------
 1254|    220|                                         .ledger_key.trust_line.account_id,
 1255|    220|                                     fdata->value,
 1256|    220|                                     fdata->value_len,
 1257|    220|                                     0,
 1258|    220|                                     0))
 1259|    220|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_trust_line_asset))
  ------------------
  |  |   30|    220|    {                           \
  |  |   31|    220|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 220]
  |  |  ------------------
  |  |   32|    220|    }
  ------------------
 1260|    220|    return true;
 1261|    220|}
formatter.c:format_revoke_sponsorship_trust_line_asset:
 1229|    220|static bool format_revoke_sponsorship_trust_line_asset(formatter_data_t *fdata) {
 1230|    220|    if (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.trust_line.asset
  ------------------
  |  Branch (1230:9): [True: 71, False: 149]
  ------------------
 1231|    220|            .type == ASSET_TYPE_POOL_SHARE) {
 1232|     71|        STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     71|    {                                         \
  |  |   36|     71|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     71|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 71]
  |  |  ------------------
  |  |   38|     71|    }
  ------------------
 1233|     71|        FORMATTER_CHECK(print_binary(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|     71|    {                           \
  |  |   31|     71|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 71]
  |  |  ------------------
  |  |   32|     71|    }
  ------------------
 1234|     71|                                         .ledger_key.trust_line.asset.liquidity_pool_id,
 1235|     71|                                     LIQUIDITY_POOL_ID_SIZE,
 1236|     71|                                     fdata->value,
 1237|     71|                                     fdata->value_len,
 1238|     71|                                     0,
 1239|     71|                                     0))
 1240|    149|    } else {
 1241|    149|        STRLCPY(fdata->caption, "Asset", fdata->caption_len);
  ------------------
  |  |   35|    149|    {                                         \
  |  |   36|    149|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    149|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 149]
  |  |  ------------------
  |  |   38|    149|    }
  ------------------
 1242|    149|        FORMATTER_CHECK(print_asset((asset_t *) &fdata->envelope->tx_details.tx.op_details
  ------------------
  |  |   30|    149|    {                           \
  |  |   31|    149|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 149]
  |  |  ------------------
  |  |   32|    149|    }
  ------------------
 1243|    149|                                        .revoke_sponsorship_op.ledger_key.trust_line.asset,
 1244|    149|                                    fdata->envelope->network,
 1245|    149|                                    fdata->value,
 1246|    149|                                    fdata->value_len))
 1247|    149|    }
 1248|    220|    return format_operation_source_prepare(fdata);
 1249|    220|}
formatter.c:format_revoke_sponsorship_data_account:
 1296|     20|static bool format_revoke_sponsorship_data_account(formatter_data_t *fdata) {
 1297|     20|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|     20|    {                                         \
  |  |   36|     20|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     20|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   38|     20|    }
  ------------------
 1298|     20|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|     20|    {                           \
  |  |   31|     20|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   32|     20|    }
  ------------------
 1299|     20|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data.account_id,
 1300|     20|        fdata->value,
 1301|     20|        fdata->value_len,
 1302|     20|        0,
 1303|     20|        0))
 1304|     20|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_data_data_name))
  ------------------
  |  |   30|     20|    {                           \
  |  |   31|     20|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   32|     20|    }
  ------------------
 1305|     20|    return true;
 1306|     20|}
formatter.c:format_revoke_sponsorship_data_data_name:
 1285|     20|static bool format_revoke_sponsorship_data_data_name(formatter_data_t *fdata) {
 1286|     20|    STRLCPY(fdata->caption, "Data Name", fdata->caption_len);
  ------------------
  |  |   35|     20|    {                                         \
  |  |   36|     20|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     20|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   38|     20|    }
  ------------------
 1287|     20|    FORMATTER_CHECK(print_string(
  ------------------
  |  |   30|     20|    {                           \
  |  |   31|     20|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 20]
  |  |  ------------------
  |  |   32|     20|    }
  ------------------
 1288|     20|        fdata->value,
 1289|     20|        fdata->value_len,
 1290|     20|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data.data_name,
 1291|     20|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data
 1292|     20|            .data_name_size))
 1293|     20|    return format_operation_source_prepare(fdata);
 1294|     20|}
formatter.c:format_revoke_sponsorship_claimable_balance:
 1308|     77|static bool format_revoke_sponsorship_claimable_balance(formatter_data_t *fdata) {
 1309|     77|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|     77|    {                                         \
  |  |   36|     77|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     77|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 77]
  |  |  ------------------
  |  |   38|     77|    }
  ------------------
 1310|     77|    FORMATTER_CHECK(
  ------------------
  |  |   30|     77|    {                           \
  |  |   31|     77|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 77]
  |  |  ------------------
  |  |   32|     77|    }
  ------------------
 1311|     77|        print_claimable_balance_id(&fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
 1312|     77|                                        .ledger_key.claimable_balance.balance_id,
 1313|     77|                                   fdata->value,
 1314|     77|                                   fdata->value_len,
 1315|     77|                                   0,
 1316|     77|                                   0))
 1317|     77|    return format_operation_source_prepare(fdata);
 1318|     77|}
formatter.c:format_revoke_sponsorship_liquidity_pool:
 1320|     48|static bool format_revoke_sponsorship_liquidity_pool(formatter_data_t *fdata) {
 1321|     48|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     48|    {                                         \
  |  |   36|     48|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     48|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 48]
  |  |  ------------------
  |  |   38|     48|    }
  ------------------
 1322|     48|    FORMATTER_CHECK(print_binary(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|     48|    {                           \
  |  |   31|     48|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 48]
  |  |  ------------------
  |  |   32|     48|    }
  ------------------
 1323|     48|                                     .ledger_key.liquidity_pool.liquidity_pool_id,
 1324|     48|                                 LIQUIDITY_POOL_ID_SIZE,
 1325|     48|                                 fdata->value,
 1326|     48|                                 fdata->value_len,
 1327|     48|                                 0,
 1328|     48|                                 0))
 1329|     48|    return format_operation_source_prepare(fdata);
 1330|     48|}
formatter.c:format_clawback:
 1446|     58|static bool format_clawback(formatter_data_t *fdata) {
 1447|     58|    (void) fdata;
 1448|     58|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     58|    {                                         \
  |  |   36|     58|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     58|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 58]
  |  |  ------------------
  |  |   38|     58|    }
  ------------------
 1449|     58|    STRLCPY(fdata->value, "Clawback", fdata->value_len);
  ------------------
  |  |   35|     58|    {                                         \
  |  |   36|     58|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     58|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 58]
  |  |  ------------------
  |  |   38|     58|    }
  ------------------
 1450|     58|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_amount))
  ------------------
  |  |   30|     58|    {                           \
  |  |   31|     58|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 58]
  |  |  ------------------
  |  |   32|     58|    }
  ------------------
 1451|     58|    return true;
 1452|     58|}
formatter.c:format_clawback_amount:
 1435|     58|static bool format_clawback_amount(formatter_data_t *fdata) {
 1436|     58|    STRLCPY(fdata->caption, "Clawback Balance", fdata->caption_len);
  ------------------
  |  |   35|     58|    {                                         \
  |  |   36|     58|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     58|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 58]
  |  |  ------------------
  |  |   38|     58|    }
  ------------------
 1437|     58|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.clawback_op.amount,
  ------------------
  |  |   30|     58|    {                           \
  |  |   31|     58|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 58]
  |  |  ------------------
  |  |   32|     58|    }
  ------------------
 1438|     58|                                 &fdata->envelope->tx_details.tx.op_details.clawback_op.asset,
 1439|     58|                                 fdata->envelope->network,
 1440|     58|                                 fdata->value,
 1441|     58|                                 fdata->value_len))
 1442|     58|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_from))
  ------------------
  |  |   30|     58|    {                           \
  |  |   31|     58|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 58]
  |  |  ------------------
  |  |   32|     58|    }
  ------------------
 1443|     58|    return true;
 1444|     58|}
formatter.c:format_clawback_from:
 1425|     58|static bool format_clawback_from(formatter_data_t *fdata) {
 1426|     58|    STRLCPY(fdata->caption, "From", fdata->caption_len);
  ------------------
  |  |   35|     58|    {                                         \
  |  |   36|     58|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     58|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 58]
  |  |  ------------------
  |  |   38|     58|    }
  ------------------
 1427|     58|    FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.op_details.clawback_op.from,
  ------------------
  |  |   30|     58|    {                           \
  |  |   31|     58|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 58]
  |  |  ------------------
  |  |   32|     58|    }
  ------------------
 1428|     58|                                        fdata->value,
 1429|     58|                                        fdata->value_len,
 1430|     58|                                        0,
 1431|     58|                                        0))
 1432|     58|    return format_operation_source_prepare(fdata);
 1433|     58|}
formatter.c:format_clawback_claimable_balance:
 1465|     86|static bool format_clawback_claimable_balance(formatter_data_t *fdata) {
 1466|     86|    (void) fdata;
 1467|     86|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 1468|     86|    STRLCPY(fdata->value, "Clawback Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 1469|     86|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_claimable_balance_balance_id))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 1470|     86|    return true;
 1471|     86|}
formatter.c:format_clawback_claimable_balance_balance_id:
 1454|     86|static bool format_clawback_claimable_balance_balance_id(formatter_data_t *fdata) {
 1455|     86|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 1456|     86|    FORMATTER_CHECK(print_claimable_balance_id(
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 1457|     86|        &fdata->envelope->tx_details.tx.op_details.clawback_claimable_balance_op.balance_id,
 1458|     86|        fdata->value,
 1459|     86|        fdata->value_len,
 1460|     86|        0,
 1461|     86|        0))
 1462|     86|    return format_operation_source_prepare(fdata);
 1463|     86|}
formatter.c:format_set_trust_line_flags:
 1523|    915|static bool format_set_trust_line_flags(formatter_data_t *fdata) {
 1524|    915|    (void) fdata;
 1525|    915|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    915|    {                                         \
  |  |   36|    915|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    915|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 915]
  |  |  ------------------
  |  |   38|    915|    }
  ------------------
 1526|    915|    STRLCPY(fdata->value, "Set Trust Line Flags", fdata->value_len);
  ------------------
  |  |   35|    915|    {                                         \
  |  |   36|    915|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    915|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 915]
  |  |  ------------------
  |  |   38|    915|    }
  ------------------
 1527|    915|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_trustor))
  ------------------
  |  |   30|    915|    {                           \
  |  |   31|    915|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 915]
  |  |  ------------------
  |  |   32|    915|    }
  ------------------
 1528|    915|    return true;
 1529|    915|}
formatter.c:format_set_trust_line_trustor:
 1511|    915|static bool format_set_trust_line_trustor(formatter_data_t *fdata) {
 1512|    915|    STRLCPY(fdata->caption, "Trustor", fdata->caption_len);
  ------------------
  |  |   35|    915|    {                                         \
  |  |   36|    915|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    915|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 915]
  |  |  ------------------
  |  |   38|    915|    }
  ------------------
 1513|    915|    FORMATTER_CHECK(
  ------------------
  |  |   30|    915|    {                           \
  |  |   31|    915|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 915]
  |  |  ------------------
  |  |   32|    915|    }
  ------------------
 1514|    915|        print_account_id(fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.trustor,
 1515|    915|                         fdata->value,
 1516|    915|                         fdata->value_len,
 1517|    915|                         0,
 1518|    915|                         0))
 1519|    915|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_asset))
  ------------------
  |  |   30|    915|    {                           \
  |  |   31|    915|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 915]
  |  |  ------------------
  |  |   32|    915|    }
  ------------------
 1520|    915|    return true;
 1521|    915|}
formatter.c:format_set_trust_line_asset:
 1500|    915|static bool format_set_trust_line_asset(formatter_data_t *fdata) {
 1501|    915|    STRLCPY(fdata->caption, "Asset", fdata->caption_len);
  ------------------
  |  |   35|    915|    {                                         \
  |  |   36|    915|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    915|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 915]
  |  |  ------------------
  |  |   38|    915|    }
  ------------------
 1502|    915|    FORMATTER_CHECK(
  ------------------
  |  |   30|    915|    {                           \
  |  |   31|    915|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 915]
  |  |  ------------------
  |  |   32|    915|    }
  ------------------
 1503|    915|        print_asset(&fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.asset,
 1504|    915|                    fdata->envelope->network,
 1505|    915|                    fdata->value,
 1506|    915|                    fdata->value_len))
 1507|    915|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_clear_flags))
  ------------------
  |  |   30|    915|    {                           \
  |  |   31|    915|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 915]
  |  |  ------------------
  |  |   32|    915|    }
  ------------------
 1508|    915|    return true;
 1509|    915|}
formatter.c:format_set_trust_line_clear_flags:
 1486|    915|static bool format_set_trust_line_clear_flags(formatter_data_t *fdata) {
 1487|    915|    STRLCPY(fdata->caption, "Clear Flags", fdata->caption_len);
  ------------------
  |  |   35|    915|    {                                         \
  |  |   36|    915|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    915|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 915]
  |  |  ------------------
  |  |   38|    915|    }
  ------------------
 1488|    915|    if (fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.clear_flags) {
  ------------------
  |  Branch (1488:9): [True: 547, False: 368]
  ------------------
 1489|    547|        FORMATTER_CHECK(print_trust_line_flags(
  ------------------
  |  |   30|    547|    {                           \
  |  |   31|    547|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 547]
  |  |  ------------------
  |  |   32|    547|    }
  ------------------
 1490|    547|            fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.clear_flags,
 1491|    547|            fdata->value,
 1492|    547|            fdata->value_len))
 1493|    547|    } else {
 1494|    368|        STRLCPY(fdata->value, "[none]", fdata->value_len);
  ------------------
  |  |   35|    368|    {                                         \
  |  |   36|    368|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    368|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 368]
  |  |  ------------------
  |  |   38|    368|    }
  ------------------
 1495|    368|    }
 1496|    915|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_set_flags))
  ------------------
  |  |   30|    915|    {                           \
  |  |   31|    915|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 915]
  |  |  ------------------
  |  |   32|    915|    }
  ------------------
 1497|    915|    return true;
 1498|    915|}
formatter.c:format_set_trust_line_set_flags:
 1473|    915|static bool format_set_trust_line_set_flags(formatter_data_t *fdata) {
 1474|    915|    STRLCPY(fdata->caption, "Set Flags", fdata->caption_len);
  ------------------
  |  |   35|    915|    {                                         \
  |  |   36|    915|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    915|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 915]
  |  |  ------------------
  |  |   38|    915|    }
  ------------------
 1475|    915|    if (fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.set_flags) {
  ------------------
  |  Branch (1475:9): [True: 496, False: 419]
  ------------------
 1476|    496|        FORMATTER_CHECK(print_trust_line_flags(
  ------------------
  |  |   30|    496|    {                           \
  |  |   31|    496|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 496]
  |  |  ------------------
  |  |   32|    496|    }
  ------------------
 1477|    496|            fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.set_flags,
 1478|    496|            fdata->value,
 1479|    496|            fdata->value_len))
 1480|    496|    } else {
 1481|    419|        STRLCPY(fdata->value, "[none]", fdata->value_len);
  ------------------
  |  |   35|    419|    {                                         \
  |  |   36|    419|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    419|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 419]
  |  |  ------------------
  |  |   38|    419|    }
  ------------------
 1482|    419|    }
 1483|    915|    return format_operation_source_prepare(fdata);
 1484|    915|}
formatter.c:format_liquidity_pool_deposit:
 1595|     30|static bool format_liquidity_pool_deposit(formatter_data_t *fdata) {
 1596|     30|    (void) fdata;
 1597|     30|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
 1598|     30|    STRLCPY(fdata->value, "Liquidity Pool Deposit", fdata->value_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
 1599|     30|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_liquidity_pool_id))
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 1600|     30|    return true;
 1601|     30|}
formatter.c:format_liquidity_pool_deposit_liquidity_pool_id:
 1582|     30|static bool format_liquidity_pool_deposit_liquidity_pool_id(formatter_data_t *fdata) {
 1583|     30|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
 1584|     30|    FORMATTER_CHECK(print_binary(
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 1585|     30|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.liquidity_pool_id,
 1586|     30|        LIQUIDITY_POOL_ID_SIZE,
 1587|     30|        fdata->value,
 1588|     30|        fdata->value_len,
 1589|     30|        0,
 1590|     30|        0))
 1591|     30|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_amount_a))
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 1592|     30|    return true;
 1593|     30|}
formatter.c:format_liquidity_pool_deposit_max_amount_a:
 1570|     30|static bool format_liquidity_pool_deposit_max_amount_a(formatter_data_t *fdata) {
 1571|     30|    STRLCPY(fdata->caption, "Max Amount A", fdata->caption_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
 1572|     30|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 1573|     30|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.max_amount_a,
 1574|     30|        NULL,
 1575|     30|        fdata->envelope->network,
 1576|     30|        fdata->value,
 1577|     30|        fdata->value_len))
 1578|     30|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_amount_b))
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 1579|     30|    return true;
 1580|     30|}
formatter.c:format_liquidity_pool_deposit_max_amount_b:
 1558|     30|static bool format_liquidity_pool_deposit_max_amount_b(formatter_data_t *fdata) {
 1559|     30|    STRLCPY(fdata->caption, "Max Amount B", fdata->caption_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
 1560|     30|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 1561|     30|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.max_amount_b,
 1562|     30|        NULL,
 1563|     30|        fdata->envelope->network,
 1564|     30|        fdata->value,
 1565|     30|        fdata->value_len))
 1566|     30|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_min_price))
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 1567|     30|    return true;
 1568|     30|}
formatter.c:format_liquidity_pool_deposit_min_price:
 1544|     30|static bool format_liquidity_pool_deposit_min_price(formatter_data_t *fdata) {
 1545|     30|    liquidity_pool_deposit_op_t *op =
 1546|     30|        &fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op;
 1547|     30|    STRLCPY(fdata->caption, "Min Price", fdata->caption_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
 1548|     30|    FORMATTER_CHECK(print_price(&op->min_price,
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 1549|     30|                                NULL,
 1550|     30|                                NULL,
 1551|     30|                                fdata->envelope->network,
 1552|     30|                                fdata->value,
 1553|     30|                                fdata->value_len))
 1554|     30|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_price))
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 1555|     30|    return true;
 1556|     30|}
formatter.c:format_liquidity_pool_deposit_max_price:
 1531|     30|static bool format_liquidity_pool_deposit_max_price(formatter_data_t *fdata) {
 1532|     30|    liquidity_pool_deposit_op_t *op =
 1533|     30|        &fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op;
 1534|     30|    STRLCPY(fdata->caption, "Max Price", fdata->caption_len);
  ------------------
  |  |   35|     30|    {                                         \
  |  |   36|     30|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     30|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   38|     30|    }
  ------------------
 1535|     30|    FORMATTER_CHECK(print_price(&op->max_price,
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
 1536|     30|                                NULL,
 1537|     30|                                NULL,
 1538|     30|                                fdata->envelope->network,
 1539|     30|                                fdata->value,
 1540|     30|                                fdata->value_len))
 1541|     30|    return format_operation_source_prepare(fdata);
 1542|     30|}
formatter.c:format_liquidity_pool_withdraw:
 1651|    172|static bool format_liquidity_pool_withdraw(formatter_data_t *fdata) {
 1652|    172|    (void) fdata;
 1653|    172|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    172|    {                                         \
  |  |   36|    172|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    172|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 172]
  |  |  ------------------
  |  |   38|    172|    }
  ------------------
 1654|    172|    STRLCPY(fdata->value, "Liquidity Pool Withdraw", fdata->value_len);
  ------------------
  |  |   35|    172|    {                                         \
  |  |   36|    172|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    172|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 172]
  |  |  ------------------
  |  |   38|    172|    }
  ------------------
 1655|    172|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_liquidity_pool_id))
  ------------------
  |  |   30|    172|    {                           \
  |  |   31|    172|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 172]
  |  |  ------------------
  |  |   32|    172|    }
  ------------------
 1656|    172|    return true;
 1657|    172|}
formatter.c:format_liquidity_pool_withdraw_liquidity_pool_id:
 1638|    172|static bool format_liquidity_pool_withdraw_liquidity_pool_id(formatter_data_t *fdata) {
 1639|    172|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|    172|    {                                         \
  |  |   36|    172|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    172|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 172]
  |  |  ------------------
  |  |   38|    172|    }
  ------------------
 1640|    172|    FORMATTER_CHECK(print_binary(
  ------------------
  |  |   30|    172|    {                           \
  |  |   31|    172|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 172]
  |  |  ------------------
  |  |   32|    172|    }
  ------------------
 1641|    172|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.liquidity_pool_id,
 1642|    172|        LIQUIDITY_POOL_ID_SIZE,
 1643|    172|        fdata->value,
 1644|    172|        fdata->value_len,
 1645|    172|        0,
 1646|    172|        0))
 1647|    172|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_amount))
  ------------------
  |  |   30|    172|    {                           \
  |  |   31|    172|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 172]
  |  |  ------------------
  |  |   32|    172|    }
  ------------------
 1648|    172|    return true;
 1649|    172|}
formatter.c:format_liquidity_pool_withdraw_amount:
 1626|    172|static bool format_liquidity_pool_withdraw_amount(formatter_data_t *fdata) {
 1627|    172|    STRLCPY(fdata->caption, "Amount", fdata->caption_len);
  ------------------
  |  |   35|    172|    {                                         \
  |  |   36|    172|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    172|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 172]
  |  |  ------------------
  |  |   38|    172|    }
  ------------------
 1628|    172|    FORMATTER_CHECK(
  ------------------
  |  |   30|    172|    {                           \
  |  |   31|    172|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 172]
  |  |  ------------------
  |  |   32|    172|    }
  ------------------
 1629|    172|        print_amount(fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.amount,
 1630|    172|                     NULL,
 1631|    172|                     fdata->envelope->network,
 1632|    172|                     fdata->value,
 1633|    172|                     fdata->value_len))
 1634|    172|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_min_amount_a))
  ------------------
  |  |   30|    172|    {                           \
  |  |   31|    172|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 172]
  |  |  ------------------
  |  |   32|    172|    }
  ------------------
 1635|    172|    return true;
 1636|    172|}
formatter.c:format_liquidity_pool_withdraw_min_amount_a:
 1614|    172|static bool format_liquidity_pool_withdraw_min_amount_a(formatter_data_t *fdata) {
 1615|    172|    STRLCPY(fdata->caption, "Min Amount A", fdata->caption_len);
  ------------------
  |  |   35|    172|    {                                         \
  |  |   36|    172|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    172|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 172]
  |  |  ------------------
  |  |   38|    172|    }
  ------------------
 1616|    172|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    172|    {                           \
  |  |   31|    172|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 172]
  |  |  ------------------
  |  |   32|    172|    }
  ------------------
 1617|    172|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.min_amount_a,
 1618|    172|        NULL,
 1619|    172|        fdata->envelope->network,
 1620|    172|        fdata->value,
 1621|    172|        fdata->value_len))
 1622|    172|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_min_amount_b))
  ------------------
  |  |   30|    172|    {                           \
  |  |   31|    172|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 172]
  |  |  ------------------
  |  |   32|    172|    }
  ------------------
 1623|    172|    return true;
 1624|    172|}
formatter.c:format_liquidity_pool_withdraw_min_amount_b:
 1603|    172|static bool format_liquidity_pool_withdraw_min_amount_b(formatter_data_t *fdata) {
 1604|    172|    STRLCPY(fdata->caption, "Min Amount B", fdata->caption_len);
  ------------------
  |  |   35|    172|    {                                         \
  |  |   36|    172|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    172|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 172]
  |  |  ------------------
  |  |   38|    172|    }
  ------------------
 1605|    172|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    172|    {                           \
  |  |   31|    172|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 172]
  |  |  ------------------
  |  |   32|    172|    }
  ------------------
 1606|    172|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.min_amount_b,
 1607|    172|        NULL,
 1608|    172|        fdata->envelope->network,
 1609|    172|        fdata->value,
 1610|    172|        fdata->value_len))
 1611|    172|    return format_operation_source_prepare(fdata);
 1612|    172|}
formatter.c:format_invoke_host_function:
 2170|    125|static bool format_invoke_host_function(formatter_data_t *fdata) {
 2171|       |    // avoid the host function op be overwritten by the sub-invocation
 2172|    125|    if (fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocations_count) {
  ------------------
  |  Branch (2172:9): [True: 0, False: 125]
  ------------------
 2173|      0|        if (!parse_transaction_operation(fdata->raw_data,
  ------------------
  |  Branch (2173:13): [True: 0, False: 0]
  ------------------
 2174|      0|                                         fdata->raw_data_len,
 2175|      0|                                         fdata->envelope,
 2176|      0|                                         fdata->envelope->tx_details.tx.operation_index)) {
 2177|      0|            return false;
 2178|      0|        };
 2179|      0|    }
 2180|    125|    switch (fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.host_function_type) {
 2181|    105|        case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:
  ------------------
  |  Branch (2181:9): [True: 105, False: 20]
  ------------------
 2182|    105|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    105|    {                                         \
  |  |   36|    105|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    105|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 105]
  |  |  ------------------
  |  |   38|    105|    }
  ------------------
 2183|    105|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|    105|    {                                         \
  |  |   36|    105|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    105|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 105]
  |  |  ------------------
  |  |   38|    105|    }
  ------------------
 2184|    105|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_contract_id));
  ------------------
  |  |   30|    105|    {                           \
  |  |   31|    105|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 105]
  |  |  ------------------
  |  |   32|    105|    }
  ------------------
 2185|    105|            break;
 2186|      3|        case HOST_FUNCTION_TYPE_CREATE_CONTRACT:
  ------------------
  |  Branch (2186:9): [True: 3, False: 122]
  ------------------
 2187|      3|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|      3|    {                                         \
  |  |   36|      3|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      3|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   38|      3|    }
  ------------------
 2188|      3|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|      3|    {                                         \
  |  |   36|      3|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      3|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3]
  |  |  ------------------
  |  |   38|      3|    }
  ------------------
 2189|       |            // we dont need to care the sub-invocation here
 2190|      3|            return format_operation_source_prepare(fdata);
 2191|      0|            break;
 2192|     17|        case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM:
  ------------------
  |  Branch (2192:9): [True: 17, False: 108]
  ------------------
 2193|     17|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|     17|    {                                         \
  |  |   36|     17|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     17|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   38|     17|    }
  ------------------
 2194|     17|            STRLCPY(fdata->value, "Upload Smart Contract Wasm", fdata->value_len);
  ------------------
  |  |   35|     17|    {                                         \
  |  |   36|     17|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     17|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   38|     17|    }
  ------------------
 2195|     17|            return format_operation_source_prepare(fdata);
 2196|      0|            break;
 2197|      0|        default:
  ------------------
  |  Branch (2197:9): [True: 0, False: 125]
  ------------------
 2198|      0|            return false;
 2199|    125|    }
 2200|    105|    return true;
 2201|    125|}
formatter.c:format_extend_footprint_ttl:
 2222|    101|static bool format_extend_footprint_ttl(formatter_data_t *fdata) {
 2223|    101|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    101|    {                                         \
  |  |   36|    101|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    101|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 101]
  |  |  ------------------
  |  |   38|    101|    }
  ------------------
 2224|    101|    STRLCPY(fdata->value, "Extend Footprint TTL", fdata->value_len);
  ------------------
  |  |   35|    101|    {                                         \
  |  |   36|    101|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    101|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 101]
  |  |  ------------------
  |  |   38|    101|    }
  ------------------
 2225|    101|    return format_operation_source_prepare(fdata);
 2226|    101|}
formatter.c:format_restore_footprint:
 2228|    101|static bool format_restore_footprint(formatter_data_t *fdata) {
 2229|    101|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    101|    {                                         \
  |  |   36|    101|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    101|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 101]
  |  |  ------------------
  |  |   38|    101|    }
  ------------------
 2230|    101|    STRLCPY(fdata->value, "Restore Footprint", fdata->value_len);
  ------------------
  |  |   35|    101|    {                                         \
  |  |   36|    101|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    101|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 101]
  |  |  ------------------
  |  |   38|    101|    }
  ------------------
 2231|    101|    return format_operation_source_prepare(fdata);
 2232|    101|}

parse_bool:
   48|   205k|bool parse_bool(buffer_t *buffer, bool *b) {
   49|   205k|    uint32_t val;
   50|       |
   51|   205k|    if (!parse_uint32(buffer, &val)) {
  ------------------
  |  Branch (51:9): [True: 185, False: 205k]
  ------------------
   52|    185|        return false;
   53|    185|    }
   54|   205k|    if (val != 0 && val != 1) {
  ------------------
  |  Branch (54:9): [True: 27.0k, False: 177k]
  |  Branch (54:21): [True: 2.80k, False: 24.2k]
  ------------------
   55|  2.80k|        return false;
   56|  2.80k|    }
   57|   202k|    *b = val == 1 ? true : false;
  ------------------
  |  Branch (57:10): [True: 24.2k, False: 177k]
  ------------------
   58|   202k|    return true;
   59|   205k|}
parse_uint64:
   61|  11.1k|bool parse_uint64(buffer_t *buffer, uint64_t *n) {
   62|  11.1k|    return buffer_read_u64(buffer, n, BE);
   63|  11.1k|}
parse_int64:
   65|   106k|bool parse_int64(buffer_t *buffer, int64_t *n) {
   66|   106k|    if (!buffer_can_read(buffer, 8)) {
  ------------------
  |  Branch (66:9): [True: 112, False: 106k]
  ------------------
   67|    112|        *n = 0;
   68|    112|        return false;
   69|    112|    }
   70|   106k|    *n = read_i64_be(buffer->ptr, buffer->offset);
   71|   106k|    return buffer_seek_cur(buffer, 8);
   72|   106k|}
parse_uint32:
   74|   929k|bool parse_uint32(buffer_t *buffer, uint32_t *n) {
   75|   929k|    return buffer_read_u32(buffer, n, BE);
   76|   929k|}
parse_int32:
   78|  5.49k|bool parse_int32(buffer_t *buffer, int32_t *n) {
   79|  5.49k|    if (!buffer_can_read(buffer, 4)) {
  ------------------
  |  Branch (79:9): [True: 29, False: 5.47k]
  ------------------
   80|     29|        *n = 0;
   81|     29|        return false;
   82|     29|    }
   83|  5.47k|    *n = read_i32_be(buffer->ptr, buffer->offset);
   84|  5.47k|    return buffer_seek_cur(buffer, 4);
   85|  5.49k|}
parse_scv_symbol:
  152|     54|bool parse_scv_symbol(buffer_t *buffer, scv_symbol_t *symbol) {
  153|     54|    PARSER_CHECK(
  ------------------
  |  |   15|     54|    {                           \
  |  |   16|     54|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 51]
  |  |  ------------------
  |  |   17|     54|    }
  ------------------
  154|     54|        parse_binary_string_ptr(buffer, &symbol->symbol, &symbol->size, SCV_SYMBOL_MAX_SIZE))
  155|     51|    return true;
  156|     54|}
parse_scv_string:
  158|    297|bool parse_scv_string(buffer_t *buffer, scv_string_t *string) {
  159|    297|    PARSER_CHECK(parse_binary_string_ptr(buffer, &string->string, &string->size, 0))
  ------------------
  |  |   15|    297|    {                           \
  |  |   16|    297|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 295]
  |  |  ------------------
  |  |   17|    297|    }
  ------------------
  160|    295|    return true;
  161|    297|}
parse_sc_address:
  684|  16.0k|bool parse_sc_address(buffer_t *buffer, sc_address_t *sc_address) {
  685|  16.0k|    PARSER_CHECK(parse_uint32(buffer, &sc_address->type))
  ------------------
  |  |   15|  16.0k|    {                           \
  |  |   16|  16.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 35, False: 16.0k]
  |  |  ------------------
  |  |   17|  16.0k|    }
  ------------------
  686|  16.0k|    switch (sc_address->type) {
  687|  14.8k|        case SC_ADDRESS_TYPE_ACCOUNT:
  ------------------
  |  Branch (687:9): [True: 14.8k, False: 1.16k]
  ------------------
  688|  14.8k|            PARSER_CHECK(parse_account_id(buffer, &sc_address->address))
  ------------------
  |  |   15|  14.8k|    {                           \
  |  |   16|  14.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 884, False: 13.9k]
  |  |  ------------------
  |  |   17|  14.8k|    }
  ------------------
  689|  13.9k|            return true;
  690|    644|        case SC_ADDRESS_TYPE_CONTRACT:
  ------------------
  |  Branch (690:9): [True: 644, False: 15.3k]
  ------------------
  691|    644|            PARSER_CHECK(buffer_read_bytes(buffer, &sc_address->address, RAW_CONTRACT_KEY_SIZE))
  ------------------
  |  |   15|    644|    {                           \
  |  |   16|    644|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 26, False: 618]
  |  |  ------------------
  |  |   17|    644|    }
  ------------------
  692|    618|            return true;
  693|    521|        default:
  ------------------
  |  Branch (693:9): [True: 521, False: 15.4k]
  ------------------
  694|    521|            return false;
  695|  16.0k|    }
  696|  16.0k|}
read_scval_advance:
  733|   255k|bool read_scval_advance(buffer_t *buffer) {
  734|   255k|    uint32_t sc_type;
  735|   255k|    PARSER_CHECK(parse_uint32(buffer, &sc_type))
  ------------------
  |  |   15|   255k|    {                           \
  |  |   16|   255k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.71k, False: 253k]
  |  |  ------------------
  |  |   17|   255k|    }
  ------------------
  736|       |
  737|   253k|    switch (sc_type) {
  738|   182k|        case SCV_BOOL:
  ------------------
  |  Branch (738:9): [True: 182k, False: 70.9k]
  ------------------
  739|   182k|            PARSER_CHECK(buffer_advance(buffer, 4))
  ------------------
  |  |   15|   182k|    {                           \
  |  |   16|   182k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 37, False: 182k]
  |  |  ------------------
  |  |   17|   182k|    }
  ------------------
  740|   182k|            break;
  741|   182k|        case SCV_VOID:
  ------------------
  |  Branch (741:9): [True: 1.58k, False: 251k]
  ------------------
  742|  1.58k|            break;  // void
  743|    269|        case SCV_ERROR:
  ------------------
  |  Branch (743:9): [True: 269, False: 252k]
  ------------------
  744|    269|            return false;  // not implemented
  745|  1.68k|        case SCV_U32:
  ------------------
  |  Branch (745:9): [True: 1.68k, False: 251k]
  ------------------
  746|  3.38k|        case SCV_I32:
  ------------------
  |  Branch (746:9): [True: 1.70k, False: 251k]
  ------------------
  747|  3.38k|            PARSER_CHECK(buffer_advance(buffer, 4))
  ------------------
  |  |   15|  3.38k|    {                           \
  |  |   16|  3.38k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 3.37k]
  |  |  ------------------
  |  |   17|  3.38k|    }
  ------------------
  748|  3.37k|            break;
  749|  3.37k|        case SCV_U64:
  ------------------
  |  Branch (749:9): [True: 328, False: 252k]
  ------------------
  750|  1.17k|        case SCV_I64:
  ------------------
  |  Branch (750:9): [True: 845, False: 252k]
  ------------------
  751|  14.2k|        case SCV_TIMEPOINT:
  ------------------
  |  Branch (751:9): [True: 13.0k, False: 239k]
  ------------------
  752|  14.8k|        case SCV_DURATION:
  ------------------
  |  Branch (752:9): [True: 657, False: 252k]
  ------------------
  753|  14.8k|            PARSER_CHECK(buffer_advance(buffer, 8))
  ------------------
  |  |   15|  14.8k|    {                           \
  |  |   16|  14.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 39, False: 14.8k]
  |  |  ------------------
  |  |   17|  14.8k|    }
  ------------------
  754|  14.8k|            break;
  755|  14.8k|        case SCV_U128:
  ------------------
  |  Branch (755:9): [True: 5.87k, False: 247k]
  ------------------
  756|  8.57k|        case SCV_I128:
  ------------------
  |  Branch (756:9): [True: 2.69k, False: 250k]
  ------------------
  757|  8.57k|            PARSER_CHECK(buffer_advance(buffer, 16))
  ------------------
  |  |   15|  8.57k|    {                           \
  |  |   16|  8.57k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 16, False: 8.55k]
  |  |  ------------------
  |  |   17|  8.57k|    }
  ------------------
  758|  8.55k|            break;
  759|  8.55k|        case SCV_U256:
  ------------------
  |  Branch (759:9): [True: 692, False: 252k]
  ------------------
  760|  2.33k|        case SCV_I256:
  ------------------
  |  Branch (760:9): [True: 1.64k, False: 251k]
  ------------------
  761|  2.33k|            PARSER_CHECK(buffer_advance(buffer, 32))
  ------------------
  |  |   15|  2.33k|    {                           \
  |  |   16|  2.33k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 181, False: 2.15k]
  |  |  ------------------
  |  |   17|  2.33k|    }
  ------------------
  762|  2.15k|            break;
  763|  2.15k|        case SCV_BYTES:
  ------------------
  |  Branch (763:9): [True: 610, False: 252k]
  ------------------
  764|  2.04k|        case SCV_STRING:
  ------------------
  |  Branch (764:9): [True: 1.43k, False: 251k]
  ------------------
  765|  2.39k|        case SCV_SYMBOL: {
  ------------------
  |  Branch (765:9): [True: 351, False: 252k]
  ------------------
  766|  2.39k|            size_t data_size = 0;
  767|  2.39k|            PARSER_CHECK(parse_uint32(buffer, &data_size))
  ------------------
  |  |   15|  2.39k|    {                           \
  |  |   16|  2.39k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 2.38k]
  |  |  ------------------
  |  |   17|  2.39k|    }
  ------------------
  768|  2.38k|            PARSER_CHECK(num_bytes(data_size, &data_size))
  ------------------
  |  |   15|  2.38k|    {                           \
  |  |   16|  2.38k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 2.38k]
  |  |  ------------------
  |  |   17|  2.38k|    }
  ------------------
  769|  2.38k|            PARSER_CHECK(buffer_advance(buffer, data_size))
  ------------------
  |  |   15|  2.38k|    {                           \
  |  |   16|  2.38k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 271, False: 2.11k]
  |  |  ------------------
  |  |   17|  2.38k|    }
  ------------------
  770|  2.11k|            break;
  771|  2.38k|        }
  772|  2.19k|        case SCV_VEC: {
  ------------------
  |  Branch (772:9): [True: 2.19k, False: 250k]
  ------------------
  773|  2.19k|            bool vec_exists;
  774|  2.19k|            PARSER_CHECK(parse_bool(buffer, &vec_exists))
  ------------------
  |  |   15|  2.19k|    {                           \
  |  |   16|  2.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 820, False: 1.37k]
  |  |  ------------------
  |  |   17|  2.19k|    }
  ------------------
  775|  1.37k|            if (vec_exists) {
  ------------------
  |  Branch (775:17): [True: 940, False: 434]
  ------------------
  776|    940|                read_scval_vec_advance(buffer);
  777|    940|            }
  778|  1.37k|            break;
  779|  2.19k|        }
  780|  19.5k|        case SCV_MAP: {
  ------------------
  |  Branch (780:9): [True: 19.5k, False: 233k]
  ------------------
  781|  19.5k|            bool map_exists;
  782|  19.5k|            PARSER_CHECK(parse_bool(buffer, &map_exists))
  ------------------
  |  |   15|  19.5k|    {                           \
  |  |   16|  19.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 911, False: 18.6k]
  |  |  ------------------
  |  |   17|  19.5k|    }
  ------------------
  783|  18.6k|            if (map_exists) {
  ------------------
  |  Branch (783:17): [True: 18.1k, False: 483]
  ------------------
  784|  18.1k|                rad_scval_map_advance(buffer);
  785|  18.1k|            }
  786|  18.6k|            break;
  787|  19.5k|        }
  788|  1.39k|        case SCV_ADDRESS: {
  ------------------
  |  Branch (788:9): [True: 1.39k, False: 251k]
  ------------------
  789|  1.39k|            sc_address_t sc_address;
  790|  1.39k|            PARSER_CHECK(parse_sc_address(buffer, &sc_address));
  ------------------
  |  |   15|  1.39k|    {                           \
  |  |   16|  1.39k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 483, False: 908]
  |  |  ------------------
  |  |   17|  1.39k|    }
  ------------------
  791|    908|            break;
  792|  1.39k|        }
  793|  1.91k|        case SCV_CONTRACT_INSTANCE: {
  ------------------
  |  Branch (793:9): [True: 1.91k, False: 251k]
  ------------------
  794|  1.91k|            PARSER_CHECK(read_contract_executable_advance(buffer))
  ------------------
  |  |   15|  1.91k|    {                           \
  |  |   16|  1.91k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 499, False: 1.41k]
  |  |  ------------------
  |  |   17|  1.91k|    }
  ------------------
  795|  1.41k|            bool map_exists;
  796|  1.41k|            PARSER_CHECK(parse_bool(buffer, &map_exists))
  ------------------
  |  |   15|  1.41k|    {                           \
  |  |   16|  1.41k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 335, False: 1.07k]
  |  |  ------------------
  |  |   17|  1.41k|    }
  ------------------
  797|  1.07k|            if (map_exists) {
  ------------------
  |  Branch (797:17): [True: 837, False: 242]
  ------------------
  798|    837|                rad_scval_map_advance(buffer);
  799|    837|            }
  800|  1.07k|            break;
  801|  1.41k|        }
  802|    141|        case SCV_LEDGER_KEY_CONTRACT_INSTANCE:
  ------------------
  |  Branch (802:9): [True: 141, False: 252k]
  ------------------
  803|    141|            break;  // void
  804|    729|        case SCV_LEDGER_KEY_NONCE:
  ------------------
  |  Branch (804:9): [True: 729, False: 252k]
  ------------------
  805|    729|            PARSER_CHECK(buffer_advance(buffer, 8))
  ------------------
  |  |   15|    729|    {                           \
  |  |   16|    729|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 718]
  |  |  ------------------
  |  |   17|    729|    }
  ------------------
  806|    718|            break;
  807|  11.6k|        default:
  ------------------
  |  Branch (807:9): [True: 11.6k, False: 241k]
  ------------------
  808|  11.6k|            return false;
  809|   253k|    }
  810|   237k|    return true;
  811|   253k|}
parse_transaction_envelope:
 1307|  7.59k|bool parse_transaction_envelope(const uint8_t *data, size_t data_len, envelope_t *envelope) {
 1308|  7.59k|    PRINTF("parse_transaction_envelope\n");
 1309|  7.59k|    buffer_t buffer = {
 1310|  7.59k|        .ptr = data,
 1311|  7.59k|        .size = data_len,
 1312|  7.59k|        .offset = 0,
 1313|  7.59k|    };
 1314|       |
 1315|  7.59k|    explicit_bzero(&envelope->tx_details, sizeof(tx_details_t));
 1316|  7.59k|    uint32_t envelope_type;
 1317|  7.59k|    PARSER_CHECK(parse_network(&buffer, &envelope->network))
  ------------------
  |  |   15|  7.59k|    {                           \
  |  |   16|  7.59k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 7.58k]
  |  |  ------------------
  |  |   17|  7.59k|    }
  ------------------
 1318|  7.58k|    PARSER_CHECK(parse_uint32(&buffer, &envelope_type))
  ------------------
  |  |   15|  7.58k|    {                           \
  |  |   16|  7.58k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 7.57k]
  |  |  ------------------
  |  |   17|  7.58k|    }
  ------------------
 1319|  7.57k|    envelope->type = envelope_type;
 1320|  7.57k|    switch (envelope_type) {
 1321|  4.67k|        case ENVELOPE_TYPE_TX:
  ------------------
  |  Branch (1321:9): [True: 4.67k, False: 2.90k]
  ------------------
 1322|  4.67k|            PARSER_CHECK(parse_transaction_details(&buffer, &envelope->tx_details.tx))
  ------------------
  |  |   15|  4.67k|    {                           \
  |  |   16|  4.67k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 354, False: 4.32k]
  |  |  ------------------
  |  |   17|  4.67k|    }
  ------------------
 1323|  4.32k|            break;
 1324|  4.32k|        case ENVELOPE_TYPE_TX_FEE_BUMP:
  ------------------
  |  Branch (1324:9): [True: 69, False: 7.51k]
  ------------------
 1325|     69|            PARSER_CHECK(
  ------------------
  |  |   15|     69|    {                           \
  |  |   16|     69|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 19, False: 50]
  |  |  ------------------
  |  |   17|     69|    }
  ------------------
 1326|     69|                parse_fee_bump_transaction_details(&buffer, &envelope->tx_details.fee_bump_tx))
 1327|     50|            uint32_t inner_envelope_type;
 1328|     50|            PARSER_CHECK(parse_uint32(&buffer, &inner_envelope_type))
  ------------------
  |  |   15|     50|    {                           \
  |  |   16|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 47]
  |  |  ------------------
  |  |   17|     50|    }
  ------------------
 1329|     47|            if (inner_envelope_type != ENVELOPE_TYPE_TX) {
  ------------------
  |  Branch (1329:17): [True: 3, False: 44]
  ------------------
 1330|      3|                return false;
 1331|      3|            }
 1332|     44|            PARSER_CHECK(parse_transaction_details(&buffer, &envelope->tx_details.tx))
  ------------------
  |  |   15|     44|    {                           \
  |  |   16|     44|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 37]
  |  |  ------------------
  |  |   17|     44|    }
  ------------------
 1333|     37|            break;
 1334|  2.83k|        default:
  ------------------
  |  Branch (1334:9): [True: 2.83k, False: 4.74k]
  ------------------
 1335|  2.83k|            return false;
 1336|  7.57k|    }
 1337|       |
 1338|  4.36k|    envelope->tx_details.tx.operation_position = buffer.offset;
 1339|       |
 1340|       |    // check all operations are valid
 1341|  4.36k|    PARSER_CHECK(check_operations(&buffer, envelope->tx_details.tx.operations_count));
  ------------------
  |  |   15|  4.36k|    {                           \
  |  |   16|  4.36k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.47k, False: 2.89k]
  |  |  ------------------
  |  |   17|  4.36k|    }
  ------------------
 1342|  2.89k|    return true;
 1343|  4.36k|}
parse_transaction_operation:
 1348|  17.8k|                                 uint8_t operation_index) {
 1349|  17.8k|    buffer_t buffer = {
 1350|  17.8k|        .ptr = data,
 1351|  17.8k|        .size = data_len,
 1352|  17.8k|        .offset = envelope->tx_details.tx.operation_position,
 1353|  17.8k|    };
 1354|   121k|    for (uint8_t i = 0; i <= operation_index; i++) {
  ------------------
  |  Branch (1354:25): [True: 103k, False: 17.8k]
  ------------------
 1355|   103k|        PARSER_CHECK(parse_operation(&buffer, &envelope->tx_details.tx.op_details));
  ------------------
  |  |   15|   103k|    {                           \
  |  |   16|   103k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 103k]
  |  |  ------------------
  |  |   17|   103k|    }
  ------------------
 1356|   103k|    }
 1357|  17.8k|    envelope->tx_details.tx.operation_index = operation_index;
 1358|  17.8k|    return true;
 1359|  17.8k|}
parse_auth_function:
 1361|  10.0k|bool parse_auth_function(buffer_t *buffer, uint32_t *type, invoke_contract_args_t *args) {
 1362|       |    // function
 1363|  10.0k|    PARSER_CHECK(parse_uint32(buffer, type))
  ------------------
  |  |   15|  10.0k|    {                           \
  |  |   16|  10.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 10.0k]
  |  |  ------------------
  |  |   17|  10.0k|    }
  ------------------
 1364|  10.0k|    switch (*type) {
 1365|  8.99k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN: {
  ------------------
  |  Branch (1365:9): [True: 8.99k, False: 1.02k]
  ------------------
 1366|       |            // contractFn
 1367|  8.99k|            PARSER_CHECK(parse_invoke_contract_args(buffer, args))
  ------------------
  |  |   15|  8.99k|    {                           \
  |  |   16|  8.99k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.25k, False: 6.73k]
  |  |  ------------------
  |  |   17|  8.99k|    }
  ------------------
 1368|  6.73k|            break;
 1369|  8.99k|        }
 1370|  6.73k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1370:9): [True: 219, False: 9.79k]
  ------------------
 1371|       |            // createContractHostFn
 1372|    219|            PARSER_CHECK(read_create_contract_args_advance(buffer))
  ------------------
  |  |   15|    219|    {                           \
  |  |   16|    219|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 38, False: 181]
  |  |  ------------------
  |  |   17|    219|    }
  ------------------
 1373|    181|            break;
 1374|    803|        default:
  ------------------
  |  Branch (1374:9): [True: 803, False: 9.21k]
  ------------------
 1375|    803|            return false;
 1376|  10.0k|    }
 1377|  6.91k|    return true;
 1378|  10.0k|}
parse_soroban_authorization_envelope:
 1382|  10.1k|                                          envelope_t *envelope) {
 1383|  10.1k|    PRINTF("parse_soroban_authorization_envelope\n");
 1384|  10.1k|    buffer_t buffer = {
 1385|  10.1k|        .ptr = data,
 1386|  10.1k|        .size = data_len,
 1387|  10.1k|        .offset = 0,
 1388|  10.1k|    };
 1389|       |
 1390|  10.1k|    explicit_bzero(&envelope->soroban_authorization, sizeof(soroban_authorization_t));
 1391|       |
 1392|  10.1k|    uint32_t envelope_type;
 1393|  10.1k|    PARSER_CHECK(parse_uint32(&buffer, &envelope_type))
  ------------------
  |  |   15|  10.1k|    {                           \
  |  |   16|  10.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 10.1k]
  |  |  ------------------
  |  |   17|  10.1k|    }
  ------------------
 1394|  10.1k|    if (envelope_type != ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1394:9): [True: 1.13k, False: 8.97k]
  ------------------
 1395|  1.13k|        return false;
 1396|  1.13k|    }
 1397|  8.97k|    envelope->type = envelope_type;
 1398|       |
 1399|  8.97k|    PARSER_CHECK(parse_network(&buffer, &envelope->network))
  ------------------
  |  |   15|  8.97k|    {                           \
  |  |   16|  8.97k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 8.97k]
  |  |  ------------------
  |  |   17|  8.97k|    }
  ------------------
 1400|  8.97k|    PARSER_CHECK(parse_uint64(&buffer, &envelope->soroban_authorization.nonce))
  ------------------
  |  |   15|  8.97k|    {                           \
  |  |   16|  8.97k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 8.96k]
  |  |  ------------------
  |  |   17|  8.97k|    }
  ------------------
 1401|  8.96k|    PARSER_CHECK(
  ------------------
  |  |   15|  8.96k|    {                           \
  |  |   16|  8.96k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 8.96k]
  |  |  ------------------
  |  |   17|  8.96k|    }
  ------------------
 1402|  8.96k|        parse_uint32(&buffer, &envelope->soroban_authorization.signature_expiration_ledger))
 1403|       |
 1404|       |    // function
 1405|  8.96k|    PARSER_CHECK(parse_auth_function(&buffer,
  ------------------
  |  |   15|  8.96k|    {                           \
  |  |   16|  8.96k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3.09k, False: 5.86k]
  |  |  ------------------
  |  |   17|  8.96k|    }
  ------------------
 1406|  8.96k|                                     &envelope->soroban_authorization.auth_function_type,
 1407|  8.96k|                                     &envelope->soroban_authorization.invoke_contract_args))
 1408|       |    // subInvocations
 1409|  5.86k|    uint32_t len;
 1410|  5.86k|    uint8_t sub_invocations_count = 0;
 1411|  5.86k|    PARSER_CHECK(parse_uint32(&buffer, &len))
  ------------------
  |  |   15|  5.86k|    {                           \
  |  |   16|  5.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 202, False: 5.66k]
  |  |  ------------------
  |  |   17|  5.86k|    }
  ------------------
 1412|  7.73k|    for (uint32_t i = 0; i < len; i++) {
  ------------------
  |  Branch (1412:26): [True: 2.68k, False: 5.04k]
  ------------------
 1413|  2.68k|        PARSER_CHECK(read_soroban_authorized_invocation_advance(
  ------------------
  |  |   15|  2.68k|    {                           \
  |  |   16|  2.68k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 615, False: 2.06k]
  |  |  ------------------
  |  |   17|  2.68k|    }
  ------------------
 1414|  2.68k|            &buffer,
 1415|  2.68k|            &sub_invocations_count,
 1416|  2.68k|            envelope->soroban_authorization.sub_invocation_positions));
 1417|  2.06k|    }
 1418|  5.04k|    envelope->soroban_authorization.sub_invocations_count = sub_invocations_count;
 1419|  5.04k|    PRINTF("sub_invocations_count=%d\n", sub_invocations_count);
 1420|       |    // for (uint8_t i = 0; i < 16; i++) {
 1421|       |    //     PRINTF("sub_invocation_positions[%d]=%d\n",
 1422|       |    //            i,
 1423|       |    //            envelope->soroban_authorization.sub_invocation_positions[i]);
 1424|       |    // }
 1425|  5.04k|    return true;
 1426|  5.66k|}
parser.c:read_i64_be:
   32|   106k|static int64_t read_i64_be(const uint8_t *ptr, size_t offset) {
   33|   106k|    uint64_t result = 0;
   34|   960k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (34:21): [True: 854k, False: 106k]
  ------------------
   35|   854k|        result = (result << 8) | ptr[offset + i];
   36|   854k|    }
   37|   106k|    return (int64_t) result;
   38|   106k|}
parser.c:read_i32_be:
   40|  5.47k|static int32_t read_i32_be(const uint8_t *ptr, size_t offset) {
   41|  5.47k|    uint32_t result = 0;
   42|  27.3k|    for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (42:21): [True: 21.8k, False: 5.47k]
  ------------------
   43|  21.8k|        result = (result << 8) | ptr[offset + i];
   44|  21.8k|    }
   45|  5.47k|    return (int32_t) result;
   46|  5.47k|}
parser.c:parse_binary_string_ptr:
  114|  17.1k|                                    size_t max_length) {
  115|       |    /* max_length does not include terminal null character */
  116|  17.1k|    uint32_t size;
  117|       |
  118|  17.1k|    PARSER_CHECK(parse_uint32(buffer, &size))
  ------------------
  |  |   15|  17.1k|    {                           \
  |  |   16|  17.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 40, False: 17.1k]
  |  |  ------------------
  |  |   17|  17.1k|    }
  ------------------
  119|  17.1k|    if (max_length != 0 && size > max_length) {
  ------------------
  |  Branch (119:9): [True: 16.8k, False: 297]
  |  Branch (119:28): [True: 56, False: 16.8k]
  ------------------
  120|     56|        return false;
  121|     56|    }
  122|       |
  123|  17.0k|    size_t data_size = 0;
  124|  17.0k|    PARSER_CHECK(num_bytes(size, &data_size))
  ------------------
  |  |   15|  17.0k|    {                           \
  |  |   16|  17.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 17.0k]
  |  |  ------------------
  |  |   17|  17.0k|    }
  ------------------
  125|  17.0k|    PARSER_CHECK(buffer_read_bytes(buffer, string, data_size))
  ------------------
  |  |   15|  17.0k|    {                           \
  |  |   16|  17.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 54, False: 17.0k]
  |  |  ------------------
  |  |   17|  17.0k|    }
  ------------------
  126|       |    PARSER_CHECK(check_padding(*string, size, data_size))  // security check
  ------------------
  |  |   15|  17.0k|    {                           \
  |  |   16|  17.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 931, False: 16.1k]
  |  |  ------------------
  |  |   17|  17.0k|    }
  ------------------
  127|  16.1k|    if (out_len) {
  ------------------
  |  Branch (127:9): [True: 16.1k, False: 0]
  ------------------
  128|  16.1k|        *out_len = size;
  129|  16.1k|    }
  130|  16.1k|    return true;
  131|  17.0k|}
parser.c:check_padding:
  101|  17.0k|static bool check_padding(const uint8_t *buffer, size_t offset, size_t length) {
  102|  17.0k|    size_t i;
  103|  22.7k|    for (i = 0; i < length - offset; i++) {
  ------------------
  |  Branch (103:17): [True: 6.62k, False: 16.1k]
  ------------------
  104|  6.62k|        if (buffer[offset + i] != 0x00) {
  ------------------
  |  Branch (104:13): [True: 931, False: 5.69k]
  ------------------
  105|    931|            return false;
  106|    931|        }
  107|  6.62k|    }
  108|  16.1k|    return true;
  109|  17.0k|}
parser.c:parse_account_id:
  194|   119k|static bool parse_account_id(buffer_t *buffer, const uint8_t **account_id) {
  195|   119k|    uint32_t account_type;
  196|       |
  197|   119k|    PARSER_CHECK(parse_uint32(buffer, &account_type))
  ------------------
  |  |   15|   119k|    {                           \
  |  |   16|   119k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 79, False: 119k]
  |  |  ------------------
  |  |   17|   119k|    }
  ------------------
  198|   119k|    if (account_type != PUBLIC_KEY_TYPE_ED25519) {
  ------------------
  |  |   50|   119k|#define PUBLIC_KEY_TYPE_ED25519 0
  ------------------
  |  Branch (198:9): [True: 889, False: 118k]
  ------------------
  199|    889|        return false;
  200|    889|    }
  201|   118k|    PARSER_CHECK(buffer_read_bytes(buffer, account_id, RAW_ED25519_PUBLIC_KEY_SIZE))
  ------------------
  |  |   15|   118k|    {                           \
  |  |   16|   118k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 113, False: 118k]
  |  |  ------------------
  |  |   17|   118k|    }
  ------------------
  202|   118k|    return true;
  203|   118k|}
parser.c:buffer_read_bytes:
   25|   174k|static bool buffer_read_bytes(buffer_t *buffer, const uint8_t **data, size_t size) {
   26|   174k|    PARSER_CHECK(buffer_can_read(buffer, size))
  ------------------
  |  |   15|   174k|    {                           \
  |  |   16|   174k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 319, False: 174k]
  |  |  ------------------
  |  |   17|   174k|    }
  ------------------
   27|   174k|    *data = buffer->ptr + buffer->offset;
   28|   174k|    PARSER_CHECK(buffer_advance(buffer, size))
  ------------------
  |  |   15|   174k|    {                           \
  |  |   16|   174k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 174k]
  |  |  ------------------
  |  |   17|   174k|    }
  ------------------
   29|   174k|    return true;
   30|   174k|}
parser.c:buffer_advance:
   21|   390k|static bool buffer_advance(buffer_t *buffer, size_t num_bytes) {
   22|   390k|    return buffer_seek_cur(buffer, num_bytes);
   23|   390k|}
parser.c:num_bytes:
   87|  19.9k|static bool num_bytes(size_t size, size_t *out_size) {
   88|  19.9k|    size_t remainder = size % 4;
   89|  19.9k|    if (remainder == 0) {
  ------------------
  |  Branch (89:9): [True: 15.2k, False: 4.68k]
  ------------------
   90|  15.2k|        *out_size = size;
   91|  15.2k|        return true;
   92|  15.2k|    }
   93|  4.68k|    if (size > SIZE_MAX - 4) {
  ------------------
  |  Branch (93:9): [True: 0, False: 4.68k]
  ------------------
   94|       |        // size + 4 would overflow
   95|      0|        return false;
   96|      0|    }
   97|  4.68k|    *out_size = size + 4 - remainder;
   98|  4.68k|    return true;
   99|  4.68k|}
parser.c:read_scval_vec_advance:
  698|    940|static bool read_scval_vec_advance(buffer_t *buffer) {
  699|    940|    uint32_t vec_len;
  700|    940|    PARSER_CHECK(parse_uint32(buffer, &vec_len))
  ------------------
  |  |   15|    940|    {                           \
  |  |   16|    940|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 937]
  |  |  ------------------
  |  |   17|    940|    }
  ------------------
  701|  5.10k|    for (uint32_t i = 0; i < vec_len; i++) {
  ------------------
  |  Branch (701:26): [True: 4.97k, False: 132]
  ------------------
  702|  4.97k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  4.97k|    {                           \
  |  |   16|  4.97k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 805, False: 4.16k]
  |  |  ------------------
  |  |   17|  4.97k|    }
  ------------------
  703|  4.97k|    }
  704|    132|    return true;
  705|    937|}
parser.c:rad_scval_map_advance:
  707|  18.9k|static bool rad_scval_map_advance(buffer_t *buffer) {
  708|  18.9k|    uint32_t map_len;
  709|  18.9k|    PARSER_CHECK(parse_uint32(buffer, &map_len))
  ------------------
  |  |   15|  18.9k|    {                           \
  |  |   16|  18.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 18.9k]
  |  |  ------------------
  |  |   17|  18.9k|    }
  ------------------
  710|   105k|    for (uint32_t i = 0; i < map_len; i++) {
  ------------------
  |  Branch (710:26): [True: 103k, False: 1.87k]
  ------------------
  711|   103k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|   103k|    {                           \
  |  |   16|   103k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9.22k, False: 94.1k]
  |  |  ------------------
  |  |   17|   103k|    }
  ------------------
  712|  94.1k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  94.1k|    {                           \
  |  |   16|  94.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7.85k, False: 86.2k]
  |  |  ------------------
  |  |   17|  94.1k|    }
  ------------------
  713|  94.1k|    }
  714|  1.87k|    return true;
  715|  18.9k|}
parser.c:read_contract_executable_advance:
  717|  2.55k|static bool read_contract_executable_advance(buffer_t *buffer) {
  718|  2.55k|    uint32_t type;
  719|  2.55k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  2.55k|    {                           \
  |  |   16|  2.55k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 2.53k]
  |  |  ------------------
  |  |   17|  2.55k|    }
  ------------------
  720|  2.53k|    switch (type) {
  721|  1.19k|        case CONTRACT_EXECUTABLE_WASM:
  ------------------
  |  |  491|  1.19k|#define CONTRACT_EXECUTABLE_WASM          0
  ------------------
  |  Branch (721:9): [True: 1.19k, False: 1.34k]
  ------------------
  722|       |            PARSER_CHECK(buffer_advance(buffer, HASH_SIZE))  // code
  ------------------
  |  |   15|  1.19k|    {                           \
  |  |   16|  1.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 123, False: 1.06k]
  |  |  ------------------
  |  |   17|  1.19k|    }
  ------------------
  723|  1.06k|            break;
  724|  1.06k|        case CONTRACT_EXECUTABLE_STELLAR_ASSET:
  ------------------
  |  |  492|    939|#define CONTRACT_EXECUTABLE_STELLAR_ASSET 1
  ------------------
  |  Branch (724:9): [True: 939, False: 1.59k]
  ------------------
  725|       |            // void
  726|    939|            break;
  727|    405|        default:
  ------------------
  |  Branch (727:9): [True: 405, False: 2.13k]
  ------------------
  728|    405|            return false;
  729|  2.53k|    }
  730|  2.00k|    return true;
  731|  2.53k|}
parser.c:parse_network:
 1293|  16.5k|static bool parse_network(buffer_t *buffer, uint8_t *network) {
 1294|  16.5k|    const uint8_t *network_id;
 1295|  16.5k|    PARSER_CHECK(buffer_read_bytes(buffer, &network_id, HASH_SIZE))
  ------------------
  |  |   15|  16.5k|    {                           \
  |  |   16|  16.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 16.5k]
  |  |  ------------------
  |  |   17|  16.5k|    }
  ------------------
 1296|       |
 1297|  16.5k|    if (memcmp(network_id, NETWORK_ID_PUBLIC_HASH, HASH_SIZE) == 0) {
  ------------------
  |  |   46|  16.5k|#define HASH_SIZE                 32
  ------------------
  |  Branch (1297:9): [True: 80, False: 16.4k]
  ------------------
 1298|     80|        *network = NETWORK_TYPE_PUBLIC;
  ------------------
  |  |   57|     80|#define NETWORK_TYPE_PUBLIC  0
  ------------------
 1299|  16.4k|    } else if (memcmp(network_id, NETWORK_ID_TEST_HASH, HASH_SIZE) == 0) {
  ------------------
  |  |   46|  16.4k|#define HASH_SIZE                 32
  ------------------
  |  Branch (1299:16): [True: 86, False: 16.3k]
  ------------------
 1300|     86|        *network = NETWORK_TYPE_TEST;
  ------------------
  |  |   58|     86|#define NETWORK_TYPE_TEST    1
  ------------------
 1301|  16.3k|    } else {
 1302|  16.3k|        *network = NETWORK_TYPE_UNKNOWN;
  ------------------
  |  |   59|  16.3k|#define NETWORK_TYPE_UNKNOWN 2
  ------------------
 1303|  16.3k|    }
 1304|  16.5k|    return true;
 1305|  16.5k|}
parser.c:parse_transaction_details:
 1242|  4.72k|static bool parse_transaction_details(buffer_t *buffer, transaction_details_t *transaction) {
 1243|       |    // account used to run the (inner)transaction
 1244|  4.72k|    PARSER_CHECK(parse_transaction_source(buffer, &transaction->source_account))
  ------------------
  |  |   15|  4.72k|    {                           \
  |  |   16|  4.72k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 36, False: 4.68k]
  |  |  ------------------
  |  |   17|  4.72k|    }
  ------------------
 1245|       |
 1246|       |    // the fee the source_account will pay
 1247|  4.68k|    PARSER_CHECK(parse_transaction_fee(buffer, &transaction->fee))
  ------------------
  |  |   15|  4.68k|    {                           \
  |  |   16|  4.68k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 4.68k]
  |  |  ------------------
  |  |   17|  4.68k|    }
  ------------------
 1248|       |
 1249|       |    // sequence number to consume in the account
 1250|  4.68k|    PARSER_CHECK(parse_transaction_sequence(buffer, &transaction->sequence_number))
  ------------------
  |  |   15|  4.68k|    {                           \
  |  |   16|  4.68k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 4.68k]
  |  |  ------------------
  |  |   17|  4.68k|    }
  ------------------
 1251|       |
 1252|       |    // validity conditions
 1253|  4.68k|    PARSER_CHECK(parse_transaction_preconditions(buffer, &transaction->cond))
  ------------------
  |  |   15|  4.68k|    {                           \
  |  |   16|  4.68k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 105, False: 4.57k]
  |  |  ------------------
  |  |   17|  4.68k|    }
  ------------------
 1254|       |
 1255|  4.57k|    PARSER_CHECK(parse_transaction_memo(buffer, &transaction->memo))
  ------------------
  |  |   15|  4.57k|    {                           \
  |  |   16|  4.57k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 195, False: 4.38k]
  |  |  ------------------
  |  |   17|  4.57k|    }
  ------------------
 1256|  4.38k|    PARSER_CHECK(parse_transaction_operation_len(buffer, &transaction->operations_count))
  ------------------
  |  |   15|  4.38k|    {                           \
  |  |   16|  4.38k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 19, False: 4.36k]
  |  |  ------------------
  |  |   17|  4.38k|    }
  ------------------
 1257|       |
 1258|       |    // check ops is valid
 1259|       |    // size_t offset = buffer->offset;
 1260|       |    // PARSER_CHECK(check_operations(buffer, transaction->operations_count))
 1261|       |    // buffer->offset = offset;
 1262|       |
 1263|  4.36k|    return true;
 1264|  4.38k|}
parser.c:parse_transaction_source:
 1203|  4.72k|static bool parse_transaction_source(buffer_t *buffer, muxed_account_t *source) {
 1204|  4.72k|    return parse_muxed_account(buffer, source);
 1205|  4.72k|}
parser.c:parse_muxed_account:
  205|  12.7k|static bool parse_muxed_account(buffer_t *buffer, muxed_account_t *muxed_account) {
  206|  12.7k|    PARSER_CHECK(parse_uint32(buffer, &muxed_account->type))
  ------------------
  |  |   15|  12.7k|    {                           \
  |  |   16|  12.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 21, False: 12.7k]
  |  |  ------------------
  |  |   17|  12.7k|    }
  ------------------
  207|       |
  208|  12.7k|    switch (muxed_account->type) {
  209|  11.3k|        case KEY_TYPE_ED25519:
  ------------------
  |  Branch (209:9): [True: 11.3k, False: 1.36k]
  ------------------
  210|  11.3k|            PARSER_CHECK(
  ------------------
  |  |   15|  11.3k|    {                           \
  |  |   16|  11.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 16, False: 11.3k]
  |  |  ------------------
  |  |   17|  11.3k|    }
  ------------------
  211|  11.3k|                buffer_read_bytes(buffer, &muxed_account->ed25519, RAW_ED25519_PUBLIC_KEY_SIZE))
  212|  11.3k|            return true;
  213|  1.32k|        case KEY_TYPE_MUXED_ED25519:
  ------------------
  |  Branch (213:9): [True: 1.32k, False: 11.4k]
  ------------------
  214|  1.32k|            PARSER_CHECK(parse_uint64(buffer, &muxed_account->med25519.id))
  ------------------
  |  |   15|  1.32k|    {                           \
  |  |   16|  1.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.32k]
  |  |  ------------------
  |  |   17|  1.32k|    }
  ------------------
  215|  1.32k|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|  1.32k|    {                           \
  |  |   16|  1.32k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.31k]
  |  |  ------------------
  |  |   17|  1.32k|    }
  ------------------
  216|  1.32k|                                           &muxed_account->med25519.ed25519,
  217|  1.32k|                                           RAW_ED25519_PUBLIC_KEY_SIZE))
  218|  1.31k|            return true;
  219|     34|        default:
  ------------------
  |  Branch (219:9): [True: 34, False: 12.7k]
  ------------------
  220|     34|            return false;
  221|  12.7k|    }
  222|  12.7k|}
parser.c:parse_transaction_fee:
 1207|  4.68k|static bool parse_transaction_fee(buffer_t *buffer, uint32_t *fee) {
 1208|  4.68k|    return parse_uint32(buffer, fee);
 1209|  4.68k|}
parser.c:parse_transaction_sequence:
 1211|  4.68k|static bool parse_transaction_sequence(buffer_t *buffer, sequence_number_t *sequence_number) {
 1212|  4.68k|    return parse_int64(buffer, sequence_number);
 1213|  4.68k|}
parser.c:parse_transaction_preconditions:
 1215|  4.68k|static bool parse_transaction_preconditions(buffer_t *buffer, preconditions_t *preconditions) {
 1216|  4.68k|    return parse_preconditions(buffer, preconditions);
 1217|  4.68k|}
parser.c:parse_preconditions:
  249|  4.68k|static bool parse_preconditions(buffer_t *buffer, preconditions_t *cond) {
  250|  4.68k|    uint32_t precondition_type;
  251|  4.68k|    PARSER_CHECK(parse_uint32(buffer, &precondition_type))
  ------------------
  |  |   15|  4.68k|    {                           \
  |  |   16|  4.68k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 4.67k]
  |  |  ------------------
  |  |   17|  4.68k|    }
  ------------------
  252|  4.67k|    switch (precondition_type) {
  253|  4.43k|        case PRECOND_NONE:
  ------------------
  |  Branch (253:9): [True: 4.43k, False: 243]
  ------------------
  254|  4.43k|            cond->time_bounds_present = false;
  255|  4.43k|            cond->min_seq_num_present = false;
  256|  4.43k|            cond->ledger_bounds_present = false;
  257|  4.43k|            cond->min_seq_ledger_gap = 0;
  258|  4.43k|            cond->min_seq_age = 0;
  259|  4.43k|            return true;
  260|     68|        case PRECOND_TIME:
  ------------------
  |  Branch (260:9): [True: 68, False: 4.60k]
  ------------------
  261|     68|            cond->time_bounds_present = true;
  262|     68|            PARSER_CHECK(parse_time_bounds(buffer, &cond->time_bounds))
  ------------------
  |  |   15|     68|    {                           \
  |  |   16|     68|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 60]
  |  |  ------------------
  |  |   17|     68|    }
  ------------------
  263|     60|            cond->min_seq_num_present = false;
  264|     60|            cond->ledger_bounds_present = false;
  265|     60|            cond->min_seq_ledger_gap = 0;
  266|     60|            cond->min_seq_age = 0;
  267|     60|            return true;
  268|    167|        case PRECOND_V2:
  ------------------
  |  Branch (268:9): [True: 167, False: 4.51k]
  ------------------
  269|    167|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|    167|    {                           \
  |  |   16|    167|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 161]
  |  |  ------------------
  |  |   17|    167|    }
  ------------------
  270|    167|                                             (xdr_type_reader) parse_time_bounds,
  271|    167|                                             &cond->time_bounds,
  272|    167|                                             &cond->time_bounds_present))
  273|    161|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|    161|    {                           \
  |  |   16|    161|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 149]
  |  |  ------------------
  |  |   17|    161|    }
  ------------------
  274|    161|                                             (xdr_type_reader) parse_ledger_bounds,
  275|    161|                                             &cond->ledger_bounds,
  276|    161|                                             &cond->ledger_bounds_present))
  277|    149|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|    149|    {                           \
  |  |   16|    149|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 141]
  |  |  ------------------
  |  |   17|    149|    }
  ------------------
  278|    149|                                             (xdr_type_reader) parse_int64,
  279|    149|                                             &cond->min_seq_num,
  280|    149|                                             &cond->min_seq_num_present))
  281|    141|            PARSER_CHECK(parse_int64(buffer, &cond->min_seq_age))
  ------------------
  |  |   15|    141|    {                           \
  |  |   16|    141|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 138]
  |  |  ------------------
  |  |   17|    141|    }
  ------------------
  282|    138|            PARSER_CHECK(parse_uint32(buffer, &cond->min_seq_ledger_gap))
  ------------------
  |  |   15|    138|    {                           \
  |  |   16|    138|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 134]
  |  |  ------------------
  |  |   17|    138|    }
  ------------------
  283|    134|            PARSER_CHECK(parse_extra_signers(buffer))
  ------------------
  |  |   15|    134|    {                           \
  |  |   16|    134|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 52, False: 82]
  |  |  ------------------
  |  |   17|    134|    }
  ------------------
  284|     82|            return true;
  285|      8|        default:
  ------------------
  |  Branch (285:9): [True: 8, False: 4.66k]
  ------------------
  286|      8|            return false;
  287|  4.67k|    }
  288|  4.67k|}
parser.c:parse_time_bounds:
  224|     69|static bool parse_time_bounds(buffer_t *buffer, time_bounds_t *bounds) {
  225|     69|    PARSER_CHECK(parse_uint64(buffer, &bounds->min_time))
  ------------------
  |  |   15|     69|    {                           \
  |  |   16|     69|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 65]
  |  |  ------------------
  |  |   17|     69|    }
  ------------------
  226|     65|    PARSER_CHECK(parse_uint64(buffer, &bounds->max_time))
  ------------------
  |  |   15|     65|    {                           \
  |  |   16|     65|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 61]
  |  |  ------------------
  |  |   17|     65|    }
  ------------------
  227|     61|    return true;
  228|     65|}
parser.c:parse_optional_type:
  135|   174k|static bool parse_optional_type(buffer_t *buffer, xdr_type_reader reader, void *dst, bool *opted) {
  136|   174k|    bool is_present;
  137|       |
  138|   174k|    PARSER_CHECK(parse_bool(buffer, &is_present))
  ------------------
  |  |   15|   174k|    {                           \
  |  |   16|   174k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 306, False: 174k]
  |  |  ------------------
  |  |   17|   174k|    }
  ------------------
  139|   174k|    if (is_present) {
  ------------------
  |  Branch (139:9): [True: 4.00k, False: 170k]
  ------------------
  140|  4.00k|        if (opted) {
  ------------------
  |  Branch (140:13): [True: 4.00k, False: 0]
  ------------------
  141|  4.00k|            *opted = true;
  142|  4.00k|        }
  143|  4.00k|        return reader(buffer, dst);
  144|   170k|    } else {
  145|   170k|        if (opted) {
  ------------------
  |  Branch (145:13): [True: 170k, False: 0]
  ------------------
  146|   170k|            *opted = false;
  147|   170k|        }
  148|   170k|        return true;
  149|   170k|    }
  150|   174k|}
parser.c:parse_ledger_bounds:
  230|     77|static bool parse_ledger_bounds(buffer_t *buffer, ledger_bounds_t *ledger_bounds) {
  231|     77|    PARSER_CHECK(parse_uint32(buffer, &ledger_bounds->min_ledger))
  ------------------
  |  |   15|     77|    {                           \
  |  |   16|     77|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 74]
  |  |  ------------------
  |  |   17|     77|    }
  ------------------
  232|     74|    PARSER_CHECK(parse_uint32(buffer, &ledger_bounds->max_ledger))
  ------------------
  |  |   15|     74|    {                           \
  |  |   16|     74|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 71]
  |  |  ------------------
  |  |   17|     74|    }
  ------------------
  233|     71|    return true;
  234|     74|}
parser.c:parse_extra_signers:
  236|    134|static bool parse_extra_signers(buffer_t *buffer) {
  237|    134|    uint32_t length;
  238|    134|    PARSER_CHECK(parse_uint32(buffer, &length))
  ------------------
  |  |   15|    134|    {                           \
  |  |   16|    134|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 132]
  |  |  ------------------
  |  |   17|    134|    }
  ------------------
  239|    132|    if (length > 2) {  // maximum length is 2
  ------------------
  |  Branch (239:9): [True: 6, False: 126]
  ------------------
  240|      6|        return false;
  241|      6|    }
  242|    126|    signer_key_t signer_key;
  243|    239|    for (uint32_t i = 0; i < length; i++) {
  ------------------
  |  Branch (243:26): [True: 157, False: 82]
  ------------------
  244|    157|        PARSER_CHECK(parse_signer_key(buffer, &signer_key))
  ------------------
  |  |   15|    157|    {                           \
  |  |   16|    157|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 44, False: 113]
  |  |  ------------------
  |  |   17|    157|    }
  ------------------
  245|    157|    }
  246|     82|    return true;
  247|    126|}
parser.c:parse_signer_key:
  163|  3.52k|static bool parse_signer_key(buffer_t *buffer, signer_key_t *key) {
  164|  3.52k|    PARSER_CHECK(parse_uint32(buffer, &key->type))
  ------------------
  |  |   15|  3.52k|    {                           \
  |  |   16|  3.52k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 3.51k]
  |  |  ------------------
  |  |   17|  3.52k|    }
  ------------------
  165|  3.51k|    switch (key->type) {
  166|  1.68k|        case SIGNER_KEY_TYPE_ED25519:
  ------------------
  |  Branch (166:9): [True: 1.68k, False: 1.82k]
  ------------------
  167|  1.68k|            PARSER_CHECK(buffer_read_bytes(buffer, &key->ed25519, RAW_ED25519_PUBLIC_KEY_SIZE))
  ------------------
  |  |   15|  1.68k|    {                           \
  |  |   16|  1.68k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.68k]
  |  |  ------------------
  |  |   17|  1.68k|    }
  ------------------
  168|  1.68k|            return true;
  169|  1.02k|        case SIGNER_KEY_TYPE_PRE_AUTH_TX:
  ------------------
  |  Branch (169:9): [True: 1.02k, False: 2.48k]
  ------------------
  170|  1.02k|            PARSER_CHECK(buffer_read_bytes(buffer, &key->pre_auth_tx, RAW_PRE_AUTH_TX_KEY_SIZE))
  ------------------
  |  |   15|  1.02k|    {                           \
  |  |   16|  1.02k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.02k]
  |  |  ------------------
  |  |   17|  1.02k|    }
  ------------------
  171|  1.02k|            return true;
  172|    356|        case SIGNER_KEY_TYPE_HASH_X:
  ------------------
  |  Branch (172:9): [True: 356, False: 3.15k]
  ------------------
  173|    356|            PARSER_CHECK(buffer_read_bytes(buffer, &key->hash_x, RAW_HASH_X_KEY_SIZE))
  ------------------
  |  |   15|    356|    {                           \
  |  |   16|    356|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 350]
  |  |  ------------------
  |  |   17|    356|    }
  ------------------
  174|    350|            return true;
  175|    436|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:
  ------------------
  |  Branch (175:9): [True: 436, False: 3.07k]
  ------------------
  176|    436|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|    436|    {                           \
  |  |   16|    436|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 430]
  |  |  ------------------
  |  |   17|    436|    }
  ------------------
  177|    436|                                           &key->ed25519_signed_payload.ed25519,
  178|    436|                                           RAW_ED25519_PUBLIC_KEY_SIZE))
  179|    430|            PARSER_CHECK(parse_uint32(buffer, &key->ed25519_signed_payload.payload_len))
  ------------------
  |  |   15|    430|    {                           \
  |  |   16|    430|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 427]
  |  |  ------------------
  |  |   17|    430|    }
  ------------------
  180|       |            // valid length [1, 64]
  181|    427|            if (key->ed25519_signed_payload.payload_len == 0 ||
  ------------------
  |  Branch (181:17): [True: 8, False: 419]
  ------------------
  182|    427|                key->ed25519_signed_payload.payload_len > 64) {
  ------------------
  |  Branch (182:17): [True: 7, False: 412]
  ------------------
  183|     15|                return false;
  184|     15|            }
  185|    412|            size_t data_size = 0;
  186|    412|            PARSER_CHECK(num_bytes(key->ed25519_signed_payload.payload_len, &data_size))
  ------------------
  |  |   15|    412|    {                           \
  |  |   16|    412|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 412]
  |  |  ------------------
  |  |   17|    412|    }
  ------------------
  187|    412|            PARSER_CHECK(buffer_read_bytes(buffer, &key->ed25519_signed_payload.payload, data_size))
  ------------------
  |  |   15|    412|    {                           \
  |  |   16|    412|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 407]
  |  |  ------------------
  |  |   17|    412|    }
  ------------------
  188|    407|            return true;
  189|     10|        default:
  ------------------
  |  Branch (189:9): [True: 10, False: 3.50k]
  ------------------
  190|     10|            return false;
  191|  3.51k|    }
  192|  3.51k|}
parser.c:parse_transaction_memo:
 1219|  4.57k|static bool parse_transaction_memo(buffer_t *buffer, memo_t *memo) {
 1220|  4.57k|    return parse_memo(buffer, memo);
 1221|  4.57k|}
parser.c:parse_memo:
  290|  4.57k|static bool parse_memo(buffer_t *buffer, memo_t *memo) {
  291|  4.57k|    PARSER_CHECK(parse_uint32(buffer, &memo->type))
  ------------------
  |  |   15|  4.57k|    {                           \
  |  |   16|  4.57k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 4.55k]
  |  |  ------------------
  |  |   17|  4.57k|    }
  ------------------
  292|  4.55k|    switch (memo->type) {
  293|  4.27k|        case MEMO_NONE:
  ------------------
  |  Branch (293:9): [True: 4.27k, False: 273]
  ------------------
  294|  4.27k|            return true;
  295|     25|        case MEMO_ID:
  ------------------
  |  Branch (295:9): [True: 25, False: 4.52k]
  ------------------
  296|     25|            return parse_uint64(buffer, &memo->id);
  297|     94|        case MEMO_TEXT: {
  ------------------
  |  Branch (297:9): [True: 94, False: 4.45k]
  ------------------
  298|     94|            PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|     94|    {                           \
  |  |   16|     94|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 23, False: 71]
  |  |  ------------------
  |  |   17|     94|    }
  ------------------
  299|     94|                                                 &memo->text.text,
  300|     94|                                                 &memo->text.text_size,
  301|     94|                                                 MEMO_TEXT_MAX_SIZE))
  302|     71|            return true;
  303|     94|        }
  304|      6|        case MEMO_HASH:
  ------------------
  |  Branch (304:9): [True: 6, False: 4.54k]
  ------------------
  305|      6|            return buffer_read_bytes(buffer, &memo->hash, HASH_SIZE);
  ------------------
  |  |   46|      6|#define HASH_SIZE                 32
  ------------------
  306|     10|        case MEMO_RETURN:
  ------------------
  |  Branch (306:9): [True: 10, False: 4.54k]
  ------------------
  307|     10|            return buffer_read_bytes(buffer, &memo->return_hash, HASH_SIZE);
  ------------------
  |  |   46|     10|#define HASH_SIZE                 32
  ------------------
  308|    138|        default:
  ------------------
  |  Branch (308:9): [True: 138, False: 4.41k]
  ------------------
  309|    138|            return false;  // unknown memo type
  310|  4.55k|    }
  311|  4.55k|}
parser.c:parse_transaction_operation_len:
 1223|  4.38k|static bool parse_transaction_operation_len(buffer_t *buffer, uint8_t *operations_count) {
 1224|  4.38k|    uint32_t len;
 1225|  4.38k|    PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  4.38k|    {                           \
  |  |   16|  4.38k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 4.37k]
  |  |  ------------------
  |  |   17|  4.38k|    }
  ------------------
 1226|  4.37k|    if (len > MAX_OPS) {
  ------------------
  |  |   39|  4.37k|#define MAX_OPS 35
  ------------------
  |  Branch (1226:9): [True: 10, False: 4.36k]
  ------------------
 1227|     10|        return false;
 1228|     10|    }
 1229|  4.36k|    *operations_count = len;
 1230|  4.36k|    return true;
 1231|  4.37k|}
parser.c:parse_fee_bump_transaction_details:
 1276|     69|    fee_bump_transaction_details_t *fee_bump_transaction) {
 1277|     69|    PARSER_CHECK(parse_fee_bump_transaction_fee_source(buffer, &fee_bump_transaction->fee_source))
  ------------------
  |  |   15|     69|    {                           \
  |  |   16|     69|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 55]
  |  |  ------------------
  |  |   17|     69|    }
  ------------------
 1278|     55|    PARSER_CHECK(parse_fee_bump_transaction_fee(buffer, &fee_bump_transaction->fee))
  ------------------
  |  |   15|     55|    {                           \
  |  |   16|     55|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 50]
  |  |  ------------------
  |  |   17|     55|    }
  ------------------
 1279|     50|    return true;
 1280|     55|}
parser.c:parse_fee_bump_transaction_fee_source:
 1266|     69|static bool parse_fee_bump_transaction_fee_source(buffer_t *buffer, muxed_account_t *fee_source) {
 1267|     69|    return parse_muxed_account(buffer, fee_source);
 1268|     69|}
parser.c:parse_fee_bump_transaction_fee:
 1270|     55|static bool parse_fee_bump_transaction_fee(buffer_t *buffer, int64_t *fee) {
 1271|     55|    return parse_int64(buffer, fee);
 1272|     55|}
parser.c:check_operations:
 1233|  4.36k|static bool check_operations(buffer_t *buffer, uint8_t op_count) {
 1234|  4.36k|    PRINTF("check_operations: op_count=%d, offset=%d\n", op_count, buffer->offset);
 1235|  4.36k|    operation_t op;
 1236|  24.2k|    for (uint8_t i = 0; i < op_count; i++) {
  ------------------
  |  Branch (1236:25): [True: 21.3k, False: 2.89k]
  ------------------
 1237|  21.3k|        PARSER_CHECK(parse_operation(buffer, &op))
  ------------------
  |  |   15|  21.3k|    {                           \
  |  |   16|  21.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.47k, False: 19.9k]
  |  |  ------------------
  |  |   17|  21.3k|    }
  ------------------
 1238|  21.3k|    }
 1239|  2.89k|    return true;
 1240|  4.36k|}
parser.c:parse_operation:
 1101|   124k|static bool parse_operation(buffer_t *buffer, operation_t *operation) {
 1102|   124k|    PRINTF("parse_operation: offset=%d\n", buffer->offset);
 1103|   124k|    explicit_bzero(operation, sizeof(operation_t));
 1104|       |
 1105|   124k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|   124k|    {                           \
  |  |   16|   124k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 250, False: 124k]
  |  |  ------------------
  |  |   17|   124k|    }
  ------------------
 1106|   124k|                                     (xdr_type_reader) parse_muxed_account,
 1107|   124k|                                     &operation->source_account,
 1108|   124k|                                     &operation->source_account_present))
 1109|   124k|    PRINTF("operation->source_account_present: %d\n", operation->source_account_present);
 1110|       |
 1111|   124k|    PARSER_CHECK(parse_uint32(buffer, &operation->type))
  ------------------
  |  |   15|   124k|    {                           \
  |  |   16|   124k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 28, False: 124k]
  |  |  ------------------
  |  |   17|   124k|    }
  ------------------
 1112|   124k|    PRINTF("sizeof operation->type: %d\n", sizeof(operation->type));
 1113|       |
 1114|   124k|    switch (operation->type) {
 1115|  88.7k|        case OPERATION_TYPE_CREATE_ACCOUNT: {
  ------------------
  |  Branch (1115:9): [True: 88.7k, False: 35.8k]
  ------------------
 1116|  88.7k|            return parse_create_account(buffer, &operation->create_account_op);
 1117|      0|        }
 1118|  2.11k|        case OPERATION_TYPE_PAYMENT: {
  ------------------
  |  Branch (1118:9): [True: 2.11k, False: 122k]
  ------------------
 1119|  2.11k|            return parse_payment(buffer, &operation->payment_op);
 1120|      0|        }
 1121|  1.27k|        case OPERATION_TYPE_PATH_PAYMENT_STRICT_RECEIVE: {
  ------------------
  |  Branch (1121:9): [True: 1.27k, False: 123k]
  ------------------
 1122|  1.27k|            return parse_path_payment_strict_receive(buffer,
 1123|  1.27k|                                                     &operation->path_payment_strict_receive_op);
 1124|      0|        }
 1125|  2.15k|        case OPERATION_TYPE_CREATE_PASSIVE_SELL_OFFER: {
  ------------------
  |  Branch (1125:9): [True: 2.15k, False: 122k]
  ------------------
 1126|  2.15k|            return parse_create_passive_sell_offer(buffer,
 1127|  2.15k|                                                   &operation->create_passive_sell_offer_op);
 1128|      0|        }
 1129|    323|        case OPERATION_TYPE_MANAGE_SELL_OFFER: {
  ------------------
  |  Branch (1129:9): [True: 323, False: 124k]
  ------------------
 1130|    323|            return parse_manage_sell_offer(buffer, &operation->manage_sell_offer_op);
 1131|      0|        }
 1132|  6.18k|        case OPERATION_TYPE_SET_OPTIONS: {
  ------------------
  |  Branch (1132:9): [True: 6.18k, False: 118k]
  ------------------
 1133|  6.18k|            return parse_set_options(buffer, &operation->set_options_op);
 1134|      0|        }
 1135|    991|        case OPERATION_TYPE_CHANGE_TRUST: {
  ------------------
  |  Branch (1135:9): [True: 991, False: 123k]
  ------------------
 1136|    991|            return parse_change_trust(buffer, &operation->change_trust_op);
 1137|      0|        }
 1138|    219|        case OPERATION_TYPE_ALLOW_TRUST: {
  ------------------
  |  Branch (1138:9): [True: 219, False: 124k]
  ------------------
 1139|    219|            return parse_allow_trust(buffer, &operation->allow_trust_op);
 1140|      0|        }
 1141|    911|        case OPERATION_TYPE_ACCOUNT_MERGE: {
  ------------------
  |  Branch (1141:9): [True: 911, False: 123k]
  ------------------
 1142|    911|            return parse_account_merge(buffer, &operation->account_merge_op);
 1143|      0|        }
 1144|    587|        case OPERATION_TYPE_INFLATION: {
  ------------------
  |  Branch (1144:9): [True: 587, False: 124k]
  ------------------
 1145|    587|            return true;
 1146|      0|        }
 1147|  1.51k|        case OPERATION_TYPE_MANAGE_DATA: {
  ------------------
  |  Branch (1147:9): [True: 1.51k, False: 123k]
  ------------------
 1148|  1.51k|            return parse_manage_data(buffer, &operation->manage_data_op);
 1149|      0|        }
 1150|    120|        case OPERATION_TYPE_BUMP_SEQUENCE: {
  ------------------
  |  Branch (1150:9): [True: 120, False: 124k]
  ------------------
 1151|    120|            return parse_bump_sequence(buffer, &operation->bump_sequence_op);
 1152|      0|        }
 1153|    118|        case OPERATION_TYPE_MANAGE_BUY_OFFER: {
  ------------------
  |  Branch (1153:9): [True: 118, False: 124k]
  ------------------
 1154|    118|            return parse_manage_buy_offer(buffer, &operation->manage_buy_offer_op);
 1155|      0|        }
 1156|    181|        case OPERATION_TYPE_PATH_PAYMENT_STRICT_SEND: {
  ------------------
  |  Branch (1156:9): [True: 181, False: 124k]
  ------------------
 1157|    181|            return parse_path_payment_strict_send(buffer, &operation->path_payment_strict_send_op);
 1158|      0|        }
 1159|    691|        case OPERATION_TYPE_CREATE_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1159:9): [True: 691, False: 123k]
  ------------------
 1160|    691|            return parse_create_claimable_balance(buffer, &operation->create_claimable_balance_op);
 1161|      0|        }
 1162|    943|        case OPERATION_TYPE_CLAIM_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1162:9): [True: 943, False: 123k]
  ------------------
 1163|    943|            return parse_claim_claimable_balance(buffer, &operation->claim_claimable_balance_op);
 1164|      0|        }
 1165|  1.88k|        case OPERATION_TYPE_BEGIN_SPONSORING_FUTURE_RESERVES: {
  ------------------
  |  Branch (1165:9): [True: 1.88k, False: 122k]
  ------------------
 1166|  1.88k|            return parse_begin_sponsoring_future_reserves(
 1167|  1.88k|                buffer,
 1168|  1.88k|                &operation->begin_sponsoring_future_reserves_op);
 1169|      0|        }
 1170|    693|        case OPERATION_TYPE_END_SPONSORING_FUTURE_RESERVES: {
  ------------------
  |  Branch (1170:9): [True: 693, False: 123k]
  ------------------
 1171|    693|            return true;
 1172|      0|        }
 1173|  5.53k|        case OPERATION_TYPE_REVOKE_SPONSORSHIP: {
  ------------------
  |  Branch (1173:9): [True: 5.53k, False: 119k]
  ------------------
 1174|  5.53k|            return parse_revoke_sponsorship(buffer, &operation->revoke_sponsorship_op);
 1175|      0|        }
 1176|    372|        case OPERATION_TYPE_CLAWBACK: {
  ------------------
  |  Branch (1176:9): [True: 372, False: 124k]
  ------------------
 1177|    372|            return parse_clawback(buffer, &operation->clawback_op);
 1178|      0|        }
 1179|    592|        case OPERATION_TYPE_CLAWBACK_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1179:9): [True: 592, False: 124k]
  ------------------
 1180|    592|            return parse_clawback_claimable_balance(buffer,
 1181|    592|                                                    &operation->clawback_claimable_balance_op);
 1182|      0|        }
 1183|  5.40k|        case OPERATION_TYPE_SET_TRUST_LINE_FLAGS: {
  ------------------
  |  Branch (1183:9): [True: 5.40k, False: 119k]
  ------------------
 1184|  5.40k|            return parse_set_trust_line_flags(buffer, &operation->set_trust_line_flags_op);
 1185|      0|        }
 1186|    119|        case OPERATION_TYPE_LIQUIDITY_POOL_DEPOSIT:
  ------------------
  |  Branch (1186:9): [True: 119, False: 124k]
  ------------------
 1187|    119|            return parse_liquidity_pool_deposit(buffer, &operation->liquidity_pool_deposit_op);
 1188|    947|        case OPERATION_TYPE_LIQUIDITY_POOL_WITHDRAW:
  ------------------
  |  Branch (1188:9): [True: 947, False: 123k]
  ------------------
 1189|    947|            return parse_liquidity_pool_withdraw(buffer, &operation->liquidity_pool_withdraw_op);
 1190|    746|        case OPERATION_INVOKE_HOST_FUNCTION: {
  ------------------
  |  Branch (1190:9): [True: 746, False: 123k]
  ------------------
 1191|    746|            return parse_invoke_host_function(buffer, &operation->invoke_host_function_op);
 1192|      0|        }
 1193|    619|        case OPERATION_EXTEND_FOOTPRINT_TTL:
  ------------------
  |  Branch (1193:9): [True: 619, False: 123k]
  ------------------
 1194|    619|            return parse_extend_footprint_ttl(buffer, &operation->extend_footprint_ttl_op);
 1195|    561|        case OPERATION_RESTORE_FOOTPRINT:
  ------------------
  |  Branch (1195:9): [True: 561, False: 124k]
  ------------------
 1196|    561|            return parse_restore_footprint(buffer, &operation->restore_footprint_op);
 1197|     17|        default:
  ------------------
  |  Branch (1197:9): [True: 17, False: 124k]
  ------------------
 1198|     17|            return false;
 1199|   124k|    }
 1200|      0|    return false;
 1201|   124k|}
parser.c:parse_create_account:
  401|  88.7k|static bool parse_create_account(buffer_t *buffer, create_account_op_t *create_account_op) {
  402|  88.7k|    PARSER_CHECK(parse_account_id(buffer, &create_account_op->destination))
  ------------------
  |  |   15|  88.7k|    {                           \
  |  |   16|  88.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 77, False: 88.7k]
  |  |  ------------------
  |  |   17|  88.7k|    }
  ------------------
  403|  88.7k|    PARSER_CHECK(parse_int64(buffer, &create_account_op->starting_balance))
  ------------------
  |  |   15|  88.7k|    {                           \
  |  |   16|  88.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 88.7k]
  |  |  ------------------
  |  |   17|  88.7k|    }
  ------------------
  404|  88.7k|    return true;
  405|  88.7k|}
parser.c:parse_payment:
  407|  2.11k|static bool parse_payment(buffer_t *buffer, payment_op_t *payment_op) {
  408|  2.11k|    PARSER_CHECK(parse_muxed_account(buffer, &payment_op->destination))
  ------------------
  |  |   15|  2.11k|    {                           \
  |  |   16|  2.11k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 2.10k]
  |  |  ------------------
  |  |   17|  2.11k|    }
  ------------------
  409|  2.10k|    PARSER_CHECK(parse_asset(buffer, &payment_op->asset))
  ------------------
  |  |   15|  2.10k|    {                           \
  |  |   16|  2.10k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 2.09k]
  |  |  ------------------
  |  |   17|  2.10k|    }
  ------------------
  410|  2.09k|    PARSER_CHECK(parse_int64(buffer, &payment_op->amount))
  ------------------
  |  |   15|  2.09k|    {                           \
  |  |   16|  2.09k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 2.09k]
  |  |  ------------------
  |  |   17|  2.09k|    }
  ------------------
  411|  2.09k|    return true;
  412|  2.09k|}
parser.c:parse_asset:
  325|  18.2k|static bool parse_asset(buffer_t *buffer, asset_t *asset) {
  326|  18.2k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  18.2k|    {                           \
  |  |   16|  18.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 40, False: 18.2k]
  |  |  ------------------
  |  |   17|  18.2k|    }
  ------------------
  327|  18.2k|    switch (asset->type) {
  328|  17.3k|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (328:9): [True: 17.3k, False: 869]
  ------------------
  329|  17.3k|            return true;
  330|      0|        }
  331|    450|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (331:9): [True: 450, False: 17.7k]
  ------------------
  332|    450|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  333|      0|        }
  334|    305|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (334:9): [True: 305, False: 17.9k]
  ------------------
  335|    305|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  336|      0|        }
  337|    114|        default:
  ------------------
  |  Branch (337:9): [True: 114, False: 18.1k]
  ------------------
  338|    114|            return false;  // unknown asset type
  339|  18.2k|    }
  340|  18.2k|}
parser.c:parse_alpha_num4_asset:
  313|  1.12k|static bool parse_alpha_num4_asset(buffer_t *buffer, alpha_num4_t *asset) {
  314|  1.12k|    PARSER_CHECK(buffer_read_bytes(buffer, &asset->asset_code, 4))
  ------------------
  |  |   15|  1.12k|    {                           \
  |  |   16|  1.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 1.11k]
  |  |  ------------------
  |  |   17|  1.12k|    }
  ------------------
  315|  1.11k|    PARSER_CHECK(parse_account_id(buffer, &asset->issuer))
  ------------------
  |  |   15|  1.11k|    {                           \
  |  |   16|  1.11k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 25, False: 1.09k]
  |  |  ------------------
  |  |   17|  1.11k|    }
  ------------------
  316|  1.09k|    return true;
  317|  1.11k|}
parser.c:parse_alpha_num12_asset:
  319|    587|static bool parse_alpha_num12_asset(buffer_t *buffer, alpha_num12_t *asset) {
  320|    587|    PARSER_CHECK(buffer_read_bytes(buffer, &asset->asset_code, 12))
  ------------------
  |  |   15|    587|    {                           \
  |  |   16|    587|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 19, False: 568]
  |  |  ------------------
  |  |   17|    587|    }
  ------------------
  321|    568|    PARSER_CHECK(parse_account_id(buffer, &asset->issuer))
  ------------------
  |  |   15|    568|    {                           \
  |  |   16|    568|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 19, False: 549]
  |  |  ------------------
  |  |   17|    568|    }
  ------------------
  322|    549|    return true;
  323|    568|}
parser.c:parse_path_payment_strict_receive:
  415|  1.27k|                                              path_payment_strict_receive_op_t *op) {
  416|  1.27k|    uint32_t path_len;
  417|       |
  418|  1.27k|    PARSER_CHECK(parse_asset(buffer, &op->send_asset))
  ------------------
  |  |   15|  1.27k|    {                           \
  |  |   16|  1.27k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 1.26k]
  |  |  ------------------
  |  |   17|  1.27k|    }
  ------------------
  419|  1.26k|    PARSER_CHECK(parse_int64(buffer, &op->send_max))
  ------------------
  |  |   15|  1.26k|    {                           \
  |  |   16|  1.26k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.25k]
  |  |  ------------------
  |  |   17|  1.26k|    }
  ------------------
  420|  1.25k|    PARSER_CHECK(parse_muxed_account(buffer, &op->destination))
  ------------------
  |  |   15|  1.25k|    {                           \
  |  |   16|  1.25k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.25k]
  |  |  ------------------
  |  |   17|  1.25k|    }
  ------------------
  421|  1.25k|    PARSER_CHECK(parse_asset(buffer, &op->dest_asset))
  ------------------
  |  |   15|  1.25k|    {                           \
  |  |   16|  1.25k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 1.24k]
  |  |  ------------------
  |  |   17|  1.25k|    }
  ------------------
  422|  1.24k|    PARSER_CHECK(parse_int64(buffer, &op->dest_amount))
  ------------------
  |  |   15|  1.24k|    {                           \
  |  |   16|  1.24k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 1.23k]
  |  |  ------------------
  |  |   17|  1.24k|    }
  ------------------
  423|       |
  424|  1.23k|    PARSER_CHECK(parse_uint32(buffer, &path_len))
  ------------------
  |  |   15|  1.23k|    {                           \
  |  |   16|  1.23k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.22k]
  |  |  ------------------
  |  |   17|  1.23k|    }
  ------------------
  425|  1.22k|    if (path_len > PATH_PAYMENT_MAX_PATH_LENGTH) {
  ------------------
  |  |   35|  1.22k|#define PATH_PAYMENT_MAX_PATH_LENGTH  5
  ------------------
  |  Branch (425:9): [True: 3, False: 1.22k]
  ------------------
  426|      3|        return false;
  427|      3|    }
  428|  2.44k|    for (uint32_t i = 0; i < path_len; i++) {
  ------------------
  |  Branch (428:26): [True: 1.23k, False: 1.21k]
  ------------------
  429|  1.23k|        asset_t tmp_asset;
  430|  1.23k|        PARSER_CHECK(parse_asset(buffer, &tmp_asset))
  ------------------
  |  |   15|  1.23k|    {                           \
  |  |   16|  1.23k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 1.22k]
  |  |  ------------------
  |  |   17|  1.23k|    }
  ------------------
  431|  1.23k|    }
  432|  1.21k|    return true;
  433|  1.22k|}
parser.c:parse_create_passive_sell_offer:
  500|  2.15k|static bool parse_create_passive_sell_offer(buffer_t *buffer, create_passive_sell_offer_op_t *op) {
  501|  2.15k|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|  2.15k|    {                           \
  |  |   16|  2.15k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 2.14k]
  |  |  ------------------
  |  |   17|  2.15k|    }
  ------------------
  502|  2.14k|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|  2.14k|    {                           \
  |  |   16|  2.14k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 2.13k]
  |  |  ------------------
  |  |   17|  2.14k|    }
  ------------------
  503|  2.13k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  2.13k|    {                           \
  |  |   16|  2.13k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 2.12k]
  |  |  ------------------
  |  |   17|  2.13k|    }
  ------------------
  504|  2.12k|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|  2.12k|    {                           \
  |  |   16|  2.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 2.11k]
  |  |  ------------------
  |  |   17|  2.12k|    }
  ------------------
  505|  2.11k|    return true;
  506|  2.12k|}
parser.c:parse_price:
  475|  2.73k|static bool parse_price(buffer_t *buffer, price_t *price) {
  476|  2.73k|    PARSER_CHECK(parse_int32(buffer, &price->n))
  ------------------
  |  |   15|  2.73k|    {                           \
  |  |   16|  2.73k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 17, False: 2.72k]
  |  |  ------------------
  |  |   17|  2.73k|    }
  ------------------
  477|  2.72k|    PARSER_CHECK(parse_int32(buffer, &price->d))
  ------------------
  |  |   15|  2.72k|    {                           \
  |  |   16|  2.72k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 2.71k]
  |  |  ------------------
  |  |   17|  2.72k|    }
  ------------------
  478|       |    // Denominator cannot be null, as it would lead to a division by zero.
  479|  2.71k|    return price->d != 0;
  480|  2.72k|}
parser.c:parse_manage_sell_offer:
  482|    323|static bool parse_manage_sell_offer(buffer_t *buffer, manage_sell_offer_op_t *op) {
  483|    323|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|    323|    {                           \
  |  |   16|    323|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 320]
  |  |  ------------------
  |  |   17|    323|    }
  ------------------
  484|    320|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|    320|    {                           \
  |  |   16|    320|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 309]
  |  |  ------------------
  |  |   17|    320|    }
  ------------------
  485|    309|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    309|    {                           \
  |  |   16|    309|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 303]
  |  |  ------------------
  |  |   17|    309|    }
  ------------------
  486|    303|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|    303|    {                           \
  |  |   16|    303|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 295]
  |  |  ------------------
  |  |   17|    303|    }
  ------------------
  487|    295|    PARSER_CHECK(parse_int64(buffer, &op->offer_id))
  ------------------
  |  |   15|    295|    {                           \
  |  |   16|    295|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 289]
  |  |  ------------------
  |  |   17|    295|    }
  ------------------
  488|    289|    return true;
  489|    295|}
parser.c:parse_set_options:
  521|  6.18k|static bool parse_set_options(buffer_t *buffer, set_options_op_t *set_options) {
  522|  6.18k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  6.18k|    {                           \
  |  |   16|  6.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 6.17k]
  |  |  ------------------
  |  |   17|  6.18k|    }
  ------------------
  523|  6.18k|                                     (xdr_type_reader) parse_account_id,
  524|  6.18k|                                     &set_options->inflation_destination,
  525|  6.18k|                                     &set_options->inflation_destination_present))
  526|       |
  527|  6.17k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  6.17k|    {                           \
  |  |   16|  6.17k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 6.17k]
  |  |  ------------------
  |  |   17|  6.17k|    }
  ------------------
  528|  6.17k|                                     (xdr_type_reader) parse_uint32,
  529|  6.17k|                                     &set_options->clear_flags,
  530|  6.17k|                                     &set_options->clear_flags_present))
  531|  6.17k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  6.17k|    {                           \
  |  |   16|  6.17k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 6.17k]
  |  |  ------------------
  |  |   17|  6.17k|    }
  ------------------
  532|  6.17k|                                     (xdr_type_reader) parse_uint32,
  533|  6.17k|                                     &set_options->set_flags,
  534|  6.17k|                                     &set_options->set_flags_present))
  535|  6.17k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  6.17k|    {                           \
  |  |   16|  6.17k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 6.16k]
  |  |  ------------------
  |  |   17|  6.17k|    }
  ------------------
  536|  6.17k|                                     (xdr_type_reader) parse_uint32,
  537|  6.17k|                                     &set_options->master_weight,
  538|  6.17k|                                     &set_options->master_weight_present))
  539|  6.16k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  6.16k|    {                           \
  |  |   16|  6.16k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 6.16k]
  |  |  ------------------
  |  |   17|  6.16k|    }
  ------------------
  540|  6.16k|                                     (xdr_type_reader) parse_uint32,
  541|  6.16k|                                     &set_options->low_threshold,
  542|  6.16k|                                     &set_options->low_threshold_present))
  543|  6.16k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  6.16k|    {                           \
  |  |   16|  6.16k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 6.15k]
  |  |  ------------------
  |  |   17|  6.16k|    }
  ------------------
  544|  6.16k|                                     (xdr_type_reader) parse_uint32,
  545|  6.16k|                                     &set_options->medium_threshold,
  546|  6.16k|                                     &set_options->medium_threshold_present))
  547|  6.15k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  6.15k|    {                           \
  |  |   16|  6.15k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 6.14k]
  |  |  ------------------
  |  |   17|  6.15k|    }
  ------------------
  548|  6.15k|                                     (xdr_type_reader) parse_uint32,
  549|  6.15k|                                     &set_options->high_threshold,
  550|  6.15k|                                     &set_options->high_threshold_present))
  551|       |
  552|  6.14k|    uint32_t home_domain_present;
  553|  6.14k|    PARSER_CHECK(parse_uint32(buffer, &home_domain_present))
  ------------------
  |  |   15|  6.14k|    {                           \
  |  |   16|  6.14k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 6.14k]
  |  |  ------------------
  |  |   17|  6.14k|    }
  ------------------
  554|  6.14k|    set_options->home_domain_present = home_domain_present ? true : false;
  ------------------
  |  Branch (554:40): [True: 1.93k, False: 4.20k]
  ------------------
  555|  6.14k|    if (set_options->home_domain_present) {
  ------------------
  |  Branch (555:9): [True: 1.93k, False: 4.20k]
  ------------------
  556|  1.93k|        PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  1.93k|    {                           \
  |  |   16|  1.93k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 1.93k]
  |  |  ------------------
  |  |   17|  1.93k|    }
  ------------------
  557|  1.93k|                                             &set_options->home_domain,
  558|  1.93k|                                             &set_options->home_domain_size,
  559|  1.93k|                                             HOME_DOMAIN_MAX_SIZE))
  560|  4.20k|    } else {
  561|  4.20k|        set_options->home_domain_size = 0;
  562|  4.20k|    }
  563|       |
  564|  6.13k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  6.13k|    {                           \
  |  |   16|  6.13k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 23, False: 6.11k]
  |  |  ------------------
  |  |   17|  6.13k|    }
  ------------------
  565|  6.13k|                                     (xdr_type_reader) parse_signer,
  566|  6.13k|                                     &set_options->signer,
  567|  6.13k|                                     &set_options->signer_present))
  568|  6.11k|    return true;
  569|  6.13k|}
parser.c:parse_signer:
  515|     97|static bool parse_signer(buffer_t *buffer, signer_t *signer) {
  516|     97|    PARSER_CHECK(parse_signer_key(buffer, &signer->key))
  ------------------
  |  |   15|     97|    {                           \
  |  |   16|     97|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 88]
  |  |  ------------------
  |  |   17|     97|    }
  ------------------
  517|     88|    PARSER_CHECK(parse_uint32(buffer, &signer->weight))
  ------------------
  |  |   15|     88|    {                           \
  |  |   16|     88|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 84]
  |  |  ------------------
  |  |   17|     88|    }
  ------------------
  518|     84|    return true;
  519|     88|}
parser.c:parse_change_trust:
  508|    991|static bool parse_change_trust(buffer_t *buffer, change_trust_op_t *op) {
  509|    991|    PARSER_CHECK(parse_change_trust_asset(buffer, &op->line))
  ------------------
  |  |   15|    991|    {                           \
  |  |   16|    991|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 34, False: 957]
  |  |  ------------------
  |  |   17|    991|    }
  ------------------
  510|    957|    PARSER_CHECK(parse_int64(buffer, &op->limit));
  ------------------
  |  |   15|    957|    {                           \
  |  |   16|    957|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 950]
  |  |  ------------------
  |  |   17|    957|    }
  ------------------
  511|       |    // Limit cannot be negative
  512|    950|    return op->limit >= 0;
  513|    957|}
parser.c:parse_change_trust_asset:
  381|    991|static bool parse_change_trust_asset(buffer_t *buffer, change_trust_asset_t *asset) {
  382|    991|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|    991|    {                           \
  |  |   16|    991|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 989]
  |  |  ------------------
  |  |   17|    991|    }
  ------------------
  383|    989|    switch (asset->type) {
  384|    146|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (384:9): [True: 146, False: 843]
  ------------------
  385|    146|            return true;
  386|      0|        }
  387|    611|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (387:9): [True: 611, False: 378]
  ------------------
  388|    611|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  389|      0|        }
  390|    171|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (390:9): [True: 171, False: 818]
  ------------------
  391|    171|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  392|      0|        }
  393|     54|        case ASSET_TYPE_POOL_SHARE: {
  ------------------
  |  Branch (393:9): [True: 54, False: 935]
  ------------------
  394|     54|            return parse_liquidity_pool_parameters(buffer, &asset->liquidity_pool);
  395|      0|        }
  396|      7|        default:
  ------------------
  |  Branch (396:9): [True: 7, False: 982]
  ------------------
  397|      7|            return false;  // unknown asset type
  398|    989|    }
  399|    989|}
parser.c:parse_liquidity_pool_parameters:
  366|     54|    liquidity_pool_parameters_t *liquidity_pool_parameters) {
  367|     54|    uint32_t liquidity_pool_type;
  368|     54|    PARSER_CHECK(parse_uint32(buffer, &liquidity_pool_type))
  ------------------
  |  |   15|     54|    {                           \
  |  |   16|     54|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 52]
  |  |  ------------------
  |  |   17|     54|    }
  ------------------
  369|     52|    switch (liquidity_pool_type) {
  370|     49|        case LIQUIDITY_POOL_CONSTANT_PRODUCT: {
  ------------------
  |  Branch (370:9): [True: 49, False: 3]
  ------------------
  371|     49|            PARSER_CHECK(parse_asset(buffer, &liquidity_pool_parameters->constant_product.asset_a))
  ------------------
  |  |   15|     49|    {                           \
  |  |   16|     49|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 45]
  |  |  ------------------
  |  |   17|     49|    }
  ------------------
  372|     45|            PARSER_CHECK(parse_asset(buffer, &liquidity_pool_parameters->constant_product.asset_b))
  ------------------
  |  |   15|     45|    {                           \
  |  |   16|     45|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 42]
  |  |  ------------------
  |  |   17|     45|    }
  ------------------
  373|     42|            PARSER_CHECK(parse_int32(buffer, &liquidity_pool_parameters->constant_product.fee))
  ------------------
  |  |   15|     42|    {                           \
  |  |   16|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 40]
  |  |  ------------------
  |  |   17|     42|    }
  ------------------
  374|     40|            return true;
  375|     42|        }
  376|      3|        default:
  ------------------
  |  Branch (376:9): [True: 3, False: 49]
  ------------------
  377|      3|            return false;
  378|     52|    }
  379|     52|}
parser.c:parse_allow_trust:
  435|    219|static bool parse_allow_trust(buffer_t *buffer, allow_trust_op_t *op) {
  436|    219|    PARSER_CHECK(parse_account_id(buffer, &op->trustor))
  ------------------
  |  |   15|    219|    {                           \
  |  |   16|    219|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 216]
  |  |  ------------------
  |  |   17|    219|    }
  ------------------
  437|    216|    PARSER_CHECK(parse_uint32(buffer, &op->asset_type))
  ------------------
  |  |   15|    216|    {                           \
  |  |   16|    216|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 213]
  |  |  ------------------
  |  |   17|    216|    }
  ------------------
  438|       |
  439|    213|    switch (op->asset_type) {
  440|     34|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (440:9): [True: 34, False: 179]
  ------------------
  441|     34|            PARSER_CHECK(buffer_read_bytes(buffer, &op->asset_code, 4))
  ------------------
  |  |   15|     34|    {                           \
  |  |   16|     34|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 32]
  |  |  ------------------
  |  |   17|     34|    }
  ------------------
  442|     32|            break;
  443|    172|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (443:9): [True: 172, False: 41]
  ------------------
  444|    172|            PARSER_CHECK(buffer_read_bytes(buffer, &op->asset_code, 12))
  ------------------
  |  |   15|    172|    {                           \
  |  |   16|    172|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 169]
  |  |  ------------------
  |  |   17|    172|    }
  ------------------
  445|    169|            break;
  446|    169|        default:
  ------------------
  |  Branch (446:9): [True: 7, False: 206]
  ------------------
  447|      7|            return false;  // unknown asset type
  448|    213|    }
  449|       |
  450|    201|    PARSER_CHECK(parse_uint32(buffer, &op->authorize))
  ------------------
  |  |   15|    201|    {                           \
  |  |   16|    201|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 196]
  |  |  ------------------
  |  |   17|    201|    }
  ------------------
  451|    196|    return true;
  452|    201|}
parser.c:parse_account_merge:
  454|    911|static bool parse_account_merge(buffer_t *buffer, account_merge_op_t *op) {
  455|    911|    return parse_muxed_account(buffer, &op->destination);
  456|    911|}
parser.c:parse_manage_data:
  458|  1.51k|static bool parse_manage_data(buffer_t *buffer, manage_data_op_t *op) {
  459|  1.51k|    PARSER_CHECK(
  ------------------
  |  |   15|  1.51k|    {                           \
  |  |   16|  1.51k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.51k]
  |  |  ------------------
  |  |   17|  1.51k|    }
  ------------------
  460|  1.51k|        parse_binary_string_ptr(buffer, &op->data_name, &op->data_name_size, DATA_NAME_MAX_SIZE))
  461|       |
  462|  1.51k|    bool has_value;
  463|  1.51k|    PARSER_CHECK(parse_bool(buffer, &has_value))
  ------------------
  |  |   15|  1.51k|    {                           \
  |  |   16|  1.51k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.50k]
  |  |  ------------------
  |  |   17|  1.51k|    }
  ------------------
  464|  1.50k|    if (has_value) {
  ------------------
  |  Branch (464:9): [True: 276, False: 1.23k]
  ------------------
  465|    276|        PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|    276|    {                           \
  |  |   16|    276|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 269]
  |  |  ------------------
  |  |   17|    276|    }
  ------------------
  466|    276|                                             &op->data_value,
  467|    276|                                             &op->data_value_size,
  468|    276|                                             DATA_VALUE_MAX_SIZE))
  469|  1.23k|    } else {
  470|  1.23k|        op->data_value_size = 0;
  471|  1.23k|    }
  472|  1.49k|    return true;
  473|  1.50k|}
parser.c:parse_bump_sequence:
  571|    120|static bool parse_bump_sequence(buffer_t *buffer, bump_sequence_op_t *op) {
  572|    120|    return parse_int64(buffer, &op->bump_to);
  573|    120|}
parser.c:parse_manage_buy_offer:
  491|    118|static bool parse_manage_buy_offer(buffer_t *buffer, manage_buy_offer_op_t *op) {
  492|    118|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|    118|    {                           \
  |  |   16|    118|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 110]
  |  |  ------------------
  |  |   17|    118|    }
  ------------------
  493|    110|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|    110|    {                           \
  |  |   16|    110|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 100]
  |  |  ------------------
  |  |   17|    110|    }
  ------------------
  494|    100|    PARSER_CHECK(parse_int64(buffer, &op->buy_amount))
  ------------------
  |  |   15|    100|    {                           \
  |  |   16|    100|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 98]
  |  |  ------------------
  |  |   17|    100|    }
  ------------------
  495|     98|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|     98|    {                           \
  |  |   16|     98|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 92]
  |  |  ------------------
  |  |   17|     98|    }
  ------------------
  496|     92|    PARSER_CHECK(parse_int64(buffer, &op->offer_id))
  ------------------
  |  |   15|     92|    {                           \
  |  |   16|     92|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 89]
  |  |  ------------------
  |  |   17|     92|    }
  ------------------
  497|     89|    return true;
  498|     92|}
parser.c:parse_path_payment_strict_send:
  575|    181|static bool parse_path_payment_strict_send(buffer_t *buffer, path_payment_strict_send_op_t *op) {
  576|    181|    uint32_t path_len;
  577|       |
  578|    181|    PARSER_CHECK(parse_asset(buffer, &op->send_asset))
  ------------------
  |  |   15|    181|    {                           \
  |  |   16|    181|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 178]
  |  |  ------------------
  |  |   17|    181|    }
  ------------------
  579|    178|    PARSER_CHECK(parse_int64(buffer, &op->send_amount))
  ------------------
  |  |   15|    178|    {                           \
  |  |   16|    178|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 175]
  |  |  ------------------
  |  |   17|    178|    }
  ------------------
  580|    175|    PARSER_CHECK(parse_muxed_account(buffer, &op->destination))
  ------------------
  |  |   15|    175|    {                           \
  |  |   16|    175|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 172]
  |  |  ------------------
  |  |   17|    175|    }
  ------------------
  581|    172|    PARSER_CHECK(parse_asset(buffer, &op->dest_asset))
  ------------------
  |  |   15|    172|    {                           \
  |  |   16|    172|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 167]
  |  |  ------------------
  |  |   17|    172|    }
  ------------------
  582|    167|    PARSER_CHECK(parse_int64(buffer, &op->dest_min))
  ------------------
  |  |   15|    167|    {                           \
  |  |   16|    167|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 164]
  |  |  ------------------
  |  |   17|    167|    }
  ------------------
  583|    164|    PARSER_CHECK(parse_uint32(buffer, &path_len))
  ------------------
  |  |   15|    164|    {                           \
  |  |   16|    164|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 161]
  |  |  ------------------
  |  |   17|    164|    }
  ------------------
  584|    161|    if (path_len > PATH_PAYMENT_MAX_PATH_LENGTH) {
  ------------------
  |  |   35|    161|#define PATH_PAYMENT_MAX_PATH_LENGTH  5
  ------------------
  |  Branch (584:9): [True: 4, False: 157]
  ------------------
  585|      4|        return false;
  586|      4|    }
  587|    324|    for (uint32_t i = 0; i < path_len; i++) {
  ------------------
  |  Branch (587:26): [True: 177, False: 147]
  ------------------
  588|    177|        asset_t tmp_asset;
  589|    177|        PARSER_CHECK(parse_asset(buffer, &tmp_asset))
  ------------------
  |  |   15|    177|    {                           \
  |  |   16|    177|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 167]
  |  |  ------------------
  |  |   17|    177|    }
  ------------------
  590|    177|    }
  591|    147|    return true;
  592|    157|}
parser.c:parse_create_claimable_balance:
  645|    691|static bool parse_create_claimable_balance(buffer_t *buffer, create_claimable_balance_op_t *op) {
  646|    691|    uint32_t claimant_len;
  647|    691|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|    691|    {                           \
  |  |   16|    691|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 682]
  |  |  ------------------
  |  |   17|    691|    }
  ------------------
  648|    682|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    682|    {                           \
  |  |   16|    682|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 677]
  |  |  ------------------
  |  |   17|    682|    }
  ------------------
  649|    677|    PARSER_CHECK(parse_uint32(buffer, &claimant_len))
  ------------------
  |  |   15|    677|    {                           \
  |  |   16|    677|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 674]
  |  |  ------------------
  |  |   17|    677|    }
  ------------------
  650|    674|    if (claimant_len > CLAIMANTS_MAX_LENGTH) {
  ------------------
  |  |   34|    674|#define CLAIMANTS_MAX_LENGTH          10
  ------------------
  |  Branch (650:9): [True: 4, False: 670]
  ------------------
  651|      4|        return false;
  652|      4|    }
  653|    670|    op->claimant_len = claimant_len;
  654|  2.28k|    for (int i = 0; i < op->claimant_len; i++) {
  ------------------
  |  Branch (654:21): [True: 1.74k, False: 535]
  ------------------
  655|  1.74k|        PARSER_CHECK(parse_claimant(buffer, &op->claimants[i]))
  ------------------
  |  |   15|  1.74k|    {                           \
  |  |   16|  1.74k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 135, False: 1.61k]
  |  |  ------------------
  |  |   17|  1.74k|    }
  ------------------
  656|  1.74k|    }
  657|    535|    return true;
  658|    670|}
parser.c:parse_claimant:
  633|  1.74k|static bool parse_claimant(buffer_t *buffer, claimant_t *claimant) {
  634|  1.74k|    PARSER_CHECK(parse_uint32(buffer, &claimant->type))
  ------------------
  |  |   15|  1.74k|    {                           \
  |  |   16|  1.74k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 1.73k]
  |  |  ------------------
  |  |   17|  1.74k|    }
  ------------------
  635|  1.73k|    switch (claimant->type) {
  636|  1.69k|        case CLAIMANT_TYPE_V0:
  ------------------
  |  Branch (636:9): [True: 1.69k, False: 36]
  ------------------
  637|  1.69k|            PARSER_CHECK(parse_account_id(buffer, &claimant->v0.destination))
  ------------------
  |  |   15|  1.69k|    {                           \
  |  |   16|  1.69k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 19, False: 1.67k]
  |  |  ------------------
  |  |   17|  1.69k|    }
  ------------------
  638|  1.67k|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|  1.67k|    {                           \
  |  |   16|  1.67k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 65, False: 1.61k]
  |  |  ------------------
  |  |   17|  1.67k|    }
  ------------------
  639|  1.61k|            return true;
  640|     36|        default:
  ------------------
  |  Branch (640:9): [True: 36, False: 1.69k]
  ------------------
  641|     36|            return false;
  642|  1.73k|    }
  643|  1.73k|}
parser.c:parse_claimant_predicate:
  594|  1.76k|static bool parse_claimant_predicate(buffer_t *buffer) {
  595|       |    // Currently, does not support displaying claimant details.
  596|       |    // So here we will not store the parsed data, just to ensure that the data can be parsed
  597|       |    // correctly.
  598|  1.76k|    uint32_t claim_predicate_type;
  599|  1.76k|    uint32_t predicates_len;
  600|  1.76k|    bool not_predicate_present;
  601|  1.76k|    int64_t abs_before;
  602|  1.76k|    int64_t rel_before;
  603|  1.76k|    PARSER_CHECK(parse_uint32(buffer, &claim_predicate_type))
  ------------------
  |  |   15|  1.76k|    {                           \
  |  |   16|  1.76k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 1.75k]
  |  |  ------------------
  |  |   17|  1.76k|    }
  ------------------
  604|  1.75k|    switch (claim_predicate_type) {
  605|  1.46k|        case CLAIM_PREDICATE_UNCONDITIONAL:
  ------------------
  |  Branch (605:9): [True: 1.46k, False: 291]
  ------------------
  606|  1.46k|            return true;
  607|     24|        case CLAIM_PREDICATE_AND:
  ------------------
  |  Branch (607:9): [True: 24, False: 1.72k]
  ------------------
  608|     36|        case CLAIM_PREDICATE_OR:
  ------------------
  |  Branch (608:9): [True: 12, False: 1.74k]
  ------------------
  609|     36|            PARSER_CHECK(parse_uint32(buffer, &predicates_len))
  ------------------
  |  |   15|     36|    {                           \
  |  |   16|     36|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 31]
  |  |  ------------------
  |  |   17|     36|    }
  ------------------
  610|     31|            if (predicates_len != 2) {
  ------------------
  |  Branch (610:17): [True: 17, False: 14]
  ------------------
  611|     17|                return false;
  612|     17|            }
  613|     14|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|     14|    {                           \
  |  |   16|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 9]
  |  |  ------------------
  |  |   17|     14|    }
  ------------------
  614|      9|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|      9|    {                           \
  |  |   16|      9|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 5]
  |  |  ------------------
  |  |   17|      9|    }
  ------------------
  615|      5|            return true;
  616|    134|        case CLAIM_PREDICATE_NOT:
  ------------------
  |  Branch (616:9): [True: 134, False: 1.61k]
  ------------------
  617|    134|            PARSER_CHECK(parse_bool(buffer, &not_predicate_present))
  ------------------
  |  |   15|    134|    {                           \
  |  |   16|    134|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 130]
  |  |  ------------------
  |  |   17|    134|    }
  ------------------
  618|    130|            if (not_predicate_present) {
  ------------------
  |  Branch (618:17): [True: 62, False: 68]
  ------------------
  619|     62|                PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|     62|    {                           \
  |  |   16|     62|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 52]
  |  |  ------------------
  |  |   17|     62|    }
  ------------------
  620|     62|            }
  621|    120|            return true;
  622|     51|        case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:
  ------------------
  |  Branch (622:9): [True: 51, False: 1.70k]
  ------------------
  623|     51|            PARSER_CHECK(parse_int64(buffer, &abs_before))
  ------------------
  |  |   15|     51|    {                           \
  |  |   16|     51|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 46]
  |  |  ------------------
  |  |   17|     51|    }
  ------------------
  624|     46|            return true;
  625|     51|        case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:
  ------------------
  |  Branch (625:9): [True: 51, False: 1.70k]
  ------------------
  626|     51|            PARSER_CHECK(parse_int64(buffer, &rel_before))
  ------------------
  |  |   15|     51|    {                           \
  |  |   16|     51|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 46]
  |  |  ------------------
  |  |   17|     51|    }
  ------------------
  627|     46|            return true;
  628|     19|        default:
  ------------------
  |  Branch (628:9): [True: 19, False: 1.73k]
  ------------------
  629|     19|            return false;
  630|  1.75k|    }
  631|  1.75k|}
parser.c:parse_claim_claimable_balance:
  673|    943|static bool parse_claim_claimable_balance(buffer_t *buffer, claim_claimable_balance_op_t *op) {
  674|    943|    PARSER_CHECK(parse_claimable_balance_id(buffer, &op->balance_id))
  ------------------
  |  |   15|    943|    {                           \
  |  |   16|    943|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 933]
  |  |  ------------------
  |  |   17|    943|    }
  ------------------
  675|    933|    return true;
  676|    943|}
parser.c:parse_claimable_balance_id:
  661|  1.94k|                                       claimable_balance_id_t *claimable_balance_id_t) {
  662|  1.94k|    PARSER_CHECK(parse_uint32(buffer, &claimable_balance_id_t->type))
  ------------------
  |  |   15|  1.94k|    {                           \
  |  |   16|  1.94k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.93k]
  |  |  ------------------
  |  |   17|  1.94k|    }
  ------------------
  663|  1.93k|    switch (claimable_balance_id_t->type) {
  664|  1.92k|        case CLAIMABLE_BALANCE_ID_TYPE_V0:
  ------------------
  |  Branch (664:9): [True: 1.92k, False: 10]
  ------------------
  665|  1.92k|            PARSER_CHECK(
  ------------------
  |  |   15|  1.92k|    {                           \
  |  |   16|  1.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 1.91k]
  |  |  ------------------
  |  |   17|  1.92k|    }
  ------------------
  666|  1.92k|                buffer_read_bytes(buffer, &claimable_balance_id_t->v0, CLAIMABLE_BALANCE_ID_SIZE))
  667|  1.91k|            return true;
  668|     10|        default:
  ------------------
  |  Branch (668:9): [True: 10, False: 1.92k]
  ------------------
  669|     10|            return false;
  670|  1.93k|    }
  671|  1.93k|}
parser.c:parse_begin_sponsoring_future_reserves:
  679|  1.88k|                                                   begin_sponsoring_future_reserves_op_t *op) {
  680|  1.88k|    PARSER_CHECK(parse_account_id(buffer, &op->sponsored_id))
  ------------------
  |  |   15|  1.88k|    {                           \
  |  |   16|  1.88k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.87k]
  |  |  ------------------
  |  |   17|  1.88k|    }
  ------------------
  681|  1.87k|    return true;
  682|  1.88k|}
parser.c:parse_revoke_sponsorship:
  849|  5.53k|static bool parse_revoke_sponsorship(buffer_t *buffer, revoke_sponsorship_op_t *op) {
  850|  5.53k|    PARSER_CHECK(parse_uint32(buffer, &op->type))
  ------------------
  |  |   15|  5.53k|    {                           \
  |  |   16|  5.53k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 5.52k]
  |  |  ------------------
  |  |   17|  5.53k|    }
  ------------------
  851|  5.52k|    switch (op->type) {
  852|  2.24k|        case REVOKE_SPONSORSHIP_LEDGER_ENTRY:
  ------------------
  |  Branch (852:9): [True: 2.24k, False: 3.28k]
  ------------------
  853|  2.24k|            PARSER_CHECK(parse_ledger_key(buffer, &op->ledger_key))
  ------------------
  |  |   15|  2.24k|    {                           \
  |  |   16|  2.24k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 88, False: 2.15k]
  |  |  ------------------
  |  |   17|  2.24k|    }
  ------------------
  854|  2.15k|            return true;
  855|  3.27k|        case REVOKE_SPONSORSHIP_SIGNER:
  ------------------
  |  Branch (855:9): [True: 3.27k, False: 2.25k]
  ------------------
  856|  3.27k|            PARSER_CHECK(parse_account_id(buffer, &op->signer.account_id))
  ------------------
  |  |   15|  3.27k|    {                           \
  |  |   16|  3.27k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 3.27k]
  |  |  ------------------
  |  |   17|  3.27k|    }
  ------------------
  857|  3.27k|            PARSER_CHECK(parse_signer_key(buffer, &op->signer.signer_key))
  ------------------
  |  |   15|  3.27k|    {                           \
  |  |   16|  3.27k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 3.26k]
  |  |  ------------------
  |  |   17|  3.27k|    }
  ------------------
  858|  3.26k|            return true;
  859|      4|        default:
  ------------------
  |  Branch (859:9): [True: 4, False: 5.52k]
  ------------------
  860|      4|            return false;
  861|  5.52k|    }
  862|  5.52k|}
parser.c:parse_ledger_key:
  813|  2.24k|static bool parse_ledger_key(buffer_t *buffer, ledger_key_t *ledger_key) {
  814|  2.24k|    PARSER_CHECK(parse_uint32(buffer, &ledger_key->type))
  ------------------
  |  |   15|  2.24k|    {                           \
  |  |   16|  2.24k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 2.24k]
  |  |  ------------------
  |  |   17|  2.24k|    }
  ------------------
  815|  2.24k|    switch (ledger_key->type) {
  816|    262|        case ACCOUNT:
  ------------------
  |  Branch (816:9): [True: 262, False: 1.98k]
  ------------------
  817|    262|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->account.account_id))
  ------------------
  |  |   15|    262|    {                           \
  |  |   16|    262|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 250]
  |  |  ------------------
  |  |   17|    262|    }
  ------------------
  818|    250|            return true;
  819|  1.12k|        case TRUSTLINE:
  ------------------
  |  Branch (819:9): [True: 1.12k, False: 1.11k]
  ------------------
  820|  1.12k|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->trust_line.account_id))
  ------------------
  |  |   15|  1.12k|    {                           \
  |  |   16|  1.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.12k]
  |  |  ------------------
  |  |   17|  1.12k|    }
  ------------------
  821|  1.12k|            PARSER_CHECK(parse_trust_line_asset(buffer, &ledger_key->trust_line.asset))
  ------------------
  |  |   15|  1.12k|    {                           \
  |  |   16|  1.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 35, False: 1.08k]
  |  |  ------------------
  |  |   17|  1.12k|    }
  ------------------
  822|  1.08k|            return true;
  823|    162|        case OFFER:
  ------------------
  |  Branch (823:9): [True: 162, False: 2.08k]
  ------------------
  824|    162|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->offer.seller_id))
  ------------------
  |  |   15|    162|    {                           \
  |  |   16|    162|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 154]
  |  |  ------------------
  |  |   17|    162|    }
  ------------------
  825|    154|            PARSER_CHECK(parse_int64(buffer, &ledger_key->offer.offer_id))
  ------------------
  |  |   15|    154|    {                           \
  |  |   16|    154|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 151]
  |  |  ------------------
  |  |   17|    154|    }
  ------------------
  826|    151|            return true;
  827|    102|        case DATA:
  ------------------
  |  Branch (827:9): [True: 102, False: 2.14k]
  ------------------
  828|    102|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->data.account_id))
  ------------------
  |  |   15|    102|    {                           \
  |  |   16|    102|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 94]
  |  |  ------------------
  |  |   17|    102|    }
  ------------------
  829|     94|            PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|     94|    {                           \
  |  |   16|     94|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 90]
  |  |  ------------------
  |  |   17|     94|    }
  ------------------
  830|     94|                                                 &ledger_key->data.data_name,
  831|     94|                                                 &ledger_key->data.data_name_size,
  832|     94|                                                 DATA_NAME_MAX_SIZE))
  833|     90|            return true;
  834|    408|        case CLAIMABLE_BALANCE:
  ------------------
  |  Branch (834:9): [True: 408, False: 1.83k]
  ------------------
  835|    408|            PARSER_CHECK(
  ------------------
  |  |   15|    408|    {                           \
  |  |   16|    408|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 405]
  |  |  ------------------
  |  |   17|    408|    }
  ------------------
  836|    408|                parse_claimable_balance_id(buffer, &ledger_key->claimable_balance.balance_id))
  837|    405|            return true;
  838|    177|        case LIQUIDITY_POOL:
  ------------------
  |  Branch (838:9): [True: 177, False: 2.06k]
  ------------------
  839|    177|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|    177|    {                           \
  |  |   16|    177|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 174]
  |  |  ------------------
  |  |   17|    177|    }
  ------------------
  840|    177|                                           &ledger_key->liquidity_pool.liquidity_pool_id,
  841|    177|                                           LIQUIDITY_POOL_ID_SIZE))
  842|       |
  843|    174|            return true;
  844|      6|        default:
  ------------------
  |  Branch (844:9): [True: 6, False: 2.23k]
  ------------------
  845|      6|            return false;
  846|  2.24k|    }
  847|  2.24k|}
parser.c:parse_trust_line_asset:
  342|  1.12k|static bool parse_trust_line_asset(buffer_t *buffer, trust_line_asset_t *asset) {
  343|  1.12k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  1.12k|    {                           \
  |  |   16|  1.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.12k]
  |  |  ------------------
  |  |   17|  1.12k|    }
  ------------------
  344|  1.12k|    switch (asset->type) {
  345|    603|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (345:9): [True: 603, False: 517]
  ------------------
  346|    603|            return true;
  347|      0|        }
  348|     63|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (348:9): [True: 63, False: 1.05k]
  ------------------
  349|     63|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  350|      0|        }
  351|    111|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (351:9): [True: 111, False: 1.00k]
  ------------------
  352|    111|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  353|      0|        }
  354|    332|        case ASSET_TYPE_POOL_SHARE: {
  ------------------
  |  Branch (354:9): [True: 332, False: 788]
  ------------------
  355|    332|            PARSER_CHECK(
  ------------------
  |  |   15|    332|    {                           \
  |  |   16|    332|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 329]
  |  |  ------------------
  |  |   17|    332|    }
  ------------------
  356|    332|                buffer_read_bytes(buffer, &asset->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  357|    329|            return true;
  358|    332|        }
  359|     11|        default:
  ------------------
  |  Branch (359:9): [True: 11, False: 1.10k]
  ------------------
  360|     11|            return false;  // unknown asset type
  361|  1.12k|    }
  362|  1.12k|}
parser.c:parse_clawback:
  864|    372|static bool parse_clawback(buffer_t *buffer, clawback_op_t *op) {
  865|    372|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|    372|    {                           \
  |  |   16|    372|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 361]
  |  |  ------------------
  |  |   17|    372|    }
  ------------------
  866|    361|    PARSER_CHECK(parse_muxed_account(buffer, &op->from))
  ------------------
  |  |   15|    361|    {                           \
  |  |   16|    361|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 358]
  |  |  ------------------
  |  |   17|    361|    }
  ------------------
  867|    358|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    358|    {                           \
  |  |   16|    358|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 355]
  |  |  ------------------
  |  |   17|    358|    }
  ------------------
  868|    355|    return true;
  869|    358|}
parser.c:parse_clawback_claimable_balance:
  872|    592|                                             clawback_claimable_balance_op_t *op) {
  873|    592|    PARSER_CHECK(parse_claimable_balance_id(buffer, &op->balance_id))
  ------------------
  |  |   15|    592|    {                           \
  |  |   16|    592|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 581]
  |  |  ------------------
  |  |   17|    592|    }
  ------------------
  874|    581|    return true;
  875|    592|}
parser.c:parse_set_trust_line_flags:
  877|  5.40k|static bool parse_set_trust_line_flags(buffer_t *buffer, set_trust_line_flags_op_t *op) {
  878|  5.40k|    PARSER_CHECK(parse_account_id(buffer, &op->trustor))
  ------------------
  |  |   15|  5.40k|    {                           \
  |  |   16|  5.40k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 5.39k]
  |  |  ------------------
  |  |   17|  5.40k|    }
  ------------------
  879|  5.39k|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|  5.39k|    {                           \
  |  |   16|  5.39k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 5.38k]
  |  |  ------------------
  |  |   17|  5.39k|    }
  ------------------
  880|  5.38k|    PARSER_CHECK(parse_uint32(buffer, &op->clear_flags))
  ------------------
  |  |   15|  5.38k|    {                           \
  |  |   16|  5.38k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 5.38k]
  |  |  ------------------
  |  |   17|  5.38k|    }
  ------------------
  881|  5.38k|    PARSER_CHECK(parse_uint32(buffer, &op->set_flags))
  ------------------
  |  |   15|  5.38k|    {                           \
  |  |   16|  5.38k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 5.37k]
  |  |  ------------------
  |  |   17|  5.38k|    }
  ------------------
  882|  5.37k|    return true;
  883|  5.38k|}
parser.c:parse_liquidity_pool_deposit:
  885|    119|static bool parse_liquidity_pool_deposit(buffer_t *buffer, liquidity_pool_deposit_op_t *op) {
  886|    119|    PARSER_CHECK(buffer_read_bytes(buffer, &op->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  ------------------
  |  |   15|    119|    {                           \
  |  |   16|    119|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 110]
  |  |  ------------------
  |  |   17|    119|    }
  ------------------
  887|    110|    PARSER_CHECK(parse_int64(buffer, &op->max_amount_a))
  ------------------
  |  |   15|    110|    {                           \
  |  |   16|    110|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 107]
  |  |  ------------------
  |  |   17|    110|    }
  ------------------
  888|    107|    PARSER_CHECK(parse_int64(buffer, &op->max_amount_b))
  ------------------
  |  |   15|    107|    {                           \
  |  |   16|    107|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 105]
  |  |  ------------------
  |  |   17|    107|    }
  ------------------
  889|    105|    PARSER_CHECK(parse_price(buffer, &op->min_price))
  ------------------
  |  |   15|    105|    {                           \
  |  |   16|    105|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 102]
  |  |  ------------------
  |  |   17|    105|    }
  ------------------
  890|    102|    PARSER_CHECK(parse_price(buffer, &op->max_price))
  ------------------
  |  |   15|    102|    {                           \
  |  |   16|    102|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 95]
  |  |  ------------------
  |  |   17|    102|    }
  ------------------
  891|     95|    return true;
  892|    102|}
parser.c:parse_liquidity_pool_withdraw:
  894|    947|static bool parse_liquidity_pool_withdraw(buffer_t *buffer, liquidity_pool_withdraw_op_t *op) {
  895|    947|    PARSER_CHECK(buffer_read_bytes(buffer, &op->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  ------------------
  |  |   15|    947|    {                           \
  |  |   16|    947|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 938]
  |  |  ------------------
  |  |   17|    947|    }
  ------------------
  896|    938|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    938|    {                           \
  |  |   16|    938|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 935]
  |  |  ------------------
  |  |   17|    938|    }
  ------------------
  897|    935|    PARSER_CHECK(parse_int64(buffer, &op->min_amount_a))
  ------------------
  |  |   15|    935|    {                           \
  |  |   16|    935|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 933]
  |  |  ------------------
  |  |   17|    935|    }
  ------------------
  898|    933|    PARSER_CHECK(parse_int64(buffer, &op->min_amount_b))
  ------------------
  |  |   15|    933|    {                           \
  |  |   16|    933|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 930]
  |  |  ------------------
  |  |   17|    933|    }
  ------------------
  899|    930|    return true;
  900|    933|}
parser.c:parse_invoke_host_function:
 1035|    746|static bool parse_invoke_host_function(buffer_t *buffer, invoke_host_function_op_t *op) {
 1036|       |    // hostFunction
 1037|    746|    PARSER_CHECK(parse_uint32(buffer, &op->host_function_type));
  ------------------
  |  |   15|    746|    {                           \
  |  |   16|    746|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 741]
  |  |  ------------------
  |  |   17|    746|    }
  ------------------
 1038|    741|    PRINTF("host_function_type=%d\n", op->host_function_type);
 1039|    741|    switch (op->host_function_type) {
 1040|    607|        case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:
  ------------------
  |  Branch (1040:9): [True: 607, False: 134]
  ------------------
 1041|    607|            PARSER_CHECK(parse_invoke_contract_args(buffer, &op->invoke_contract_args))
  ------------------
  |  |   15|    607|    {                           \
  |  |   16|    607|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 48, False: 559]
  |  |  ------------------
  |  |   17|    607|    }
  ------------------
 1042|    559|            break;
 1043|    559|        case HOST_FUNCTION_TYPE_CREATE_CONTRACT:
  ------------------
  |  Branch (1043:9): [True: 68, False: 673]
  ------------------
 1044|     68|            PARSER_CHECK(read_create_contract_args_advance(buffer))
  ------------------
  |  |   15|     68|    {                           \
  |  |   16|     68|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 53, False: 15]
  |  |  ------------------
  |  |   17|     68|    }
  ------------------
 1045|     15|            break;
 1046|     62|        case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM: {
  ------------------
  |  Branch (1046:9): [True: 62, False: 679]
  ------------------
 1047|     62|            size_t data_size = 0;
 1048|     62|            PARSER_CHECK(parse_uint32(buffer, &data_size))
  ------------------
  |  |   15|     62|    {                           \
  |  |   16|     62|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 58]
  |  |  ------------------
  |  |   17|     62|    }
  ------------------
 1049|     58|            PARSER_CHECK(num_bytes(data_size, &data_size))
  ------------------
  |  |   15|     58|    {                           \
  |  |   16|     58|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 58]
  |  |  ------------------
  |  |   17|     58|    }
  ------------------
 1050|     58|            PARSER_CHECK(buffer_advance(buffer, data_size))
  ------------------
  |  |   15|     58|    {                           \
  |  |   16|     58|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 55]
  |  |  ------------------
  |  |   17|     58|    }
  ------------------
 1051|     55|            break;
 1052|     58|        }
 1053|     55|        default:
  ------------------
  |  Branch (1053:9): [True: 4, False: 737]
  ------------------
 1054|      4|            return false;
 1055|    741|    }
 1056|       |
 1057|       |    // auth<>
 1058|    629|    uint32_t auth_len;
 1059|    629|    uint8_t sub_invocations_count = 0;
 1060|    629|    PARSER_CHECK(parse_uint32(buffer, &auth_len))
  ------------------
  |  |   15|    629|    {                           \
  |  |   16|    629|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 620]
  |  |  ------------------
  |  |   17|    629|    }
  ------------------
 1061|  1.09k|    for (uint32_t i = 0; i < auth_len; i++) {
  ------------------
  |  Branch (1061:26): [True: 670, False: 420]
  ------------------
 1062|       |        // PARSER_CHECK(read_soroban_authorization_entry_advance(buffer,
 1063|       |        //                                                       &sub_invocations_count,
 1064|       |        //                                                       op->sub_invocation_positions))
 1065|       |        // PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, count, positions))
 1066|       |        // 1. read credentials
 1067|    670|        uint32_t credentials_type;
 1068|    670|        PARSER_CHECK(read_parse_soroban_credentials_advance(buffer, &credentials_type))
  ------------------
  |  |   15|    670|    {                           \
  |  |   16|    670|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 54, False: 616]
  |  |  ------------------
  |  |   17|    670|    }
  ------------------
 1069|       |        // 2. read rootInvocation.function
 1070|    616|        PARSER_CHECK(read_soroban_authorized_function_advance(buffer))
  ------------------
  |  |   15|    616|    {                           \
  |  |   16|    616|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 65, False: 551]
  |  |  ------------------
  |  |   17|    616|    }
  ------------------
 1071|       |        // 3. read rootInvocation.subInvocations
 1072|       |        // subInvocations
 1073|    551|        uint32_t len;
 1074|    551|        PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|    551|    {                           \
  |  |   16|    551|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 548]
  |  |  ------------------
  |  |   17|    551|    }
  ------------------
 1075|    832|        for (uint32_t j = 0; j < len; j++) {
  ------------------
  |  Branch (1075:30): [True: 362, False: 470]
  ------------------
 1076|    362|            if (credentials_type == SOROBAN_CREDENTIALS_SOURCE_ACCOUNT) {
  ------------------
  |  Branch (1076:17): [True: 137, False: 225]
  ------------------
 1077|    137|                PARSER_CHECK(
  ------------------
  |  |   15|    137|    {                           \
  |  |   16|    137|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 35, False: 102]
  |  |  ------------------
  |  |   17|    137|    }
  ------------------
 1078|    137|                    read_soroban_authorized_invocation_advance(buffer,
 1079|    137|                                                               &sub_invocations_count,
 1080|    137|                                                               op->sub_invocation_positions))
 1081|    225|            } else {
 1082|    225|                PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, NULL, NULL))
  ------------------
  |  |   15|    225|    {                           \
  |  |   16|    225|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 43, False: 182]
  |  |  ------------------
  |  |   17|    225|    }
  ------------------
 1083|    225|            }
 1084|    362|        }
 1085|    548|    }
 1086|    420|    op->sub_invocations_count = sub_invocations_count;
 1087|       |
 1088|    420|    PRINTF("sub_invocations_count=%d\n", sub_invocations_count);
 1089|       |    // for (uint8_t i = 0; i < 16; i++) {
 1090|       |    //     PRINTF("sub_invocation_positions[%d]=%d\n", i, op->sub_invocation_positions[i]);
 1091|       |    // }
 1092|    420|    return true;
 1093|    620|}
parser.c:read_parse_soroban_credentials_advance:
  917|    670|static bool read_parse_soroban_credentials_advance(buffer_t *buffer, uint32_t *credentials_type) {
  918|    670|    PARSER_CHECK(parse_uint32(buffer, credentials_type))
  ------------------
  |  |   15|    670|    {                           \
  |  |   16|    670|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 663]
  |  |  ------------------
  |  |   17|    670|    }
  ------------------
  919|    663|    switch (*credentials_type) {
  920|    541|        case SOROBAN_CREDENTIALS_SOURCE_ACCOUNT:
  ------------------
  |  Branch (920:9): [True: 541, False: 122]
  ------------------
  921|       |            // void
  922|    541|            break;
  923|    100|        case SOROBAN_CREDENTIALS_ADDRESS: {
  ------------------
  |  Branch (923:9): [True: 100, False: 563]
  ------------------
  924|    100|            sc_address_t address;
  925|    100|            PARSER_CHECK(parse_sc_address(buffer, &address))
  ------------------
  |  |   15|    100|    {                           \
  |  |   16|    100|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 91]
  |  |  ------------------
  |  |   17|    100|    }
  ------------------
  926|       |            PARSER_CHECK(buffer_advance(buffer, 8))   // nonce
  ------------------
  |  |   15|     91|    {                           \
  |  |   16|     91|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 86]
  |  |  ------------------
  |  |   17|     91|    }
  ------------------
  927|       |            PARSER_CHECK(buffer_advance(buffer, 4))   // signatureExpirationLedger
  ------------------
  |  |   15|     86|    {                           \
  |  |   16|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 82]
  |  |  ------------------
  |  |   17|     86|    }
  ------------------
  928|       |            PARSER_CHECK(read_scval_advance(buffer))  // signature
  ------------------
  |  |   15|     82|    {                           \
  |  |   16|     82|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 75]
  |  |  ------------------
  |  |   17|     82|    }
  ------------------
  929|     75|            break;
  930|     82|        }
  931|     75|        default:
  ------------------
  |  Branch (931:9): [True: 22, False: 641]
  ------------------
  932|     22|            return false;
  933|    663|    }
  934|    616|    return true;
  935|    663|}
parser.c:read_soroban_authorized_function_advance:
  994|  5.01k|static bool read_soroban_authorized_function_advance(buffer_t *buffer) {
  995|  5.01k|    uint32_t type;
  996|  5.01k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  5.01k|    {                           \
  |  |   16|  5.01k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 75, False: 4.94k]
  |  |  ------------------
  |  |   17|  5.01k|    }
  ------------------
  997|  4.94k|    switch (type) {
  998|  4.28k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN: {
  ------------------
  |  Branch (998:9): [True: 4.28k, False: 660]
  ------------------
  999|       |            // contractFn
 1000|  4.28k|            invoke_contract_args_t args;
 1001|  4.28k|            PARSER_CHECK(parse_invoke_contract_args(buffer, &args));
  ------------------
  |  |   15|  4.28k|    {                           \
  |  |   16|  4.28k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 396, False: 3.88k]
  |  |  ------------------
  |  |   17|  4.28k|    }
  ------------------
 1002|  3.88k|            break;
 1003|  4.28k|        }
 1004|    474|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1004:9): [True: 474, False: 4.47k]
  ------------------
 1005|       |            // createContractHostFn
 1006|    474|            PARSER_CHECK(read_create_contract_args_advance(buffer));
  ------------------
  |  |   15|    474|    {                           \
  |  |   16|    474|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 76, False: 398]
  |  |  ------------------
  |  |   17|    474|    }
  ------------------
 1007|    398|            break;
 1008|    186|        default:
  ------------------
  |  Branch (1008:9): [True: 186, False: 4.75k]
  ------------------
 1009|    186|            return false;
 1010|  4.94k|    }
 1011|  4.28k|    return true;
 1012|  4.94k|}
parser.c:parse_extend_footprint_ttl:
 1095|    619|static bool parse_extend_footprint_ttl(buffer_t *buffer, extend_footprint_ttl_op_t *op) {
 1096|    619|    PARSER_CHECK(parse_extension_point_v0(buffer))
  ------------------
  |  |   15|    619|    {                           \
  |  |   16|    619|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 614]
  |  |  ------------------
  |  |   17|    619|    }
  ------------------
 1097|    614|    PARSER_CHECK(parse_uint32(buffer, &op->extend_to))
  ------------------
  |  |   15|    614|    {                           \
  |  |   16|    614|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 610]
  |  |  ------------------
  |  |   17|    614|    }
  ------------------
 1098|    610|    return true;
 1099|    614|}
parser.c:parse_extension_point_v0:
  902|  1.18k|static bool parse_extension_point_v0(buffer_t *buffer) {
  903|  1.18k|    uint32_t v;
  904|  1.18k|    PARSER_CHECK(parse_uint32(buffer, &v))
  ------------------
  |  |   15|  1.18k|    {                           \
  |  |   16|  1.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.17k]
  |  |  ------------------
  |  |   17|  1.18k|    }
  ------------------
  905|  1.17k|    if (v != 0) {
  ------------------
  |  Branch (905:9): [True: 11, False: 1.16k]
  ------------------
  906|     11|        return false;
  907|     11|    }
  908|  1.16k|    return true;
  909|  1.17k|}
parser.c:parse_restore_footprint:
  911|    561|static bool parse_restore_footprint(buffer_t *buffer, restore_footprint_op_t *op) {
  912|    561|    (void) op;
  913|    561|    PARSER_CHECK(parse_extension_point_v0(buffer))
  ------------------
  |  |   15|    561|    {                           \
  |  |   16|    561|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 551]
  |  |  ------------------
  |  |   17|    561|    }
  ------------------
  914|    551|    return true;
  915|    561|}
parser.c:parse_invoke_contract_args:
  962|  13.8k|static bool parse_invoke_contract_args(buffer_t *buffer, invoke_contract_args_t *args) {
  963|       |    // contractAddress
  964|  13.8k|    PARSER_CHECK(parse_sc_address(buffer, &args->address))
  ------------------
  |  |   15|  13.8k|    {                           \
  |  |   16|  13.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 957, False: 12.9k]
  |  |  ------------------
  |  |   17|  13.8k|    }
  ------------------
  965|       |    // functionName
  966|  12.9k|    PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  12.9k|    {                           \
  |  |   16|  12.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.03k, False: 11.8k]
  |  |  ------------------
  |  |   17|  12.9k|    }
  ------------------
  967|  12.9k|                                         &args->function.name,
  968|  12.9k|                                         &args->function.name_size,
  969|  12.9k|                                         SCV_SYMBOL_MAX_SIZE))
  970|       |
  971|       |    // args
  972|  11.8k|    uint32_t args_len;
  973|  11.8k|    PARSER_CHECK(parse_uint32(buffer, &args_len))
  ------------------
  |  |   15|  11.8k|    {                           \
  |  |   16|  11.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 19, False: 11.8k]
  |  |  ------------------
  |  |   17|  11.8k|    }
  ------------------
  974|       |
  975|  11.8k|    args->parameters_length = args_len;
  976|  11.8k|    args->parameters_position = buffer->offset;
  977|       |
  978|  11.8k|    if (args_len > HOST_FUNCTION_ARGS_MAX_LENGTH) {
  ------------------
  |  |   36|  11.8k|#define HOST_FUNCTION_ARGS_MAX_LENGTH 10
  ------------------
  |  Branch (978:9): [True: 343, False: 11.5k]
  ------------------
  979|       |        // We dont support more than 10 arguments
  980|    343|        return false;
  981|    343|    }
  982|       |
  983|       |    // PRINTF("function_name.text_size=%d, function_name.text=%s, args->parameters_length=%d\n",
  984|       |    //        args->function.name_size,
  985|       |    //        args->function.name,
  986|       |    //        args->parameters_length);
  987|       |
  988|  38.5k|    for (uint32_t i = 0; i < args_len; i++) {
  ------------------
  |  Branch (988:26): [True: 27.3k, False: 11.1k]
  ------------------
  989|  27.3k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  27.3k|    {                           \
  |  |   16|  27.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 349, False: 26.9k]
  |  |  ------------------
  |  |   17|  27.3k|    }
  ------------------
  990|  27.3k|    }
  991|  11.1k|    return true;
  992|  11.5k|}
parser.c:read_create_contract_args_advance:
  937|    761|static bool read_create_contract_args_advance(buffer_t *buffer) {
  938|       |    // contract_id_preimage
  939|    761|    uint32_t type;
  940|    761|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|    761|    {                           \
  |  |   16|    761|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 749]
  |  |  ------------------
  |  |   17|    761|    }
  ------------------
  941|    749|    switch (type) {
  942|    579|        case CONTRACT_ID_PREIMAGE_FROM_ADDRESS: {
  ------------------
  |  |  489|    579|#define CONTRACT_ID_PREIMAGE_FROM_ADDRESS 0
  ------------------
  |  Branch (942:9): [True: 579, False: 170]
  ------------------
  943|    579|            sc_address_t address;
  944|    579|            PARSER_CHECK(parse_sc_address(buffer, &address))
  ------------------
  |  |   15|    579|    {                           \
  |  |   16|    579|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 17, False: 562]
  |  |  ------------------
  |  |   17|    579|    }
  ------------------
  945|       |            PARSER_CHECK(buffer_advance(buffer, 32))  // salt
  ------------------
  |  |   15|    562|    {                           \
  |  |   16|    562|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 549]
  |  |  ------------------
  |  |   17|    562|    }
  ------------------
  946|    549|            break;
  947|    562|        }
  948|    549|        case CONTRACT_ID_PREIMAGE_FROM_ASSET: {
  ------------------
  |  |  490|    145|#define CONTRACT_ID_PREIMAGE_FROM_ASSET   1
  ------------------
  |  Branch (948:9): [True: 145, False: 604]
  ------------------
  949|    145|            asset_t asset;
  950|    145|            PARSER_CHECK(parse_asset(buffer, &asset))
  ------------------
  |  |   15|    145|    {                           \
  |  |   16|    145|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 57, False: 88]
  |  |  ------------------
  |  |   17|    145|    }
  ------------------
  951|     88|            break;
  952|    145|        }
  953|     88|        default:
  ------------------
  |  Branch (953:9): [True: 25, False: 724]
  ------------------
  954|     25|            return false;
  955|    749|    }
  956|       |
  957|       |    // executable
  958|    637|    PARSER_CHECK(read_contract_executable_advance(buffer))
  ------------------
  |  |   15|    637|    {                           \
  |  |   16|    637|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 43, False: 594]
  |  |  ------------------
  |  |   17|    637|    }
  ------------------
  959|    594|    return true;
  960|    637|}
parser.c:read_soroban_authorized_invocation_advance:
 1016|  4.41k|                                                       size_t *positions) {
 1017|  4.41k|    if (count != NULL && positions != NULL) {
  ------------------
  |  Branch (1017:9): [True: 4.14k, False: 273]
  |  Branch (1017:26): [True: 4.14k, False: 0]
  ------------------
 1018|  4.14k|        if (*count >= MAX_SUB_INVOCATIONS_SIZE) {
  ------------------
  |  |   44|  4.14k|#define MAX_SUB_INVOCATIONS_SIZE 16
  ------------------
  |  Branch (1018:13): [True: 14, False: 4.13k]
  ------------------
 1019|     14|            return false;
 1020|     14|        }
 1021|  4.13k|        positions[(*count)++] = buffer->offset;
 1022|  4.13k|    }
 1023|       |    // function
 1024|  4.40k|    PARSER_CHECK(read_soroban_authorized_function_advance(buffer))
  ------------------
  |  |   15|  4.40k|    {                           \
  |  |   16|  4.40k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 668, False: 3.73k]
  |  |  ------------------
  |  |   17|  4.40k|    }
  ------------------
 1025|       |
 1026|       |    // subInvocations
 1027|  3.73k|    uint32_t len;
 1028|  3.73k|    PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  3.73k|    {                           \
  |  |   16|  3.73k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 3.72k]
  |  |  ------------------
  |  |   17|  3.73k|    }
  ------------------
 1029|  4.56k|    for (uint32_t i = 0; i < len; i++) {
  ------------------
  |  Branch (1029:26): [True: 1.37k, False: 3.19k]
  ------------------
 1030|  1.37k|        PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, count, positions))
  ------------------
  |  |   15|  1.37k|    {                           \
  |  |   16|  1.37k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 529, False: 842]
  |  |  ------------------
  |  |   17|  1.37k|    }
  ------------------
 1031|  1.37k|    }
 1032|  3.19k|    return true;
 1033|  3.72k|}

crc16:
   15|  23.1k|uint16_t crc16(const uint8_t *input_str, uint32_t num_bytes) {
   16|  23.1k|    uint16_t crc = 0;
   17|   793k|    while (num_bytes-- > 0) {
  ------------------
  |  Branch (17:12): [True: 770k, False: 23.1k]
  ------------------
   18|   770k|        crc = crc ^ (uint32_t) *input_str++ << 8;
   19|   770k|        int i = 8;
   20|  6.16M|        do {
   21|  6.16M|            if (crc & 0x8000)
  ------------------
  |  Branch (21:17): [True: 3.02M, False: 3.13M]
  ------------------
   22|  3.02M|                crc = crc << 1 ^ 0x1021;
   23|  3.13M|            else
   24|  3.13M|                crc = crc << 1;
   25|  6.16M|        } while (--i);
  ------------------
  |  Branch (25:18): [True: 5.39M, False: 770k]
  ------------------
   26|   770k|    }
   27|  23.1k|    return crc;
   28|  23.1k|}
encode_key:
   30|  22.7k|bool encode_key(const uint8_t *in, uint8_t version_byte, char *out, uint8_t out_len) {
   31|  22.7k|    if (in == NULL || out_len < 56 + 1) {
  ------------------
  |  Branch (31:9): [True: 0, False: 22.7k]
  |  Branch (31:23): [True: 0, False: 22.7k]
  ------------------
   32|      0|        return false;
   33|      0|    }
   34|  22.7k|    uint8_t buffer[35] = {0};
   35|  22.7k|    buffer[0] = version_byte;
   36|   751k|    for (uint8_t i = 0; i < 32; i++) {
  ------------------
  |  Branch (36:25): [True: 728k, False: 22.7k]
  ------------------
   37|   728k|        buffer[i + 1] = in[i];
   38|   728k|    }
   39|  22.7k|    uint16_t crc = crc16(buffer, 33);  // checksum
   40|  22.7k|    buffer[33] = crc;
   41|  22.7k|    buffer[34] = crc >> 8;
   42|  22.7k|    if (base32_encode(buffer, 35, (uint8_t *) out, 56) == -1) {
  ------------------
  |  Branch (42:9): [True: 0, False: 22.7k]
  ------------------
   43|      0|        return false;
   44|      0|    }
   45|  22.7k|    out[56] = '\0';
   46|  22.7k|    return true;
   47|  22.7k|}
encode_ed25519_public_key:
   51|  22.3k|                               size_t out_len) {
   52|  22.3k|    return encode_key(raw_public_key, VERSION_BYTE_ED25519_PUBLIC_KEY, out, out_len);
  ------------------
  |  |   25|  22.3k|#define VERSION_BYTE_ED25519_PUBLIC_KEY     6 << 3
  ------------------
   53|  22.3k|}
encode_hash_x_key:
   57|     66|                       size_t out_len) {
   58|     66|    return encode_key(raw_hash_x, VERSION_BYTE_HASH_X, out, out_len);
  ------------------
  |  |   28|     66|#define VERSION_BYTE_HASH_X                 23 << 3
  ------------------
   59|     66|}
encode_pre_auth_x_key:
   63|    154|                           size_t out_len) {
   64|    154|    return encode_key(raw_pre_auth_tx, VERSION_BYTE_PRE_AUTH_TX_KEY, out, out_len);
  ------------------
  |  |   27|    154|#define VERSION_BYTE_PRE_AUTH_TX_KEY        19 << 3
  ------------------
   65|    154|}
encode_contract:
   69|    167|                     size_t out_len) {
   70|    167|    return encode_key(raw_contract, VERSION_BYTE_CONTRACT, out, out_len);
  ------------------
  |  |   31|    167|#define VERSION_BYTE_CONTRACT               2 << 3
  ------------------
   71|    167|}
encode_ed25519_signed_payload:
   75|    138|                                   size_t out_len) {
   76|    138|    if (out_len < ED25519_SIGNED_PAYLOAD_MAX_LENGTH) {  // (103 * 8 + 4) / 5
  ------------------
  |  |   12|    138|#define ED25519_SIGNED_PAYLOAD_MAX_LENGTH 166  // include the null terminator
  ------------------
  |  Branch (76:9): [True: 0, False: 138]
  ------------------
   77|      0|        return false;
   78|      0|    }
   79|    138|    if (signed_payload->payload_len > 64 || signed_payload->payload_len <= 0) {
  ------------------
  |  Branch (79:9): [True: 0, False: 138]
  |  Branch (79:45): [True: 0, False: 138]
  ------------------
   80|      0|        return false;
   81|      0|    }
   82|    138|    uint8_t data_len = RAW_ED25519_PUBLIC_KEY_SIZE + 4 + signed_payload->payload_len +
  ------------------
  |  |   18|    138|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
   83|    138|                       ((4 - signed_payload->payload_len % 4) % 4);
   84|    138|    uint8_t buffer[1 + 32 + 4 + 64 + 2] = {0};
   85|    138|    buffer[0] = VERSION_BYTE_ED25519_SIGNED_PAYLOAD;
  ------------------
  |  |   30|    138|#define VERSION_BYTE_ED25519_SIGNED_PAYLOAD 15 << 3
  ------------------
   86|  4.55k|    for (uint8_t i = 0; i < 32; i++) {
  ------------------
  |  Branch (86:25): [True: 4.41k, False: 138]
  ------------------
   87|  4.41k|        buffer[i + 1] = signed_payload->ed25519[i];
   88|  4.41k|    }
   89|    138|    buffer[36] = signed_payload->payload_len;
   90|  3.77k|    for (uint32_t i = 0; i < signed_payload->payload_len; i++) {
  ------------------
  |  Branch (90:26): [True: 3.63k, False: 138]
  ------------------
   91|  3.63k|        buffer[i + 37] = signed_payload->payload[i];
   92|  3.63k|    }
   93|    138|    uint16_t crc = crc16(buffer, data_len + 1);  // checksum
   94|    138|    buffer[1 + data_len] = crc;
   95|    138|    buffer[1 + data_len + 1] = crc >> 8;
   96|    138|    int ret = base32_encode(buffer, data_len + 3, (uint8_t *) out, out_len);
   97|    138|    if (ret == -1) {
  ------------------
  |  Branch (97:9): [True: 0, False: 138]
  ------------------
   98|      0|        return false;
   99|      0|    }
  100|    138|    out[ret] = '\0';
  101|    138|    return true;
  102|    138|}
encode_muxed_account:
  104|  4.04k|bool encode_muxed_account(const muxed_account_t *raw_muxed_account, char *out, size_t out_len) {
  105|  4.04k|    if (raw_muxed_account == NULL) {
  ------------------
  |  Branch (105:9): [True: 0, False: 4.04k]
  ------------------
  106|      0|        return false;
  107|      0|    }
  108|  4.04k|    if (raw_muxed_account->type == KEY_TYPE_ED25519) {
  ------------------
  |  Branch (108:9): [True: 3.80k, False: 241]
  ------------------
  109|  3.80k|        return encode_ed25519_public_key(raw_muxed_account->ed25519, out, out_len);
  110|  3.80k|    } else {
  111|    241|        if (out_len < ENCODED_MUXED_ACCOUNT_KEY_LENGTH) {
  ------------------
  |  |   16|    241|#define ENCODED_MUXED_ACCOUNT_KEY_LENGTH   70
  ------------------
  |  Branch (111:13): [True: 0, False: 241]
  ------------------
  112|      0|            return false;
  113|      0|        }
  114|    241|        uint8_t buffer[MUXED_ACCOUNT_MED_25519_SIZE] = {0};
  115|    241|        buffer[0] = VERSION_BYTE_MUXED_ACCOUNT;
  ------------------
  |  |   29|    241|#define VERSION_BYTE_MUXED_ACCOUNT          12 << 3
  ------------------
  116|    241|        memcpy(buffer + 1, raw_muxed_account->med25519.ed25519, RAW_ED25519_PUBLIC_KEY_SIZE);
  ------------------
  |  |   18|    241|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  117|  2.16k|        for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (117:25): [True: 1.92k, False: 241]
  ------------------
  118|  1.92k|            buffer[33 + i] = raw_muxed_account->med25519.id >> 8 * (7 - i);
  119|  1.92k|        }
  120|    241|        uint16_t crc = crc16(buffer, MUXED_ACCOUNT_MED_25519_SIZE - 2);  // checksum
  ------------------
  |  |   10|    241|#define MUXED_ACCOUNT_MED_25519_SIZE      43
  ------------------
  121|    241|        buffer[41] = crc;
  122|    241|        buffer[42] = crc >> 8;
  123|    241|        if (base32_encode(buffer,
  ------------------
  |  Branch (123:13): [True: 0, False: 241]
  ------------------
  124|    241|                          MUXED_ACCOUNT_MED_25519_SIZE,
  ------------------
  |  |   10|    241|#define MUXED_ACCOUNT_MED_25519_SIZE      43
  ------------------
  125|    241|                          (uint8_t *) out,
  126|    241|                          ENCODED_MUXED_ACCOUNT_KEY_LENGTH) == -1) {
  ------------------
  |  |   16|    241|#define ENCODED_MUXED_ACCOUNT_KEY_LENGTH   70
  ------------------
  127|      0|            return false;
  128|      0|        }
  129|    241|        out[69] = '\0';
  130|    241|        return true;
  131|    241|    }
  132|  4.04k|}
print_binary:
  162|    588|                  uint8_t num_chars_r) {
  163|    588|    if (num_chars_l > 0) {
  ------------------
  |  Branch (163:9): [True: 97, False: 491]
  ------------------
  164|     97|        char buffer[BINARY_MAX_SIZE * 2 + 1];
  165|     97|        if (!format_hex(in, in_len, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (165:13): [True: 0, False: 97]
  ------------------
  166|      0|            return false;
  167|      0|        }
  168|     97|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  169|     97|    }
  170|    491|    return format_hex(in, in_len, out, out_len);
  171|    588|}
print_account_id:
  177|  18.5k|                      uint8_t num_chars_r) {
  178|  18.5k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (178:9): [True: 424, False: 18.1k]
  ------------------
  179|    424|        char buffer[ENCODED_ED25519_PUBLIC_KEY_LENGTH];
  180|    424|        if (!encode_ed25519_public_key(account_id, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (180:13): [True: 0, False: 424]
  ------------------
  181|      0|            return false;
  182|      0|        }
  183|    424|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  184|    424|    }
  185|  18.1k|    return encode_ed25519_public_key(account_id, out, out_len);
  186|  18.5k|}
print_contract_id:
  192|    167|                       uint8_t num_chars_r) {
  193|    167|    if (num_chars_l > 0) {
  ------------------
  |  Branch (193:9): [True: 0, False: 167]
  ------------------
  194|      0|        char buffer[ENCODED_CONTRACT_KEY_LENGTH];
  195|      0|        if (!encode_contract(contract_id, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (195:13): [True: 0, False: 0]
  ------------------
  196|      0|            return false;
  197|      0|        }
  198|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  199|      0|    }
  200|    167|    return encode_contract(contract_id, out, out_len);
  201|    167|}
print_hash_x_key:
  207|     66|                      uint8_t num_chars_r) {
  208|     66|    if (num_chars_l > 0) {
  ------------------
  |  Branch (208:9): [True: 0, False: 66]
  ------------------
  209|      0|        char buffer[ENCODED_HASH_X_KEY_LENGTH];
  210|      0|        if (!encode_hash_x_key(raw_hash_x, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|            return false;
  212|      0|        }
  213|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  214|      0|    }
  215|     66|    return encode_hash_x_key(raw_hash_x, out, out_len);
  216|     66|}
print_pre_auth_x_key:
  222|    154|                          uint8_t num_chars_r) {
  223|    154|    if (num_chars_l > 0) {
  ------------------
  |  Branch (223:9): [True: 0, False: 154]
  ------------------
  224|      0|        char buffer[ENCODED_PRE_AUTH_TX_KEY_LENGTH];
  225|      0|        if (!encode_pre_auth_x_key(raw_pre_auth_tx, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (225:13): [True: 0, False: 0]
  ------------------
  226|      0|            return false;
  227|      0|        }
  228|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  229|      0|    }
  230|    154|    return encode_pre_auth_x_key(raw_pre_auth_tx, out, out_len);
  231|    154|}
print_ed25519_signed_payload:
  237|    138|                                  uint8_t num_chars_r) {
  238|    138|    char tmp[ED25519_SIGNED_PAYLOAD_MAX_LENGTH];
  239|    138|    if (!encode_ed25519_signed_payload(signed_payload, tmp, sizeof(tmp))) {
  ------------------
  |  Branch (239:9): [True: 0, False: 138]
  ------------------
  240|      0|        return false;
  241|    138|    };
  242|       |
  243|    138|    if (num_chars_l > 0) {
  ------------------
  |  Branch (243:9): [True: 138, False: 0]
  ------------------
  244|    138|        if (out_len < num_chars_l + num_chars_r + 2 + 1) {
  ------------------
  |  Branch (244:13): [True: 0, False: 138]
  ------------------
  245|      0|            return false;
  246|      0|        }
  247|    138|        return print_summary(tmp, out, out_len, num_chars_l, num_chars_r);
  248|    138|    } else {
  249|      0|        if (strlcpy(out, tmp, out_len) >= out_len) {
  ------------------
  |  Branch (249:13): [True: 0, False: 0]
  ------------------
  250|      0|            return false;
  251|      0|        }
  252|      0|    }
  253|      0|    return true;
  254|    138|}
print_sc_address:
  260|  3.64k|                      uint8_t num_chars_r) {
  261|  3.64k|    if (sc_address->type == SC_ADDRESS_TYPE_ACCOUNT) {
  ------------------
  |  Branch (261:9): [True: 3.47k, False: 167]
  ------------------
  262|  3.47k|        return print_account_id(sc_address->address, out, out_len, num_chars_l, num_chars_r);
  263|  3.47k|    } else {
  264|    167|        return print_contract_id(sc_address->address, out, out_len, num_chars_l, num_chars_r);
  265|    167|    }
  266|      0|    return true;
  267|  3.64k|}
print_muxed_account:
  273|  4.04k|                         uint8_t num_chars_r) {
  274|  4.04k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (274:9): [True: 160, False: 3.88k]
  ------------------
  275|    160|        char buffer[ENCODED_MUXED_ACCOUNT_KEY_LENGTH];
  276|    160|        if (!encode_muxed_account(muxed_account, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (276:13): [True: 0, False: 160]
  ------------------
  277|      0|            return false;
  278|      0|        }
  279|    160|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  280|    160|    }
  281|  3.88k|    return encode_muxed_account(muxed_account, out, out_len);
  282|  4.04k|}
print_claimable_balance_id:
  288|    260|                                uint8_t num_chars_r) {
  289|    260|    if (out_len < (4 + CLAIMABLE_BALANCE_ID_SIZE) * 2 + 1) {
  ------------------
  |  |   48|    260|#define CLAIMABLE_BALANCE_ID_SIZE 32
  ------------------
  |  Branch (289:9): [True: 0, False: 260]
  ------------------
  290|      0|        return false;
  291|      0|    }
  292|    260|    uint8_t data[(4 + CLAIMABLE_BALANCE_ID_SIZE)];
  293|  1.30k|    for (uint8_t i = 0; i < 4; i++) {
  ------------------
  |  Branch (293:25): [True: 1.04k, False: 260]
  ------------------
  294|  1.04k|        data[i] = claimable_balance_id_t->type >> (8 * (3 - i));
  295|  1.04k|    }
  296|    260|    memcpy(data + 4, claimable_balance_id_t->v0, CLAIMABLE_BALANCE_ID_SIZE);
  ------------------
  |  |   48|    260|#define CLAIMABLE_BALANCE_ID_SIZE 32
  ------------------
  297|    260|    return print_binary(data, sizeof(data), out, out_len, num_chars_l, num_chars_r);
  298|    260|}
print_uint64_num:
  300|  63.6k|bool print_uint64_num(uint64_t num, char *out, size_t out_len) {
  301|  63.6k|    uint8_t data[8] = {0};
  302|   572k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (302:21): [True: 508k, False: 63.6k]
  ------------------
  303|   508k|        data[i] = num >> (8 * (7 - i));
  304|   508k|    }
  305|  63.6k|    return print_uint64(data, 0, out, out_len, false);
  306|  63.6k|}
print_int64_num:
  308|     29|bool print_int64_num(int64_t num, char *out, size_t out_len) {
  309|     29|    uint8_t data[8] = {0};
  310|    261|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (310:21): [True: 232, False: 29]
  ------------------
  311|    232|        data[i] = num >> (8 * (7 - i));
  312|    232|    }
  313|     29|    return print_int64(data, 0, out, out_len, false);
  314|     29|}
print_time:
  316|    767|bool print_time(uint64_t seconds, char *out, size_t out_len) {
  317|    767|    if (seconds > 253402300799) {
  ------------------
  |  Branch (317:9): [True: 592, False: 175]
  ------------------
  318|       |        // valid range 1970-01-01 00:00:00 - 9999-12-31 23:59:59
  319|    592|        return false;
  320|    592|    }
  321|    175|    char time_str[20] = {0};  // 1970-01-01 00:00:00
  322|       |
  323|    175|    if (out_len < sizeof(time_str)) {
  ------------------
  |  Branch (323:9): [True: 0, False: 175]
  ------------------
  324|      0|        return false;
  325|      0|    }
  326|    175|    struct tm tm;
  327|    175|    if (!gmtime_r((time_t *) &seconds, &tm)) {
  ------------------
  |  Branch (327:9): [True: 0, False: 175]
  ------------------
  328|      0|        return false;
  329|    175|    };
  330|       |
  331|    175|    if (snprintf(time_str,
  ------------------
  |  Branch (331:9): [True: 0, False: 175]
  ------------------
  332|    175|                 sizeof(time_str),
  333|    175|                 "%04d-%02d-%02d %02d:%02d:%02d",
  334|    175|                 tm.tm_year + 1900,
  335|    175|                 tm.tm_mon + 1,
  336|    175|                 tm.tm_mday,
  337|    175|                 tm.tm_hour,
  338|    175|                 tm.tm_min,
  339|    175|                 tm.tm_sec) < 0) {
  340|      0|        return false;
  341|    175|    };
  342|    175|    if (strlcpy(out, time_str, out_len) >= out_len) {
  ------------------
  |  Branch (342:9): [True: 0, False: 175]
  ------------------
  343|      0|        return false;
  344|      0|    }
  345|    175|    return true;
  346|    175|}
print_asset_name:
  348|  18.6k|bool print_asset_name(const asset_t *asset, uint8_t network_id, char *out, size_t out_len) {
  349|  18.6k|    switch (asset->type) {
  350|  18.2k|        case ASSET_TYPE_NATIVE:
  ------------------
  |  Branch (350:9): [True: 18.2k, False: 424]
  ------------------
  351|  18.2k|            if (network_id == NETWORK_TYPE_UNKNOWN) {
  ------------------
  |  |   59|  18.2k|#define NETWORK_TYPE_UNKNOWN 2
  ------------------
  |  Branch (351:17): [True: 17.5k, False: 678]
  ------------------
  352|  17.5k|                if (strlcpy(out, "native", out_len) >= out_len) {
  ------------------
  |  Branch (352:21): [True: 0, False: 17.5k]
  ------------------
  353|      0|                    return false;
  354|      0|                }
  355|  17.5k|            } else {
  356|    678|                if (strlcpy(out, "XLM", out_len) >= out_len) {
  ------------------
  |  Branch (356:21): [True: 0, False: 678]
  ------------------
  357|      0|                    return false;
  358|      0|                }
  359|    678|            }
  360|  18.2k|            return true;
  361|    246|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (361:9): [True: 246, False: 18.4k]
  ------------------
  362|    941|            for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (362:29): [True: 779, False: 162]
  ------------------
  363|    779|                out[i] = asset->alpha_num4.asset_code[i];
  364|    779|                if (out[i] == 0) {
  ------------------
  |  Branch (364:21): [True: 84, False: 695]
  ------------------
  365|     84|                    break;
  366|     84|                }
  367|    779|            }
  368|    246|            out[4] = 0;
  369|    246|            return true;
  370|    178|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (370:9): [True: 178, False: 18.5k]
  ------------------
  371|    726|            for (int i = 0; i < 12; i++) {
  ------------------
  |  Branch (371:29): [True: 720, False: 6]
  ------------------
  372|    720|                out[i] = asset->alpha_num12.asset_code[i];
  373|    720|                if (out[i] == 0) {
  ------------------
  |  Branch (373:21): [True: 172, False: 548]
  ------------------
  374|    172|                    break;
  375|    172|                }
  376|    720|            }
  377|    178|            out[12] = 0;
  378|    178|            return true;
  379|      0|        default:
  ------------------
  |  Branch (379:9): [True: 0, False: 18.6k]
  ------------------
  380|      0|            return false;
  381|  18.6k|    }
  382|  18.6k|}
print_asset:
  384|  18.1k|bool print_asset(const asset_t *asset, uint8_t network_id, char *out, size_t out_len) {
  385|  18.1k|    char asset_code[12 + 1];
  386|  18.1k|    char asset_issuer[3 + 2 + 4 + 1];
  387|  18.1k|    print_asset_name(asset, network_id, asset_code, sizeof(asset_code));
  388|       |
  389|  18.1k|    switch (asset->type) {
  390|    246|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (390:9): [True: 246, False: 17.8k]
  ------------------
  391|    246|            print_account_id(asset->alpha_num4.issuer, asset_issuer, sizeof(asset_issuer), 3, 4);
  392|    246|            break;
  393|    178|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (393:9): [True: 178, False: 17.9k]
  ------------------
  394|    178|            print_account_id(asset->alpha_num12.issuer, asset_issuer, sizeof(asset_issuer), 3, 4);
  395|    178|            break;
  396|  17.7k|        default:
  ------------------
  |  Branch (396:9): [True: 17.7k, False: 424]
  ------------------
  397|  17.7k|            break;
  398|  18.1k|    }
  399|  18.1k|    if (strlcpy(out, asset_code, out_len) >= out_len) {
  ------------------
  |  Branch (399:9): [True: 0, False: 18.1k]
  ------------------
  400|      0|        return false;
  401|      0|    }
  402|  18.1k|    if (asset->type != ASSET_TYPE_NATIVE) {
  ------------------
  |  Branch (402:9): [True: 424, False: 17.7k]
  ------------------
  403|    424|        if (strlcat(out, "@", out_len) >= out_len) {
  ------------------
  |  Branch (403:13): [True: 0, False: 424]
  ------------------
  404|      0|            return false;
  405|      0|        }
  406|    424|        if (strlcat(out, asset_issuer, out_len) >= out_len) {
  ------------------
  |  Branch (406:13): [True: 0, False: 424]
  ------------------
  407|      0|            return false;
  408|      0|        }
  409|    424|    }
  410|  18.1k|    return true;
  411|  18.1k|}
print_flag:
  413|  1.15k|bool print_flag(const char *flag, char *out, size_t out_len) {
  414|  1.15k|    if (out[0]) {
  ------------------
  |  Branch (414:9): [True: 573, False: 577]
  ------------------
  415|    573|        if (strlcat(out, ", ", out_len) >= out_len) {
  ------------------
  |  Branch (415:13): [True: 0, False: 573]
  ------------------
  416|      0|            return false;
  417|      0|        }
  418|    573|    }
  419|  1.15k|    if (strlcat(out, flag, out_len) >= out_len) {
  ------------------
  |  Branch (419:9): [True: 0, False: 1.15k]
  ------------------
  420|      0|        return false;
  421|      0|    }
  422|  1.15k|    return true;
  423|  1.15k|}
print_account_flags:
  425|     17|bool print_account_flags(uint32_t flags, char *out, size_t out_len) {
  426|     17|    explicit_bzero(out, out_len);
  427|     17|    if (flags & 0x01u) {
  ------------------
  |  Branch (427:9): [True: 3, False: 14]
  ------------------
  428|      3|        if (!print_flag("AUTH_REQUIRED", out, out_len)) {
  ------------------
  |  Branch (428:13): [True: 0, False: 3]
  ------------------
  429|      0|            return false;
  430|      0|        }
  431|      3|    }
  432|     17|    if (flags & 0x02u) {
  ------------------
  |  Branch (432:9): [True: 3, False: 14]
  ------------------
  433|      3|        if (!print_flag("AUTH_REVOCABLE", out, out_len)) {
  ------------------
  |  Branch (433:13): [True: 0, False: 3]
  ------------------
  434|      0|            return false;
  435|      0|        }
  436|      3|    }
  437|     17|    if (flags & 0x04u) {
  ------------------
  |  Branch (437:9): [True: 3, False: 14]
  ------------------
  438|      3|        if (!print_flag("AUTH_IMMUTABLE", out, out_len)) {
  ------------------
  |  Branch (438:13): [True: 0, False: 3]
  ------------------
  439|      0|            return false;
  440|      0|        }
  441|      3|    }
  442|     17|    if (flags & 0x08u) {
  ------------------
  |  Branch (442:9): [True: 3, False: 14]
  ------------------
  443|      3|        if (!print_flag("AUTH_CLAWBACK_ENABLED", out, out_len)) {
  ------------------
  |  Branch (443:13): [True: 0, False: 3]
  ------------------
  444|      0|            return false;
  445|      0|        }
  446|      3|    }
  447|     17|    return true;
  448|     17|}
print_trust_line_flags:
  450|  1.04k|bool print_trust_line_flags(uint32_t flags, char *out, size_t out_len) {
  451|  1.04k|    explicit_bzero(out, out_len);
  452|  1.04k|    if (flags & AUTHORIZED_FLAG) {
  ------------------
  |  Branch (452:9): [True: 464, False: 579]
  ------------------
  453|    464|        if (!print_flag("AUTHORIZED", out, out_len)) {
  ------------------
  |  Branch (453:13): [True: 0, False: 464]
  ------------------
  454|      0|            return false;
  455|      0|        }
  456|    464|    }
  457|  1.04k|    if (flags & AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG) {
  ------------------
  |  Branch (457:9): [True: 402, False: 641]
  ------------------
  458|    402|        if (!print_flag("AUTHORIZED_TO_MAINTAIN_LIABILITIES", out, out_len)) {
  ------------------
  |  Branch (458:13): [True: 0, False: 402]
  ------------------
  459|      0|            return false;
  460|      0|        }
  461|    402|    }
  462|  1.04k|    if (flags & TRUSTLINE_CLAWBACK_ENABLED_FLAG) {
  ------------------
  |  Branch (462:9): [True: 272, False: 771]
  ------------------
  463|    272|        if (!print_flag("TRUSTLINE_CLAWBACK_ENABLED", out, out_len)) {
  ------------------
  |  Branch (463:13): [True: 0, False: 272]
  ------------------
  464|      0|            return false;
  465|      0|        }
  466|    272|    }
  467|  1.04k|    return true;
  468|  1.04k|}
print_allow_trust_flags:
  470|     54|bool print_allow_trust_flags(uint32_t flag, char *out, size_t out_len) {
  471|     54|    explicit_bzero(out, out_len);
  472|     54|    if (flag & AUTHORIZED_FLAG) {
  ------------------
  |  Branch (472:9): [True: 3, False: 51]
  ------------------
  473|      3|        if (strlcpy(out, "AUTHORIZED", out_len) >= out_len) {
  ------------------
  |  Branch (473:13): [True: 0, False: 3]
  ------------------
  474|      0|            return false;
  475|      0|        }
  476|     51|    } else if (flag & AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG) {
  ------------------
  |  Branch (476:16): [True: 20, False: 31]
  ------------------
  477|     20|        if (strlcpy(out, "AUTHORIZED_TO_MAINTAIN_LIABILITIES", out_len) >= out_len) {
  ------------------
  |  Branch (477:13): [True: 0, False: 20]
  ------------------
  478|      0|            return false;
  479|      0|        }
  480|     31|    } else {
  481|     31|        if (strlcpy(out, "UNAUTHORIZED", out_len) >= out_len) {
  ------------------
  |  Branch (481:13): [True: 0, False: 31]
  ------------------
  482|      0|            return false;
  483|      0|        }
  484|     31|    }
  485|     54|    return true;
  486|     54|}
print_amount:
  492|  17.6k|                  size_t out_len) {
  493|  17.6k|    uint8_t data[8] = {0};
  494|   158k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (494:21): [True: 141k, False: 17.6k]
  ------------------
  495|   141k|        data[i] = amount >> (8 * (7 - i));
  496|   141k|    }
  497|       |
  498|  17.6k|    if (!print_uint64(data, 7, out, out_len, true)) {
  ------------------
  |  Branch (498:9): [True: 0, False: 17.6k]
  ------------------
  499|      0|        return false;
  500|      0|    }
  501|       |
  502|  17.6k|    if (asset) {
  ------------------
  |  Branch (502:9): [True: 16.5k, False: 1.07k]
  ------------------
  503|  16.5k|        if (strlcat(out, " ", out_len) >= out_len) {
  ------------------
  |  Branch (503:13): [True: 0, False: 16.5k]
  ------------------
  504|      0|            return false;
  505|      0|        }
  506|  16.5k|        size_t length = strlen(out);
  507|  16.5k|        if (!print_asset(asset, network_id, out + length, out_len - length)) {
  ------------------
  |  Branch (507:13): [True: 0, False: 16.5k]
  ------------------
  508|      0|            return false;
  509|  16.5k|        };
  510|  16.5k|    }
  511|  17.6k|    return true;
  512|  17.6k|}
is_printable_binary:
  514|    220|bool is_printable_binary(const uint8_t *str, size_t str_len) {
  515|  1.15k|    for (size_t i = 0; i < str_len; i++) {
  ------------------
  |  Branch (515:24): [True: 1.12k, False: 29]
  ------------------
  516|  1.12k|        if (str[i] > 0x7e || str[i] < 0x20) {
  ------------------
  |  Branch (516:13): [True: 53, False: 1.07k]
  |  Branch (516:30): [True: 138, False: 932]
  ------------------
  517|    191|            return false;
  518|    191|        }
  519|  1.12k|    }
  520|     29|    return true;
  521|    220|}
add_decimal_point:
  661|  82.8k|bool add_decimal_point(char *out, size_t out_len, uint8_t decimals) {
  662|  82.8k|    if (out == NULL || out_len == 0) {
  ------------------
  |  Branch (662:9): [True: 0, False: 82.8k]
  |  Branch (662:24): [True: 0, False: 82.8k]
  ------------------
  663|      0|        return false;
  664|      0|    }
  665|  82.8k|    if (decimals == 0) {
  ------------------
  |  Branch (665:9): [True: 65.1k, False: 17.6k]
  ------------------
  666|  65.1k|        return true;
  667|  65.1k|    }
  668|       |
  669|  17.6k|    bool is_negative = out[0] == '-';
  670|  17.6k|    char *start = is_negative ? out + 1 : out;
  ------------------
  |  Branch (670:19): [True: 7, False: 17.6k]
  ------------------
  671|       |
  672|  17.6k|    size_t len = strlen(start);
  673|  17.6k|    if (len == 0) {
  ------------------
  |  Branch (673:9): [True: 0, False: 17.6k]
  ------------------
  674|      0|        return true;
  675|      0|    }
  676|       |
  677|  17.6k|    if (is_negative) {
  ------------------
  |  Branch (677:9): [True: 7, False: 17.6k]
  ------------------
  678|      7|        if (decimals >= out_len - 2) {
  ------------------
  |  Branch (678:13): [True: 0, False: 7]
  ------------------
  679|       |            // Not enough space to add decimal point and leading zero.
  680|      0|            return false;
  681|      0|        }
  682|  17.6k|    } else {
  683|  17.6k|        if (decimals >= out_len - 1) {
  ------------------
  |  Branch (683:13): [True: 0, False: 17.6k]
  ------------------
  684|       |            // Not enough space to add decimal point.
  685|      0|            return false;
  686|      0|        }
  687|  17.6k|    }
  688|       |
  689|  17.6k|    if (len <= decimals) {
  ------------------
  |  Branch (689:9): [True: 13.4k, False: 4.19k]
  ------------------
  690|       |        // Shift the number to the right and add leading zeros
  691|  13.4k|        memmove(start + decimals - len + 2, start, len + 1);
  692|  13.4k|        start[0] = '0';
  693|  13.4k|        start[1] = '.';
  694|  13.4k|        memset(start + 2, '0', decimals - len);
  695|  13.4k|    } else {
  696|       |        // Insert the decimal point at the appropriate position
  697|  4.19k|        memmove(start + len - decimals + 1, start + len - decimals, decimals + 1);
  698|  4.19k|        start[len - decimals] = '.';
  699|  4.19k|    }
  700|       |
  701|       |    // Remove trailing zeros after decimal point
  702|  17.6k|    char *p = start + strlen(start) - 1;
  703|  83.0k|    while (p > start && *p == '0') {
  ------------------
  |  Branch (703:12): [True: 83.0k, False: 0]
  |  Branch (703:25): [True: 65.4k, False: 17.6k]
  ------------------
  704|  65.4k|        *p-- = '\0';
  705|  65.4k|    }
  706|       |
  707|       |    // Remove decimal point if it's the last character
  708|  17.6k|    if (p > start && *p == '.') {
  ------------------
  |  Branch (708:9): [True: 17.6k, False: 0]
  |  Branch (708:22): [True: 9.12k, False: 8.53k]
  ------------------
  709|  9.12k|        *p = '\0';
  710|  9.12k|    }
  711|       |
  712|       |    // Add the negative sign back if necessary
  713|  17.6k|    if (is_negative && out[0] != '-') {
  ------------------
  |  Branch (713:9): [True: 7, False: 17.6k]
  |  Branch (713:24): [True: 0, False: 7]
  ------------------
  714|      0|        memmove(out + 1, out, strlen(out) + 1);
  715|      0|        out[0] = '-';
  716|      0|    }
  717|       |
  718|  17.6k|    return true;
  719|  17.6k|}
add_separator_to_number:
  721|  19.1k|bool add_separator_to_number(char *out, size_t out_len) {
  722|  19.1k|    if (out == NULL || out_len == 0) {
  ------------------
  |  Branch (722:9): [True: 0, False: 19.1k]
  |  Branch (722:24): [True: 0, False: 19.1k]
  ------------------
  723|      0|        return false;
  724|      0|    }
  725|       |
  726|  19.1k|    size_t length = strlen(out);
  727|  19.1k|    uint8_t negative = (out[0] == '-') ? 1 : 0;  // Check if the number is negative
  ------------------
  |  Branch (727:24): [True: 304, False: 18.8k]
  ------------------
  728|       |
  729|       |    // Find the position of the decimal point
  730|  19.1k|    char *decimal_point = strchr(out, '.');
  731|  19.1k|    size_t decimal_index = decimal_point ? decimal_point - out : length;
  ------------------
  |  Branch (731:28): [True: 8.52k, False: 10.6k]
  ------------------
  732|       |
  733|       |    // Calculate the new length of the string with the commas
  734|  19.1k|    size_t new_length = 0;
  735|  19.1k|    if (negative) {
  ------------------
  |  Branch (735:9): [True: 304, False: 18.8k]
  ------------------
  736|    304|        if (decimal_index < 2) {
  ------------------
  |  Branch (736:13): [True: 0, False: 304]
  ------------------
  737|       |            // The string is too short to have a negative number
  738|      0|            return false;
  739|      0|        }
  740|    304|        new_length = decimal_index + (decimal_index - 2) / 3;
  741|  18.8k|    } else {
  742|  18.8k|        if (decimal_index < 1) {
  ------------------
  |  Branch (742:13): [True: 0, False: 18.8k]
  ------------------
  743|       |            // The string is too short to have a positive number
  744|      0|            return false;
  745|      0|        }
  746|  18.8k|        new_length = decimal_index + (decimal_index - 1) / 3;
  747|  18.8k|    }
  748|       |
  749|       |    // If the new length is greater than the maximum length, return false
  750|  19.1k|    if (new_length >= out_len || new_length >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  19.1k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (750:9): [True: 0, False: 19.1k]
  |  Branch (750:34): [True: 0, False: 19.1k]
  ------------------
  751|      0|        return false;
  752|      0|    }
  753|       |
  754|  19.1k|    char temp[NUMBER_WITH_COMMAS_MAX_LENGTH];
  755|  19.1k|    if (strlcpy(temp, out, NUMBER_WITH_COMMAS_MAX_LENGTH) >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  19.1k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
                  if (strlcpy(temp, out, NUMBER_WITH_COMMAS_MAX_LENGTH) >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  19.1k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (755:9): [True: 0, False: 19.1k]
  ------------------
  756|      0|        return false;
  757|      0|    }
  758|       |
  759|  19.1k|    temp[new_length] = '\0';  // Set the end of the new string
  760|       |
  761|       |    // Start from the end of the string and move the digits to their new positions
  762|   109k|    for (int i = decimal_index - 1, j = new_length - 1; i >= 0; i--, j--) {
  ------------------
  |  Branch (762:57): [True: 89.8k, False: 19.1k]
  ------------------
  763|  89.8k|        temp[j] = out[i];
  764|       |
  765|       |        // If the current position is a multiple of 3 and it's not the first digit, add a comma
  766|  89.8k|        if ((decimal_index - i) % 3 == 0 && i != negative && j > 0) {
  ------------------
  |  Branch (766:13): [True: 23.9k, False: 65.9k]
  |  Branch (766:45): [True: 21.7k, False: 2.24k]
  |  Branch (766:62): [True: 21.4k, False: 203]
  ------------------
  767|  21.4k|            temp[--j] = ',';
  768|  21.4k|        }
  769|  89.8k|    }
  770|       |
  771|       |    // If there is a decimal point, append the part after the decimal point
  772|  19.1k|    if (decimal_point) {
  ------------------
  |  Branch (772:9): [True: 8.52k, False: 10.6k]
  ------------------
  773|  8.52k|        if (strlcpy(temp + new_length, decimal_point, NUMBER_WITH_COMMAS_MAX_LENGTH - new_length) >=
  ------------------
  |  |   13|  8.52k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (773:13): [True: 0, False: 8.52k]
  ------------------
  774|  8.52k|            NUMBER_WITH_COMMAS_MAX_LENGTH - new_length) {
  ------------------
  |  |   13|  8.52k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  775|      0|            return false;
  776|      0|        }
  777|  8.52k|    }
  778|       |
  779|  19.1k|    if (strlcpy(out, temp, out_len) >= out_len) {
  ------------------
  |  Branch (779:9): [True: 0, False: 19.1k]
  ------------------
  780|      0|        return false;
  781|      0|    }
  782|       |
  783|  19.1k|    return true;
  784|  19.1k|}
print_int32:
  790|    247|                 bool add_separator) {
  791|    247|    return int256_to_decimal(value, 4, out, out_len) && add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (791:12): [True: 247, False: 0]
  |  Branch (791:57): [True: 247, False: 0]
  ------------------
  792|    247|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (792:13): [True: 17, False: 230]
  |  Branch (792:31): [True: 230, False: 0]
  ------------------
  793|    247|}
print_uint32:
  799|     89|                  bool add_separator) {
  800|     89|    return uint256_to_decimal(value, 4, out, out_len) &&
  ------------------
  |  Branch (800:12): [True: 89, False: 0]
  ------------------
  801|     89|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (801:12): [True: 89, False: 0]
  ------------------
  802|     89|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (802:13): [True: 0, False: 89]
  |  Branch (802:31): [True: 89, False: 0]
  ------------------
  803|     89|}
print_int64:
  809|    258|                 bool add_separator) {
  810|    258|    return int256_to_decimal(value, 8, out, out_len) && add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (810:12): [True: 258, False: 0]
  |  Branch (810:57): [True: 258, False: 0]
  ------------------
  811|    258|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (811:13): [True: 29, False: 229]
  |  Branch (811:31): [True: 229, False: 0]
  ------------------
  812|    258|}
print_uint64:
  818|  81.2k|                  bool add_separator) {
  819|  81.2k|    return uint256_to_decimal(value, 8, out, out_len) &&
  ------------------
  |  Branch (819:12): [True: 81.2k, False: 0]
  ------------------
  820|  81.2k|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (820:12): [True: 81.2k, False: 0]
  ------------------
  821|  81.2k|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (821:13): [True: 63.6k, False: 17.6k]
  |  Branch (821:31): [True: 17.6k, False: 0]
  ------------------
  822|  81.2k|}
print_int128:
  828|    389|                  bool add_separator) {
  829|    389|    return int256_to_decimal(value, 16, out, out_len) &&
  ------------------
  |  Branch (829:12): [True: 389, False: 0]
  ------------------
  830|    389|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (830:12): [True: 389, False: 0]
  ------------------
  831|    389|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (831:13): [True: 0, False: 389]
  |  Branch (831:31): [True: 389, False: 0]
  ------------------
  832|    389|}
print_uint128:
  838|    204|                   bool add_separator) {
  839|    204|    return uint256_to_decimal(value, 16, out, out_len) &&
  ------------------
  |  Branch (839:12): [True: 204, False: 0]
  ------------------
  840|    204|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (840:12): [True: 204, False: 0]
  ------------------
  841|    204|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (841:13): [True: 0, False: 204]
  |  Branch (841:31): [True: 204, False: 0]
  ------------------
  842|    204|}
print_int256:
  848|    256|                  bool add_separator) {
  849|    256|    return int256_to_decimal(value, 32, out, out_len) &&
  ------------------
  |  Branch (849:12): [True: 256, False: 0]
  ------------------
  850|    256|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (850:12): [True: 256, False: 0]
  ------------------
  851|    256|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (851:13): [True: 0, False: 256]
  |  Branch (851:31): [True: 256, False: 0]
  ------------------
  852|    256|}
print_uint256:
  858|     77|                   bool add_separator) {
  859|     77|    return uint256_to_decimal(value, 32, out, out_len) &&
  ------------------
  |  Branch (859:12): [True: 77, False: 0]
  ------------------
  860|     77|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (860:12): [True: 77, False: 0]
  ------------------
  861|     77|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (861:13): [True: 0, False: 77]
  |  Branch (861:31): [True: 77, False: 0]
  ------------------
  862|     77|}
print_scv_symbol:
  864|     51|bool print_scv_symbol(const scv_symbol_t *scv_symbol, char *out, size_t out_len) {
  865|     51|    if (scv_symbol == NULL || out == NULL) {
  ------------------
  |  Branch (865:9): [True: 0, False: 51]
  |  Branch (865:31): [True: 0, False: 51]
  ------------------
  866|      0|        return false;
  867|      0|    }
  868|     51|    if (scv_symbol->size > SCV_SYMBOL_MAX_SIZE || scv_symbol->size > out_len - 1) {
  ------------------
  |  |   55|    102|#define SCV_SYMBOL_MAX_SIZE     32
  ------------------
  |  Branch (868:9): [True: 0, False: 51]
  |  Branch (868:51): [True: 0, False: 51]
  ------------------
  869|      0|        return false;
  870|      0|    }
  871|     51|    if (scv_symbol->size == 0) {
  ------------------
  |  Branch (871:9): [True: 44, False: 7]
  ------------------
  872|       |        // print empty symbol
  873|     44|        if (strlcpy(out, "[empty symbol]", out_len) >= out_len) {
  ------------------
  |  Branch (873:13): [True: 0, False: 44]
  ------------------
  874|      0|            return false;
  875|      0|        }
  876|     44|        return true;
  877|     44|    }
  878|      7|    if (!is_printable_binary(scv_symbol->symbol, scv_symbol->size)) {
  ------------------
  |  Branch (878:9): [True: 3, False: 4]
  ------------------
  879|      3|        return false;
  880|      3|    }
  881|      4|    if (!print_string(out, out_len, scv_symbol->symbol, scv_symbol->size)) {
  ------------------
  |  Branch (881:9): [True: 0, False: 4]
  ------------------
  882|      0|        return false;
  883|      0|    }
  884|      4|    return true;
  885|      4|}
print_scv_string:
  887|    295|bool print_scv_string(const scv_string_t *scv_string, char *out, size_t out_len) {
  888|    295|    if (scv_string == NULL || out == NULL) {
  ------------------
  |  Branch (888:9): [True: 0, False: 295]
  |  Branch (888:31): [True: 0, False: 295]
  ------------------
  889|      0|        return false;
  890|      0|    }
  891|       |
  892|    295|    if (scv_string->size == 0) {
  ------------------
  |  Branch (892:9): [True: 160, False: 135]
  ------------------
  893|       |        // print empty symbol
  894|    160|        if (strlcpy(out, "[empty string]", out_len) >= out_len) {
  ------------------
  |  Branch (894:13): [True: 0, False: 160]
  ------------------
  895|      0|            return false;
  896|      0|        }
  897|    160|        return true;
  898|    160|    }
  899|       |
  900|       |    // if the string is not printable, print [unprintable string]
  901|    135|    if (!is_printable_binary(scv_string->string, scv_string->size)) {
  ------------------
  |  Branch (901:9): [True: 118, False: 17]
  ------------------
  902|    118|        if (strlcpy(out, "[unprintable string]", out_len) >= out_len) {
  ------------------
  |  Branch (902:13): [True: 0, False: 118]
  ------------------
  903|      0|            return false;
  904|      0|        }
  905|    118|        return true;
  906|    118|    }
  907|       |
  908|     17|    size_t copy_len = scv_string->size;
  909|       |
  910|       |    // If the output buffer is large enough to hold the entire scv_string, copy it directly and
  911|       |    // append a null terminator.
  912|     17|    if (out_len > copy_len) {
  ------------------
  |  Branch (912:9): [True: 17, False: 0]
  ------------------
  913|     17|        memcpy(out, scv_string->string, copy_len);
  914|     17|        out[copy_len] = '\0';  // Ensure the string is null-terminated.
  915|     17|    } else {
  916|      0|        if (out_len < 3) {
  ------------------
  |  Branch (916:13): [True: 0, False: 0]
  ------------------
  917|      0|            return false;
  918|      0|        }
  919|       |        // Calculate the lengths of the beginning and end parts that can be displayed.
  920|      0|        size_t dots_len = 2;                 // The length of two dots.
  921|      0|        size_t available_len = out_len - 1;  // Subtract 1 to reserve space for the null terminator.
  922|      0|        size_t start_copy_len = available_len / 2;
  923|      0|        size_t end_copy_len = available_len - start_copy_len - dots_len;
  924|       |
  925|       |        // Copy the beginning part of the string.
  926|      0|        memcpy(out, scv_string->string, start_copy_len);
  927|      0|        out[start_copy_len] = '.';
  928|      0|        out[start_copy_len + 1] = '.';
  929|       |
  930|       |        // Copy the end part of the string if there is space for it after the dots.
  931|      0|        if (end_copy_len > 0) {
  ------------------
  |  Branch (931:13): [True: 0, False: 0]
  ------------------
  932|      0|            memcpy(out + start_copy_len + dots_len,
  933|      0|                   scv_string->string + copy_len - end_copy_len,
  934|      0|                   end_copy_len);
  935|      0|        }
  936|       |
  937|       |        // Ensure the output string is null-terminated by placing a null character at the end of the
  938|       |        // buffer.
  939|      0|        out[out_len - 1] = '\0';
  940|      0|    }
  941|       |
  942|     17|    return true;
  943|     17|}
print_string:
  945|  3.99k|bool print_string(char *out, size_t out_len, const uint8_t *src, size_t src_size) {
  946|  3.99k|    if (out == NULL || src == NULL || out_len == 0) {
  ------------------
  |  Branch (946:9): [True: 0, False: 3.99k]
  |  Branch (946:24): [True: 0, False: 3.99k]
  |  Branch (946:39): [True: 0, False: 3.99k]
  ------------------
  947|      0|        return false;
  948|      0|    }
  949|  3.99k|    if (src_size + 1 > out_len) {
  ------------------
  |  Branch (949:9): [True: 0, False: 3.99k]
  ------------------
  950|      0|        return false;
  951|      0|    }
  952|  3.99k|    memcpy(out, src, src_size);
  953|  3.99k|    out[src_size] = '\0';
  954|  3.99k|    return true;
  955|  3.99k|}
print_price:
  962|    335|                 size_t out_len) {
  963|    335|    uint64_t scaled_price = ((uint64_t) price->n * 10000000) / price->d;
  964|    335|    if (!print_amount(scaled_price, NULL, network_id, out, out_len)) {
  ------------------
  |  Branch (964:9): [True: 0, False: 335]
  ------------------
  965|      0|        return false;
  966|      0|    }
  967|       |
  968|    335|    if (asset_a != NULL && asset_b != NULL) {
  ------------------
  |  Branch (968:9): [True: 275, False: 60]
  |  Branch (968:28): [True: 275, False: 0]
  ------------------
  969|    275|        char tmp_asset_code[ASSET_CODE_MAX_LENGTH] = {0};
  970|    275|        if (strlcat(out, " ", out_len) >= out_len ||
  ------------------
  |  Branch (970:13): [True: 0, False: 275]
  ------------------
  971|    275|            !print_asset_name(asset_a, network_id, tmp_asset_code, sizeof(tmp_asset_code)) ||
  ------------------
  |  Branch (971:13): [True: 0, False: 275]
  ------------------
  972|    275|            strlcat(out, tmp_asset_code, out_len) >= out_len ||
  ------------------
  |  Branch (972:13): [True: 0, False: 275]
  ------------------
  973|    275|            strlcat(out, "/", out_len) >= out_len ||
  ------------------
  |  Branch (973:13): [True: 0, False: 275]
  ------------------
  974|    275|            !print_asset_name(asset_b, network_id, tmp_asset_code, sizeof(tmp_asset_code)) ||
  ------------------
  |  Branch (974:13): [True: 0, False: 275]
  ------------------
  975|    275|            strlcat(out, tmp_asset_code, out_len) >= out_len) {
  ------------------
  |  Branch (975:13): [True: 0, False: 275]
  ------------------
  976|      0|            return false;
  977|      0|        }
  978|    275|    }
  979|    335|    return true;
  980|    335|}
printer.c:print_summary:
  138|    819|                          uint8_t num_chars_r) {
  139|    819|    uint8_t result_len = num_chars_l + num_chars_r + 2;
  140|    819|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (140:9): [True: 0, False: 819]
  ------------------
  141|      0|        return false;
  142|      0|    }
  143|    819|    uint16_t in_len = strlen(in);
  144|    819|    if (in_len > result_len) {
  ------------------
  |  Branch (144:9): [True: 819, False: 0]
  ------------------
  145|    819|        memcpy(out, in, num_chars_l);
  146|    819|        out[num_chars_l] = '.';
  147|    819|        out[num_chars_l + 1] = '.';
  148|    819|        memcpy(out + num_chars_l + 2, in + in_len - num_chars_r, num_chars_r);
  149|    819|        out[result_len] = '\0';
  150|    819|    } else {
  151|      0|        memcpy(out, in, in_len);
  152|      0|        out[in_len] = '\0';
  153|      0|    }
  154|    819|    return true;
  155|    819|}
printer.c:int256_to_decimal:
  595|  1.15k|static bool int256_to_decimal(const uint8_t *value, size_t value_len, char *out, size_t out_len) {
  596|  1.15k|    if (value_len > INT256_LENGTH) {
  ------------------
  |  |    9|  1.15k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (596:9): [True: 0, False: 1.15k]
  ------------------
  597|       |        // Value length is bigger than INT256_LENGTH
  598|      0|        return false;
  599|      0|    }
  600|       |
  601|  1.15k|    bool is_negative = (value[0] & 0x80) != 0;
  602|  1.15k|    uint8_t n[INT256_LENGTH] = {0};
  603|       |
  604|  1.15k|    if (is_negative) {
  ------------------
  |  Branch (604:9): [True: 311, False: 839]
  ------------------
  605|       |        // Compute the absolute value using two's complement
  606|    311|        bool carry = true;
  607|  8.19k|        for (size_t i = value_len; i-- > 0;) {
  ------------------
  |  Branch (607:36): [True: 7.88k, False: 311]
  ------------------
  608|  7.88k|            n[INT256_LENGTH - value_len + i] = ~value[i] + carry;
  ------------------
  |  |    9|  7.88k|#define INT256_LENGTH                     32
  ------------------
  609|  7.88k|            carry = carry && (value[i] == 0);
  ------------------
  |  Branch (609:21): [True: 3.85k, False: 4.02k]
  |  Branch (609:30): [True: 3.54k, False: 311]
  ------------------
  610|  7.88k|        }
  611|    839|    } else {
  612|    839|        memcpy(n + INT256_LENGTH - value_len, value, value_len);
  ------------------
  |  |    9|    839|#define INT256_LENGTH                     32
  ------------------
  613|    839|    }
  614|       |
  615|  1.15k|    char *p = out + out_len;
  616|  1.15k|    size_t result_len = 0;
  617|       |
  618|  30.5k|    do {
  619|  30.5k|        if (p == out) {
  ------------------
  |  Branch (619:13): [True: 0, False: 30.5k]
  ------------------
  620|       |            // Not enough space in the output buffer
  621|      0|            return false;
  622|      0|        }
  623|       |
  624|  30.5k|        uint32_t remainder = 0;
  625|  1.00M|        for (size_t i = 0; i < INT256_LENGTH; ++i) {
  ------------------
  |  |    9|  1.00M|#define INT256_LENGTH                     32
  ------------------
  |  Branch (625:28): [True: 977k, False: 30.5k]
  ------------------
  626|   977k|            uint32_t temp = (remainder << 8) | n[i];
  627|   977k|            n[i] = temp / 10;
  628|   977k|            remainder = temp % 10;
  629|   977k|        }
  630|       |
  631|  30.5k|        *--p = '0' + remainder;
  632|  30.5k|        result_len++;
  633|  30.5k|    } while (!allzeroes(n, INT256_LENGTH));
  ------------------
  |  |    9|  30.5k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (633:14): [True: 29.3k, False: 1.15k]
  ------------------
  634|       |
  635|  1.15k|    if (is_negative) {
  ------------------
  |  Branch (635:9): [True: 311, False: 839]
  ------------------
  636|    311|        if (p == out) {
  ------------------
  |  Branch (636:13): [True: 0, False: 311]
  ------------------
  637|       |            // Not enough space in the output buffer
  638|      0|            return false;
  639|      0|        }
  640|    311|        *--p = '-';
  641|    311|        result_len++;
  642|    311|    }
  643|       |
  644|  1.15k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (644:9): [True: 0, False: 1.15k]
  ------------------
  645|       |        // Not enough space to hold the result and \0.
  646|      0|        return false;
  647|      0|    }
  648|       |
  649|  1.15k|    memmove(out, p, result_len);
  650|  1.15k|    out[result_len] = '\0';
  651|       |
  652|       |    // Clear the rest of the 'out' array
  653|       |    // Generally speaking, this is unnecessary,
  654|       |    // but handler_get_app_configuration requires that it must be followed by `\0`.
  655|  1.15k|    if (result_len + 1 < out_len) {
  ------------------
  |  Branch (655:9): [True: 1.15k, False: 0]
  ------------------
  656|  1.15k|        memset(out + result_len + 1, 0, out_len - result_len - 1);
  657|  1.15k|    }
  658|  1.15k|    return true;
  659|  1.15k|}
printer.c:allzeroes:
  523|   409k|static int allzeroes(const void *buf, size_t n) {
  524|   409k|    uint8_t *p = (uint8_t *) buf;
  525|  12.1M|    for (size_t i = 0; i < n; ++i) {
  ------------------
  |  Branch (525:24): [True: 12.0M, False: 82.8k]
  ------------------
  526|  12.0M|        if (p[i]) {
  ------------------
  |  Branch (526:13): [True: 326k, False: 11.7M]
  ------------------
  527|   326k|            return 0;
  528|   326k|        }
  529|  12.0M|    }
  530|  82.8k|    return 1;
  531|   409k|}
printer.c:uint256_to_decimal:
  533|  81.6k|static bool uint256_to_decimal(const uint8_t *value, size_t value_len, char *out, size_t out_len) {
  534|  81.6k|    if (value_len > INT256_LENGTH) {
  ------------------
  |  |    9|  81.6k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (534:9): [True: 0, False: 81.6k]
  ------------------
  535|      0|        return false;
  536|      0|    }
  537|       |
  538|  81.6k|    uint16_t n[16] = {0};
  539|       |    // Copy and right-align the number
  540|  81.6k|    memcpy((uint8_t *) n + INT256_LENGTH - value_len, value, value_len);
  ------------------
  |  |    9|  81.6k|#define INT256_LENGTH                     32
  ------------------
  541|       |
  542|       |    // Special case when value is 0
  543|  81.6k|    if (allzeroes(n, sizeof(n))) {
  ------------------
  |  Branch (543:9): [True: 12.4k, False: 69.2k]
  ------------------
  544|  12.4k|        if (out_len < 2) {
  ------------------
  |  Branch (544:13): [True: 0, False: 12.4k]
  ------------------
  545|       |            // Not enough space to hold "0" and \0.
  546|      0|            return false;
  547|      0|        }
  548|  12.4k|        out[0] = '0';
  549|  12.4k|        out[1] = '\0';
  550|  12.4k|        return true;
  551|  12.4k|    }
  552|       |
  553|       |    // Swap the byte order of each uint16_t element in the array
  554|  1.17M|    for (int i = 0; i < 16; i++) {
  ------------------
  |  Branch (554:21): [True: 1.10M, False: 69.2k]
  ------------------
  555|  1.10M|        n[i] = __builtin_bswap16(n[i]);
  556|  1.10M|    }
  557|       |
  558|  69.2k|    size_t result_len = 0;
  559|  69.2k|    int pos = out_len;
  560|       |
  561|   297k|    while (!allzeroes(n, sizeof(n))) {
  ------------------
  |  Branch (561:12): [True: 228k, False: 69.2k]
  ------------------
  562|   228k|        if (pos == 0) {
  ------------------
  |  Branch (562:13): [True: 0, False: 228k]
  ------------------
  563|      0|            return false;
  564|      0|        }
  565|   228k|        pos--;
  566|   228k|        result_len++;
  567|       |
  568|   228k|        uint32_t carry = 0;
  569|  3.87M|        for (int i = 0; i < 16; i++) {
  ------------------
  |  Branch (569:25): [True: 3.64M, False: 228k]
  ------------------
  570|  3.64M|            uint32_t digit = ((carry << 16) | n[i]);
  571|  3.64M|            n[i] = digit / 10;
  572|  3.64M|            carry = digit % 10;
  573|  3.64M|        }
  574|   228k|        out[pos] = '0' + carry;
  575|   228k|    }
  576|       |
  577|  69.2k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (577:9): [True: 0, False: 69.2k]
  ------------------
  578|       |        // Not enough space to hold the result and \0.
  579|      0|        return false;
  580|      0|    }
  581|       |
  582|       |    // Move the result to the beginning of the output buffer
  583|  69.2k|    memmove(out, out + pos, result_len);
  584|  69.2k|    out[result_len] = '\0';
  585|       |
  586|       |    // Clear the rest of the 'out' array
  587|       |    // Generally speaking, this is unnecessary,
  588|       |    // but handler_get_app_configuration requires that it must be followed by `\0`.
  589|  69.2k|    if (result_len + 1 < out_len) {
  ------------------
  |  Branch (589:9): [True: 69.2k, False: 0]
  ------------------
  590|  69.2k|        memset(out + result_len + 1, 0, out_len - result_len - 1);
  591|  69.2k|    }
  592|  69.2k|    return true;
  593|  69.2k|}

