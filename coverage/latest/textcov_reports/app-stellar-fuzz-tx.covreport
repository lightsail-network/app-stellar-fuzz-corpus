buffer_can_read:
   28|  66.6M|{
   29|  66.6M|    return buffer->size - buffer->offset >= n;
   30|  66.6M|}
buffer_seek_cur:
   44|   117M|{
   45|   117M|    if (buffer->offset + offset < buffer->offset ||  // overflow
  ------------------
  |  Branch (45:9): [True: 0, False: 117M]
  ------------------
   46|   117M|        buffer->offset + offset > buffer->size) {    // exceed buffer size
  ------------------
  |  Branch (46:9): [True: 711, False: 117M]
  ------------------
   47|    711|        return false;
   48|    711|    }
   49|       |
   50|   117M|    buffer->offset += offset;
   51|       |
   52|   117M|    return true;
   53|   117M|}
buffer_read_u32:
   97|  65.7M|{
   98|  65.7M|    if (!buffer_can_read(buffer, 4)) {
  ------------------
  |  Branch (98:9): [True: 2.85k, False: 65.7M]
  ------------------
   99|  2.85k|        *value = 0;
  100|       |
  101|  2.85k|        return false;
  102|  2.85k|    }
  103|       |
  104|  65.7M|    *value = ((endianness == BE) ? read_u32_be(buffer->ptr, buffer->offset)
  ------------------
  |  Branch (104:15): [True: 65.7M, False: 0]
  ------------------
  105|  65.7M|                                 : read_u32_le(buffer->ptr, buffer->offset));
  106|       |
  107|  65.7M|    buffer_seek_cur(buffer, 4);
  108|       |
  109|  65.7M|    return true;
  110|  65.7M|}
buffer_read_u64:
  113|  31.1k|{
  114|  31.1k|    if (!buffer_can_read(buffer, 8)) {
  ------------------
  |  Branch (114:9): [True: 29, False: 31.1k]
  ------------------
  115|     29|        *value = 0;
  116|       |
  117|     29|        return false;
  118|     29|    }
  119|       |
  120|  31.1k|    *value = ((endianness == BE) ? read_u64_be(buffer->ptr, buffer->offset)
  ------------------
  |  Branch (120:15): [True: 31.1k, False: 0]
  ------------------
  121|  31.1k|                                 : read_u64_le(buffer->ptr, buffer->offset));
  122|       |
  123|  31.1k|    buffer_seek_cur(buffer, 8);
  124|       |
  125|  31.1k|    return true;
  126|  31.1k|}

format_hex:
  157|  1.82k|{
  158|  1.82k|    if (out_len < 2 * in_len + 1) {
  ------------------
  |  Branch (158:9): [True: 0, False: 1.82k]
  ------------------
  159|      0|        return -1;
  160|      0|    }
  161|       |
  162|  1.82k|    const char hex[]   = "0123456789ABCDEF";
  163|  1.82k|    size_t     i       = 0;
  164|  1.82k|    int        written = 0;
  165|       |
  166|  62.4k|    while (i < in_len && (i * 2 + (2 + 1)) <= out_len) {
  ------------------
  |  Branch (166:12): [True: 60.6k, False: 1.82k]
  |  Branch (166:26): [True: 60.6k, False: 0]
  ------------------
  167|  60.6k|        uint8_t high_nibble = (in[i] & 0xF0) >> 4;
  168|  60.6k|        *out                = hex[high_nibble];
  169|  60.6k|        out++;
  170|       |
  171|  60.6k|        uint8_t low_nibble = in[i] & 0x0F;
  172|  60.6k|        *out               = hex[low_nibble];
  173|  60.6k|        out++;
  174|       |
  175|  60.6k|        i++;
  176|  60.6k|        written += 2;
  177|  60.6k|    }
  178|       |
  179|  1.82k|    *out = '\0';
  180|       |
  181|  1.82k|    return written + 1;
  182|  1.82k|}

read_u32_be:
   27|  65.7M|{
   28|  65.7M|    return (uint32_t) ptr[offset + 0] << 24 |  //
   29|  65.7M|           (uint32_t) ptr[offset + 1] << 16 |  //
   30|  65.7M|           (uint32_t) ptr[offset + 2] << 8 |   //
   31|  65.7M|           (uint32_t) ptr[offset + 3] << 0;
   32|  65.7M|}
read_u64_be:
   35|  31.1k|{
   36|  31.1k|    return (uint64_t) ptr[offset + 0] << 56 |  //
   37|  31.1k|           (uint64_t) ptr[offset + 1] << 48 |  //
   38|  31.1k|           (uint64_t) ptr[offset + 2] << 40 |  //
   39|  31.1k|           (uint64_t) ptr[offset + 3] << 32 |  //
   40|  31.1k|           (uint64_t) ptr[offset + 4] << 24 |  //
   41|  31.1k|           (uint64_t) ptr[offset + 5] << 16 |  //
   42|  31.1k|           (uint64_t) ptr[offset + 6] << 8 |   //
   43|  31.1k|           (uint64_t) ptr[offset + 7] << 0;
   44|  31.1k|}

LLVMFuzzerTestOneInput:
   23|  26.0k|int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   24|  26.0k|    envelope_t envelope;
   25|  26.0k|    bool data_exists = true;
   26|  26.0k|    bool is_op_header = false;
   27|  26.0k|    char detail_caption[DETAIL_CAPTION_MAX_LENGTH];
   28|  26.0k|    char detail_value[DETAIL_VALUE_MAX_LENGTH];
   29|  26.0k|    uint8_t signing_key[] = {0xe9, 0x33, 0x88, 0xbb, 0xfd, 0x2f, 0xbd, 0x11, 0x80, 0x6d, 0xd0,
   30|  26.0k|                             0xbd, 0x59, 0xce, 0xa9, 0x7,  0x9e, 0x7c, 0xc7, 0xc,  0xe7, 0xb1,
   31|  26.0k|                             0xe1, 0x54, 0xf1, 0x14, 0xcd, 0xfe, 0x4e, 0x46, 0x6e, 0xcd};
   32|       |
   33|  26.0k|    memset(&envelope, 0, sizeof(envelope_t));
   34|  26.0k|    if (parse_transaction_envelope(data, size, &envelope)) {
  ------------------
  |  Branch (34:9): [True: 7.52k, False: 18.5k]
  ------------------
   35|  7.52k|        formatter_data_t tx_fdata = {
   36|  7.52k|            .raw_data = data,
   37|  7.52k|            .raw_data_len = size,
   38|  7.52k|            .envelope = &envelope,
   39|  7.52k|            .caption = detail_caption,
   40|  7.52k|            .value = detail_value,
   41|  7.52k|            .signing_key = signing_key,
   42|  7.52k|            .caption_len = DETAIL_CAPTION_MAX_LENGTH,
  ------------------
  |  |    9|  7.52k|#define DETAIL_CAPTION_MAX_LENGTH 21
  ------------------
   43|  7.52k|            .value_len = DETAIL_VALUE_MAX_LENGTH,
  ------------------
  |  |   10|  7.52k|#define DETAIL_VALUE_MAX_LENGTH   105
  ------------------
   44|  7.52k|            .display_sequence = true,
   45|  7.52k|        };
   46|  7.52k|        reset_formatter();
   47|       |
   48|   236k|        while (true) {
   49|   236k|            if (!get_next_data(&tx_fdata, true, &data_exists, &is_op_header)) {
  ------------------
  |  Branch (49:17): [True: 376, False: 236k]
  ------------------
   50|    376|                break;
   51|    376|            }
   52|       |
   53|   236k|            if (!data_exists) {
  ------------------
  |  Branch (53:17): [True: 7.15k, False: 229k]
  ------------------
   54|  7.15k|                break;
   55|  7.15k|            }
   56|   236k|        }
   57|  7.52k|    }
   58|       |
   59|  26.0k|    memset(&envelope, 0, sizeof(envelope_t));
   60|  26.0k|    if (parse_soroban_authorization_envelope(data, size, &envelope)) {
  ------------------
  |  Branch (60:9): [True: 4.65k, False: 21.4k]
  ------------------
   61|  4.65k|        formatter_data_t auth_fdata = {
   62|  4.65k|            .raw_data = data,
   63|  4.65k|            .raw_data_len = size,
   64|  4.65k|            .envelope = &envelope,
   65|  4.65k|            .caption = detail_caption,
   66|  4.65k|            .value = detail_value,
   67|  4.65k|            .signing_key = signing_key,
   68|  4.65k|            .caption_len = DETAIL_CAPTION_MAX_LENGTH,
  ------------------
  |  |    9|  4.65k|#define DETAIL_CAPTION_MAX_LENGTH 21
  ------------------
   69|  4.65k|            .value_len = DETAIL_VALUE_MAX_LENGTH,
  ------------------
  |  |   10|  4.65k|#define DETAIL_VALUE_MAX_LENGTH   105
  ------------------
   70|  4.65k|            .display_sequence = true,
   71|  4.65k|            .plugin_check_presence = &plugin_check_presence,
   72|  4.65k|            .plugin_init_contract = &plugin_init_contract,
   73|  4.65k|            .plugin_query_data_pair_count = &plugin_query_data_pair_count,
   74|  4.65k|            .plugin_query_data_pair = &plugin_query_data_pair,
   75|  4.65k|        };
   76|       |
   77|  4.65k|        reset_formatter();
   78|       |
   79|  87.1k|        while (true) {
   80|  87.1k|            if (!get_next_data(&auth_fdata, true, &data_exists, &is_op_header)) {
  ------------------
  |  Branch (80:17): [True: 1.11k, False: 85.9k]
  ------------------
   81|  1.11k|                break;
   82|  1.11k|            }
   83|       |
   84|  85.9k|            if (!data_exists) {
  ------------------
  |  Branch (84:17): [True: 3.53k, False: 82.4k]
  ------------------
   85|  3.53k|                break;
   86|  3.53k|            }
   87|  85.9k|        }
   88|  4.65k|    }
   89|       |
   90|  26.0k|    return 0;
   91|  26.0k|}
fuzz_tx.c:plugin_check_presence:
   93|  30.4k|static bool plugin_check_presence(const uint8_t *contract_address) {
   94|  30.4k|    uint8_t expected[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   95|  30.4k|                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   96|  30.4k|                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
   97|  30.4k|    return memcmp(contract_address, expected, 32) == 0;
   98|  30.4k|}
fuzz_tx.c:plugin_init_contract:
  100|  3.90k|stellar_plugin_result_t plugin_init_contract(const uint8_t *contract_address) {
  101|       |    // Build-in token plugin
  102|  3.90k|    if (plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (102:9): [True: 3.90k, False: 0]
  ------------------
  103|  3.90k|        return STELLAR_PLUGIN_RESULT_OK;
  104|  3.90k|    }
  105|      0|    return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  106|  3.90k|}
fuzz_tx.c:plugin_query_data_pair_count:
  109|  3.90k|                                                     uint8_t *data_pair_count) {
  110|       |    // Build-in token plugin
  111|  3.90k|    if (plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (111:9): [True: 3.90k, False: 0]
  ------------------
  112|  3.90k|        *data_pair_count = 3;
  113|  3.90k|        return STELLAR_PLUGIN_RESULT_OK;
  114|  3.90k|    }
  115|      0|    return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  116|  3.90k|}
fuzz_tx.c:plugin_query_data_pair:
  123|  11.7k|                                               uint8_t value_len) {
  124|  11.7k|    if (!plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (124:9): [True: 0, False: 11.7k]
  ------------------
  125|      0|        return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  126|      0|    }
  127|  11.7k|    switch (data_pair_index) {
  128|  3.90k|        case 0:
  ------------------
  |  Branch (128:9): [True: 3.90k, False: 7.81k]
  ------------------
  129|  3.90k|            strncpy(caption, "caption 0", caption_len);
  130|  3.90k|            strncpy(value, "value 0", value_len);
  131|  3.90k|            break;
  132|  3.90k|        case 1:
  ------------------
  |  Branch (132:9): [True: 3.90k, False: 7.81k]
  ------------------
  133|  3.90k|            strncpy(caption, "caption 1", caption_len);
  134|  3.90k|            strncpy(value, "value 1", value_len);
  135|  3.90k|            break;
  136|  3.90k|        case 2:
  ------------------
  |  Branch (136:9): [True: 3.90k, False: 7.81k]
  ------------------
  137|  3.90k|            strncpy(caption, "caption 2", caption_len);
  138|  3.90k|            strncpy(value, "value 2", value_len);
  139|  3.90k|            break;
  140|      0|        default:
  ------------------
  |  Branch (140:9): [True: 0, False: 11.7k]
  ------------------
  141|      0|            return STELLAR_PLUGIN_RESULT_ERROR;
  142|  11.7k|    }
  143|  11.7k|    return STELLAR_PLUGIN_RESULT_OK;
  144|  11.7k|}

base32_encode:
   64|  63.0k|int base32_encode(const uint8_t *data, int length, uint8_t *result, int buf_size) {
   65|  63.0k|    if (length < 0 || length > (1 << 28)) {
  ------------------
  |  Branch (65:9): [True: 0, False: 63.0k]
  |  Branch (65:23): [True: 0, False: 63.0k]
  ------------------
   66|      0|        return -1;
   67|      0|    }
   68|  63.0k|    int count = 0;
   69|  63.0k|    if (length > 0) {
  ------------------
  |  Branch (69:9): [True: 63.0k, False: 0]
  ------------------
   70|  63.0k|        uint32_t buffer = data[0];
   71|  63.0k|        int next = 1;
   72|  63.0k|        int bits_left = 8;
   73|  3.62M|        while (count < buf_size && (bits_left > 0 || next < length)) {
  ------------------
  |  Branch (73:16): [True: 3.56M, False: 62.1k]
  |  Branch (73:37): [True: 3.17M, False: 383k]
  |  Branch (73:54): [True: 382k, False: 901]
  ------------------
   74|  3.56M|            if (bits_left < 5) {
  ------------------
  |  Branch (74:17): [True: 2.16M, False: 1.39M]
  ------------------
   75|  2.16M|                if (next < length) {
  ------------------
  |  Branch (75:21): [True: 2.16M, False: 886]
  ------------------
   76|  2.16M|                    buffer <<= 8;
   77|  2.16M|                    buffer |= data[next++] & 0xFF;
   78|  2.16M|                    bits_left += 8;
   79|  2.16M|                } else {
   80|    886|                    int pad = 5 - bits_left;
   81|    886|                    buffer <<= pad;
   82|    886|                    bits_left += pad;
   83|    886|                }
   84|  2.16M|            }
   85|  3.56M|            int index = 0x1F & (buffer >> (bits_left - 5));
   86|  3.56M|            bits_left -= 5;
   87|  3.56M|            result[count++] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"[index];
   88|  3.56M|        }
   89|  63.0k|    }
   90|  63.0k|    if (count < buf_size) {
  ------------------
  |  Branch (90:9): [True: 901, False: 62.1k]
  ------------------
   91|    901|        result[count] = '\000';
   92|    901|    }
   93|  63.0k|    return count;
   94|  63.0k|}

base64_encode:
   11|    160|bool base64_encode(const uint8_t *data, size_t in_len, char *out, size_t out_len) {
   12|    160|    size_t encoded_len = 4 * ((in_len + 2) / 3);
   13|    160|    if (encoded_len > out_len) {
  ------------------
  |  Branch (13:9): [True: 0, False: 160]
  ------------------
   14|      0|        return false;
   15|      0|    }
   16|       |
   17|    891|    for (unsigned int i = 0, j = 0; i < in_len;) {
  ------------------
  |  Branch (17:37): [True: 731, False: 160]
  ------------------
   18|    731|        uint32_t octet_a = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (18:28): [True: 731, False: 0]
  ------------------
   19|    731|        uint32_t octet_b = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (19:28): [True: 668, False: 63]
  ------------------
   20|    731|        uint32_t octet_c = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (20:28): [True: 615, False: 116]
  ------------------
   21|       |
   22|    731|        uint32_t triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;
   23|       |
   24|    731|        out[j++] = BASE64_ALPHABET[(triple >> 3 * 6) & 0x3F];
   25|    731|        out[j++] = BASE64_ALPHABET[(triple >> 2 * 6) & 0x3F];
   26|    731|        out[j++] = BASE64_ALPHABET[(triple >> 1 * 6) & 0x3F];
   27|    731|        out[j++] = BASE64_ALPHABET[(triple >> 0 * 6) & 0x3F];
   28|    731|    }
   29|       |
   30|    339|    for (int i = 0; i < BASE64_MOD_TABLE[in_len % 3]; i++) {
  ------------------
  |  Branch (30:21): [True: 179, False: 160]
  ------------------
   31|    179|        out[encoded_len - 1 - i] = '=';
   32|    179|    }
   33|       |
   34|    160|    out[encoded_len] = '\0';
   35|    160|    return true;
   36|    160|}

reset_formatter:
 2430|  12.1k|void reset_formatter(void) {
 2431|  12.1k|    explicit_bzero(formatter_stack, sizeof(formatter_stack));
 2432|  12.1k|    formatter_index = 0;
 2433|  12.1k|    current_data_index = 0;
 2434|  12.1k|}
get_next_data:
 2436|   323k|bool get_next_data(formatter_data_t *fdata, bool forward, bool *data_exists, bool *is_op_header) {
 2437|   323k|    if (current_data_index == 0 && formatter_index == 0 && !forward) {
  ------------------
  |  Branch (2437:9): [True: 125k, False: 198k]
  |  Branch (2437:36): [True: 12.1k, False: 113k]
  |  Branch (2437:60): [True: 0, False: 12.1k]
  ------------------
 2438|      0|        return false;
 2439|      0|    }
 2440|   323k|    explicit_bzero(fdata->caption, fdata->caption_len);
 2441|   323k|    explicit_bzero(fdata->value, fdata->value_len);
 2442|   323k|    *is_op_header = false;
 2443|   323k|    uint8_t total_data = get_data_count(fdata);
 2444|       |    // printf("current_data_index: %d, formatter_index: %d\n", current_data_index,
 2445|       |    // formatter_index);
 2446|   323k|    if (forward) {
  ------------------
  |  Branch (2446:9): [True: 323k, False: 0]
  ------------------
 2447|   323k|        if (current_data_index == 0 && formatter_index == 0) {
  ------------------
  |  Branch (2447:13): [True: 125k, False: 198k]
  |  Branch (2447:40): [True: 12.1k, False: 113k]
  ------------------
 2448|  12.1k|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|  12.1k|    {                           \
  |  |   31|  12.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12.1k]
  |  |  ------------------
  |  |   32|  12.1k|    }
  ------------------
 2449|  12.1k|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2449:17): [True: 0, False: 12.1k]
  ------------------
 2450|      0|                return false;
 2451|      0|            }
 2452|  12.1k|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|  12.1k|    {                           \
  |  |   31|  12.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12.1k]
  |  |  ------------------
  |  |   32|  12.1k|    }
  ------------------
 2453|  12.1k|            *data_exists = true;
 2454|   311k|        } else if (current_data_index < total_data - 1 &&
  ------------------
  |  Branch (2454:20): [True: 196k, False: 114k]
  ------------------
 2455|   311k|                   formatter_stack[formatter_index - 1] == NULL) {
  ------------------
  |  Branch (2455:20): [True: 49.7k, False: 147k]
  ------------------
 2456|  49.7k|            current_data_index++;
 2457|  49.7k|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|  49.7k|    {                           \
  |  |   31|  49.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 49.7k]
  |  |  ------------------
  |  |   32|  49.7k|    }
  ------------------
 2458|  49.7k|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2458:17): [True: 0, False: 49.7k]
  ------------------
 2459|      0|                return false;
 2460|      0|            }
 2461|  49.7k|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|  49.7k|    {                           \
  |  |   31|  49.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 10, False: 49.7k]
  |  |  ------------------
  |  |   32|  49.7k|    }
  ------------------
 2462|  49.7k|            *is_op_header = true;
 2463|  49.7k|            *data_exists = true;
 2464|   261k|        } else if (current_data_index == total_data - 1 &&
  ------------------
  |  Branch (2464:20): [True: 114k, False: 147k]
  ------------------
 2465|   261k|                   formatter_stack[formatter_index - 1] == NULL) {
  ------------------
  |  Branch (2465:20): [True: 10.6k, False: 104k]
  ------------------
 2466|  10.6k|            formatter_index++;  // we can back from the approve page
 2467|  10.6k|            *data_exists = false;
 2468|   251k|        } else {
 2469|   251k|            FORMATTER_CHECK(formatter_stack[formatter_index - 1](fdata));
  ------------------
  |  |   30|   251k|    {                           \
  |  |   31|   251k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1.48k, False: 249k]
  |  |  ------------------
  |  |   32|   251k|    }
  ------------------
 2470|   249k|            *data_exists = true;
 2471|   249k|        }
 2472|   323k|    } else {
 2473|      0|        if (current_data_index == 0 && formatter_index == 2) {
  ------------------
  |  Branch (2473:13): [True: 0, False: 0]
  |  Branch (2473:40): [True: 0, False: 0]
  ------------------
 2474|      0|            formatter_index = 0;
 2475|      0|            *data_exists = false;
 2476|      0|        } else if (current_data_index > 0 && formatter_index == 2) {
  ------------------
  |  Branch (2476:20): [True: 0, False: 0]
  |  Branch (2476:46): [True: 0, False: 0]
  ------------------
 2477|      0|            current_data_index -= 1;
 2478|      0|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2479|      0|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2479:17): [True: 0, False: 0]
  ------------------
 2480|      0|                return false;
 2481|      0|            }
 2482|      0|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2483|      0|            *data_exists = true;
 2484|      0|            if (current_data_index > 0) {
  ------------------
  |  Branch (2484:17): [True: 0, False: 0]
  ------------------
 2485|      0|                *is_op_header = true;
 2486|      0|            }
 2487|      0|        } else {
 2488|      0|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2489|      0|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2489:17): [True: 0, False: 0]
  ------------------
 2490|      0|                return false;
 2491|      0|            }
 2492|      0|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2493|      0|            *data_exists = true;
 2494|      0|            if (current_data_index > 0) {
  ------------------
  |  Branch (2494:17): [True: 0, False: 0]
  ------------------
 2495|      0|                *is_op_header = true;
 2496|      0|            }
 2497|      0|        }
 2498|      0|    }
 2499|       |
 2500|   322k|    return true;
 2501|   323k|}
formatter.c:get_data_count:
 2422|   323k|static uint8_t get_data_count(formatter_data_t *fdata) {
 2423|   323k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2423:9): [True: 87.1k, False: 236k]
  ------------------
 2424|  87.1k|        return 1;
 2425|  87.1k|    }
 2426|   236k|    uint8_t op_cnt = fdata->envelope->tx_details.tx.operations_count;
 2427|   236k|    return op_cnt + 1;
 2428|   323k|}
formatter.c:format:
 2400|  61.9k|static bool format(formatter_data_t *fdata, uint8_t data_index) {
 2401|  61.9k|    explicit_bzero(formatter_stack, sizeof(formatter_stack));
 2402|  61.9k|    formatter_index = 0;
 2403|  61.9k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2403:9): [True: 4.65k, False: 57.2k]
  ------------------
 2404|  4.65k|        return format_soroban_authorization(fdata);
 2405|  57.2k|    } else {
 2406|  57.2k|        if (data_index == 0) {
  ------------------
  |  Branch (2406:13): [True: 7.52k, False: 49.7k]
  ------------------
 2407|  7.52k|            return format_transaction_info(fdata);
 2408|  49.7k|        } else {
 2409|  49.7k|            uint8_t op_index = data_index - 1;
 2410|  49.7k|            if (!parse_transaction_operation(fdata->raw_data,
  ------------------
  |  Branch (2410:17): [True: 0, False: 49.7k]
  ------------------
 2411|  49.7k|                                             fdata->raw_data_len,
 2412|  49.7k|                                             fdata->envelope,
 2413|  49.7k|                                             op_index)) {
 2414|      0|                return false;
 2415|  49.7k|            };
 2416|  49.7k|            FORMATTER_CHECK(push_to_formatter_stack(&format_confirm_operation))
  ------------------
  |  |   30|  49.7k|    {                           \
  |  |   31|  49.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 49.7k]
  |  |  ------------------
  |  |   32|  49.7k|    }
  ------------------
 2417|  49.7k|        }
 2418|  57.2k|    }
 2419|  49.7k|    return true;
 2420|  61.9k|}
formatter.c:format_soroban_authorization:
 2391|  4.65k|static bool format_soroban_authorization(formatter_data_t *fdata) {
 2392|  4.65k|    if (fdata->envelope->network != 0) {
  ------------------
  |  Branch (2392:9): [True: 4.29k, False: 357]
  ------------------
 2393|  4.29k|        FORMATTER_CHECK(push_to_formatter_stack(&format_network))
  ------------------
  |  |   30|  4.29k|    {                           \
  |  |   31|  4.29k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.29k]
  |  |  ------------------
  |  |   32|  4.29k|    }
  ------------------
 2394|  4.29k|    } else {
 2395|    357|        FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_nonce))
  ------------------
  |  |   30|    357|    {                           \
  |  |   31|    357|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 357]
  |  |  ------------------
  |  |   32|    357|    }
  ------------------
 2396|    357|    }
 2397|  4.65k|    return true;
 2398|  4.65k|}
formatter.c:format_network:
 2371|  11.4k|static bool format_network(formatter_data_t *fdata) {
 2372|  11.4k|    STRLCPY(fdata->caption, "Network", fdata->caption_len);
  ------------------
  |  |   35|  11.4k|    {                                         \
  |  |   36|  11.4k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  11.4k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 11.4k]
  |  |  ------------------
  |  |   38|  11.4k|    }
  ------------------
 2373|  11.4k|    STRLCPY(fdata->value, (char *) PIC(NETWORK_NAMES[fdata->envelope->network]), fdata->value_len);
  ------------------
  |  |   35|  11.4k|    {                                         \
  |  |   36|  11.4k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  11.4k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 11.4k]
  |  |  ------------------
  |  |   38|  11.4k|    }
  ------------------
 2374|  11.4k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2374:9): [True: 4.29k, False: 7.14k]
  ------------------
 2375|  4.29k|        FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_nonce))
  ------------------
  |  |   30|  4.29k|    {                           \
  |  |   31|  4.29k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.29k]
  |  |  ------------------
  |  |   32|  4.29k|    }
  ------------------
 2376|  7.14k|    } else {
 2377|  7.14k|        return get_tx_details_formatter(fdata);
 2378|  7.14k|    }
 2379|  4.29k|    return true;
 2380|  11.4k|}
formatter.c:get_tx_details_formatter:
 2330|  7.52k|static bool get_tx_details_formatter(formatter_data_t *fdata) {
 2331|  7.52k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX_FEE_BUMP) {
  ------------------
  |  Branch (2331:9): [True: 86, False: 7.44k]
  ------------------
 2332|     86|        FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_details))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 2333|     86|    }
 2334|       |
 2335|  7.52k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX) {
  ------------------
  |  Branch (2335:9): [True: 7.44k, False: 86]
  ------------------
 2336|  7.44k|        if (fdata->envelope->tx_details.tx.memo.type != MEMO_NONE) {
  ------------------
  |  Branch (2336:13): [True: 519, False: 6.92k]
  ------------------
 2337|    519|            FORMATTER_CHECK(push_to_formatter_stack(&format_memo))
  ------------------
  |  |   30|    519|    {                           \
  |  |   31|    519|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 519]
  |  |  ------------------
  |  |   32|    519|    }
  ------------------
 2338|  6.92k|        } else {
 2339|  6.92k|            FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|  6.92k|    {                           \
  |  |   31|  6.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.92k]
  |  |  ------------------
  |  |   32|  6.92k|    }
  ------------------
 2340|  6.92k|        }
 2341|  7.44k|    }
 2342|       |
 2343|  7.52k|    return true;
 2344|  7.52k|}
formatter.c:format_fee_bump_transaction_details:
 2322|     86|static bool format_fee_bump_transaction_details(formatter_data_t *fdata) {
 2323|     86|    (void) fdata;
 2324|     86|    STRLCPY(fdata->caption, "Fee Bump", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 2325|     86|    STRLCPY(fdata->value, "Transaction Details", fdata->value_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 2326|     86|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_source))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 2327|     86|    return true;
 2328|     86|}
formatter.c:format_fee_bump_transaction_source:
 2299|     86|static bool format_fee_bump_transaction_source(formatter_data_t *fdata) {
 2300|     86|    STRLCPY(fdata->caption, "Fee Source", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 2301|     86|    if (fdata->envelope->type == ENVELOPE_TYPE_TX_FEE_BUMP &&
  ------------------
  |  Branch (2301:9): [True: 86, False: 0]
  ------------------
 2302|     86|        fdata->envelope->tx_details.fee_bump_tx.fee_source.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (2302:9): [True: 82, False: 4]
  ------------------
 2303|     86|        memcmp(fdata->envelope->tx_details.fee_bump_tx.fee_source.ed25519,
  ------------------
  |  Branch (2303:9): [True: 36, False: 46]
  ------------------
 2304|     82|               fdata->signing_key,
 2305|     82|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|     82|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 2306|     36|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.fee_bump_tx.fee_source,
  ------------------
  |  |   30|     36|    {                           \
  |  |   31|     36|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   32|     36|    }
  ------------------
 2307|     36|                                            fdata->value,
 2308|     36|                                            fdata->value_len,
 2309|     36|                                            6,
 2310|     36|                                            6))
 2311|     50|    } else {
 2312|     50|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.fee_bump_tx.fee_source,
  ------------------
  |  |   30|     50|    {                           \
  |  |   31|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   32|     50|    }
  ------------------
 2313|     50|                                            fdata->value,
 2314|     50|                                            fdata->value_len,
 2315|     50|                                            0,
 2316|     50|                                            0))
 2317|     50|    }
 2318|     86|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_fee))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 2319|     86|    return true;
 2320|     86|}
formatter.c:format_fee_bump_transaction_fee:
 2287|     86|static bool format_fee_bump_transaction_fee(formatter_data_t *fdata) {
 2288|     86|    STRLCPY(fdata->caption, "Max Fee", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
 2289|     86|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
 2290|     86|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.fee_bump_tx.fee,
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 2291|     86|                                 &asset,
 2292|     86|                                 fdata->envelope->network,
 2293|     86|                                 fdata->value,
 2294|     86|                                 fdata->value_len))
 2295|     86|    FORMATTER_CHECK(push_to_formatter_stack(&format_transaction_details))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 2296|     86|    return true;
 2297|     86|}
formatter.c:format_transaction_details:
  285|     86|static bool format_transaction_details(formatter_data_t *fdata) {
  286|     86|    switch (fdata->envelope->type) {
  287|     86|        case ENVELOPE_TYPE_TX_FEE_BUMP:
  ------------------
  |  Branch (287:9): [True: 86, False: 0]
  ------------------
  288|     86|            STRLCPY(fdata->caption, "InnerTx", fdata->caption_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
  289|     86|            break;
  290|      0|        case ENVELOPE_TYPE_TX:
  ------------------
  |  Branch (290:9): [True: 0, False: 86]
  ------------------
  291|      0|            STRLCPY(fdata->caption, "Transaction", fdata->caption_len);
  ------------------
  |  |   35|      0|    {                                         \
  |  |   36|      0|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      0|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   38|      0|    }
  ------------------
  292|      0|            break;
  293|      0|        default:
  ------------------
  |  Branch (293:9): [True: 0, False: 86]
  ------------------
  294|      0|            return false;
  295|     86|    }
  296|     86|    STRLCPY(fdata->value, "Details", fdata->value_len);
  ------------------
  |  |   35|     86|    {                                         \
  |  |   36|     86|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     86|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   38|     86|    }
  ------------------
  297|     86|    if (fdata->envelope->tx_details.tx.memo.type != MEMO_NONE) {
  ------------------
  |  Branch (297:9): [True: 43, False: 43]
  ------------------
  298|     43|        FORMATTER_CHECK(push_to_formatter_stack(&format_memo))
  ------------------
  |  |   30|     43|    {                           \
  |  |   31|     43|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   32|     43|    }
  ------------------
  299|     43|    } else {
  300|     43|        FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|     43|    {                           \
  |  |   31|     43|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   32|     43|    }
  ------------------
  301|     43|    }
  302|     86|    return true;
  303|     86|}
formatter.c:format_memo:
  242|    562|static bool format_memo(formatter_data_t *fdata) {
  243|    562|    memo_t *memo = &fdata->envelope->tx_details.tx.memo;
  244|    562|    switch (memo->type) {
  245|     26|        case MEMO_ID: {
  ------------------
  |  Branch (245:9): [True: 26, False: 536]
  ------------------
  246|     26|            STRLCPY(fdata->caption, "Memo ID", fdata->caption_len);
  ------------------
  |  |   35|     26|    {                                         \
  |  |   36|     26|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     26|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   38|     26|    }
  ------------------
  247|     26|            FORMATTER_CHECK(print_uint64_num(memo->id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     26|    {                           \
  |  |   31|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   32|     26|    }
  ------------------
  248|     26|            break;
  249|     26|        }
  250|    524|        case MEMO_TEXT: {
  ------------------
  |  Branch (250:9): [True: 524, False: 38]
  ------------------
  251|    524|            STRLCPY(fdata->caption, "Memo Text", fdata->caption_len);
  ------------------
  |  |   35|    524|    {                                         \
  |  |   36|    524|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    524|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 524]
  |  |  ------------------
  |  |   38|    524|    }
  ------------------
  252|    524|            if (is_printable_binary(memo->text.text, memo->text.text_size)) {
  ------------------
  |  Branch (252:17): [True: 395, False: 129]
  ------------------
  253|    395|                FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|    395|    {                           \
  |  |   31|    395|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 395]
  |  |  ------------------
  |  |   32|    395|    }
  ------------------
  254|    395|                                             fdata->value_len,
  255|    395|                                             memo->text.text,
  256|    395|                                             memo->text.text_size))
  257|    395|            } else {
  258|    129|                STRLCPY(fdata->value, "Base64: ", fdata->value_len)
  ------------------
  |  |   35|    129|    {                                         \
  |  |   36|    129|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    129|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 129]
  |  |  ------------------
  |  |   38|    129|    }
  ------------------
  259|    129|                FORMATTER_CHECK(base64_encode(memo->text.text,
  ------------------
  |  |   30|    129|    {                           \
  |  |   31|    129|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 129]
  |  |  ------------------
  |  |   32|    129|    }
  ------------------
  260|    129|                                              memo->text.text_size,
  261|    129|                                              fdata->value + strlen(fdata->value),
  262|    129|                                              fdata->value_len - strlen(fdata->value)))
  263|    129|            }
  264|    524|            break;
  265|    524|        }
  266|    524|        case MEMO_HASH: {
  ------------------
  |  Branch (266:9): [True: 6, False: 556]
  ------------------
  267|      6|            STRLCPY(fdata->caption, "Memo Hash", fdata->caption_len);
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
  268|      6|            FORMATTER_CHECK(
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
  269|      6|                print_binary(memo->hash, HASH_SIZE, fdata->value, fdata->value_len, 0, 0))
  270|      6|            break;
  271|      6|        }
  272|      6|        case MEMO_RETURN: {
  ------------------
  |  Branch (272:9): [True: 6, False: 556]
  ------------------
  273|      6|            STRLCPY(fdata->caption, "Memo Return", fdata->caption_len);
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
  274|      6|            FORMATTER_CHECK(
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
  275|      6|                print_binary(memo->hash, HASH_SIZE, fdata->value, fdata->value_len, 0, 0))
  276|      6|            break;
  277|      6|        }
  278|      6|        default:
  ------------------
  |  Branch (278:9): [True: 0, False: 562]
  ------------------
  279|      0|            return false;
  280|    562|    }
  281|    562|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|    562|    {                           \
  |  |   31|    562|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 562]
  |  |  ------------------
  |  |   32|    562|    }
  ------------------
  282|    562|    return true;
  283|    562|}
formatter.c:format_fee:
  226|  7.52k|static bool format_fee(formatter_data_t *fdata) {
  227|  7.52k|    STRLCPY(fdata->caption, "Max Fee", fdata->caption_len);
  ------------------
  |  |   35|  7.52k|    {                                         \
  |  |   36|  7.52k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  7.52k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7.52k]
  |  |  ------------------
  |  |   38|  7.52k|    }
  ------------------
  228|  7.52k|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
  229|  7.52k|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.fee,
  ------------------
  |  |   30|  7.52k|    {                           \
  |  |   31|  7.52k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.52k]
  |  |  ------------------
  |  |   32|  7.52k|    }
  ------------------
  230|  7.52k|                                 &asset,
  231|  7.52k|                                 fdata->envelope->network,
  232|  7.52k|                                 fdata->value,
  233|  7.52k|                                 fdata->value_len))
  234|  7.52k|    if (fdata->display_sequence) {
  ------------------
  |  Branch (234:9): [True: 7.52k, False: 0]
  ------------------
  235|  7.52k|        FORMATTER_CHECK(push_to_formatter_stack(&format_sequence))
  ------------------
  |  |   30|  7.52k|    {                           \
  |  |   31|  7.52k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.52k]
  |  |  ------------------
  |  |   32|  7.52k|    }
  ------------------
  236|  7.52k|    } else {
  237|      0|        FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds))
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
  238|      0|    }
  239|  7.52k|    return true;
  240|  7.52k|}
formatter.c:format_sequence:
  217|  7.52k|static bool format_sequence(formatter_data_t *fdata) {
  218|  7.52k|    STRLCPY(fdata->caption, "Sequence Num", fdata->caption_len);
  ------------------
  |  |   35|  7.52k|    {                                         \
  |  |   36|  7.52k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  7.52k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7.52k]
  |  |  ------------------
  |  |   38|  7.52k|    }
  ------------------
  219|  7.52k|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.sequence_number,
  ------------------
  |  |   30|  7.52k|    {                           \
  |  |   31|  7.52k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.52k]
  |  |  ------------------
  |  |   32|  7.52k|    }
  ------------------
  220|  7.52k|                                     fdata->value,
  221|  7.52k|                                     fdata->value_len))
  222|  7.52k|    FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds))
  ------------------
  |  |   30|  7.52k|    {                           \
  |  |   31|  7.52k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.52k]
  |  |  ------------------
  |  |   32|  7.52k|    }
  ------------------
  223|  7.52k|    return true;
  224|  7.52k|}
formatter.c:format_time_bounds:
  204|  7.52k|static bool format_time_bounds(formatter_data_t *fdata) {
  205|  7.52k|    if (!fdata->envelope->tx_details.tx.cond.time_bounds_present ||
  ------------------
  |  Branch (205:9): [True: 6.95k, False: 571]
  ------------------
  206|  7.52k|        (fdata->envelope->tx_details.tx.cond.time_bounds.min_time == 0 &&
  ------------------
  |  Branch (206:10): [True: 467, False: 104]
  ------------------
  207|  7.09k|         fdata->envelope->tx_details.tx.cond.time_bounds.max_time == 0)) {
  ------------------
  |  Branch (207:10): [True: 139, False: 328]
  ------------------
  208|  7.09k|        return format_ledger_bounds(fdata);
  209|  7.09k|    } else if (fdata->envelope->tx_details.tx.cond.time_bounds.min_time != 0) {
  ------------------
  |  Branch (209:16): [True: 104, False: 328]
  ------------------
  210|    104|        return format_time_bounds_min_time(fdata);
  211|    328|    } else {
  212|    328|        return format_time_bounds_max_time(fdata);
  213|    328|    }
  214|      0|    return true;
  215|  7.52k|}
formatter.c:format_ledger_bounds:
  168|  7.48k|static bool format_ledger_bounds(formatter_data_t *fdata) {
  169|  7.48k|    if (!fdata->envelope->tx_details.tx.cond.ledger_bounds_present ||
  ------------------
  |  Branch (169:9): [True: 7.43k, False: 49]
  ------------------
  170|  7.48k|        (fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger == 0 &&
  ------------------
  |  Branch (170:10): [True: 20, False: 29]
  ------------------
  171|  7.44k|         fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger == 0)) {
  ------------------
  |  Branch (171:10): [True: 12, False: 8]
  ------------------
  172|  7.44k|        return format_min_seq_num_prepare(fdata);
  173|  7.44k|    } else if (fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger != 0) {
  ------------------
  |  Branch (173:16): [True: 29, False: 8]
  ------------------
  174|     29|        return format_ledger_bounds_min_ledger(fdata);
  175|     29|    } else {
  176|      8|        return format_ledger_bounds_max_ledger(fdata);
  177|      8|    }
  178|      0|    return true;
  179|  7.48k|}
formatter.c:format_min_seq_num_prepare:
  137|  7.48k|static bool format_min_seq_num_prepare(formatter_data_t *fdata) {
  138|  7.48k|    if (!fdata->envelope->tx_details.tx.cond.min_seq_num_present ||
  ------------------
  |  Branch (138:9): [True: 7.45k, False: 28]
  ------------------
  139|  7.48k|        fdata->envelope->tx_details.tx.cond.min_seq_num == 0) {
  ------------------
  |  Branch (139:9): [True: 21, False: 7]
  ------------------
  140|  7.47k|        return format_min_seq_age_prepare(fdata);
  141|  7.47k|    } else {
  142|      7|        return format_min_seq_num(fdata);
  143|      7|    }
  144|  7.48k|}
formatter.c:format_min_seq_age_prepare:
  119|  7.48k|static bool format_min_seq_age_prepare(formatter_data_t *fdata) {
  120|  7.48k|    if (fdata->envelope->tx_details.tx.cond.min_seq_age == 0) {
  ------------------
  |  Branch (120:9): [True: 7.44k, False: 36]
  ------------------
  121|  7.44k|        format_min_seq_ledger_gap_prepare(fdata);
  122|  7.44k|    } else {
  123|     36|        format_min_seq_age(fdata);
  124|     36|    }
  125|  7.48k|    return true;
  126|  7.48k|}
formatter.c:format_min_seq_ledger_gap_prepare:
  102|  7.48k|static bool format_min_seq_ledger_gap_prepare(formatter_data_t *fdata) {
  103|  7.48k|    if (fdata->envelope->tx_details.tx.cond.min_seq_ledger_gap == 0) {
  ------------------
  |  Branch (103:9): [True: 7.47k, False: 14]
  ------------------
  104|  7.47k|        return format_transaction_source(fdata);
  105|  7.47k|    } else {
  106|     14|        return format_min_seq_ledger_gap(fdata);
  107|     14|    }
  108|  7.48k|}
formatter.c:format_transaction_source:
   70|  7.48k|static bool format_transaction_source(formatter_data_t *fdata) {
   71|  7.48k|    STRLCPY(fdata->caption, "Tx Source", fdata->caption_len);
  ------------------
  |  |   35|  7.48k|    {                                         \
  |  |   36|  7.48k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  7.48k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7.48k]
  |  |  ------------------
  |  |   38|  7.48k|    }
  ------------------
   72|  7.48k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (72:9): [True: 7.39k, False: 86]
  ------------------
   73|  7.48k|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (73:9): [True: 7.29k, False: 100]
  ------------------
   74|  7.48k|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (74:9): [True: 707, False: 6.59k]
  ------------------
   75|  7.29k|               fdata->signing_key,
   76|  7.29k|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|  7.29k|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
   77|    707|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.source_account,
  ------------------
  |  |   30|    707|    {                           \
  |  |   31|    707|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 707]
  |  |  ------------------
  |  |   32|    707|    }
  ------------------
   78|    707|                                            fdata->value,
   79|    707|                                            fdata->value_len,
   80|    707|                                            6,
   81|    707|                                            6))
   82|  6.77k|    } else {
   83|  6.77k|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.source_account,
  ------------------
  |  |   30|  6.77k|    {                           \
  |  |   31|  6.77k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.77k]
  |  |  ------------------
  |  |   32|  6.77k|    }
  ------------------
   84|  6.77k|                                            fdata->value,
   85|  6.77k|                                            fdata->value_len,
   86|  6.77k|                                            0,
   87|  6.77k|                                            0))
   88|  6.77k|    }
   89|  7.48k|    FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  7.48k|    {                           \
  |  |   31|  7.48k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.48k]
  |  |  ------------------
  |  |   32|  7.48k|    }
  ------------------
   90|  7.48k|    return true;
   91|  7.48k|}
formatter.c:format_min_seq_ledger_gap:
   93|     14|static bool format_min_seq_ledger_gap(formatter_data_t *fdata) {
   94|     14|    STRLCPY(fdata->caption, "Min Seq Ledger Gap", fdata->caption_len);
  ------------------
  |  |   35|     14|    {                                         \
  |  |   36|     14|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     14|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   38|     14|    }
  ------------------
   95|     14|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_ledger_gap,
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
   96|     14|                                     fdata->value,
   97|     14|                                     fdata->value_len))
   98|     14|    FORMATTER_CHECK(push_to_formatter_stack(&format_transaction_source))
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
   99|     14|    return true;
  100|     14|}
formatter.c:format_min_seq_age:
  110|     36|static bool format_min_seq_age(formatter_data_t *fdata) {
  111|     36|    STRLCPY(fdata->caption, "Min Seq Age", fdata->caption_len);
  ------------------
  |  |   35|     36|    {                                         \
  |  |   36|     36|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     36|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   38|     36|    }
  ------------------
  112|     36|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_age,
  ------------------
  |  |   30|     36|    {                           \
  |  |   31|     36|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   32|     36|    }
  ------------------
  113|     36|                                     fdata->value,
  114|     36|                                     fdata->value_len))
  115|     36|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_ledger_gap_prepare))
  ------------------
  |  |   30|     36|    {                           \
  |  |   31|     36|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 36]
  |  |  ------------------
  |  |   32|     36|    }
  ------------------
  116|     36|    return true;
  117|     36|}
formatter.c:format_min_seq_num:
  128|      7|static bool format_min_seq_num(formatter_data_t *fdata) {
  129|      7|    STRLCPY(fdata->caption, "Min Seq Num", fdata->caption_len);
  ------------------
  |  |   35|      7|    {                                         \
  |  |   36|      7|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      7|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   38|      7|    }
  ------------------
  130|      7|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_num,
  ------------------
  |  |   30|      7|    {                           \
  |  |   31|      7|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   32|      7|    }
  ------------------
  131|      7|                                     fdata->value,
  132|      7|                                     fdata->value_len))
  133|      7|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_age_prepare))
  ------------------
  |  |   30|      7|    {                           \
  |  |   31|      7|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   32|      7|    }
  ------------------
  134|      7|    return true;
  135|      7|}
formatter.c:format_ledger_bounds_min_ledger:
  155|     29|static bool format_ledger_bounds_min_ledger(formatter_data_t *fdata) {
  156|     29|    STRLCPY(fdata->caption, "Ledger Bounds Min", fdata->caption_len);
  ------------------
  |  |   35|     29|    {                                         \
  |  |   36|     29|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     29|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   38|     29|    }
  ------------------
  157|     29|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger,
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  158|     29|                                     fdata->value,
  159|     29|                                     fdata->value_len))
  160|     29|    if (fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger != 0) {
  ------------------
  |  Branch (160:9): [True: 17, False: 12]
  ------------------
  161|     17|        FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds_max_ledger))
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
  162|     17|    } else {
  163|     12|        FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_num_prepare))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  164|     12|    }
  165|     29|    return true;
  166|     29|}
formatter.c:format_ledger_bounds_max_ledger:
  146|     25|static bool format_ledger_bounds_max_ledger(formatter_data_t *fdata) {
  147|     25|    STRLCPY(fdata->caption, "Ledger Bounds Max", fdata->caption_len);
  ------------------
  |  |   35|     25|    {                                         \
  |  |   36|     25|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     25|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   38|     25|    }
  ------------------
  148|     25|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger,
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  149|     25|                                     fdata->value,
  150|     25|                                     fdata->value_len))
  151|     25|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_num_prepare))
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  152|     25|    return true;
  153|     25|}
formatter.c:format_time_bounds_min_time:
  190|    104|static bool format_time_bounds_min_time(formatter_data_t *fdata) {
  191|    104|    STRLCPY(fdata->caption, "Valid After (UTC)", fdata->caption_len);
  ------------------
  |  |   35|    104|    {                                         \
  |  |   36|    104|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    104|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 104]
  |  |  ------------------
  |  |   38|    104|    }
  ------------------
  192|    104|    FORMATTER_CHECK(print_time(fdata->envelope->tx_details.tx.cond.time_bounds.min_time,
  ------------------
  |  |   30|    104|    {                           \
  |  |   31|    104|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 29, False: 75]
  |  |  ------------------
  |  |   32|    104|    }
  ------------------
  193|    104|                               fdata->value,
  194|    104|                               fdata->value_len))
  195|       |
  196|     75|    if (fdata->envelope->tx_details.tx.cond.time_bounds.max_time != 0) {
  ------------------
  |  Branch (196:9): [True: 63, False: 12]
  ------------------
  197|     63|        FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds_max_time))
  ------------------
  |  |   30|     63|    {                           \
  |  |   31|     63|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 63]
  |  |  ------------------
  |  |   32|     63|    }
  ------------------
  198|     63|    } else {
  199|     12|        FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  200|     12|    }
  201|     75|    return true;
  202|     75|}
formatter.c:format_time_bounds_max_time:
  181|    391|static bool format_time_bounds_max_time(formatter_data_t *fdata) {
  182|    391|    STRLCPY(fdata->caption, "Valid Before (UTC)", fdata->caption_len);
  ------------------
  |  |   35|    391|    {                                         \
  |  |   36|    391|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    391|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 391]
  |  |  ------------------
  |  |   38|    391|    }
  ------------------
  183|    391|    FORMATTER_CHECK(print_time(fdata->envelope->tx_details.tx.cond.time_bounds.max_time,
  ------------------
  |  |   30|    391|    {                           \
  |  |   31|    391|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 14, False: 377]
  |  |  ------------------
  |  |   32|    391|    }
  ------------------
  184|    391|                               fdata->value,
  185|    391|                               fdata->value_len))
  186|    377|    FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds))
  ------------------
  |  |   30|    377|    {                           \
  |  |   31|    377|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 377]
  |  |  ------------------
  |  |   32|    377|    }
  ------------------
  187|    377|    return true;
  188|    377|}
formatter.c:format_soroban_authorization_nonce:
 2356|  4.65k|static bool format_soroban_authorization_nonce(formatter_data_t *fdata) {
 2357|       |    // avoid the root invoke_contract_args be overwritten by the sub-invocation
 2358|  4.65k|    if (!parse_soroban_authorization_envelope(fdata->raw_data,
  ------------------
  |  Branch (2358:9): [True: 0, False: 4.65k]
  ------------------
 2359|  4.65k|                                              fdata->raw_data_len,
 2360|  4.65k|                                              fdata->envelope)) {
 2361|      0|        return false;
 2362|  4.65k|    };
 2363|  4.65k|    STRLCPY(fdata->caption, "Nonce", fdata->caption_len);
  ------------------
  |  |   35|  4.65k|    {                                         \
  |  |   36|  4.65k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  4.65k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4.65k]
  |  |  ------------------
  |  |   38|  4.65k|    }
  ------------------
 2364|  4.65k|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->soroban_authorization.nonce,
  ------------------
  |  |   30|  4.65k|    {                           \
  |  |   31|  4.65k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.65k]
  |  |  ------------------
  |  |   32|  4.65k|    }
  ------------------
 2365|  4.65k|                                     fdata->value,
 2366|  4.65k|                                     fdata->value_len))
 2367|  4.65k|    FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_sig_exp))
  ------------------
  |  |   30|  4.65k|    {                           \
  |  |   31|  4.65k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.65k]
  |  |  ------------------
  |  |   32|  4.65k|    }
  ------------------
 2368|  4.65k|    return true;
 2369|  4.65k|}
formatter.c:format_soroban_authorization_sig_exp:
 2346|  4.65k|static bool format_soroban_authorization_sig_exp(formatter_data_t *fdata) {
 2347|  4.65k|    STRLCPY(fdata->caption, "Sig Exp Ledger", fdata->caption_len);
  ------------------
  |  |   35|  4.65k|    {                                         \
  |  |   36|  4.65k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  4.65k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4.65k]
  |  |  ------------------
  |  |   38|  4.65k|    }
  ------------------
 2348|  4.65k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  4.65k|    {                           \
  |  |   31|  4.65k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.65k]
  |  |  ------------------
  |  |   32|  4.65k|    }
  ------------------
 2349|  4.65k|        print_uint64_num(fdata->envelope->soroban_authorization.signature_expiration_ledger,
 2350|  4.65k|                         fdata->value,
 2351|  4.65k|                         fdata->value_len))
 2352|  4.65k|    FORMATTER_CHECK(push_to_formatter_stack(&format_auth_function));
  ------------------
  |  |   30|  4.65k|    {                           \
  |  |   31|  4.65k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.65k]
  |  |  ------------------
  |  |   32|  4.65k|    }
  ------------------
 2353|  4.65k|    return true;
 2354|  4.65k|}
formatter.c:format_auth_function:
 2205|  4.65k|static bool format_auth_function(formatter_data_t *fdata) {
 2206|  4.65k|    switch (fdata->envelope->soroban_authorization.auth_function_type) {
 2207|  4.54k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
  ------------------
  |  Branch (2207:9): [True: 4.54k, False: 108]
  ------------------
 2208|  4.54k|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|  4.54k|    {                                         \
  |  |   36|  4.54k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  4.54k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4.54k]
  |  |  ------------------
  |  |   38|  4.54k|    }
  ------------------
 2209|  4.54k|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|  4.54k|    {                                         \
  |  |   36|  4.54k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  4.54k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4.54k]
  |  |  ------------------
  |  |   38|  4.54k|    }
  ------------------
 2210|  4.54k|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_contract_id));
  ------------------
  |  |   30|  4.54k|    {                           \
  |  |   31|  4.54k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.54k]
  |  |  ------------------
  |  |   32|  4.54k|    }
  ------------------
 2211|  4.54k|            break;
 2212|    108|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (2212:9): [True: 108, False: 4.54k]
  ------------------
 2213|    108|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    108|    {                                         \
  |  |   36|    108|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    108|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 108]
  |  |  ------------------
  |  |   38|    108|    }
  ------------------
 2214|    108|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|    108|    {                                         \
  |  |   36|    108|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    108|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 108]
  |  |  ------------------
  |  |   38|    108|    }
  ------------------
 2215|       |            // we dont need to care the sub-invocation here
 2216|    108|            FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|    108|    {                           \
  |  |   31|    108|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 108]
  |  |  ------------------
  |  |   32|    108|    }
  ------------------
 2217|    108|            break;
 2218|    108|        default:
  ------------------
  |  Branch (2218:9): [True: 0, False: 4.65k]
  ------------------
 2219|      0|            return false;
 2220|  4.65k|    }
 2221|  4.65k|    return true;
 2222|  4.65k|}
formatter.c:format_invoke_host_function_contract_id:
 2158|  5.41k|static bool format_invoke_host_function_contract_id(formatter_data_t *fdata) {
 2159|  5.41k|    sc_address_t *address =
 2160|  5.41k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2160:9): [True: 4.54k, False: 873]
  ------------------
 2161|  5.41k|            ? &fdata->envelope->soroban_authorization.invoke_contract_args.address
 2162|  5.41k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2163|    873|                   .invoke_contract_args.address;
 2164|       |
 2165|  5.41k|    STRLCPY(fdata->caption, "Contract ID", fdata->caption_len);
  ------------------
  |  |   35|  5.41k|    {                                         \
  |  |   36|  5.41k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  5.41k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.41k]
  |  |  ------------------
  |  |   38|  5.41k|    }
  ------------------
 2166|       |
 2167|  5.41k|    FORMATTER_CHECK(print_sc_address(address, fdata->value, fdata->value_len, 0, 0))
  ------------------
  |  |   30|  5.41k|    {                           \
  |  |   31|  5.41k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.41k]
  |  |  ------------------
  |  |   32|  5.41k|    }
  ------------------
 2168|  5.41k|    push_to_formatter_stack(&format_invoke_host_function_func_name);
 2169|  5.41k|    return true;
 2170|  5.41k|}
formatter.c:format_invoke_host_function_func_name:
 2126|  5.41k|static bool format_invoke_host_function_func_name(formatter_data_t *fdata) {
 2127|  5.41k|    invoke_contract_args_t invoke_contract_args;
 2128|  5.41k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2128:9): [True: 4.54k, False: 873]
  ------------------
 2129|  4.54k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2130|  4.54k|    } else {
 2131|    873|        invoke_contract_args =
 2132|    873|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2133|    873|    }
 2134|  5.41k|    STRLCPY(fdata->caption, "Function", fdata->caption_len);
  ------------------
  |  |   35|  5.41k|    {                                         \
  |  |   36|  5.41k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  5.41k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.41k]
  |  |  ------------------
  |  |   38|  5.41k|    }
  ------------------
 2135|  5.41k|    FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|  5.41k|    {                           \
  |  |   31|  5.41k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.41k]
  |  |  ------------------
  |  |   32|  5.41k|    }
  ------------------
 2136|  5.41k|                                 fdata->value_len,
 2137|  5.41k|                                 invoke_contract_args.function.name,
 2138|  5.41k|                                 invoke_contract_args.function.name_size))
 2139|       |
 2140|  5.41k|    uint8_t data_count = should_move_control_to_plugin(fdata);
 2141|  5.41k|    if (data_count == 0) {
  ------------------
  |  Branch (2141:9): [True: 5.08k, False: 335]
  ------------------
 2142|       |        // we should not move control to plugin
 2143|  5.08k|        if (invoke_contract_args.parameters_length == 0) {
  ------------------
  |  Branch (2143:13): [True: 1.86k, False: 3.21k]
  ------------------
 2144|  1.86k|            return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2145|  3.21k|        } else {
 2146|  3.21k|            parameters_index = 0;
 2147|  3.21k|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args))
  ------------------
  |  |   30|  3.21k|    {                           \
  |  |   31|  3.21k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.21k]
  |  |  ------------------
  |  |   32|  3.21k|    }
  ------------------
 2148|  3.21k|        }
 2149|  5.08k|    } else {
 2150|    335|        PRINTF("we should move control to plugin\n");
 2151|    335|        parameters_index = 0;
 2152|    335|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args_with_plugin))
  ------------------
  |  |   30|    335|    {                           \
  |  |   31|    335|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 335]
  |  |  ------------------
  |  |   32|    335|    }
  ------------------
 2153|    335|    }
 2154|       |
 2155|  3.55k|    return true;
 2156|  5.41k|}
formatter.c:should_move_control_to_plugin:
 1664|  12.4k|static bool should_move_control_to_plugin(formatter_data_t *fdata) {
 1665|  12.4k|    if (fdata->plugin_check_presence == NULL || fdata->plugin_init_contract == NULL ||
  ------------------
  |  Branch (1665:9): [True: 1.53k, False: 10.8k]
  |  Branch (1665:49): [True: 0, False: 10.8k]
  ------------------
 1666|  12.4k|        fdata->plugin_query_data_pair_count == NULL || fdata->plugin_query_data_pair == NULL) {
  ------------------
  |  Branch (1666:9): [True: 0, False: 10.8k]
  |  Branch (1666:56): [True: 0, False: 10.8k]
  ------------------
 1667|  1.53k|        return false;
 1668|  1.53k|    }
 1669|       |
 1670|  10.8k|    invoke_contract_args_t invoke_contract_args;
 1671|  10.8k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1671:9): [True: 10.8k, False: 0]
  ------------------
 1672|  10.8k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1673|  10.8k|    } else {
 1674|      0|        invoke_contract_args =
 1675|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1676|      0|    }
 1677|       |
 1678|  10.8k|    const uint8_t *contract_address = invoke_contract_args.address.address;
 1679|       |
 1680|       |    // check if plugin exists
 1681|  10.8k|    if (!fdata->plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (1681:9): [True: 6.99k, False: 3.90k]
  ------------------
 1682|  6.99k|        return false;
 1683|  6.99k|    }
 1684|       |
 1685|       |    // init plugin
 1686|  3.90k|    if (fdata->plugin_init_contract(contract_address) != STELLAR_PLUGIN_RESULT_OK) {
  ------------------
  |  Branch (1686:9): [True: 0, False: 3.90k]
  ------------------
 1687|      0|        return false;
 1688|      0|    }
 1689|       |
 1690|       |    // get data count
 1691|  3.90k|    if (fdata->plugin_query_data_pair_count(contract_address, &plugin_data_pair_count) !=
  ------------------
  |  Branch (1691:9): [True: 0, False: 3.90k]
  ------------------
 1692|  3.90k|        STELLAR_PLUGIN_RESULT_OK) {
 1693|      0|        return false;
 1694|      0|    }
 1695|       |
 1696|  3.90k|    return plugin_data_pair_count != 0;
 1697|  3.90k|}
formatter.c:format_operation_source_prepare_for_invoke_host_function_op:
 2027|  4.27k|static bool format_operation_source_prepare_for_invoke_host_function_op(formatter_data_t *fdata) {
 2028|  4.27k|    if (fdata->envelope->type != ENVELOPE_TYPE_SOROBAN_AUTHORIZATION &&
  ------------------
  |  Branch (2028:9): [True: 729, False: 3.54k]
  ------------------
 2029|  4.27k|        fdata->envelope->tx_details.tx.op_details.source_account_present) {
  ------------------
  |  Branch (2029:9): [True: 281, False: 448]
  ------------------
 2030|       |        // If the source exists, when the user clicks the next button,
 2031|       |        // it will jump to the page showing the source
 2032|    281|        FORMATTER_CHECK(
  ------------------
  |  |   30|    281|    {                           \
  |  |   31|    281|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 281]
  |  |  ------------------
  |  |   32|    281|    }
  ------------------
 2033|    281|            push_to_formatter_stack(&format_operation_source_for_invoke_host_function_op))
 2034|  3.99k|    } else {
 2035|  3.99k|        uint8_t sub_invocations_count =
 2036|  3.99k|            fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2036:13): [True: 3.54k, False: 448]
  ------------------
 2037|  3.99k|                ? fdata->envelope->soroban_authorization.sub_invocations_count
 2038|  3.99k|                : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2039|    448|                      .sub_invocations_count;
 2040|  3.99k|        if (sub_invocations_count > 0) {
  ------------------
  |  Branch (2040:13): [True: 1.17k, False: 2.81k]
  ------------------
 2041|  1.17k|            formatter_index = 0;
 2042|  1.17k|            FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_start))
  ------------------
  |  |   30|  1.17k|    {                           \
  |  |   31|  1.17k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.17k]
  |  |  ------------------
  |  |   32|  1.17k|    }
  ------------------
 2043|  2.81k|        } else {
 2044|  2.81k|            FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  2.81k|    {                           \
  |  |   31|  2.81k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 35, False: 2.78k]
  |  |  ------------------
  |  |   32|  2.81k|    }
  ------------------
 2045|  2.81k|        }
 2046|  3.99k|    }
 2047|  4.24k|    return true;
 2048|  4.27k|}
formatter.c:format_operation_source_for_invoke_host_function_op:
 1988|    281|static bool format_operation_source_for_invoke_host_function_op(formatter_data_t *fdata) {
 1989|    281|    STRLCPY(fdata->caption, "Op Source", fdata->caption_len);
  ------------------
  |  |   35|    281|    {                                         \
  |  |   36|    281|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    281|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 281]
  |  |  ------------------
  |  |   38|    281|    }
  ------------------
 1990|    281|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (1990:9): [True: 271, False: 10]
  ------------------
 1991|    281|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (1991:9): [True: 263, False: 8]
  ------------------
 1992|    281|        fdata->envelope->tx_details.tx.op_details.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (1992:9): [True: 260, False: 3]
  ------------------
 1993|    281|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (1993:9): [True: 178, False: 82]
  ------------------
 1994|    260|               fdata->signing_key,
 1995|    260|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0 &&
  ------------------
  |  |   18|    260|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 1996|    281|        memcmp(fdata->envelope->tx_details.tx.op_details.source_account.ed25519,
  ------------------
  |  Branch (1996:9): [True: 134, False: 44]
  ------------------
 1997|    178|               fdata->signing_key,
 1998|    178|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|    178|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 1999|    134|        FORMATTER_CHECK(
  ------------------
  |  |   30|    134|    {                           \
  |  |   31|    134|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 134]
  |  |  ------------------
  |  |   32|    134|    }
  ------------------
 2000|    134|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
 2001|    134|                                fdata->value,
 2002|    134|                                fdata->value_len,
 2003|    134|                                6,
 2004|    134|                                6))
 2005|    147|    } else {
 2006|    147|        FORMATTER_CHECK(
  ------------------
  |  |   30|    147|    {                           \
  |  |   31|    147|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 147]
  |  |  ------------------
  |  |   32|    147|    }
  ------------------
 2007|    147|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
 2008|    147|                                fdata->value,
 2009|    147|                                fdata->value_len,
 2010|    147|                                0,
 2011|    147|                                0))
 2012|    147|    }
 2013|    281|    uint8_t sub_invocations_count =
 2014|    281|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2014:9): [True: 0, False: 281]
  ------------------
 2015|    281|            ? fdata->envelope->soroban_authorization.sub_invocations_count
 2016|    281|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2017|    281|                  .sub_invocations_count;
 2018|    281|    if (sub_invocations_count > 0) {
  ------------------
  |  Branch (2018:9): [True: 149, False: 132]
  ------------------
 2019|    149|        formatter_index = 0;
 2020|    149|        FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_start))
  ------------------
  |  |   30|    149|    {                           \
  |  |   31|    149|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 149]
  |  |  ------------------
  |  |   32|    149|    }
  ------------------
 2021|    149|    } else {
 2022|    132|        FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|    132|    {                           \
  |  |   31|    132|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 132]
  |  |  ------------------
  |  |   32|    132|    }
  ------------------
 2023|    132|    }
 2024|    281|    return true;
 2025|    281|}
formatter.c:format_sub_invocation_start:
 1941|  7.27k|static bool format_sub_invocation_start(formatter_data_t *fdata) {
 1942|  7.27k|    uint8_t sub_invocation_index = 0;
 1943|  7.27k|    uint8_t sub_invocations_count = 0;
 1944|  7.27k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1944:9): [True: 6.55k, False: 718]
  ------------------
 1945|  6.55k|        sub_invocation_index = fdata->envelope->soroban_authorization.sub_invocation_index;
 1946|  6.55k|        sub_invocations_count = fdata->envelope->soroban_authorization.sub_invocations_count;
 1947|  6.55k|    } else {
 1948|    718|        sub_invocation_index =
 1949|    718|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocation_index;
 1950|    718|        sub_invocations_count =
 1951|    718|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocations_count;
 1952|    718|    }
 1953|       |
 1954|  7.27k|    STRLCPY(fdata->caption, "Nested Authorization", fdata->caption_len);
  ------------------
  |  |   35|  7.27k|    {                                         \
  |  |   36|  7.27k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  7.27k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7.27k]
  |  |  ------------------
  |  |   38|  7.27k|    }
  ------------------
 1955|       |
 1956|  7.27k|    FORMATTER_CHECK(print_uint64_num(sub_invocation_index + 1, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  7.27k|    {                           \
  |  |   31|  7.27k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.27k]
  |  |  ------------------
  |  |   32|  7.27k|    }
  ------------------
 1957|  7.27k|    STRLCAT(fdata->value, " of ", fdata->value_len)
  ------------------
  |  |   41|  7.27k|    {                                         \
  |  |   42|  7.27k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  7.27k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 7.27k]
  |  |  ------------------
  |  |   44|  7.27k|    }
  ------------------
 1958|  7.27k|    FORMATTER_CHECK(print_uint64_num(sub_invocations_count,
  ------------------
  |  |   30|  7.27k|    {                           \
  |  |   31|  7.27k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.27k]
  |  |  ------------------
  |  |   32|  7.27k|    }
  ------------------
 1959|  7.27k|                                     fdata->value + strlen(fdata->value),
 1960|  7.27k|                                     fdata->value_len - strlen(fdata->value)))
 1961|       |
 1962|  7.27k|    buffer_t buffer = {
 1963|  7.27k|        .ptr = fdata->raw_data,
 1964|  7.27k|        .size = fdata->raw_data_len,
 1965|  7.27k|        .offset = fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1965:19): [True: 6.55k, False: 718]
  ------------------
 1966|  7.27k|                      ? fdata->envelope->soroban_authorization
 1967|  6.55k|                            .sub_invocation_positions[sub_invocation_index]
 1968|  7.27k|                      : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1969|    718|                            .sub_invocation_positions[sub_invocation_index]};
 1970|       |
 1971|       |    // here we parse the sub-invocation, and store it in the invoke_contract_args
 1972|  7.27k|    FORMATTER_CHECK(parse_auth_function(
  ------------------
  |  |   30|  7.27k|    {                           \
  |  |   31|  29.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.27k]
  |  |  |  Branch (31:15): [True: 6.55k, False: 718]
  |  |  |  Branch (31:15): [True: 6.55k, False: 718]
  |  |  ------------------
  |  |   32|  7.27k|    }
  ------------------
 1973|  7.27k|        &buffer,
 1974|  7.27k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
 1975|  7.27k|            ? &fdata->envelope->soroban_authorization.auth_function_type
 1976|  7.27k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.auth_function_type,
 1977|  7.27k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
 1978|  7.27k|            ? &fdata->envelope->soroban_authorization.invoke_contract_args
 1979|  7.27k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1980|  7.27k|                   .invoke_contract_args))
 1981|       |
 1982|  7.27k|    FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_auth_function))
  ------------------
  |  |   30|  7.27k|    {                           \
  |  |   31|  7.27k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.27k]
  |  |  ------------------
  |  |   32|  7.27k|    }
  ------------------
 1983|  7.27k|    return true;
 1984|  7.27k|}
formatter.c:format_sub_invocation_auth_function:
 1917|  7.27k|static bool format_sub_invocation_auth_function(formatter_data_t *fdata) {
 1918|  7.27k|    soroban_authorization_function_type_t auth_function_type =
 1919|  7.27k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1919:9): [True: 6.55k, False: 718]
  ------------------
 1920|  7.27k|            ? fdata->envelope->soroban_authorization.auth_function_type
 1921|  7.27k|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.auth_function_type;
 1922|  7.27k|    PRINTF("auth_function_type: %d\n", auth_function_type);
 1923|  7.27k|    switch (auth_function_type) {
 1924|  7.02k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
  ------------------
  |  Branch (1924:9): [True: 7.02k, False: 257]
  ------------------
 1925|  7.02k|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|  7.02k|    {                                         \
  |  |   36|  7.02k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  7.02k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7.02k]
  |  |  ------------------
  |  |   38|  7.02k|    }
  ------------------
 1926|  7.02k|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|  7.02k|    {                                         \
  |  |   36|  7.02k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  7.02k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7.02k]
  |  |  ------------------
  |  |   38|  7.02k|    }
  ------------------
 1927|  7.02k|            FORMATTER_CHECK(
  ------------------
  |  |   30|  7.02k|    {                           \
  |  |   31|  7.02k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.02k]
  |  |  ------------------
  |  |   32|  7.02k|    }
  ------------------
 1928|  7.02k|                push_to_formatter_stack(&format_sub_invocation_invoke_host_function_contract_id));
 1929|  7.02k|            break;
 1930|    257|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1930:9): [True: 257, False: 7.02k]
  ------------------
 1931|    257|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    257|    {                                         \
  |  |   36|    257|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    257|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 257]
  |  |  ------------------
  |  |   38|    257|    }
  ------------------
 1932|    257|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|    257|    {                                         \
  |  |   36|    257|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    257|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 257]
  |  |  ------------------
  |  |   38|    257|    }
  ------------------
 1933|    257|            FORMATTER_CHECK(format_next_sub_invocation(fdata));
  ------------------
  |  |   30|    257|    {                           \
  |  |   31|    257|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 257]
  |  |  ------------------
  |  |   32|    257|    }
  ------------------
 1934|    257|            break;
 1935|      0|        default:
  ------------------
  |  Branch (1935:9): [True: 0, False: 7.27k]
  ------------------
 1936|      0|            return false;
 1937|  7.27k|    }
 1938|  7.27k|    return true;
 1939|  7.27k|}
formatter.c:format_sub_invocation_invoke_host_function_contract_id:
 1900|  7.02k|static bool format_sub_invocation_invoke_host_function_contract_id(formatter_data_t *fdata) {
 1901|  7.02k|    invoke_contract_args_t invoke_contract_args;
 1902|  7.02k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1902:9): [True: 6.35k, False: 664]
  ------------------
 1903|  6.35k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1904|  6.35k|    } else {
 1905|    664|        invoke_contract_args =
 1906|    664|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1907|    664|    }
 1908|       |
 1909|  7.02k|    STRLCPY(fdata->caption, "Contract ID", fdata->caption_len);
  ------------------
  |  |   35|  7.02k|    {                                         \
  |  |   36|  7.02k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  7.02k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7.02k]
  |  |  ------------------
  |  |   38|  7.02k|    }
  ------------------
 1910|       |
 1911|  7.02k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  7.02k|    {                           \
  |  |   31|  7.02k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.02k]
  |  |  ------------------
  |  |   32|  7.02k|    }
  ------------------
 1912|  7.02k|        print_sc_address(&invoke_contract_args.address, fdata->value, fdata->value_len, 0, 0))
 1913|  7.02k|    push_to_formatter_stack(&format_sub_invocation_invoke_host_function_func_name);
 1914|  7.02k|    return true;
 1915|  7.02k|}
formatter.c:format_sub_invocation_invoke_host_function_func_name:
 1866|  7.02k|static bool format_sub_invocation_invoke_host_function_func_name(formatter_data_t *fdata) {
 1867|  7.02k|    invoke_contract_args_t invoke_contract_args;
 1868|  7.02k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1868:9): [True: 6.35k, False: 664]
  ------------------
 1869|  6.35k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1870|  6.35k|    } else {
 1871|    664|        invoke_contract_args =
 1872|    664|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1873|    664|    }
 1874|  7.02k|    STRLCPY(fdata->caption, "Function", fdata->caption_len);
  ------------------
  |  |   35|  7.02k|    {                                         \
  |  |   36|  7.02k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  7.02k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7.02k]
  |  |  ------------------
  |  |   38|  7.02k|    }
  ------------------
 1875|  7.02k|    FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|  7.02k|    {                           \
  |  |   31|  7.02k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.02k]
  |  |  ------------------
  |  |   32|  7.02k|    }
  ------------------
 1876|  7.02k|                                 fdata->value_len,
 1877|  7.02k|                                 invoke_contract_args.function.name,
 1878|  7.02k|                                 invoke_contract_args.function.name_size))
 1879|       |
 1880|  7.02k|    uint8_t data_count = should_move_control_to_plugin(fdata);
 1881|  7.02k|    if (data_count == 0) {
  ------------------
  |  Branch (1881:9): [True: 3.44k, False: 3.57k]
  ------------------
 1882|       |        // we should not move control to plugin
 1883|  3.44k|        if (invoke_contract_args.parameters_length == 0) {
  ------------------
  |  Branch (1883:13): [True: 2.03k, False: 1.41k]
  ------------------
 1884|  2.03k|            return format_next_sub_invocation(fdata);
 1885|  2.03k|        } else {
 1886|  1.41k|            parameters_index = 0;
 1887|  1.41k|            FORMATTER_CHECK(
  ------------------
  |  |   30|  1.41k|    {                           \
  |  |   31|  1.41k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.41k]
  |  |  ------------------
  |  |   32|  1.41k|    }
  ------------------
 1888|  1.41k|                push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args))
 1889|  1.41k|        }
 1890|  3.57k|    } else {
 1891|  3.57k|        PRINTF("we should move control to plugin\n");
 1892|  3.57k|        parameters_index = 0;
 1893|  3.57k|        FORMATTER_CHECK(
  ------------------
  |  |   30|  3.57k|    {                           \
  |  |   31|  3.57k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.57k]
  |  |  ------------------
  |  |   32|  3.57k|    }
  ------------------
 1894|  3.57k|            push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args_with_plugin))
 1895|  3.57k|    }
 1896|       |
 1897|  4.98k|    return true;
 1898|  7.02k|}
formatter.c:format_sub_invocation_invoke_host_function_args:
 1794|  3.91k|static bool format_sub_invocation_invoke_host_function_args(formatter_data_t *fdata) {
 1795|  3.91k|    invoke_contract_args_t invoke_contract_args;
 1796|  3.91k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1796:9): [True: 3.40k, False: 509]
  ------------------
 1797|  3.40k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1798|  3.40k|    } else {
 1799|    509|        invoke_contract_args =
 1800|    509|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1801|    509|    }
 1802|       |
 1803|  3.91k|    size_t length;
 1804|  3.91k|    STRLCPY(fdata->caption, "Arg ", fdata->caption_len);
  ------------------
  |  |   35|  3.91k|    {                                         \
  |  |   36|  3.91k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  3.91k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3.91k]
  |  |  ------------------
  |  |   38|  3.91k|    }
  ------------------
 1805|  3.91k|    length = strlen(fdata->caption);
 1806|  3.91k|    FORMATTER_CHECK(print_uint64_num(parameters_index + 1,
  ------------------
  |  |   30|  3.91k|    {                           \
  |  |   31|  3.91k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.91k]
  |  |  ------------------
  |  |   32|  3.91k|    }
  ------------------
 1807|  3.91k|                                     fdata->caption + length,
 1808|  3.91k|                                     fdata->caption_len - length))
 1809|       |
 1810|  3.91k|    STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  3.91k|    {                                         \
  |  |   42|  3.91k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  3.91k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 3.91k]
  |  |  ------------------
  |  |   44|  3.91k|    }
  ------------------
 1811|  3.91k|    length = strlen(fdata->caption);
 1812|  3.91k|    FORMATTER_CHECK(print_uint64_num(invoke_contract_args.parameters_length,
  ------------------
  |  |   30|  3.91k|    {                           \
  |  |   31|  3.91k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.91k]
  |  |  ------------------
  |  |   32|  3.91k|    }
  ------------------
 1813|  3.91k|                                     fdata->caption + length,
 1814|  3.91k|                                     fdata->caption_len - length))
 1815|       |
 1816|  3.91k|    buffer_t buffer = {.ptr = fdata->raw_data,
 1817|  3.91k|                       .size = fdata->raw_data_len,
 1818|  3.91k|                       .offset = invoke_contract_args.parameters_position};
 1819|       |    // Content
 1820|  13.7k|    for (uint8_t i = 0; i < parameters_index; i++) {
  ------------------
  |  Branch (1820:25): [True: 9.79k, False: 3.91k]
  ------------------
 1821|  9.79k|        FORMATTER_CHECK(read_scval_advance(&buffer))
  ------------------
  |  |   30|  9.79k|    {                           \
  |  |   31|  9.79k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 9.79k]
  |  |  ------------------
  |  |   32|  9.79k|    }
  ------------------
 1822|  9.79k|    }
 1823|       |
 1824|  3.91k|    FORMATTER_CHECK(print_scval(buffer, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  3.91k|    {                           \
  |  |   31|  3.91k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 94, False: 3.81k]
  |  |  ------------------
  |  |   32|  3.91k|    }
  ------------------
 1825|       |
 1826|  3.81k|    parameters_index++;
 1827|  3.81k|    if (parameters_index == invoke_contract_args.parameters_length) {
  ------------------
  |  Branch (1827:9): [True: 1.31k, False: 2.50k]
  ------------------
 1828|  1.31k|        return format_next_sub_invocation(fdata);
 1829|  2.50k|    } else {
 1830|  2.50k|        FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args))
  ------------------
  |  |   30|  2.50k|    {                           \
  |  |   31|  2.50k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.50k]
  |  |  ------------------
  |  |   32|  2.50k|    }
  ------------------
 1831|  2.50k|    }
 1832|  2.50k|    return true;
 1833|  3.81k|}
formatter.c:print_scval:
 1699|  20.8k|static bool print_scval(buffer_t buffer, char *value, uint8_t value_len) {
 1700|  20.8k|    uint32_t sc_type;
 1701|  20.8k|    FORMATTER_CHECK(parse_uint32(&buffer, &sc_type))
  ------------------
  |  |   30|  20.8k|    {                           \
  |  |   31|  20.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 20.8k]
  |  |  ------------------
  |  |   32|  20.8k|    }
  ------------------
 1702|       |
 1703|  20.8k|    switch (sc_type) {
 1704|  11.9k|        case SCV_BOOL: {
  ------------------
  |  Branch (1704:9): [True: 11.9k, False: 8.93k]
  ------------------
 1705|  11.9k|            bool b;
 1706|  11.9k|            FORMATTER_CHECK(parse_bool(&buffer, &b))
  ------------------
  |  |   30|  11.9k|    {                           \
  |  |   31|  11.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1.17k, False: 10.7k]
  |  |  ------------------
  |  |   32|  11.9k|    }
  ------------------
 1707|  10.7k|            STRLCPY(value, b ? "true" : "false", value_len);
  ------------------
  |  |   35|  10.7k|    {                                         \
  |  |   36|  21.5k|        size_t len = strlcpy(dst, src, size); \
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 155, False: 10.6k]
  |  |  ------------------
  |  |   37|  10.7k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 10.7k]
  |  |  ------------------
  |  |   38|  10.7k|    }
  ------------------
 1708|  10.7k|            break;
 1709|  10.7k|        }
 1710|  1.29k|        case SCV_VOID:
  ------------------
  |  Branch (1710:9): [True: 1.29k, False: 19.5k]
  ------------------
 1711|  1.29k|            STRLCPY(value, "[void]", value_len);
  ------------------
  |  |   35|  1.29k|    {                                         \
  |  |   36|  1.29k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.29k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.29k]
  |  |  ------------------
  |  |   38|  1.29k|    }
  ------------------
 1712|  1.29k|            break;  // void
 1713|    224|        case SCV_U32:
  ------------------
  |  Branch (1713:9): [True: 224, False: 20.6k]
  ------------------
 1714|    224|            FORMATTER_CHECK(print_uint32(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    224|    {                           \
  |  |   31|    224|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 224]
  |  |  ------------------
  |  |   32|    224|    }
  ------------------
 1715|    224|            break;
 1716|    367|        case SCV_I32:
  ------------------
  |  Branch (1716:9): [True: 367, False: 20.5k]
  ------------------
 1717|    367|            FORMATTER_CHECK(print_int32(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    367|    {                           \
  |  |   31|    367|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 367]
  |  |  ------------------
  |  |   32|    367|    }
  ------------------
 1718|    367|            break;
 1719|    159|        case SCV_U64:
  ------------------
  |  Branch (1719:9): [True: 159, False: 20.7k]
  ------------------
 1720|    159|            FORMATTER_CHECK(print_uint64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    159|    {                           \
  |  |   31|    159|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 159]
  |  |  ------------------
  |  |   32|    159|    }
  ------------------
 1721|    159|            break;
 1722|    207|        case SCV_I64:
  ------------------
  |  Branch (1722:9): [True: 207, False: 20.6k]
  ------------------
 1723|    207|            FORMATTER_CHECK(print_int64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    207|    {                           \
  |  |   31|    207|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 207]
  |  |  ------------------
  |  |   32|    207|    }
  ------------------
 1724|    207|            break;
 1725|    294|        case SCV_TIMEPOINT: {
  ------------------
  |  Branch (1725:9): [True: 294, False: 20.5k]
  ------------------
 1726|    294|            uint64_t timepoint;
 1727|    294|            FORMATTER_CHECK(parse_uint64(&buffer, &timepoint));
  ------------------
  |  |   30|    294|    {                           \
  |  |   31|    294|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 294]
  |  |  ------------------
  |  |   32|    294|    }
  ------------------
 1728|    294|            FORMATTER_CHECK(print_time(timepoint, value, value_len));
  ------------------
  |  |   30|    294|    {                           \
  |  |   31|    294|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 33, False: 261]
  |  |  ------------------
  |  |   32|    294|    }
  ------------------
 1729|    261|            break;
 1730|    294|        }
 1731|    361|        case SCV_DURATION:
  ------------------
  |  Branch (1731:9): [True: 361, False: 20.5k]
  ------------------
 1732|    361|            FORMATTER_CHECK(print_int64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    361|    {                           \
  |  |   31|    361|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 361]
  |  |  ------------------
  |  |   32|    361|    }
  ------------------
 1733|    361|            break;
 1734|    354|        case SCV_U128:
  ------------------
  |  Branch (1734:9): [True: 354, False: 20.5k]
  ------------------
 1735|    354|            FORMATTER_CHECK(print_uint128(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    354|    {                           \
  |  |   31|    354|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 354]
  |  |  ------------------
  |  |   32|    354|    }
  ------------------
 1736|    354|            break;
 1737|  1.83k|        case SCV_I128:
  ------------------
  |  Branch (1737:9): [True: 1.83k, False: 19.0k]
  ------------------
 1738|  1.83k|            FORMATTER_CHECK(print_int128(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|  1.83k|    {                           \
  |  |   31|  1.83k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.83k]
  |  |  ------------------
  |  |   32|  1.83k|    }
  ------------------
 1739|  1.83k|            break;
 1740|    322|        case SCV_U256:
  ------------------
  |  Branch (1740:9): [True: 322, False: 20.5k]
  ------------------
 1741|    322|            FORMATTER_CHECK(print_uint256(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    322|    {                           \
  |  |   31|    322|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 322]
  |  |  ------------------
  |  |   32|    322|    }
  ------------------
 1742|    322|            break;
 1743|    473|        case SCV_I256:
  ------------------
  |  Branch (1743:9): [True: 473, False: 20.4k]
  ------------------
 1744|    473|            FORMATTER_CHECK(print_int256(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    473|    {                           \
  |  |   31|    473|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 473]
  |  |  ------------------
  |  |   32|    473|    }
  ------------------
 1745|    473|            break;
 1746|    343|        case SCV_BYTES:
  ------------------
  |  Branch (1746:9): [True: 343, False: 20.5k]
  ------------------
 1747|    343|            STRLCPY(value, "[Bytes Data]", value_len);
  ------------------
  |  |   35|    343|    {                                         \
  |  |   36|    343|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    343|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 343]
  |  |  ------------------
  |  |   38|    343|    }
  ------------------
 1748|    343|            break;
 1749|    792|        case SCV_STRING: {
  ------------------
  |  Branch (1749:9): [True: 792, False: 20.1k]
  ------------------
 1750|    792|            scv_string_t scv_string;
 1751|    792|            FORMATTER_CHECK(parse_scv_string(&buffer, &scv_string));
  ------------------
  |  |   30|    792|    {                           \
  |  |   31|    792|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 5, False: 787]
  |  |  ------------------
  |  |   32|    792|    }
  ------------------
 1752|    787|            FORMATTER_CHECK(print_scv_string(&scv_string, value, value_len));
  ------------------
  |  |   30|    787|    {                           \
  |  |   31|    787|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 787]
  |  |  ------------------
  |  |   32|    787|    }
  ------------------
 1753|    787|            break;
 1754|    787|        }
 1755|    407|        case SCV_SYMBOL: {
  ------------------
  |  Branch (1755:9): [True: 407, False: 20.4k]
  ------------------
 1756|    407|            scv_symbol_t scv_symbol;
 1757|    407|            FORMATTER_CHECK(parse_scv_symbol(&buffer, &scv_symbol));
  ------------------
  |  |   30|    407|    {                           \
  |  |   31|    407|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 10, False: 397]
  |  |  ------------------
  |  |   32|    407|    }
  ------------------
 1758|    397|            FORMATTER_CHECK(print_scv_symbol(&scv_symbol, value, value_len));
  ------------------
  |  |   30|    397|    {                           \
  |  |   31|    397|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 9, False: 388]
  |  |  ------------------
  |  |   32|    397|    }
  ------------------
 1759|    388|            break;
 1760|    397|        }
 1761|    563|        case SCV_ADDRESS: {
  ------------------
  |  Branch (1761:9): [True: 563, False: 20.3k]
  ------------------
 1762|    563|            sc_address_t sc_address;
 1763|    563|            FORMATTER_CHECK(parse_sc_address(&buffer, &sc_address));
  ------------------
  |  |   30|    563|    {                           \
  |  |   31|    563|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 563]
  |  |  ------------------
  |  |   32|    563|    }
  ------------------
 1764|    563|            FORMATTER_CHECK(print_sc_address(&sc_address, value, value_len, 0, 0));
  ------------------
  |  |   30|    563|    {                           \
  |  |   31|    563|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 563]
  |  |  ------------------
  |  |   32|    563|    }
  ------------------
 1765|    563|            break;
 1766|    563|        }
 1767|    933|        default:
  ------------------
  |  Branch (1767:9): [True: 933, False: 19.9k]
  ------------------
 1768|    933|            STRLCPY(value, "[unable to display]", value_len);
  ------------------
  |  |   35|    933|    {                                         \
  |  |   36|    933|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    933|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 933]
  |  |  ------------------
  |  |   38|    933|    }
  ------------------
 1769|  20.8k|    }
 1770|  19.6k|    return true;
 1771|  20.8k|}
formatter.c:format_sub_invocation_invoke_host_function_args_with_plugin:
 1835|  10.7k|static bool format_sub_invocation_invoke_host_function_args_with_plugin(formatter_data_t *fdata) {
 1836|  10.7k|    invoke_contract_args_t invoke_contract_args;
 1837|  10.7k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1837:9): [True: 10.7k, False: 0]
  ------------------
 1838|  10.7k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1839|  10.7k|    } else {
 1840|      0|        invoke_contract_args =
 1841|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1842|      0|    }
 1843|       |
 1844|  10.7k|    const uint8_t *contract_address = invoke_contract_args.address.address;
 1845|       |
 1846|       |    // get data pair
 1847|  10.7k|    if (fdata->plugin_query_data_pair(contract_address,
  ------------------
  |  Branch (1847:9): [True: 0, False: 10.7k]
  ------------------
 1848|  10.7k|                                      parameters_index,
 1849|  10.7k|                                      fdata->caption,
 1850|  10.7k|                                      fdata->caption_len,
 1851|  10.7k|                                      fdata->value,
 1852|  10.7k|                                      fdata->value_len) != STELLAR_PLUGIN_RESULT_OK) {
 1853|      0|        return false;
 1854|      0|    }
 1855|       |
 1856|  10.7k|    parameters_index++;
 1857|  10.7k|    if (parameters_index == plugin_data_pair_count) {
  ------------------
  |  Branch (1857:9): [True: 3.57k, False: 7.14k]
  ------------------
 1858|  3.57k|        return format_next_sub_invocation(fdata);
 1859|  7.14k|    } else {
 1860|  7.14k|        FORMATTER_CHECK(
  ------------------
  |  |   30|  7.14k|    {                           \
  |  |   31|  7.14k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.14k]
  |  |  ------------------
  |  |   32|  7.14k|    }
  ------------------
 1861|  7.14k|            push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args_with_plugin))
 1862|  7.14k|    }
 1863|  7.14k|    return true;
 1864|  10.7k|}
formatter.c:format_next_sub_invocation:
 1774|  7.18k|static bool format_next_sub_invocation(formatter_data_t *fdata) {
 1775|  7.18k|    uint8_t sub_invocations_count =
 1776|  7.18k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1776:9): [True: 6.47k, False: 710]
  ------------------
 1777|  7.18k|            ? fdata->envelope->soroban_authorization.sub_invocations_count
 1778|  7.18k|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1779|    710|                  .sub_invocations_count;
 1780|  7.18k|    uint8_t *sub_invocation_index =
 1781|  7.18k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1781:9): [True: 6.47k, False: 710]
  ------------------
 1782|  7.18k|            ? &fdata->envelope->soroban_authorization.sub_invocation_index
 1783|  7.18k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1784|    710|                   .sub_invocation_index;
 1785|  7.18k|    (*sub_invocation_index)++;
 1786|  7.18k|    if (*sub_invocation_index == sub_invocations_count) {
  ------------------
  |  Branch (1786:9): [True: 1.23k, False: 5.94k]
  ------------------
 1787|  1.23k|        return push_to_formatter_stack(NULL);
 1788|  5.94k|    } else {
 1789|  5.94k|        formatter_index = 0;
 1790|  5.94k|        return push_to_formatter_stack(format_sub_invocation_start);
 1791|  5.94k|    }
 1792|  7.18k|}
formatter.c:format_invoke_host_function_args:
 2050|  16.9k|static bool format_invoke_host_function_args(formatter_data_t *fdata) {
 2051|  16.9k|    invoke_contract_args_t invoke_contract_args;
 2052|  16.9k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2052:9): [True: 15.2k, False: 1.69k]
  ------------------
 2053|  15.2k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2054|  15.2k|    } else {
 2055|  1.69k|        invoke_contract_args =
 2056|  1.69k|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2057|  1.69k|    }
 2058|       |
 2059|  16.9k|    size_t length;
 2060|  16.9k|    STRLCPY(fdata->caption, "Arg ", fdata->caption_len);
  ------------------
  |  |   35|  16.9k|    {                                         \
  |  |   36|  16.9k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  16.9k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 16.9k]
  |  |  ------------------
  |  |   38|  16.9k|    }
  ------------------
 2061|  16.9k|    length = strlen(fdata->caption);
 2062|  16.9k|    FORMATTER_CHECK(print_uint64_num(parameters_index + 1,
  ------------------
  |  |   30|  16.9k|    {                           \
  |  |   31|  16.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 16.9k]
  |  |  ------------------
  |  |   32|  16.9k|    }
  ------------------
 2063|  16.9k|                                     fdata->caption + length,
 2064|  16.9k|                                     fdata->caption_len - length))
 2065|       |
 2066|  16.9k|    STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  16.9k|    {                                         \
  |  |   42|  16.9k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  16.9k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 16.9k]
  |  |  ------------------
  |  |   44|  16.9k|    }
  ------------------
 2067|  16.9k|    length = strlen(fdata->caption);
 2068|  16.9k|    FORMATTER_CHECK(print_uint64_num(invoke_contract_args.parameters_length,
  ------------------
  |  |   30|  16.9k|    {                           \
  |  |   31|  16.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 16.9k]
  |  |  ------------------
  |  |   32|  16.9k|    }
  ------------------
 2069|  16.9k|                                     fdata->caption + length,
 2070|  16.9k|                                     fdata->caption_len - length))
 2071|       |
 2072|  16.9k|    buffer_t buffer = {.ptr = fdata->raw_data,
 2073|  16.9k|                       .size = fdata->raw_data_len,
 2074|  16.9k|                       .offset = invoke_contract_args.parameters_position};
 2075|       |    // Content
 2076|  66.1k|    for (uint8_t i = 0; i < parameters_index; i++) {
  ------------------
  |  Branch (2076:25): [True: 49.1k, False: 16.9k]
  ------------------
 2077|  49.1k|        FORMATTER_CHECK(read_scval_advance(&buffer))
  ------------------
  |  |   30|  49.1k|    {                           \
  |  |   31|  49.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 49.1k]
  |  |  ------------------
  |  |   32|  49.1k|    }
  ------------------
 2078|  49.1k|    }
 2079|       |
 2080|  16.9k|    FORMATTER_CHECK(print_scval(buffer, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  16.9k|    {                           \
  |  |   31|  16.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1.13k, False: 15.8k]
  |  |  ------------------
  |  |   32|  16.9k|    }
  ------------------
 2081|       |
 2082|  15.8k|    parameters_index++;
 2083|  15.8k|    if (parameters_index == invoke_contract_args.parameters_length) {
  ------------------
  |  Branch (2083:9): [True: 2.07k, False: 13.7k]
  ------------------
 2084|  2.07k|        return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2085|  13.7k|    } else {
 2086|  13.7k|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args))
  ------------------
  |  |   30|  13.7k|    {                           \
  |  |   31|  13.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 13.7k]
  |  |  ------------------
  |  |   32|  13.7k|    }
  ------------------
 2087|  13.7k|    }
 2088|  13.7k|    return true;
 2089|  15.8k|}
formatter.c:format_invoke_host_function_args_with_plugin:
 2091|  1.00k|static bool format_invoke_host_function_args_with_plugin(formatter_data_t *fdata) {
 2092|  1.00k|    invoke_contract_args_t invoke_contract_args;
 2093|  1.00k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2093:9): [True: 1.00k, False: 0]
  ------------------
 2094|  1.00k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2095|  1.00k|    } else {
 2096|      0|        invoke_contract_args =
 2097|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2098|      0|    }
 2099|       |
 2100|  1.00k|    const uint8_t *contract_address = invoke_contract_args.address.address;
 2101|       |
 2102|       |    // get data pair
 2103|  1.00k|    if (fdata->plugin_query_data_pair(contract_address,
  ------------------
  |  Branch (2103:9): [True: 0, False: 1.00k]
  ------------------
 2104|  1.00k|                                      parameters_index,
 2105|  1.00k|                                      fdata->caption,
 2106|  1.00k|                                      fdata->caption_len,
 2107|  1.00k|                                      fdata->value,
 2108|  1.00k|                                      fdata->value_len) != STELLAR_PLUGIN_RESULT_OK) {
 2109|      0|        return false;
 2110|      0|    }
 2111|       |
 2112|  1.00k|    parameters_index++;
 2113|  1.00k|    if (parameters_index == plugin_data_pair_count) {
  ------------------
  |  Branch (2113:9): [True: 335, False: 670]
  ------------------
 2114|       |        // if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
 2115|       |        //     FORMATTER_CHECK(push_to_formatter_stack(NULL))
 2116|       |        // } else {
 2117|       |        //     return format_operation_source_prepare(fdata);
 2118|       |        // }
 2119|    335|        return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2120|    670|    } else {
 2121|    670|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args_with_plugin))
  ------------------
  |  |   30|    670|    {                           \
  |  |   31|    670|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 670]
  |  |  ------------------
  |  |   32|    670|    }
  ------------------
 2122|    670|    }
 2123|    670|    return true;
 2124|  1.00k|}
formatter.c:format_transaction_info:
 2382|  7.52k|static bool format_transaction_info(formatter_data_t *fdata) {
 2383|  7.52k|    if (fdata->envelope->network != 0) {
  ------------------
  |  Branch (2383:9): [True: 7.14k, False: 384]
  ------------------
 2384|  7.14k|        FORMATTER_CHECK(push_to_formatter_stack(&format_network))
  ------------------
  |  |   30|  7.14k|    {                           \
  |  |   31|  7.14k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.14k]
  |  |  ------------------
  |  |   32|  7.14k|    }
  ------------------
 2385|  7.14k|    } else {
 2386|    384|        return get_tx_details_formatter(fdata);
 2387|    384|    }
 2388|  7.14k|    return true;
 2389|  7.52k|}
formatter.c:push_to_formatter_stack:
   59|   373k|static bool push_to_formatter_stack(format_function_t formatter) {
   60|   373k|    if (formatter_index >= MAX_FORMATTERS_PER_OPERATION) {
  ------------------
  |  |   47|   373k|#define MAX_FORMATTERS_PER_OPERATION 16
  ------------------
  |  Branch (60:9): [True: 35, False: 373k]
  ------------------
   61|     35|        PRINTF("Formatter stack overflow\n");
   62|     35|        return false;
   63|     35|    }
   64|       |
   65|   373k|    formatter_stack[formatter_index++] = formatter;
   66|       |
   67|   373k|    return true;
   68|   373k|}
formatter.c:format_confirm_operation:
 2264|  49.7k|static bool format_confirm_operation(formatter_data_t *fdata) {
 2265|  49.7k|    if (fdata->envelope->tx_details.tx.operations_count > 1) {
  ------------------
  |  Branch (2265:9): [True: 48.2k, False: 1.48k]
  ------------------
 2266|  48.2k|        size_t length;
 2267|  48.2k|        STRLCPY(fdata->caption, "Operation ", fdata->caption_len);
  ------------------
  |  |   35|  48.2k|    {                                         \
  |  |   36|  48.2k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  48.2k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 48.2k]
  |  |  ------------------
  |  |   38|  48.2k|    }
  ------------------
 2268|  48.2k|        length = strlen(fdata->caption);
 2269|  48.2k|        FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.operation_index + 1,
  ------------------
  |  |   30|  48.2k|    {                           \
  |  |   31|  48.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 48.2k]
  |  |  ------------------
  |  |   32|  48.2k|    }
  ------------------
 2270|  48.2k|                                         fdata->caption + length,
 2271|  48.2k|                                         fdata->caption_len - length))
 2272|  48.2k|        STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  48.2k|    {                                         \
  |  |   42|  48.2k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  48.2k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 48.2k]
  |  |  ------------------
  |  |   44|  48.2k|    }
  ------------------
 2273|  48.2k|        length = strlen(fdata->caption);
 2274|  48.2k|        FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.operations_count,
  ------------------
  |  |   30|  48.2k|    {                           \
  |  |   31|  48.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 48.2k]
  |  |  ------------------
  |  |   32|  48.2k|    }
  ------------------
 2275|  48.2k|                                         fdata->caption + length,
 2276|  48.2k|                                         fdata->caption_len - length))
 2277|       |
 2278|  48.2k|        FORMATTER_CHECK(push_to_formatter_stack(
  ------------------
  |  |   30|  48.2k|    {                           \
  |  |   31|  48.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 48.2k]
  |  |  ------------------
  |  |   32|  48.2k|    }
  ------------------
 2279|  48.2k|            ((format_function_t) PIC(formatters[fdata->envelope->tx_details.tx.op_details.type]))));
 2280|  48.2k|    } else {
 2281|  1.48k|        format_function_t func = PIC(formatters[fdata->envelope->tx_details.tx.op_details.type]);
  ------------------
  |  |    6|  1.48k|#define PIC(x) x
  ------------------
 2282|  1.48k|        FORMATTER_CHECK(func(fdata));
  ------------------
  |  |   30|  1.48k|    {                           \
  |  |   31|  1.48k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 10, False: 1.47k]
  |  |  ------------------
  |  |   32|  1.48k|    }
  ------------------
 2283|  1.47k|    }
 2284|  49.7k|    return true;
 2285|  49.7k|}
formatter.c:format_create_account:
 1136|  31.2k|static bool format_create_account(formatter_data_t *fdata) {
 1137|  31.2k|    (void) fdata;
 1138|  31.2k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  31.2k|    {                                         \
  |  |   36|  31.2k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  31.2k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31.2k]
  |  |  ------------------
  |  |   38|  31.2k|    }
  ------------------
 1139|  31.2k|    STRLCPY(fdata->value, "Create Account", fdata->value_len);
  ------------------
  |  |   35|  31.2k|    {                                         \
  |  |   36|  31.2k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  31.2k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31.2k]
  |  |  ------------------
  |  |   38|  31.2k|    }
  ------------------
 1140|  31.2k|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_account_destination))
  ------------------
  |  |   30|  31.2k|    {                           \
  |  |   31|  31.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31.2k]
  |  |  ------------------
  |  |   32|  31.2k|    }
  ------------------
 1141|  31.2k|    return true;
 1142|  31.2k|}
formatter.c:format_create_account_destination:
 1124|  31.2k|static bool format_create_account_destination(formatter_data_t *fdata) {
 1125|  31.2k|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|  31.2k|    {                                         \
  |  |   36|  31.2k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  31.2k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31.2k]
  |  |  ------------------
  |  |   38|  31.2k|    }
  ------------------
 1126|  31.2k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  31.2k|    {                           \
  |  |   31|  31.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31.2k]
  |  |  ------------------
  |  |   32|  31.2k|    }
  ------------------
 1127|  31.2k|        print_account_id(fdata->envelope->tx_details.tx.op_details.create_account_op.destination,
 1128|  31.2k|                         fdata->value,
 1129|  31.2k|                         fdata->value_len,
 1130|  31.2k|                         0,
 1131|  31.2k|                         0))
 1132|  31.2k|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_account_amount))
  ------------------
  |  |   30|  31.2k|    {                           \
  |  |   31|  31.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31.2k]
  |  |  ------------------
  |  |   32|  31.2k|    }
  ------------------
 1133|  31.2k|    return true;
 1134|  31.2k|}
formatter.c:format_create_account_amount:
 1112|  31.2k|static bool format_create_account_amount(formatter_data_t *fdata) {
 1113|  31.2k|    STRLCPY(fdata->caption, "Starting Balance", fdata->caption_len);
  ------------------
  |  |   35|  31.2k|    {                                         \
  |  |   36|  31.2k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  31.2k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31.2k]
  |  |  ------------------
  |  |   38|  31.2k|    }
  ------------------
 1114|  31.2k|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
 1115|  31.2k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  31.2k|    {                           \
  |  |   31|  31.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31.2k]
  |  |  ------------------
  |  |   32|  31.2k|    }
  ------------------
 1116|  31.2k|        print_amount(fdata->envelope->tx_details.tx.op_details.create_account_op.starting_balance,
 1117|  31.2k|                     &asset,
 1118|  31.2k|                     fdata->envelope->network,
 1119|  31.2k|                     fdata->value,
 1120|  31.2k|                     fdata->value_len))
 1121|  31.2k|    return format_operation_source_prepare(fdata);
 1122|  31.2k|}
formatter.c:format_operation_source_prepare:
  334|  48.7k|static bool format_operation_source_prepare(formatter_data_t *fdata) {
  335|  48.7k|    if (fdata->envelope->tx_details.tx.op_details.source_account_present) {
  ------------------
  |  Branch (335:9): [True: 1.41k, False: 47.3k]
  ------------------
  336|       |        // If the source exists, when the user clicks the next button,
  337|       |        // it will jump to the page showing the source
  338|  1.41k|        FORMATTER_CHECK(push_to_formatter_stack(&format_operation_source))
  ------------------
  |  |   30|  1.41k|    {                           \
  |  |   31|  1.41k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.41k]
  |  |  ------------------
  |  |   32|  1.41k|    }
  ------------------
  339|  47.3k|    } else {
  340|  47.3k|        FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  47.3k|    {                           \
  |  |   31|  47.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 47.3k]
  |  |  ------------------
  |  |   32|  47.3k|    }
  ------------------
  341|  47.3k|    }
  342|  48.7k|    return true;
  343|  48.7k|}
formatter.c:format_operation_source:
  305|  1.41k|static bool format_operation_source(formatter_data_t *fdata) {
  306|  1.41k|    STRLCPY(fdata->caption, "Op Source", fdata->caption_len);
  ------------------
  |  |   35|  1.41k|    {                                         \
  |  |   36|  1.41k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.41k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.41k]
  |  |  ------------------
  |  |   38|  1.41k|    }
  ------------------
  307|  1.41k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (307:9): [True: 1.32k, False: 85]
  ------------------
  308|  1.41k|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (308:9): [True: 1.17k, False: 146]
  ------------------
  309|  1.41k|        fdata->envelope->tx_details.tx.op_details.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (309:9): [True: 1.01k, False: 161]
  ------------------
  310|  1.41k|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (310:9): [True: 638, False: 380]
  ------------------
  311|  1.01k|               fdata->signing_key,
  312|  1.01k|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0 &&
  ------------------
  |  |   18|  1.01k|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  313|  1.41k|        memcmp(fdata->envelope->tx_details.tx.op_details.source_account.ed25519,
  ------------------
  |  Branch (313:9): [True: 384, False: 254]
  ------------------
  314|    638|               fdata->signing_key,
  315|    638|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|    638|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  316|    384|        FORMATTER_CHECK(
  ------------------
  |  |   30|    384|    {                           \
  |  |   31|    384|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 384]
  |  |  ------------------
  |  |   32|    384|    }
  ------------------
  317|    384|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
  318|    384|                                fdata->value,
  319|    384|                                fdata->value_len,
  320|    384|                                6,
  321|    384|                                6))
  322|  1.02k|    } else {
  323|  1.02k|        FORMATTER_CHECK(
  ------------------
  |  |   30|  1.02k|    {                           \
  |  |   31|  1.02k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.02k]
  |  |  ------------------
  |  |   32|  1.02k|    }
  ------------------
  324|  1.02k|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
  325|  1.02k|                                fdata->value,
  326|  1.02k|                                fdata->value_len,
  327|  1.02k|                                0,
  328|  1.02k|                                0))
  329|  1.02k|    }
  330|  1.41k|    FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  1.41k|    {                           \
  |  |   31|  1.41k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.41k]
  |  |  ------------------
  |  |   32|  1.41k|    }
  ------------------
  331|  1.41k|    return true;
  332|  1.41k|}
formatter.c:format_payment:
 1101|    698|static bool format_payment(formatter_data_t *fdata) {
 1102|    698|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|    698|    {                                         \
  |  |   36|    698|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    698|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 698]
  |  |  ------------------
  |  |   38|    698|    }
  ------------------
 1103|    698|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.payment_op.amount,
  ------------------
  |  |   30|    698|    {                           \
  |  |   31|    698|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 698]
  |  |  ------------------
  |  |   32|    698|    }
  ------------------
 1104|    698|                                 &fdata->envelope->tx_details.tx.op_details.payment_op.asset,
 1105|    698|                                 fdata->envelope->network,
 1106|    698|                                 fdata->value,
 1107|    698|                                 fdata->value_len))
 1108|    698|    FORMATTER_CHECK(push_to_formatter_stack(&format_payment_destination))
  ------------------
  |  |   30|    698|    {                           \
  |  |   31|    698|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 698]
  |  |  ------------------
  |  |   32|    698|    }
  ------------------
 1109|    698|    return true;
 1110|    698|}
formatter.c:format_payment_destination:
 1090|    698|static bool format_payment_destination(formatter_data_t *fdata) {
 1091|    698|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    698|    {                                         \
  |  |   36|    698|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    698|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 698]
  |  |  ------------------
  |  |   38|    698|    }
  ------------------
 1092|    698|    FORMATTER_CHECK(
  ------------------
  |  |   30|    698|    {                           \
  |  |   31|    698|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 698]
  |  |  ------------------
  |  |   32|    698|    }
  ------------------
 1093|    698|        print_muxed_account(&fdata->envelope->tx_details.tx.op_details.payment_op.destination,
 1094|    698|                            fdata->value,
 1095|    698|                            fdata->value_len,
 1096|    698|                            0,
 1097|    698|                            0))
 1098|    698|    return format_operation_source_prepare(fdata);
 1099|    698|}
formatter.c:format_path_payment_strict_receive:
 1043|    341|static bool format_path_payment_strict_receive(formatter_data_t *fdata) {
 1044|    341|    STRLCPY(fdata->caption, "Send Max", fdata->caption_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1045|    341|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1046|    341|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.send_max,
 1047|    341|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.send_asset,
 1048|    341|        fdata->envelope->network,
 1049|    341|        fdata->value,
 1050|    341|        fdata->value_len))
 1051|    341|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_receive_destination))
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1052|    341|    return true;
 1053|    341|}
formatter.c:format_path_payment_strict_receive_destination:
 1031|    341|static bool format_path_payment_strict_receive_destination(formatter_data_t *fdata) {
 1032|    341|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1033|    341|    FORMATTER_CHECK(print_muxed_account(
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1034|    341|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.destination,
 1035|    341|        fdata->value,
 1036|    341|        fdata->value_len,
 1037|    341|        0,
 1038|    341|        0))
 1039|    341|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_receive_receive))
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1040|    341|    return true;
 1041|    341|}
formatter.c:format_path_payment_strict_receive_receive:
 1020|    341|static bool format_path_payment_strict_receive_receive(formatter_data_t *fdata) {
 1021|    341|    STRLCPY(fdata->caption, "Receive", fdata->caption_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1022|    341|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1023|    341|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.dest_amount,
 1024|    341|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.dest_asset,
 1025|    341|        fdata->envelope->network,
 1026|    341|        fdata->value,
 1027|    341|        fdata->value_len))
 1028|    341|    return format_operation_source_prepare(fdata);
 1029|    341|}
formatter.c:format_manage_sell_offer:
  897|    328|static bool format_manage_sell_offer(formatter_data_t *fdata) {
  898|    328|    if (!fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.amount) {
  ------------------
  |  Branch (898:9): [True: 66, False: 262]
  ------------------
  899|     66|        STRLCPY(fdata->caption, "Remove Offer", fdata->caption_len);
  ------------------
  |  |   35|     66|    {                                         \
  |  |   36|     66|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     66|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 66]
  |  |  ------------------
  |  |   38|     66|    }
  ------------------
  900|     66|        FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|     66|    {                           \
  |  |   31|     66|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 66]
  |  |  ------------------
  |  |   32|     66|    }
  ------------------
  901|     66|            fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id,
  902|     66|            fdata->value,
  903|     66|            fdata->value_len))
  904|     66|        return format_operation_source_prepare(fdata);
  905|    262|    } else {
  906|    262|        if (fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id) {
  ------------------
  |  Branch (906:13): [True: 191, False: 71]
  ------------------
  907|    191|            STRLCPY(fdata->caption, "Change Offer", fdata->caption_len);
  ------------------
  |  |   35|    191|    {                                         \
  |  |   36|    191|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    191|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 191]
  |  |  ------------------
  |  |   38|    191|    }
  ------------------
  908|    191|            FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|    191|    {                           \
  |  |   31|    191|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 191]
  |  |  ------------------
  |  |   32|    191|    }
  ------------------
  909|    191|                fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id,
  910|    191|                fdata->value,
  911|    191|                fdata->value_len))
  912|    191|        } else {
  913|     71|            STRLCPY(fdata->caption, "Create Offer", fdata->caption_len);
  ------------------
  |  |   35|     71|    {                                         \
  |  |   36|     71|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     71|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 71]
  |  |  ------------------
  |  |   38|     71|    }
  ------------------
  914|     71|            STRLCPY(fdata->value, "New Offer", fdata->value_len);
  ------------------
  |  |   35|     71|    {                                         \
  |  |   36|     71|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     71|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 71]
  |  |  ------------------
  |  |   38|     71|    }
  ------------------
  915|     71|        }
  916|    262|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_buy))
  ------------------
  |  |   30|    262|    {                           \
  |  |   31|    262|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 262]
  |  |  ------------------
  |  |   32|    262|    }
  ------------------
  917|    262|    }
  918|    262|    return true;
  919|    328|}
formatter.c:format_manage_sell_offer_buy:
  886|    262|static bool format_manage_sell_offer_buy(formatter_data_t *fdata) {
  887|    262|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|    262|    {                                         \
  |  |   36|    262|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    262|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 262]
  |  |  ------------------
  |  |   38|    262|    }
  ------------------
  888|    262|    FORMATTER_CHECK(
  ------------------
  |  |   30|    262|    {                           \
  |  |   31|    262|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 262]
  |  |  ------------------
  |  |   32|    262|    }
  ------------------
  889|    262|        print_asset(&fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.buying,
  890|    262|                    fdata->envelope->network,
  891|    262|                    fdata->value,
  892|    262|                    fdata->value_len))
  893|    262|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_sell))
  ------------------
  |  |   30|    262|    {                           \
  |  |   31|    262|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 262]
  |  |  ------------------
  |  |   32|    262|    }
  ------------------
  894|    262|    return true;
  895|    262|}
formatter.c:format_manage_sell_offer_sell:
  874|    262|static bool format_manage_sell_offer_sell(formatter_data_t *fdata) {
  875|    262|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|    262|    {                                         \
  |  |   36|    262|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    262|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 262]
  |  |  ------------------
  |  |   38|    262|    }
  ------------------
  876|    262|    FORMATTER_CHECK(
  ------------------
  |  |   30|    262|    {                           \
  |  |   31|    262|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 262]
  |  |  ------------------
  |  |   32|    262|    }
  ------------------
  877|    262|        print_amount(fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.amount,
  878|    262|                     &fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.selling,
  879|    262|                     fdata->envelope->network,
  880|    262|                     fdata->value,
  881|    262|                     fdata->value_len))
  882|    262|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_price))
  ------------------
  |  |   30|    262|    {                           \
  |  |   31|    262|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 262]
  |  |  ------------------
  |  |   32|    262|    }
  ------------------
  883|    262|    return true;
  884|    262|}
formatter.c:format_manage_sell_offer_price:
  862|    262|static bool format_manage_sell_offer_price(formatter_data_t *fdata) {
  863|    262|    manage_sell_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op;
  864|    262|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|    262|    {                                         \
  |  |   36|    262|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    262|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 262]
  |  |  ------------------
  |  |   38|    262|    }
  ------------------
  865|    262|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|    262|    {                           \
  |  |   31|    262|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 262]
  |  |  ------------------
  |  |   32|    262|    }
  ------------------
  866|    262|                                &op->buying,
  867|    262|                                &op->selling,
  868|    262|                                fdata->envelope->network,
  869|    262|                                fdata->value,
  870|    262|                                fdata->value_len))
  871|    262|    return format_operation_source_prepare(fdata);
  872|    262|}
formatter.c:format_create_passive_sell_offer:
 1012|    431|static bool format_create_passive_sell_offer(formatter_data_t *fdata) {
 1013|    431|    (void) fdata;
 1014|    431|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    431|    {                                         \
  |  |   36|    431|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    431|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 431]
  |  |  ------------------
  |  |   38|    431|    }
  ------------------
 1015|    431|    STRLCPY(fdata->value, "Create Passive Sell Offer", fdata->value_len);
  ------------------
  |  |   35|    431|    {                                         \
  |  |   36|    431|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    431|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 431]
  |  |  ------------------
  |  |   38|    431|    }
  ------------------
 1016|    431|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_buy))
  ------------------
  |  |   30|    431|    {                           \
  |  |   31|    431|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 431]
  |  |  ------------------
  |  |   32|    431|    }
  ------------------
 1017|    431|    return true;
 1018|    431|}
formatter.c:format_create_passive_sell_offer_buy:
 1001|    431|static bool format_create_passive_sell_offer_buy(formatter_data_t *fdata) {
 1002|    431|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|    431|    {                                         \
  |  |   36|    431|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    431|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 431]
  |  |  ------------------
  |  |   38|    431|    }
  ------------------
 1003|    431|    FORMATTER_CHECK(
  ------------------
  |  |   30|    431|    {                           \
  |  |   31|    431|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 431]
  |  |  ------------------
  |  |   32|    431|    }
  ------------------
 1004|    431|        print_asset(&fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.buying,
 1005|    431|                    fdata->envelope->network,
 1006|    431|                    fdata->value,
 1007|    431|                    fdata->value_len))
 1008|    431|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_sell))
  ------------------
  |  |   30|    431|    {                           \
  |  |   31|    431|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 431]
  |  |  ------------------
  |  |   32|    431|    }
  ------------------
 1009|    431|    return true;
 1010|    431|}
formatter.c:format_create_passive_sell_offer_sell:
  989|    431|static bool format_create_passive_sell_offer_sell(formatter_data_t *fdata) {
  990|    431|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|    431|    {                                         \
  |  |   36|    431|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    431|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 431]
  |  |  ------------------
  |  |   38|    431|    }
  ------------------
  991|    431|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    431|    {                           \
  |  |   31|    431|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 431]
  |  |  ------------------
  |  |   32|    431|    }
  ------------------
  992|    431|        fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.amount,
  993|    431|        &fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.selling,
  994|    431|        fdata->envelope->network,
  995|    431|        fdata->value,
  996|    431|        fdata->value_len))
  997|    431|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_price))
  ------------------
  |  |   30|    431|    {                           \
  |  |   31|    431|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 431]
  |  |  ------------------
  |  |   32|    431|    }
  ------------------
  998|    431|    return true;
  999|    431|}
formatter.c:format_create_passive_sell_offer_price:
  976|    431|static bool format_create_passive_sell_offer_price(formatter_data_t *fdata) {
  977|    431|    create_passive_sell_offer_op_t *op =
  978|    431|        &fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op;
  979|    431|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|    431|    {                                         \
  |  |   36|    431|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    431|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 431]
  |  |  ------------------
  |  |   38|    431|    }
  ------------------
  980|    431|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|    431|    {                           \
  |  |   31|    431|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 431]
  |  |  ------------------
  |  |   32|    431|    }
  ------------------
  981|    431|                                &op->buying,
  982|    431|                                &op->selling,
  983|    431|                                fdata->envelope->network,
  984|    431|                                fdata->value,
  985|    431|                                fdata->value_len))
  986|    431|    return format_operation_source_prepare(fdata);
  987|    431|}
formatter.c:format_set_options:
  763|  2.83k|static bool format_set_options(formatter_data_t *fdata) {
  764|       |    // this operation is a special one among all operations, because all its
  765|       |    // fields are optional.
  766|  2.83k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  2.83k|    {                                         \
  |  |   36|  2.83k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.83k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.83k]
  |  |  ------------------
  |  |   38|  2.83k|    }
  ------------------
  767|  2.83k|    STRLCPY(fdata->value, "Set Options", fdata->value_len);
  ------------------
  |  |   35|  2.83k|    {                                         \
  |  |   36|  2.83k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.83k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.83k]
  |  |  ------------------
  |  |   38|  2.83k|    }
  ------------------
  768|  2.83k|    if (is_empty_set_options_body(fdata)) {
  ------------------
  |  Branch (768:9): [True: 708, False: 2.12k]
  ------------------
  769|    708|        FORMATTER_CHECK(push_to_formatter_stack(format_set_options_empty_body))
  ------------------
  |  |   30|    708|    {                           \
  |  |   31|    708|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 708]
  |  |  ------------------
  |  |   32|    708|    }
  ------------------
  770|  2.12k|    } else {
  771|  2.12k|        format_set_option_inflation_destination_prepare(fdata);
  772|  2.12k|    }
  773|  2.83k|    return true;
  774|  2.83k|}
formatter.c:is_empty_set_options_body:
  750|  2.83k|static bool is_empty_set_options_body(formatter_data_t *fdata) {
  751|  2.83k|    return !(
  752|  2.83k|        fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination_present ||
  ------------------
  |  Branch (752:9): [True: 69, False: 2.76k]
  ------------------
  753|  2.83k|        fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags_present ||
  ------------------
  |  Branch (753:9): [True: 459, False: 2.30k]
  ------------------
  754|  2.83k|        fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags_present ||
  ------------------
  |  Branch (754:9): [True: 75, False: 2.23k]
  ------------------
  755|  2.83k|        fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight_present ||
  ------------------
  |  Branch (755:9): [True: 111, False: 2.12k]
  ------------------
  756|  2.83k|        fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold_present ||
  ------------------
  |  Branch (756:9): [True: 420, False: 1.70k]
  ------------------
  757|  2.83k|        fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold_present ||
  ------------------
  |  Branch (757:9): [True: 342, False: 1.36k]
  ------------------
  758|  2.83k|        fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold_present ||
  ------------------
  |  Branch (758:9): [True: 34, False: 1.32k]
  ------------------
  759|  2.83k|        fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_present ||
  ------------------
  |  Branch (759:9): [True: 464, False: 862]
  ------------------
  760|  2.83k|        fdata->envelope->tx_details.tx.op_details.set_options_op.signer_present);
  ------------------
  |  Branch (760:9): [True: 154, False: 708]
  ------------------
  761|  2.83k|}
formatter.c:format_set_options_empty_body:
  743|    708|static bool format_set_options_empty_body(formatter_data_t *fdata) {
  744|    708|    (void) fdata;
  745|    708|    STRLCPY(fdata->caption, "SET OPTIONS", fdata->caption_len);
  ------------------
  |  |   35|    708|    {                                         \
  |  |   36|    708|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    708|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 708]
  |  |  ------------------
  |  |   38|    708|    }
  ------------------
  746|    708|    STRLCPY(fdata->value, "[BODY IS EMPTY]", fdata->value_len);
  ------------------
  |  |   35|    708|    {                                         \
  |  |   36|    708|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    708|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 708]
  |  |  ------------------
  |  |   38|    708|    }
  ------------------
  747|    708|    return format_operation_source_prepare(fdata);
  748|    708|}
formatter.c:format_set_option_inflation_destination_prepare:
  734|  2.12k|static bool format_set_option_inflation_destination_prepare(formatter_data_t *fdata) {
  735|  2.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination_present) {
  ------------------
  |  Branch (735:9): [True: 69, False: 2.05k]
  ------------------
  736|     69|        FORMATTER_CHECK(push_to_formatter_stack(format_set_option_inflation_destination))
  ------------------
  |  |   30|     69|    {                           \
  |  |   31|     69|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   32|     69|    }
  ------------------
  737|  2.05k|    } else {
  738|  2.05k|        format_set_option_clear_flags_prepare(fdata);
  739|  2.05k|    }
  740|  2.12k|    return true;
  741|  2.12k|}
formatter.c:format_set_option_inflation_destination:
  722|     69|static bool format_set_option_inflation_destination(formatter_data_t *fdata) {
  723|     69|    STRLCPY(fdata->caption, "Inflation Dest", fdata->caption_len);
  ------------------
  |  |   35|     69|    {                                         \
  |  |   36|     69|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     69|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   38|     69|    }
  ------------------
  724|     69|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|     69|    {                           \
  |  |   31|     69|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 69]
  |  |  ------------------
  |  |   32|     69|    }
  ------------------
  725|     69|        fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination,
  726|     69|        fdata->value,
  727|     69|        fdata->value_len,
  728|     69|        0,
  729|     69|        0))
  730|     69|    format_set_option_clear_flags_prepare(fdata);
  731|     69|    return true;
  732|     69|}
formatter.c:format_set_option_clear_flags_prepare:
  713|  2.12k|static bool format_set_option_clear_flags_prepare(formatter_data_t *fdata) {
  714|  2.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags_present) {
  ------------------
  |  Branch (714:9): [True: 524, False: 1.60k]
  ------------------
  715|    524|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_clear_flags))
  ------------------
  |  |   30|    524|    {                           \
  |  |   31|    524|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 524]
  |  |  ------------------
  |  |   32|    524|    }
  ------------------
  716|  1.60k|    } else {
  717|  1.60k|        format_set_option_set_flags_prepare(fdata);
  718|  1.60k|    }
  719|  2.12k|    return true;
  720|  2.12k|}
formatter.c:format_set_option_clear_flags:
  703|    524|static bool format_set_option_clear_flags(formatter_data_t *fdata) {
  704|    524|    STRLCPY(fdata->caption, "Clear Flags", fdata->caption_len);
  ------------------
  |  |   35|    524|    {                                         \
  |  |   36|    524|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    524|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 524]
  |  |  ------------------
  |  |   38|    524|    }
  ------------------
  705|    524|    FORMATTER_CHECK(
  ------------------
  |  |   30|    524|    {                           \
  |  |   31|    524|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 524]
  |  |  ------------------
  |  |   32|    524|    }
  ------------------
  706|    524|        print_account_flags(fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags,
  707|    524|                            fdata->value,
  708|    524|                            fdata->value_len))
  709|    524|    format_set_option_set_flags_prepare(fdata);
  710|    524|    return true;
  711|    524|}
formatter.c:format_set_option_set_flags_prepare:
  694|  2.12k|static bool format_set_option_set_flags_prepare(formatter_data_t *fdata) {
  695|  2.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags_present) {
  ------------------
  |  Branch (695:9): [True: 561, False: 1.56k]
  ------------------
  696|    561|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_set_flags))
  ------------------
  |  |   30|    561|    {                           \
  |  |   31|    561|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 561]
  |  |  ------------------
  |  |   32|    561|    }
  ------------------
  697|  1.56k|    } else {
  698|  1.56k|        format_set_option_master_weight_prepare(fdata);
  699|  1.56k|    }
  700|  2.12k|    return true;
  701|  2.12k|}
formatter.c:format_set_option_set_flags:
  684|    561|static bool format_set_option_set_flags(formatter_data_t *fdata) {
  685|    561|    STRLCPY(fdata->caption, "Set Flags", fdata->caption_len);
  ------------------
  |  |   35|    561|    {                                         \
  |  |   36|    561|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    561|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 561]
  |  |  ------------------
  |  |   38|    561|    }
  ------------------
  686|    561|    FORMATTER_CHECK(
  ------------------
  |  |   30|    561|    {                           \
  |  |   31|    561|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 561]
  |  |  ------------------
  |  |   32|    561|    }
  ------------------
  687|    561|        print_account_flags(fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags,
  688|    561|                            fdata->value,
  689|    561|                            fdata->value_len))
  690|    561|    format_set_option_master_weight_prepare(fdata);
  691|    561|    return true;
  692|    561|}
formatter.c:format_set_option_master_weight_prepare:
  675|  2.12k|static bool format_set_option_master_weight_prepare(formatter_data_t *fdata) {
  676|  2.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight_present) {
  ------------------
  |  Branch (676:9): [True: 169, False: 1.95k]
  ------------------
  677|    169|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_master_weight))
  ------------------
  |  |   30|    169|    {                           \
  |  |   31|    169|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 169]
  |  |  ------------------
  |  |   32|    169|    }
  ------------------
  678|  1.95k|    } else {
  679|  1.95k|        format_set_option_low_threshold_prepare(fdata);
  680|  1.95k|    }
  681|  2.12k|    return true;
  682|  2.12k|}
formatter.c:format_set_option_master_weight:
  665|    169|static bool format_set_option_master_weight(formatter_data_t *fdata) {
  666|    169|    STRLCPY(fdata->caption, "Master Weight", fdata->caption_len);
  ------------------
  |  |   35|    169|    {                                         \
  |  |   36|    169|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    169|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 169]
  |  |  ------------------
  |  |   38|    169|    }
  ------------------
  667|    169|    FORMATTER_CHECK(
  ------------------
  |  |   30|    169|    {                           \
  |  |   31|    169|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 169]
  |  |  ------------------
  |  |   32|    169|    }
  ------------------
  668|    169|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight,
  669|    169|                         fdata->value,
  670|    169|                         fdata->value_len))
  671|    169|    format_set_option_low_threshold_prepare(fdata);
  672|    169|    return true;
  673|    169|}
formatter.c:format_set_option_low_threshold_prepare:
  656|  2.12k|static bool format_set_option_low_threshold_prepare(formatter_data_t *fdata) {
  657|  2.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold_present) {
  ------------------
  |  Branch (657:9): [True: 474, False: 1.65k]
  ------------------
  658|    474|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_low_threshold))
  ------------------
  |  |   30|    474|    {                           \
  |  |   31|    474|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 474]
  |  |  ------------------
  |  |   32|    474|    }
  ------------------
  659|  1.65k|    } else {
  660|  1.65k|        format_set_option_medium_threshold_prepare(fdata);
  661|  1.65k|    }
  662|  2.12k|    return true;
  663|  2.12k|}
formatter.c:format_set_option_low_threshold:
  646|    474|static bool format_set_option_low_threshold(formatter_data_t *fdata) {
  647|    474|    STRLCPY(fdata->caption, "Low Threshold", fdata->caption_len);
  ------------------
  |  |   35|    474|    {                                         \
  |  |   36|    474|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    474|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 474]
  |  |  ------------------
  |  |   38|    474|    }
  ------------------
  648|    474|    FORMATTER_CHECK(
  ------------------
  |  |   30|    474|    {                           \
  |  |   31|    474|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 474]
  |  |  ------------------
  |  |   32|    474|    }
  ------------------
  649|    474|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold,
  650|    474|                         fdata->value,
  651|    474|                         fdata->value_len))
  652|    474|    format_set_option_medium_threshold_prepare(fdata);
  653|    474|    return true;
  654|    474|}
formatter.c:format_set_option_medium_threshold_prepare:
  637|  2.12k|static bool format_set_option_medium_threshold_prepare(formatter_data_t *fdata) {
  638|  2.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold_present) {
  ------------------
  |  Branch (638:9): [True: 389, False: 1.73k]
  ------------------
  639|    389|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_medium_threshold))
  ------------------
  |  |   30|    389|    {                           \
  |  |   31|    389|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 389]
  |  |  ------------------
  |  |   32|    389|    }
  ------------------
  640|  1.73k|    } else {
  641|  1.73k|        format_set_option_high_threshold_prepare(fdata);
  642|  1.73k|    }
  643|  2.12k|    return true;
  644|  2.12k|}
formatter.c:format_set_option_medium_threshold:
  627|    389|static bool format_set_option_medium_threshold(formatter_data_t *fdata) {
  628|    389|    STRLCPY(fdata->caption, "Medium Threshold", fdata->caption_len);
  ------------------
  |  |   35|    389|    {                                         \
  |  |   36|    389|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    389|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 389]
  |  |  ------------------
  |  |   38|    389|    }
  ------------------
  629|    389|    FORMATTER_CHECK(
  ------------------
  |  |   30|    389|    {                           \
  |  |   31|    389|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 389]
  |  |  ------------------
  |  |   32|    389|    }
  ------------------
  630|    389|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold,
  631|    389|                         fdata->value,
  632|    389|                         fdata->value_len))
  633|    389|    format_set_option_high_threshold_prepare(fdata);
  634|    389|    return true;
  635|    389|}
formatter.c:format_set_option_high_threshold_prepare:
  618|  2.12k|static bool format_set_option_high_threshold_prepare(formatter_data_t *fdata) {
  619|  2.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold_present) {
  ------------------
  |  Branch (619:9): [True: 75, False: 2.05k]
  ------------------
  620|     75|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_high_threshold))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
  621|  2.05k|    } else {
  622|  2.05k|        format_set_option_home_domain_prepare(fdata);
  623|  2.05k|    }
  624|  2.12k|    return true;
  625|  2.12k|}
formatter.c:format_set_option_high_threshold:
  608|     75|static bool format_set_option_high_threshold(formatter_data_t *fdata) {
  609|     75|    STRLCPY(fdata->caption, "High Threshold", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
  610|     75|    FORMATTER_CHECK(
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
  611|     75|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold,
  612|     75|                         fdata->value,
  613|     75|                         fdata->value_len))
  614|     75|    format_set_option_home_domain_prepare(fdata);
  615|     75|    return true;
  616|     75|}
formatter.c:format_set_option_home_domain_prepare:
  599|  2.12k|static bool format_set_option_home_domain_prepare(formatter_data_t *fdata) {
  600|  2.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_present) {
  ------------------
  |  Branch (600:9): [True: 513, False: 1.61k]
  ------------------
  601|    513|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_home_domain))
  ------------------
  |  |   30|    513|    {                           \
  |  |   31|    513|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 513]
  |  |  ------------------
  |  |   32|    513|    }
  ------------------
  602|  1.61k|    } else {
  603|  1.61k|        format_set_option_signer_prepare(fdata);
  604|  1.61k|    }
  605|  2.12k|    return true;
  606|  2.12k|}
formatter.c:format_set_option_home_domain:
  584|    513|static bool format_set_option_home_domain(formatter_data_t *fdata) {
  585|    513|    STRLCPY(fdata->caption, "Home Domain", fdata->caption_len);
  ------------------
  |  |   35|    513|    {                                         \
  |  |   36|    513|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    513|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 513]
  |  |  ------------------
  |  |   38|    513|    }
  ------------------
  586|    513|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_size) {
  ------------------
  |  Branch (586:9): [True: 340, False: 173]
  ------------------
  587|    340|        FORMATTER_CHECK(
  ------------------
  |  |   30|    340|    {                           \
  |  |   31|    340|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 340]
  |  |  ------------------
  |  |   32|    340|    }
  ------------------
  588|    340|            print_string(fdata->value,
  589|    340|                         fdata->value_len,
  590|    340|                         fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain,
  591|    340|                         fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_size))
  592|    340|    } else {
  593|    173|        STRLCPY(fdata->value, "[remove home domain from account]", fdata->value_len);
  ------------------
  |  |   35|    173|    {                                         \
  |  |   36|    173|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    173|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 173]
  |  |  ------------------
  |  |   38|    173|    }
  ------------------
  594|    173|    }
  595|    513|    format_set_option_signer_prepare(fdata);
  596|    513|    return true;
  597|    513|}
formatter.c:format_set_option_signer_prepare:
  575|  2.12k|static bool format_set_option_signer_prepare(formatter_data_t *fdata) {
  576|  2.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.signer_present) {
  ------------------
  |  Branch (576:9): [True: 462, False: 1.66k]
  ------------------
  577|    462|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer))
  ------------------
  |  |   30|    462|    {                           \
  |  |   31|    462|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 462]
  |  |  ------------------
  |  |   32|    462|    }
  ------------------
  578|  1.66k|    } else {
  579|  1.66k|        return format_operation_source_prepare(fdata);
  580|  1.66k|    }
  581|    462|    return true;
  582|  2.12k|}
formatter.c:format_set_option_signer:
  544|    462|static bool format_set_option_signer(formatter_data_t *fdata) {
  545|    462|    signer_t *signer = &fdata->envelope->tx_details.tx.op_details.set_options_op.signer;
  546|    462|    if (signer->weight) {
  ------------------
  |  Branch (546:9): [True: 199, False: 263]
  ------------------
  547|    199|        STRLCPY(fdata->caption, "Add Signer", fdata->caption_len);
  ------------------
  |  |   35|    199|    {                                         \
  |  |   36|    199|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    199|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   38|    199|    }
  ------------------
  548|    263|    } else {
  549|    263|        STRLCPY(fdata->caption, "Remove Signer", fdata->caption_len);
  ------------------
  |  |   35|    263|    {                                         \
  |  |   36|    263|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    263|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 263]
  |  |  ------------------
  |  |   38|    263|    }
  ------------------
  550|    263|    }
  551|    462|    switch (signer->key.type) {
  552|    345|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (552:9): [True: 345, False: 117]
  ------------------
  553|    345|            STRLCPY(fdata->value, "Type Public Key", fdata->value_len);
  ------------------
  |  |   35|    345|    {                                         \
  |  |   36|    345|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    345|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 345]
  |  |  ------------------
  |  |   38|    345|    }
  ------------------
  554|    345|            break;
  555|    345|        }
  556|     84|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (556:9): [True: 84, False: 378]
  ------------------
  557|     84|            STRLCPY(fdata->value, "Type Hash(x)", fdata->value_len);
  ------------------
  |  |   35|     84|    {                                         \
  |  |   36|     84|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     84|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   38|     84|    }
  ------------------
  558|     84|            break;
  559|     84|        }
  560|      9|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (560:9): [True: 9, False: 453]
  ------------------
  561|      9|            STRLCPY(fdata->value, "Type Pre-Auth", fdata->value_len);
  ------------------
  |  |   35|      9|    {                                         \
  |  |   36|      9|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      9|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 9]
  |  |  ------------------
  |  |   38|      9|    }
  ------------------
  562|      9|            break;
  563|      9|        }
  564|     24|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (564:9): [True: 24, False: 438]
  ------------------
  565|     24|            STRLCPY(fdata->value, "Type Ed25519 Signed Payload", fdata->value_len);
  ------------------
  |  |   35|     24|    {                                         \
  |  |   36|     24|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     24|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 24]
  |  |  ------------------
  |  |   38|     24|    }
  ------------------
  566|     24|            break;
  567|     24|        }
  568|      0|        default:
  ------------------
  |  Branch (568:9): [True: 0, False: 462]
  ------------------
  569|      0|            return false;
  570|    462|    }
  571|    462|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer_detail))
  ------------------
  |  |   30|    462|    {                           \
  |  |   31|    462|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 462]
  |  |  ------------------
  |  |   32|    462|    }
  ------------------
  572|    462|    return true;
  573|    462|}
formatter.c:format_set_option_signer_detail:
  530|    462|static bool format_set_option_signer_detail(formatter_data_t *fdata) {
  531|    462|    STRLCPY(fdata->caption, "Signer Key", fdata->caption_len);
  ------------------
  |  |   35|    462|    {                                         \
  |  |   36|    462|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    462|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 462]
  |  |  ------------------
  |  |   38|    462|    }
  ------------------
  532|    462|    signer_key_t *key = &fdata->envelope->tx_details.tx.op_details.set_options_op.signer.key;
  533|       |
  534|    462|    FORMATTER_CHECK(print_signer_key_detail(key, fdata->value, fdata->value_len))
  ------------------
  |  |   30|    462|    {                           \
  |  |   31|    462|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 462]
  |  |  ------------------
  |  |   32|    462|    }
  ------------------
  535|       |
  536|    462|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.signer.weight != 0) {
  ------------------
  |  Branch (536:9): [True: 199, False: 263]
  ------------------
  537|    199|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer_weight))
  ------------------
  |  |   30|    199|    {                           \
  |  |   31|    199|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   32|    199|    }
  ------------------
  538|    263|    } else {
  539|    263|        return format_operation_source_prepare(fdata);
  540|    263|    }
  541|    199|    return true;
  542|    462|}
formatter.c:print_signer_key_detail:
  502|  1.66k|static bool print_signer_key_detail(signer_key_t *key, char *value, size_t value_len) {
  503|  1.66k|    switch (key->type) {
  504|    805|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (504:9): [True: 805, False: 855]
  ------------------
  505|    805|            FORMATTER_CHECK(print_account_id(key->ed25519, value, value_len, 0, 0))
  ------------------
  |  |   30|    805|    {                           \
  |  |   31|    805|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 805]
  |  |  ------------------
  |  |   32|    805|    }
  ------------------
  506|    805|            break;
  507|    805|        }
  508|    805|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (508:9): [True: 210, False: 1.45k]
  ------------------
  509|    210|            FORMATTER_CHECK(print_hash_x_key(key->hash_x, value, value_len, 0, 0))
  ------------------
  |  |   30|    210|    {                           \
  |  |   31|    210|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 210]
  |  |  ------------------
  |  |   32|    210|    }
  ------------------
  510|    210|            break;
  511|    210|        }
  512|    277|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (512:9): [True: 277, False: 1.38k]
  ------------------
  513|    277|            FORMATTER_CHECK(print_pre_auth_x_key(key->pre_auth_tx, value, value_len, 0, 0))
  ------------------
  |  |   30|    277|    {                           \
  |  |   31|    277|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 277]
  |  |  ------------------
  |  |   32|    277|    }
  ------------------
  514|    277|            break;
  515|    277|        }
  516|    368|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (516:9): [True: 368, False: 1.29k]
  ------------------
  517|    368|            FORMATTER_CHECK(print_ed25519_signed_payload(&key->ed25519_signed_payload,
  ------------------
  |  |   30|    368|    {                           \
  |  |   31|    368|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 368]
  |  |  ------------------
  |  |   32|    368|    }
  ------------------
  518|    368|                                                         value,
  519|    368|                                                         value_len,
  520|    368|                                                         12,
  521|    368|                                                         12))
  522|    368|            break;
  523|    368|        }
  524|    368|        default:
  ------------------
  |  Branch (524:9): [True: 0, False: 1.66k]
  ------------------
  525|      0|            return false;
  526|  1.66k|    }
  527|  1.66k|    return true;
  528|  1.66k|}
formatter.c:format_set_option_signer_weight:
  493|    199|static bool format_set_option_signer_weight(formatter_data_t *fdata) {
  494|    199|    STRLCPY(fdata->caption, "Weight", fdata->caption_len);
  ------------------
  |  |   35|    199|    {                                         \
  |  |   36|    199|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    199|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   38|    199|    }
  ------------------
  495|    199|    FORMATTER_CHECK(
  ------------------
  |  |   30|    199|    {                           \
  |  |   31|    199|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 199]
  |  |  ------------------
  |  |   32|    199|    }
  ------------------
  496|    199|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.signer.weight,
  497|    199|                         fdata->value,
  498|    199|                         fdata->value_len))
  499|    199|    return format_operation_source_prepare(fdata);
  500|    199|}
formatter.c:format_change_trust:
  829|    906|static bool format_change_trust(formatter_data_t *fdata) {
  830|    906|    if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit) {
  ------------------
  |  Branch (830:9): [True: 562, False: 344]
  ------------------
  831|    562|        STRLCPY(fdata->caption, "Change Trust", fdata->caption_len);
  ------------------
  |  |   35|    562|    {                                         \
  |  |   36|    562|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    562|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 562]
  |  |  ------------------
  |  |   38|    562|    }
  ------------------
  832|    562|    } else {
  833|    344|        STRLCPY(fdata->caption, "Remove Trust", fdata->caption_len);
  ------------------
  |  |   35|    344|    {                                         \
  |  |   36|    344|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    344|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 344]
  |  |  ------------------
  |  |   38|    344|    }
  ------------------
  834|    344|    }
  835|    906|    uint8_t asset_type = fdata->envelope->tx_details.tx.op_details.change_trust_op.line.type;
  836|    906|    switch (asset_type) {
  837|    248|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (837:9): [True: 248, False: 658]
  ------------------
  838|    414|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (838:9): [True: 166, False: 740]
  ------------------
  839|    414|            FORMATTER_CHECK(print_asset(
  ------------------
  |  |   30|    414|    {                           \
  |  |   31|    414|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 414]
  |  |  ------------------
  |  |   32|    414|    }
  ------------------
  840|    414|                (asset_t *) &fdata->envelope->tx_details.tx.op_details.change_trust_op.line,
  841|    414|                fdata->envelope->network,
  842|    414|                fdata->value,
  843|    414|                fdata->value_len))
  844|    414|            if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit &&
  ------------------
  |  Branch (844:17): [True: 278, False: 136]
  ------------------
  845|    414|                fdata->envelope->tx_details.tx.op_details.change_trust_op.limit != INT64_MAX) {
  ------------------
  |  Branch (845:17): [True: 273, False: 5]
  ------------------
  846|    273|                FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_limit))
  ------------------
  |  |   30|    273|    {                           \
  |  |   31|    273|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 273]
  |  |  ------------------
  |  |   32|    273|    }
  ------------------
  847|    273|            } else {
  848|    141|                return format_operation_source_prepare(fdata);
  849|    141|            }
  850|    273|            break;
  851|    311|        case ASSET_TYPE_POOL_SHARE:
  ------------------
  |  Branch (851:9): [True: 311, False: 595]
  ------------------
  852|    311|            STRLCPY(fdata->value, "Liquidity Pool Asset", fdata->value_len);
  ------------------
  |  |   35|    311|    {                                         \
  |  |   36|    311|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    311|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 311]
  |  |  ------------------
  |  |   38|    311|    }
  ------------------
  853|    311|            FORMATTER_CHECK(
  ------------------
  |  |   30|    311|    {                           \
  |  |   31|    311|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 311]
  |  |  ------------------
  |  |   32|    311|    }
  ------------------
  854|    311|                push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_asset_a))
  855|    311|            break;
  856|    311|        default:
  ------------------
  |  Branch (856:9): [True: 181, False: 725]
  ------------------
  857|    181|            return false;
  858|    906|    }
  859|    584|    return true;
  860|    906|}
formatter.c:format_change_trust_limit:
  776|    442|static bool format_change_trust_limit(formatter_data_t *fdata) {
  777|    442|    STRLCPY(fdata->caption, "Trust Limit", fdata->caption_len);
  ------------------
  |  |   35|    442|    {                                         \
  |  |   36|    442|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    442|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 442]
  |  |  ------------------
  |  |   38|    442|    }
  ------------------
  778|    442|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.change_trust_op.limit,
  ------------------
  |  |   30|    442|    {                           \
  |  |   31|    442|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 442]
  |  |  ------------------
  |  |   32|    442|    }
  ------------------
  779|    442|                                 NULL,
  780|    442|                                 fdata->envelope->network,
  781|    442|                                 fdata->value,
  782|    442|                                 fdata->value_len))
  783|    442|    return format_operation_source_prepare(fdata);
  784|    442|}
formatter.c:format_change_trust_detail_liquidity_pool_asset_a:
  818|    311|static bool format_change_trust_detail_liquidity_pool_asset_a(formatter_data_t *fdata) {
  819|    311|    STRLCPY(fdata->caption, "Asset A", fdata->caption_len);
  ------------------
  |  |   35|    311|    {                                         \
  |  |   36|    311|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    311|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 311]
  |  |  ------------------
  |  |   38|    311|    }
  ------------------
  820|    311|    FORMATTER_CHECK(print_asset(&fdata->envelope->tx_details.tx.op_details.change_trust_op.line
  ------------------
  |  |   30|    311|    {                           \
  |  |   31|    311|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 311]
  |  |  ------------------
  |  |   32|    311|    }
  ------------------
  821|    311|                                     .liquidity_pool.constant_product.asset_a,
  822|    311|                                fdata->envelope->network,
  823|    311|                                fdata->value,
  824|    311|                                fdata->value_len))
  825|    311|    FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_asset_b))
  ------------------
  |  |   30|    311|    {                           \
  |  |   31|    311|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 311]
  |  |  ------------------
  |  |   32|    311|    }
  ------------------
  826|    311|    return true;
  827|    311|}
formatter.c:format_change_trust_detail_liquidity_pool_asset_b:
  807|    311|static bool format_change_trust_detail_liquidity_pool_asset_b(formatter_data_t *fdata) {
  808|    311|    STRLCPY(fdata->caption, "Asset B", fdata->caption_len);
  ------------------
  |  |   35|    311|    {                                         \
  |  |   36|    311|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    311|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 311]
  |  |  ------------------
  |  |   38|    311|    }
  ------------------
  809|    311|    FORMATTER_CHECK(print_asset(&fdata->envelope->tx_details.tx.op_details.change_trust_op.line
  ------------------
  |  |   30|    311|    {                           \
  |  |   31|    311|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 311]
  |  |  ------------------
  |  |   32|    311|    }
  ------------------
  810|    311|                                     .liquidity_pool.constant_product.asset_b,
  811|    311|                                fdata->envelope->network,
  812|    311|                                fdata->value,
  813|    311|                                fdata->value_len))
  814|    311|    FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_fee))
  ------------------
  |  |   30|    311|    {                           \
  |  |   31|    311|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 311]
  |  |  ------------------
  |  |   32|    311|    }
  ------------------
  815|    311|    return true;
  816|    311|}
formatter.c:format_change_trust_detail_liquidity_pool_fee:
  786|    311|static bool format_change_trust_detail_liquidity_pool_fee(formatter_data_t *fdata) {
  787|    311|    STRLCPY(fdata->caption, "Pool Fee Rate", fdata->caption_len);
  ------------------
  |  |   35|    311|    {                                         \
  |  |   36|    311|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    311|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 311]
  |  |  ------------------
  |  |   38|    311|    }
  ------------------
  788|       |
  789|    311|    uint8_t fee[4] = {0};
  790|  1.55k|    for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (790:21): [True: 1.24k, False: 311]
  ------------------
  791|  1.24k|        fee[i] = fdata->envelope->tx_details.tx.op_details.change_trust_op.line.liquidity_pool
  792|  1.24k|                     .constant_product.fee >>
  793|  1.24k|                 (8 * (3 - i));
  794|  1.24k|    }
  795|    311|    FORMATTER_CHECK(print_int32(fee, 2, fdata->value, fdata->value_len, false))
  ------------------
  |  |   30|    311|    {                           \
  |  |   31|    311|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 311]
  |  |  ------------------
  |  |   32|    311|    }
  ------------------
  796|       |
  797|    311|    STRLCAT(fdata->value, "%", fdata->value_len);
  ------------------
  |  |   41|    311|    {                                         \
  |  |   42|    311|        size_t len = strlcat(dst, src, size); \
  |  |   43|    311|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 311]
  |  |  ------------------
  |  |   44|    311|    }
  ------------------
  798|    311|    if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit &&
  ------------------
  |  Branch (798:9): [True: 177, False: 134]
  ------------------
  799|    311|        fdata->envelope->tx_details.tx.op_details.change_trust_op.limit != INT64_MAX) {
  ------------------
  |  Branch (799:9): [True: 169, False: 8]
  ------------------
  800|    169|        FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_limit))
  ------------------
  |  |   30|    169|    {                           \
  |  |   31|    169|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 169]
  |  |  ------------------
  |  |   32|    169|    }
  ------------------
  801|    169|    } else {
  802|    142|        return format_operation_source_prepare(fdata);
  803|    142|    }
  804|    169|    return true;
  805|    311|}
formatter.c:format_allow_trust:
  485|    294|static bool format_allow_trust(formatter_data_t *fdata) {
  486|    294|    (void) fdata;
  487|    294|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    294|    {                                         \
  |  |   36|    294|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    294|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 294]
  |  |  ------------------
  |  |   38|    294|    }
  ------------------
  488|    294|    STRLCPY(fdata->value, "Allow Trust", fdata->value_len);
  ------------------
  |  |   35|    294|    {                                         \
  |  |   36|    294|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    294|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 294]
  |  |  ------------------
  |  |   38|    294|    }
  ------------------
  489|    294|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_trustor))
  ------------------
  |  |   30|    294|    {                           \
  |  |   31|    294|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 294]
  |  |  ------------------
  |  |   32|    294|    }
  ------------------
  490|    294|    return true;
  491|    294|}
formatter.c:format_allow_trust_trustor:
  473|    294|static bool format_allow_trust_trustor(formatter_data_t *fdata) {
  474|    294|    STRLCPY(fdata->caption, "Trustor", fdata->caption_len);
  ------------------
  |  |   35|    294|    {                                         \
  |  |   36|    294|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    294|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 294]
  |  |  ------------------
  |  |   38|    294|    }
  ------------------
  475|    294|    FORMATTER_CHECK(
  ------------------
  |  |   30|    294|    {                           \
  |  |   31|    294|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 294]
  |  |  ------------------
  |  |   32|    294|    }
  ------------------
  476|    294|        print_account_id(fdata->envelope->tx_details.tx.op_details.allow_trust_op.trustor,
  477|    294|                         fdata->value,
  478|    294|                         fdata->value_len,
  479|    294|                         0,
  480|    294|                         0))
  481|    294|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_asset_code))
  ------------------
  |  |   30|    294|    {                           \
  |  |   31|    294|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 294]
  |  |  ------------------
  |  |   32|    294|    }
  ------------------
  482|    294|    return true;
  483|    294|}
formatter.c:format_allow_trust_asset_code:
  446|    294|static bool format_allow_trust_asset_code(formatter_data_t *fdata) {
  447|    294|    STRLCPY(fdata->caption, "Asset Code", fdata->caption_len);
  ------------------
  |  |   35|    294|    {                                         \
  |  |   36|    294|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    294|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 294]
  |  |  ------------------
  |  |   38|    294|    }
  ------------------
  448|    294|    switch (fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_type) {
  449|    198|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (449:9): [True: 198, False: 96]
  ------------------
  450|    198|            FORMATTER_CHECK(
  ------------------
  |  |   30|    198|    {                           \
  |  |   31|    198|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 198]
  |  |  ------------------
  |  |   32|    198|    }
  ------------------
  451|    198|                print_string(fdata->value,
  452|    198|                             fdata->value_len,
  453|    198|                             fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_code,
  454|    198|                             4))
  455|       |
  456|    198|            break;
  457|    198|        }
  458|    198|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (458:9): [True: 96, False: 198]
  ------------------
  459|     96|            FORMATTER_CHECK(
  ------------------
  |  |   30|     96|    {                           \
  |  |   31|     96|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 96]
  |  |  ------------------
  |  |   32|     96|    }
  ------------------
  460|     96|                print_string(fdata->value,
  461|     96|                             fdata->value_len,
  462|     96|                             fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_code,
  463|     96|                             12))
  464|     96|            break;
  465|     96|        }
  466|     96|        default:
  ------------------
  |  Branch (466:9): [True: 0, False: 294]
  ------------------
  467|      0|            return false;  // unknown asset type
  468|    294|    }
  469|    294|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_authorize))
  ------------------
  |  |   30|    294|    {                           \
  |  |   31|    294|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 294]
  |  |  ------------------
  |  |   32|    294|    }
  ------------------
  470|    294|    return true;
  471|    294|}
formatter.c:format_allow_trust_authorize:
  437|    294|static bool format_allow_trust_authorize(formatter_data_t *fdata) {
  438|    294|    STRLCPY(fdata->caption, "Authorize Flag", fdata->caption_len);
  ------------------
  |  |   35|    294|    {                                         \
  |  |   36|    294|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    294|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 294]
  |  |  ------------------
  |  |   38|    294|    }
  ------------------
  439|    294|    FORMATTER_CHECK(
  ------------------
  |  |   30|    294|    {                           \
  |  |   31|    294|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 294]
  |  |  ------------------
  |  |   32|    294|    }
  ------------------
  440|    294|        print_allow_trust_flags(fdata->envelope->tx_details.tx.op_details.allow_trust_op.authorize,
  441|    294|                                fdata->value,
  442|    294|                                fdata->value_len))
  443|    294|    return format_operation_source_prepare(fdata);
  444|    294|}
formatter.c:format_account_merge:
  387|    488|static bool format_account_merge(formatter_data_t *fdata) {
  388|    488|    (void) fdata;
  389|    488|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    488|    {                                         \
  |  |   36|    488|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    488|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 488]
  |  |  ------------------
  |  |   38|    488|    }
  ------------------
  390|    488|    STRLCPY(fdata->value, "Account Merge", fdata->value_len);
  ------------------
  |  |   35|    488|    {                                         \
  |  |   36|    488|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    488|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 488]
  |  |  ------------------
  |  |   38|    488|    }
  ------------------
  391|    488|    FORMATTER_CHECK(push_to_formatter_stack(&format_account_merge_detail))
  ------------------
  |  |   30|    488|    {                           \
  |  |   31|    488|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 488]
  |  |  ------------------
  |  |   32|    488|    }
  ------------------
  392|    488|    return true;
  393|    488|}
formatter.c:format_account_merge_detail:
  380|    488|static bool format_account_merge_detail(formatter_data_t *fdata) {
  381|    488|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|    488|    {                                         \
  |  |   36|    488|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    488|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 488]
  |  |  ------------------
  |  |   38|    488|    }
  ------------------
  382|    488|    STRLCPY(fdata->value, "All Funds", fdata->value_len);
  ------------------
  |  |   35|    488|    {                                         \
  |  |   36|    488|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    488|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 488]
  |  |  ------------------
  |  |   38|    488|    }
  ------------------
  383|    488|    FORMATTER_CHECK(push_to_formatter_stack(&format_account_merge_destination))
  ------------------
  |  |   30|    488|    {                           \
  |  |   31|    488|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 488]
  |  |  ------------------
  |  |   32|    488|    }
  ------------------
  384|    488|    return true;
  385|    488|}
formatter.c:format_account_merge_destination:
  369|    488|static bool format_account_merge_destination(formatter_data_t *fdata) {
  370|    488|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    488|    {                                         \
  |  |   36|    488|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    488|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 488]
  |  |  ------------------
  |  |   38|    488|    }
  ------------------
  371|    488|    FORMATTER_CHECK(
  ------------------
  |  |   30|    488|    {                           \
  |  |   31|    488|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 488]
  |  |  ------------------
  |  |   32|    488|    }
  ------------------
  372|    488|        print_muxed_account(&fdata->envelope->tx_details.tx.op_details.account_merge_op.destination,
  373|    488|                            fdata->value,
  374|    488|                            fdata->value_len,
  375|    488|                            0,
  376|    488|                            0))
  377|    488|    return format_operation_source_prepare(fdata);
  378|    488|}
formatter.c:format_inflation:
  362|  1.04k|static bool format_inflation(formatter_data_t *fdata) {
  363|  1.04k|    (void) fdata;
  364|  1.04k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  1.04k|    {                                         \
  |  |   36|  1.04k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.04k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.04k]
  |  |  ------------------
  |  |   38|  1.04k|    }
  ------------------
  365|  1.04k|    STRLCPY(fdata->value, "Inflation", fdata->value_len);
  ------------------
  |  |   35|  1.04k|    {                                         \
  |  |   36|  1.04k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.04k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.04k]
  |  |  ------------------
  |  |   38|  1.04k|    }
  ------------------
  366|  1.04k|    return format_operation_source_prepare(fdata);
  367|  1.04k|}
formatter.c:format_manage_data:
  420|  1.10k|static bool format_manage_data(formatter_data_t *fdata) {
  421|  1.10k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.10k|    {                           \
  |  |   31|  1.10k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.10k]
  |  |  ------------------
  |  |   32|  1.10k|    }
  ------------------
  422|  1.10k|        print_string(fdata->value,
  423|  1.10k|                     fdata->value_len,
  424|  1.10k|                     fdata->envelope->tx_details.tx.op_details.manage_data_op.data_name,
  425|  1.10k|                     fdata->envelope->tx_details.tx.op_details.manage_data_op.data_name_size))
  426|       |
  427|  1.10k|    if (fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size) {
  ------------------
  |  Branch (427:9): [True: 43, False: 1.06k]
  ------------------
  428|     43|        STRLCPY(fdata->caption, "Set Data", fdata->caption_len);
  ------------------
  |  |   35|     43|    {                                         \
  |  |   36|     43|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     43|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   38|     43|    }
  ------------------
  429|     43|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_data_value))
  ------------------
  |  |   30|     43|    {                           \
  |  |   31|     43|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   32|     43|    }
  ------------------
  430|  1.06k|    } else {
  431|  1.06k|        STRLCPY(fdata->caption, "Remove Data", fdata->caption_len);
  ------------------
  |  |   35|  1.06k|    {                                         \
  |  |   36|  1.06k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.06k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.06k]
  |  |  ------------------
  |  |   38|  1.06k|    }
  ------------------
  432|  1.06k|        return format_operation_source_prepare(fdata);
  433|  1.06k|    }
  434|     43|    return true;
  435|  1.10k|}
formatter.c:format_manage_data_value:
  395|     43|static bool format_manage_data_value(formatter_data_t *fdata) {
  396|     43|    STRLCPY(fdata->caption, "Data Value", fdata->caption_len);
  ------------------
  |  |   35|     43|    {                                         \
  |  |   36|     43|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     43|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 43]
  |  |  ------------------
  |  |   38|     43|    }
  ------------------
  397|     43|    if (is_printable_binary(
  ------------------
  |  Branch (397:9): [True: 12, False: 31]
  ------------------
  398|     43|            fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  399|     43|            fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size)) {
  400|     12|        if (fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size >=
  ------------------
  |  Branch (400:13): [True: 0, False: 12]
  ------------------
  401|     12|            fdata->value_len) {
  402|      0|            return false;
  403|      0|        }
  404|     12|        FORMATTER_CHECK(
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  405|     12|            print_string(fdata->value,
  406|     12|                         fdata->value_len,
  407|     12|                         fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  408|     12|                         fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size))
  409|     31|    } else {
  410|     31|        STRLCPY(fdata->value, "Base64: ", fdata->value_len)
  ------------------
  |  |   35|     31|    {                                         \
  |  |   36|     31|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     31|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   38|     31|    }
  ------------------
  411|     31|        FORMATTER_CHECK(
  ------------------
  |  |   30|     31|    {                           \
  |  |   31|     31|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31]
  |  |  ------------------
  |  |   32|     31|    }
  ------------------
  412|     31|            base64_encode(fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  413|     31|                          fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size,
  414|     31|                          fdata->value + strlen(fdata->value),
  415|     31|                          fdata->value_len - strlen(fdata->value)))
  416|     31|    }
  417|     43|    return format_operation_source_prepare(fdata);
  418|     43|}
formatter.c:format_bump_sequence:
  354|    282|static bool format_bump_sequence(formatter_data_t *fdata) {
  355|    282|    (void) fdata;
  356|    282|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    282|    {                                         \
  |  |   36|    282|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    282|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   38|    282|    }
  ------------------
  357|    282|    STRLCPY(fdata->value, "Bump Sequence", fdata->value_len);
  ------------------
  |  |   35|    282|    {                                         \
  |  |   36|    282|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    282|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   38|    282|    }
  ------------------
  358|    282|    FORMATTER_CHECK(push_to_formatter_stack(&format_bump_sequence_bump_to))
  ------------------
  |  |   30|    282|    {                           \
  |  |   31|    282|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   32|    282|    }
  ------------------
  359|    282|    return true;
  360|    282|}
formatter.c:format_bump_sequence_bump_to:
  345|    282|static bool format_bump_sequence_bump_to(formatter_data_t *fdata) {
  346|    282|    STRLCPY(fdata->caption, "Bump To", fdata->caption_len);
  ------------------
  |  |   35|    282|    {                                         \
  |  |   36|    282|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    282|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   38|    282|    }
  ------------------
  347|    282|    FORMATTER_CHECK(
  ------------------
  |  |   30|    282|    {                           \
  |  |   31|    282|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   32|    282|    }
  ------------------
  348|    282|        print_int64_num(fdata->envelope->tx_details.tx.op_details.bump_sequence_op.bump_to,
  349|    282|                        fdata->value,
  350|    282|                        fdata->value_len))
  351|    282|    return format_operation_source_prepare(fdata);
  352|    282|}
formatter.c:format_manage_buy_offer:
  956|    224|static bool format_manage_buy_offer(formatter_data_t *fdata) {
  957|    224|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  958|       |
  959|    224|    if (op->buy_amount == 0) {
  ------------------
  |  Branch (959:9): [True: 114, False: 110]
  ------------------
  960|    114|        STRLCPY(fdata->caption, "Remove Offer", fdata->caption_len);
  ------------------
  |  |   35|    114|    {                                         \
  |  |   36|    114|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    114|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 114]
  |  |  ------------------
  |  |   38|    114|    }
  ------------------
  961|    114|        FORMATTER_CHECK(print_uint64_num(op->offer_id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|    114|    {                           \
  |  |   31|    114|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 114]
  |  |  ------------------
  |  |   32|    114|    }
  ------------------
  962|    114|        return format_operation_source_prepare(fdata);
  963|    114|    } else {
  964|    110|        if (op->offer_id) {
  ------------------
  |  Branch (964:13): [True: 60, False: 50]
  ------------------
  965|     60|            STRLCPY(fdata->caption, "Change Offer", fdata->caption_len);
  ------------------
  |  |   35|     60|    {                                         \
  |  |   36|     60|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     60|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 60]
  |  |  ------------------
  |  |   38|     60|    }
  ------------------
  966|     60|            FORMATTER_CHECK(print_uint64_num(op->offer_id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     60|    {                           \
  |  |   31|     60|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 60]
  |  |  ------------------
  |  |   32|     60|    }
  ------------------
  967|     60|        } else {
  968|     50|            STRLCPY(fdata->caption, "Create Offer", fdata->caption_len);
  ------------------
  |  |   35|     50|    {                                         \
  |  |   36|     50|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     50|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   38|     50|    }
  ------------------
  969|     50|            STRLCPY(fdata->value, "New Offer", fdata->value_len);
  ------------------
  |  |   35|     50|    {                                         \
  |  |   36|     50|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     50|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   38|     50|    }
  ------------------
  970|     50|        }
  971|    110|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_sell))
  ------------------
  |  |   30|    110|    {                           \
  |  |   31|    110|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 110]
  |  |  ------------------
  |  |   32|    110|    }
  ------------------
  972|    110|    }
  973|    110|    return true;
  974|    224|}
formatter.c:format_manage_buy_offer_sell:
  946|    110|static bool format_manage_buy_offer_sell(formatter_data_t *fdata) {
  947|    110|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  948|       |
  949|    110|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|    110|    {                                         \
  |  |   36|    110|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    110|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 110]
  |  |  ------------------
  |  |   38|    110|    }
  ------------------
  950|    110|    FORMATTER_CHECK(
  ------------------
  |  |   30|    110|    {                           \
  |  |   31|    110|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 110]
  |  |  ------------------
  |  |   32|    110|    }
  ------------------
  951|    110|        print_asset(&op->selling, fdata->envelope->network, fdata->value, fdata->value_len))
  952|    110|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_buy))
  ------------------
  |  |   30|    110|    {                           \
  |  |   31|    110|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 110]
  |  |  ------------------
  |  |   32|    110|    }
  ------------------
  953|    110|    return true;
  954|    110|}
formatter.c:format_manage_buy_offer_buy:
  933|    110|static bool format_manage_buy_offer_buy(formatter_data_t *fdata) {
  934|    110|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  935|       |
  936|    110|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|    110|    {                                         \
  |  |   36|    110|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    110|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 110]
  |  |  ------------------
  |  |   38|    110|    }
  ------------------
  937|    110|    FORMATTER_CHECK(print_amount(op->buy_amount,
  ------------------
  |  |   30|    110|    {                           \
  |  |   31|    110|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 110]
  |  |  ------------------
  |  |   32|    110|    }
  ------------------
  938|    110|                                 &op->buying,
  939|    110|                                 fdata->envelope->network,
  940|    110|                                 fdata->value,
  941|    110|                                 fdata->value_len))
  942|    110|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_price))
  ------------------
  |  |   30|    110|    {                           \
  |  |   31|    110|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 110]
  |  |  ------------------
  |  |   32|    110|    }
  ------------------
  943|    110|    return true;
  944|    110|}
formatter.c:format_manage_buy_offer_price:
  921|    110|static bool format_manage_buy_offer_price(formatter_data_t *fdata) {
  922|    110|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  923|    110|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|    110|    {                                         \
  |  |   36|    110|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    110|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 110]
  |  |  ------------------
  |  |   38|    110|    }
  ------------------
  924|    110|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|    110|    {                           \
  |  |   31|    110|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 110]
  |  |  ------------------
  |  |   32|    110|    }
  ------------------
  925|    110|                                &op->selling,
  926|    110|                                &op->buying,
  927|    110|                                fdata->envelope->network,
  928|    110|                                fdata->value,
  929|    110|                                fdata->value_len))
  930|    110|    return format_operation_source_prepare(fdata);
  931|    110|}
formatter.c:format_path_payment_strict_send:
 1078|    187|static bool format_path_payment_strict_send(formatter_data_t *fdata) {
 1079|    187|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|    187|    {                                         \
  |  |   36|    187|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    187|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   38|    187|    }
  ------------------
 1080|    187|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    187|    {                           \
  |  |   31|    187|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   32|    187|    }
  ------------------
 1081|    187|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.send_amount,
 1082|    187|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.send_asset,
 1083|    187|        fdata->envelope->network,
 1084|    187|        fdata->value,
 1085|    187|        fdata->value_len))
 1086|    187|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_send_destination))
  ------------------
  |  |   30|    187|    {                           \
  |  |   31|    187|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   32|    187|    }
  ------------------
 1087|    187|    return true;
 1088|    187|}
formatter.c:format_path_payment_strict_send_destination:
 1066|    187|static bool format_path_payment_strict_send_destination(formatter_data_t *fdata) {
 1067|    187|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    187|    {                                         \
  |  |   36|    187|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    187|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   38|    187|    }
  ------------------
 1068|    187|    FORMATTER_CHECK(print_muxed_account(
  ------------------
  |  |   30|    187|    {                           \
  |  |   31|    187|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   32|    187|    }
  ------------------
 1069|    187|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.destination,
 1070|    187|        fdata->value,
 1071|    187|        fdata->value_len,
 1072|    187|        0,
 1073|    187|        0))
 1074|    187|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_send_receive))
  ------------------
  |  |   30|    187|    {                           \
  |  |   31|    187|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   32|    187|    }
  ------------------
 1075|    187|    return true;
 1076|    187|}
formatter.c:format_path_payment_strict_send_receive:
 1055|    187|static bool format_path_payment_strict_send_receive(formatter_data_t *fdata) {
 1056|    187|    STRLCPY(fdata->caption, "Receive Min", fdata->caption_len);
  ------------------
  |  |   35|    187|    {                                         \
  |  |   36|    187|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    187|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   38|    187|    }
  ------------------
 1057|    187|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    187|    {                           \
  |  |   31|    187|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 187]
  |  |  ------------------
  |  |   32|    187|    }
  ------------------
 1058|    187|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.dest_min,
 1059|    187|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.dest_asset,
 1060|    187|        fdata->envelope->network,
 1061|    187|        fdata->value,
 1062|    187|        fdata->value_len))
 1063|    187|    return format_operation_source_prepare(fdata);
 1064|    187|}
formatter.c:format_create_claimable_balance:
 1167|    522|static bool format_create_claimable_balance(formatter_data_t *fdata) {
 1168|    522|    (void) fdata;
 1169|    522|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    522|    {                                         \
  |  |   36|    522|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    522|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 522]
  |  |  ------------------
  |  |   38|    522|    }
  ------------------
 1170|    522|    STRLCPY(fdata->value, "Create Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|    522|    {                                         \
  |  |   36|    522|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    522|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 522]
  |  |  ------------------
  |  |   38|    522|    }
  ------------------
 1171|    522|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_claimable_balance_balance))
  ------------------
  |  |   30|    522|    {                           \
  |  |   31|    522|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 522]
  |  |  ------------------
  |  |   32|    522|    }
  ------------------
 1172|    522|    return true;
 1173|    522|}
formatter.c:format_create_claimable_balance_balance:
 1155|    522|static bool format_create_claimable_balance_balance(formatter_data_t *fdata) {
 1156|    522|    STRLCPY(fdata->caption, "Balance", fdata->caption_len);
  ------------------
  |  |   35|    522|    {                                         \
  |  |   36|    522|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    522|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 522]
  |  |  ------------------
  |  |   38|    522|    }
  ------------------
 1157|    522|    FORMATTER_CHECK(
  ------------------
  |  |   30|    522|    {                           \
  |  |   31|    522|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 522]
  |  |  ------------------
  |  |   32|    522|    }
  ------------------
 1158|    522|        print_amount(fdata->envelope->tx_details.tx.op_details.create_claimable_balance_op.amount,
 1159|    522|                     &fdata->envelope->tx_details.tx.op_details.create_claimable_balance_op.asset,
 1160|    522|                     fdata->envelope->network,
 1161|    522|                     fdata->value,
 1162|    522|                     fdata->value_len))
 1163|    522|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_claimable_balance_warning))
  ------------------
  |  |   30|    522|    {                           \
  |  |   31|    522|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 522]
  |  |  ------------------
  |  |   32|    522|    }
  ------------------
 1164|    522|    return true;
 1165|    522|}
formatter.c:format_create_claimable_balance_warning:
 1144|    522|static bool format_create_claimable_balance_warning(formatter_data_t *fdata) {
 1145|    522|    (void) fdata;
 1146|       |    // The claimant can be very complicated. I haven't figured out how to
 1147|       |    // display it for the time being, so let's display an WARNING here first.
 1148|    522|    STRLCPY(fdata->caption, "WARNING", fdata->caption_len);
  ------------------
  |  |   35|    522|    {                                         \
  |  |   36|    522|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    522|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 522]
  |  |  ------------------
  |  |   38|    522|    }
  ------------------
 1149|    522|    STRLCPY(fdata->value,
  ------------------
  |  |   35|    522|    {                                         \
  |  |   36|    522|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    522|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 522]
  |  |  ------------------
  |  |   38|    522|    }
  ------------------
 1150|    522|            "Currently does not support displaying claimant details",
 1151|    522|            fdata->value_len);
 1152|    522|    return format_operation_source_prepare(fdata);
 1153|    522|}
formatter.c:format_claim_claimable_balance:
 1186|    221|static bool format_claim_claimable_balance(formatter_data_t *fdata) {
 1187|    221|    (void) fdata;
 1188|    221|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    221|    {                                         \
  |  |   36|    221|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    221|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 221]
  |  |  ------------------
  |  |   38|    221|    }
  ------------------
 1189|    221|    STRLCPY(fdata->value, "Claim Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|    221|    {                                         \
  |  |   36|    221|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    221|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 221]
  |  |  ------------------
  |  |   38|    221|    }
  ------------------
 1190|    221|    FORMATTER_CHECK(push_to_formatter_stack(&format_claim_claimable_balance_balance_id))
  ------------------
  |  |   30|    221|    {                           \
  |  |   31|    221|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 221]
  |  |  ------------------
  |  |   32|    221|    }
  ------------------
 1191|    221|    return true;
 1192|    221|}
formatter.c:format_claim_claimable_balance_balance_id:
 1175|    221|static bool format_claim_claimable_balance_balance_id(formatter_data_t *fdata) {
 1176|    221|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|    221|    {                                         \
  |  |   36|    221|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    221|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 221]
  |  |  ------------------
  |  |   38|    221|    }
  ------------------
 1177|    221|    FORMATTER_CHECK(print_claimable_balance_id(
  ------------------
  |  |   30|    221|    {                           \
  |  |   31|    221|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 221]
  |  |  ------------------
  |  |   32|    221|    }
  ------------------
 1178|    221|        &fdata->envelope->tx_details.tx.op_details.claim_claimable_balance_op.balance_id,
 1179|    221|        fdata->value,
 1180|    221|        fdata->value_len,
 1181|    221|        12,
 1182|    221|        12))
 1183|    221|    return format_operation_source_prepare(fdata);
 1184|    221|}
formatter.c:format_begin_sponsoring_future_reserves:
 1205|    737|static bool format_begin_sponsoring_future_reserves(formatter_data_t *fdata) {
 1206|    737|    (void) fdata;
 1207|    737|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    737|    {                                         \
  |  |   36|    737|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    737|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 737]
  |  |  ------------------
  |  |   38|    737|    }
  ------------------
 1208|    737|    STRLCPY(fdata->value, "Begin Sponsoring Future Reserves", fdata->value_len);
  ------------------
  |  |   35|    737|    {                                         \
  |  |   36|    737|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    737|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 737]
  |  |  ------------------
  |  |   38|    737|    }
  ------------------
 1209|    737|    FORMATTER_CHECK(push_to_formatter_stack(&format_claim_claimable_balance_sponsored_id))
  ------------------
  |  |   30|    737|    {                           \
  |  |   31|    737|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 737]
  |  |  ------------------
  |  |   32|    737|    }
  ------------------
 1210|    737|    return true;
 1211|    737|}
formatter.c:format_claim_claimable_balance_sponsored_id:
 1194|    737|static bool format_claim_claimable_balance_sponsored_id(formatter_data_t *fdata) {
 1195|    737|    STRLCPY(fdata->caption, "Sponsored ID", fdata->caption_len);
  ------------------
  |  |   35|    737|    {                                         \
  |  |   36|    737|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    737|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 737]
  |  |  ------------------
  |  |   38|    737|    }
  ------------------
 1196|    737|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|    737|    {                           \
  |  |   31|    737|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 737]
  |  |  ------------------
  |  |   32|    737|    }
  ------------------
 1197|    737|        fdata->envelope->tx_details.tx.op_details.begin_sponsoring_future_reserves_op.sponsored_id,
 1198|    737|        fdata->value,
 1199|    737|        fdata->value_len,
 1200|    737|        0,
 1201|    737|        0))
 1202|    737|    return format_operation_source_prepare(fdata);
 1203|    737|}
formatter.c:format_end_sponsoring_future_reserves:
 1213|    307|static bool format_end_sponsoring_future_reserves(formatter_data_t *fdata) {
 1214|    307|    (void) fdata;
 1215|    307|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    307|    {                                         \
  |  |   36|    307|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    307|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 307]
  |  |  ------------------
  |  |   38|    307|    }
  ------------------
 1216|    307|    STRLCPY(fdata->value, "End Sponsoring Future Reserves", fdata->value_len);
  ------------------
  |  |   35|    307|    {                                         \
  |  |   36|    307|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    307|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 307]
  |  |  ------------------
  |  |   38|    307|    }
  ------------------
 1217|    307|    return format_operation_source_prepare(fdata);
 1218|    307|}
formatter.c:format_revoke_sponsorship:
 1385|  3.14k|static bool format_revoke_sponsorship(formatter_data_t *fdata) {
 1386|  3.14k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  3.14k|    {                                         \
  |  |   36|  3.14k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  3.14k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 3.14k]
  |  |  ------------------
  |  |   38|  3.14k|    }
  ------------------
 1387|  3.14k|    if (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.type ==
  ------------------
  |  Branch (1387:9): [True: 1.19k, False: 1.94k]
  ------------------
 1388|  3.14k|        REVOKE_SPONSORSHIP_SIGNER) {
 1389|  1.19k|        STRLCPY(fdata->value, "Revoke Sponsorship (SIGNER_KEY)", fdata->value_len);
  ------------------
  |  |   35|  1.19k|    {                                         \
  |  |   36|  1.19k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.19k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.19k]
  |  |  ------------------
  |  |   38|  1.19k|    }
  ------------------
 1390|  1.19k|        FORMATTER_CHECK(
  ------------------
  |  |   30|  1.19k|    {                           \
  |  |   31|  1.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.19k]
  |  |  ------------------
  |  |   32|  1.19k|    }
  ------------------
 1391|  1.19k|            push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_account))
 1392|  1.94k|    } else {
 1393|  1.94k|        switch (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.type) {
 1394|    282|            case ACCOUNT:
  ------------------
  |  Branch (1394:13): [True: 282, False: 1.66k]
  ------------------
 1395|    282|                STRLCPY(fdata->value, "Revoke Sponsorship (ACCOUNT)", fdata->value_len);
  ------------------
  |  |   35|    282|    {                                         \
  |  |   36|    282|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    282|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   38|    282|    }
  ------------------
 1396|    282|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_account))
  ------------------
  |  |   30|    282|    {                           \
  |  |   31|    282|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   32|    282|    }
  ------------------
 1397|    282|                break;
 1398|    282|            case OFFER:
  ------------------
  |  Branch (1398:13): [True: 124, False: 1.82k]
  ------------------
 1399|    124|                STRLCPY(fdata->value, "Revoke Sponsorship (OFFER)", fdata->value_len);
  ------------------
  |  |   35|    124|    {                                         \
  |  |   36|    124|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    124|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   38|    124|    }
  ------------------
 1400|    124|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_offer_seller_id))
  ------------------
  |  |   30|    124|    {                           \
  |  |   31|    124|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   32|    124|    }
  ------------------
 1401|    124|                break;
 1402|    414|            case TRUSTLINE:
  ------------------
  |  Branch (1402:13): [True: 414, False: 1.53k]
  ------------------
 1403|    414|                STRLCPY(fdata->value, "Revoke Sponsorship (TRUSTLINE)", fdata->value_len);
  ------------------
  |  |   35|    414|    {                                         \
  |  |   36|    414|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    414|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 414]
  |  |  ------------------
  |  |   38|    414|    }
  ------------------
 1404|    414|                FORMATTER_CHECK(
  ------------------
  |  |   30|    414|    {                           \
  |  |   31|    414|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 414]
  |  |  ------------------
  |  |   32|    414|    }
  ------------------
 1405|    414|                    push_to_formatter_stack(&format_revoke_sponsorship_trust_line_account))
 1406|    414|                break;
 1407|    414|            case DATA:
  ------------------
  |  Branch (1407:13): [True: 217, False: 1.73k]
  ------------------
 1408|    217|                STRLCPY(fdata->value, "Revoke Sponsorship (DATA)", fdata->value_len);
  ------------------
  |  |   35|    217|    {                                         \
  |  |   36|    217|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    217|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 217]
  |  |  ------------------
  |  |   38|    217|    }
  ------------------
 1409|    217|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_data_account))
  ------------------
  |  |   30|    217|    {                           \
  |  |   31|    217|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 217]
  |  |  ------------------
  |  |   32|    217|    }
  ------------------
 1410|    217|                break;
 1411|    217|            case CLAIMABLE_BALANCE:
  ------------------
  |  Branch (1411:13): [True: 129, False: 1.81k]
  ------------------
 1412|    129|                STRLCPY(fdata->value, "Revoke Sponsorship (CLAIMABLE_BALANCE)", fdata->value_len);
  ------------------
  |  |   35|    129|    {                                         \
  |  |   36|    129|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    129|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 129]
  |  |  ------------------
  |  |   38|    129|    }
  ------------------
 1413|    129|                FORMATTER_CHECK(
  ------------------
  |  |   30|    129|    {                           \
  |  |   31|    129|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 129]
  |  |  ------------------
  |  |   32|    129|    }
  ------------------
 1414|    129|                    push_to_formatter_stack(&format_revoke_sponsorship_claimable_balance))
 1415|    129|                break;
 1416|    782|            case LIQUIDITY_POOL:
  ------------------
  |  Branch (1416:13): [True: 782, False: 1.16k]
  ------------------
 1417|    782|                STRLCPY(fdata->value, "Revoke Sponsorship (LIQUIDITY_POOL)", fdata->value_len);
  ------------------
  |  |   35|    782|    {                                         \
  |  |   36|    782|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    782|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 782]
  |  |  ------------------
  |  |   38|    782|    }
  ------------------
 1418|    782|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_liquidity_pool))
  ------------------
  |  |   30|    782|    {                           \
  |  |   31|    782|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 782]
  |  |  ------------------
  |  |   32|    782|    }
  ------------------
 1419|    782|                break;
 1420|    782|            default:
  ------------------
  |  Branch (1420:13): [True: 0, False: 1.94k]
  ------------------
 1421|      0|                return false;
 1422|  1.94k|        }
 1423|  1.94k|    }
 1424|  3.14k|    return true;
 1425|  3.14k|}
formatter.c:format_revoke_sponsorship_claimable_signer_account:
 1372|  1.19k|static bool format_revoke_sponsorship_claimable_signer_account(formatter_data_t *fdata) {
 1373|  1.19k|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|  1.19k|    {                                         \
  |  |   36|  1.19k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.19k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.19k]
  |  |  ------------------
  |  |   38|  1.19k|    }
  ------------------
 1374|  1.19k|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|  1.19k|    {                           \
  |  |   31|  1.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.19k]
  |  |  ------------------
  |  |   32|  1.19k|    }
  ------------------
 1375|  1.19k|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.account_id,
 1376|  1.19k|        fdata->value,
 1377|  1.19k|        fdata->value_len,
 1378|  1.19k|        0,
 1379|  1.19k|        0))
 1380|  1.19k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.19k|    {                           \
  |  |   31|  1.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.19k]
  |  |  ------------------
  |  |   32|  1.19k|    }
  ------------------
 1381|  1.19k|        push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_signer_key_type))
 1382|  1.19k|    return true;
 1383|  1.19k|}
formatter.c:format_revoke_sponsorship_claimable_signer_signer_key_type:
 1343|  1.19k|static bool format_revoke_sponsorship_claimable_signer_signer_key_type(formatter_data_t *fdata) {
 1344|  1.19k|    STRLCPY(fdata->caption, "Signer Key Type", fdata->caption_len);
  ------------------
  |  |   35|  1.19k|    {                                         \
  |  |   36|  1.19k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.19k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.19k]
  |  |  ------------------
  |  |   38|  1.19k|    }
  ------------------
 1345|  1.19k|    switch (
 1346|  1.19k|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.signer_key.type) {
 1347|    460|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (1347:9): [True: 460, False: 738]
  ------------------
 1348|    460|            STRLCPY(fdata->value, "Public Key", fdata->value_len);
  ------------------
  |  |   35|    460|    {                                         \
  |  |   36|    460|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    460|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 460]
  |  |  ------------------
  |  |   38|    460|    }
  ------------------
 1349|    460|            break;
 1350|    460|        }
 1351|    126|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (1351:9): [True: 126, False: 1.07k]
  ------------------
 1352|    126|            STRLCPY(fdata->value, "Hash(x)", fdata->value_len);
  ------------------
  |  |   35|    126|    {                                         \
  |  |   36|    126|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    126|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 126]
  |  |  ------------------
  |  |   38|    126|    }
  ------------------
 1353|    126|            break;
 1354|    126|        }
 1355|    268|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (1355:9): [True: 268, False: 930]
  ------------------
 1356|    268|            STRLCPY(fdata->value, "Pre-Auth", fdata->value_len);
  ------------------
  |  |   35|    268|    {                                         \
  |  |   36|    268|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    268|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 268]
  |  |  ------------------
  |  |   38|    268|    }
  ------------------
 1357|    268|            break;
 1358|    268|        }
 1359|    344|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (1359:9): [True: 344, False: 854]
  ------------------
 1360|    344|            STRLCPY(fdata->value, "Ed25519 Signed Payload", fdata->value_len);
  ------------------
  |  |   35|    344|    {                                         \
  |  |   36|    344|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    344|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 344]
  |  |  ------------------
  |  |   38|    344|    }
  ------------------
 1361|    344|            break;
 1362|    344|        }
 1363|      0|        default:
  ------------------
  |  Branch (1363:9): [True: 0, False: 1.19k]
  ------------------
 1364|      0|            return false;
 1365|  1.19k|    }
 1366|       |
 1367|  1.19k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.19k|    {                           \
  |  |   31|  1.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.19k]
  |  |  ------------------
  |  |   32|  1.19k|    }
  ------------------
 1368|  1.19k|        push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_signer_key_detail))
 1369|  1.19k|    return true;
 1370|  1.19k|}
formatter.c:format_revoke_sponsorship_claimable_signer_signer_key_detail:
 1334|  1.19k|static bool format_revoke_sponsorship_claimable_signer_signer_key_detail(formatter_data_t *fdata) {
 1335|  1.19k|    STRLCPY(fdata->caption, "Signer Key", fdata->caption_len);
  ------------------
  |  |   35|  1.19k|    {                                         \
  |  |   36|  1.19k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.19k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.19k]
  |  |  ------------------
  |  |   38|  1.19k|    }
  ------------------
 1336|  1.19k|    signer_key_t *key =
 1337|  1.19k|        &fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.signer_key;
 1338|       |
 1339|  1.19k|    FORMATTER_CHECK(print_signer_key_detail(key, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  1.19k|    {                           \
  |  |   31|  1.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.19k]
  |  |  ------------------
  |  |   32|  1.19k|    }
  ------------------
 1340|  1.19k|    return format_operation_source_prepare(fdata);
 1341|  1.19k|}
formatter.c:format_revoke_sponsorship_account:
 1220|    282|static bool format_revoke_sponsorship_account(formatter_data_t *fdata) {
 1221|    282|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    282|    {                                         \
  |  |   36|    282|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    282|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   38|    282|    }
  ------------------
 1222|    282|    FORMATTER_CHECK(print_account_id(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|    282|    {                           \
  |  |   31|    282|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   32|    282|    }
  ------------------
 1223|    282|                                         .ledger_key.account.account_id,
 1224|    282|                                     fdata->value,
 1225|    282|                                     fdata->value_len,
 1226|    282|                                     0,
 1227|    282|                                     0))
 1228|    282|    return format_operation_source_prepare(fdata);
 1229|    282|}
formatter.c:format_revoke_sponsorship_offer_seller_id:
 1275|    124|static bool format_revoke_sponsorship_offer_seller_id(formatter_data_t *fdata) {
 1276|    124|    STRLCPY(fdata->caption, "Seller ID", fdata->caption_len);
  ------------------
  |  |   35|    124|    {                                         \
  |  |   36|    124|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    124|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   38|    124|    }
  ------------------
 1277|    124|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|    124|    {                           \
  |  |   31|    124|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   32|    124|    }
  ------------------
 1278|    124|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.offer.seller_id,
 1279|    124|        fdata->value,
 1280|    124|        fdata->value_len,
 1281|    124|        0,
 1282|    124|        0))
 1283|    124|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_offer_offer_id))
  ------------------
  |  |   30|    124|    {                           \
  |  |   31|    124|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   32|    124|    }
  ------------------
 1284|    124|    return true;
 1285|    124|}
formatter.c:format_revoke_sponsorship_offer_offer_id:
 1265|    124|static bool format_revoke_sponsorship_offer_offer_id(formatter_data_t *fdata) {
 1266|    124|    STRLCPY(fdata->caption, "Offer ID", fdata->caption_len);
  ------------------
  |  |   35|    124|    {                                         \
  |  |   36|    124|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    124|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   38|    124|    }
  ------------------
 1267|    124|    FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|    124|    {                           \
  |  |   31|    124|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 124]
  |  |  ------------------
  |  |   32|    124|    }
  ------------------
 1268|    124|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.offer.offer_id,
 1269|    124|        fdata->value,
 1270|    124|        fdata->value_len))
 1271|       |
 1272|    124|    return format_operation_source_prepare(fdata);
 1273|    124|}
formatter.c:format_revoke_sponsorship_trust_line_account:
 1253|    414|static bool format_revoke_sponsorship_trust_line_account(formatter_data_t *fdata) {
 1254|    414|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    414|    {                                         \
  |  |   36|    414|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    414|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 414]
  |  |  ------------------
  |  |   38|    414|    }
  ------------------
 1255|    414|    FORMATTER_CHECK(print_account_id(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|    414|    {                           \
  |  |   31|    414|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 414]
  |  |  ------------------
  |  |   32|    414|    }
  ------------------
 1256|    414|                                         .ledger_key.trust_line.account_id,
 1257|    414|                                     fdata->value,
 1258|    414|                                     fdata->value_len,
 1259|    414|                                     0,
 1260|    414|                                     0))
 1261|    414|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_trust_line_asset))
  ------------------
  |  |   30|    414|    {                           \
  |  |   31|    414|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 414]
  |  |  ------------------
  |  |   32|    414|    }
  ------------------
 1262|    414|    return true;
 1263|    414|}
formatter.c:format_revoke_sponsorship_trust_line_asset:
 1231|    414|static bool format_revoke_sponsorship_trust_line_asset(formatter_data_t *fdata) {
 1232|    414|    if (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.trust_line.asset
  ------------------
  |  Branch (1232:9): [True: 91, False: 323]
  ------------------
 1233|    414|            .type == ASSET_TYPE_POOL_SHARE) {
 1234|     91|        STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     91|    {                                         \
  |  |   36|     91|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     91|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 91]
  |  |  ------------------
  |  |   38|     91|    }
  ------------------
 1235|     91|        FORMATTER_CHECK(print_binary(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|     91|    {                           \
  |  |   31|     91|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 91]
  |  |  ------------------
  |  |   32|     91|    }
  ------------------
 1236|     91|                                         .ledger_key.trust_line.asset.liquidity_pool_id,
 1237|     91|                                     LIQUIDITY_POOL_ID_SIZE,
 1238|     91|                                     fdata->value,
 1239|     91|                                     fdata->value_len,
 1240|     91|                                     0,
 1241|     91|                                     0))
 1242|    323|    } else {
 1243|    323|        STRLCPY(fdata->caption, "Asset", fdata->caption_len);
  ------------------
  |  |   35|    323|    {                                         \
  |  |   36|    323|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    323|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 323]
  |  |  ------------------
  |  |   38|    323|    }
  ------------------
 1244|    323|        FORMATTER_CHECK(print_asset((asset_t *) &fdata->envelope->tx_details.tx.op_details
  ------------------
  |  |   30|    323|    {                           \
  |  |   31|    323|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 323]
  |  |  ------------------
  |  |   32|    323|    }
  ------------------
 1245|    323|                                        .revoke_sponsorship_op.ledger_key.trust_line.asset,
 1246|    323|                                    fdata->envelope->network,
 1247|    323|                                    fdata->value,
 1248|    323|                                    fdata->value_len))
 1249|    323|    }
 1250|    414|    return format_operation_source_prepare(fdata);
 1251|    414|}
formatter.c:format_revoke_sponsorship_data_account:
 1298|    217|static bool format_revoke_sponsorship_data_account(formatter_data_t *fdata) {
 1299|    217|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    217|    {                                         \
  |  |   36|    217|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    217|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 217]
  |  |  ------------------
  |  |   38|    217|    }
  ------------------
 1300|    217|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|    217|    {                           \
  |  |   31|    217|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 217]
  |  |  ------------------
  |  |   32|    217|    }
  ------------------
 1301|    217|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data.account_id,
 1302|    217|        fdata->value,
 1303|    217|        fdata->value_len,
 1304|    217|        0,
 1305|    217|        0))
 1306|    217|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_data_data_name))
  ------------------
  |  |   30|    217|    {                           \
  |  |   31|    217|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 217]
  |  |  ------------------
  |  |   32|    217|    }
  ------------------
 1307|    217|    return true;
 1308|    217|}
formatter.c:format_revoke_sponsorship_data_data_name:
 1287|    217|static bool format_revoke_sponsorship_data_data_name(formatter_data_t *fdata) {
 1288|    217|    STRLCPY(fdata->caption, "Data Name", fdata->caption_len);
  ------------------
  |  |   35|    217|    {                                         \
  |  |   36|    217|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    217|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 217]
  |  |  ------------------
  |  |   38|    217|    }
  ------------------
 1289|    217|    FORMATTER_CHECK(print_string(
  ------------------
  |  |   30|    217|    {                           \
  |  |   31|    217|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 217]
  |  |  ------------------
  |  |   32|    217|    }
  ------------------
 1290|    217|        fdata->value,
 1291|    217|        fdata->value_len,
 1292|    217|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data.data_name,
 1293|    217|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data
 1294|    217|            .data_name_size))
 1295|    217|    return format_operation_source_prepare(fdata);
 1296|    217|}
formatter.c:format_revoke_sponsorship_claimable_balance:
 1310|    129|static bool format_revoke_sponsorship_claimable_balance(formatter_data_t *fdata) {
 1311|    129|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|    129|    {                                         \
  |  |   36|    129|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    129|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 129]
  |  |  ------------------
  |  |   38|    129|    }
  ------------------
 1312|    129|    FORMATTER_CHECK(
  ------------------
  |  |   30|    129|    {                           \
  |  |   31|    129|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 129]
  |  |  ------------------
  |  |   32|    129|    }
  ------------------
 1313|    129|        print_claimable_balance_id(&fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
 1314|    129|                                        .ledger_key.claimable_balance.balance_id,
 1315|    129|                                   fdata->value,
 1316|    129|                                   fdata->value_len,
 1317|    129|                                   0,
 1318|    129|                                   0))
 1319|    129|    return format_operation_source_prepare(fdata);
 1320|    129|}
formatter.c:format_revoke_sponsorship_liquidity_pool:
 1322|    782|static bool format_revoke_sponsorship_liquidity_pool(formatter_data_t *fdata) {
 1323|    782|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|    782|    {                                         \
  |  |   36|    782|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    782|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 782]
  |  |  ------------------
  |  |   38|    782|    }
  ------------------
 1324|    782|    FORMATTER_CHECK(print_binary(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|    782|    {                           \
  |  |   31|    782|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 782]
  |  |  ------------------
  |  |   32|    782|    }
  ------------------
 1325|    782|                                     .ledger_key.liquidity_pool.liquidity_pool_id,
 1326|    782|                                 LIQUIDITY_POOL_ID_SIZE,
 1327|    782|                                 fdata->value,
 1328|    782|                                 fdata->value_len,
 1329|    782|                                 0,
 1330|    782|                                 0))
 1331|    782|    return format_operation_source_prepare(fdata);
 1332|    782|}
formatter.c:format_clawback:
 1448|    111|static bool format_clawback(formatter_data_t *fdata) {
 1449|    111|    (void) fdata;
 1450|    111|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    111|    {                                         \
  |  |   36|    111|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    111|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 111]
  |  |  ------------------
  |  |   38|    111|    }
  ------------------
 1451|    111|    STRLCPY(fdata->value, "Clawback", fdata->value_len);
  ------------------
  |  |   35|    111|    {                                         \
  |  |   36|    111|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    111|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 111]
  |  |  ------------------
  |  |   38|    111|    }
  ------------------
 1452|    111|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_amount))
  ------------------
  |  |   30|    111|    {                           \
  |  |   31|    111|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 111]
  |  |  ------------------
  |  |   32|    111|    }
  ------------------
 1453|    111|    return true;
 1454|    111|}
formatter.c:format_clawback_amount:
 1437|    111|static bool format_clawback_amount(formatter_data_t *fdata) {
 1438|    111|    STRLCPY(fdata->caption, "Clawback Balance", fdata->caption_len);
  ------------------
  |  |   35|    111|    {                                         \
  |  |   36|    111|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    111|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 111]
  |  |  ------------------
  |  |   38|    111|    }
  ------------------
 1439|    111|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.clawback_op.amount,
  ------------------
  |  |   30|    111|    {                           \
  |  |   31|    111|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 111]
  |  |  ------------------
  |  |   32|    111|    }
  ------------------
 1440|    111|                                 &fdata->envelope->tx_details.tx.op_details.clawback_op.asset,
 1441|    111|                                 fdata->envelope->network,
 1442|    111|                                 fdata->value,
 1443|    111|                                 fdata->value_len))
 1444|    111|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_from))
  ------------------
  |  |   30|    111|    {                           \
  |  |   31|    111|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 111]
  |  |  ------------------
  |  |   32|    111|    }
  ------------------
 1445|    111|    return true;
 1446|    111|}
formatter.c:format_clawback_from:
 1427|    111|static bool format_clawback_from(formatter_data_t *fdata) {
 1428|    111|    STRLCPY(fdata->caption, "From", fdata->caption_len);
  ------------------
  |  |   35|    111|    {                                         \
  |  |   36|    111|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    111|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 111]
  |  |  ------------------
  |  |   38|    111|    }
  ------------------
 1429|    111|    FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.op_details.clawback_op.from,
  ------------------
  |  |   30|    111|    {                           \
  |  |   31|    111|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 111]
  |  |  ------------------
  |  |   32|    111|    }
  ------------------
 1430|    111|                                        fdata->value,
 1431|    111|                                        fdata->value_len,
 1432|    111|                                        0,
 1433|    111|                                        0))
 1434|    111|    return format_operation_source_prepare(fdata);
 1435|    111|}
formatter.c:format_clawback_claimable_balance:
 1467|    178|static bool format_clawback_claimable_balance(formatter_data_t *fdata) {
 1468|    178|    (void) fdata;
 1469|    178|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    178|    {                                         \
  |  |   36|    178|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    178|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 178]
  |  |  ------------------
  |  |   38|    178|    }
  ------------------
 1470|    178|    STRLCPY(fdata->value, "Clawback Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|    178|    {                                         \
  |  |   36|    178|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    178|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 178]
  |  |  ------------------
  |  |   38|    178|    }
  ------------------
 1471|    178|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_claimable_balance_balance_id))
  ------------------
  |  |   30|    178|    {                           \
  |  |   31|    178|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 178]
  |  |  ------------------
  |  |   32|    178|    }
  ------------------
 1472|    178|    return true;
 1473|    178|}
formatter.c:format_clawback_claimable_balance_balance_id:
 1456|    178|static bool format_clawback_claimable_balance_balance_id(formatter_data_t *fdata) {
 1457|    178|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|    178|    {                                         \
  |  |   36|    178|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    178|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 178]
  |  |  ------------------
  |  |   38|    178|    }
  ------------------
 1458|    178|    FORMATTER_CHECK(print_claimable_balance_id(
  ------------------
  |  |   30|    178|    {                           \
  |  |   31|    178|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 178]
  |  |  ------------------
  |  |   32|    178|    }
  ------------------
 1459|    178|        &fdata->envelope->tx_details.tx.op_details.clawback_claimable_balance_op.balance_id,
 1460|    178|        fdata->value,
 1461|    178|        fdata->value_len,
 1462|    178|        0,
 1463|    178|        0))
 1464|    178|    return format_operation_source_prepare(fdata);
 1465|    178|}
formatter.c:format_set_trust_line_flags:
 1525|  1.70k|static bool format_set_trust_line_flags(formatter_data_t *fdata) {
 1526|  1.70k|    (void) fdata;
 1527|  1.70k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  1.70k|    {                                         \
  |  |   36|  1.70k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.70k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.70k]
  |  |  ------------------
  |  |   38|  1.70k|    }
  ------------------
 1528|  1.70k|    STRLCPY(fdata->value, "Set Trust Line Flags", fdata->value_len);
  ------------------
  |  |   35|  1.70k|    {                                         \
  |  |   36|  1.70k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.70k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.70k]
  |  |  ------------------
  |  |   38|  1.70k|    }
  ------------------
 1529|  1.70k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_trustor))
  ------------------
  |  |   30|  1.70k|    {                           \
  |  |   31|  1.70k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.70k]
  |  |  ------------------
  |  |   32|  1.70k|    }
  ------------------
 1530|  1.70k|    return true;
 1531|  1.70k|}
formatter.c:format_set_trust_line_trustor:
 1513|  1.70k|static bool format_set_trust_line_trustor(formatter_data_t *fdata) {
 1514|  1.70k|    STRLCPY(fdata->caption, "Trustor", fdata->caption_len);
  ------------------
  |  |   35|  1.70k|    {                                         \
  |  |   36|  1.70k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.70k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.70k]
  |  |  ------------------
  |  |   38|  1.70k|    }
  ------------------
 1515|  1.70k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.70k|    {                           \
  |  |   31|  1.70k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.70k]
  |  |  ------------------
  |  |   32|  1.70k|    }
  ------------------
 1516|  1.70k|        print_account_id(fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.trustor,
 1517|  1.70k|                         fdata->value,
 1518|  1.70k|                         fdata->value_len,
 1519|  1.70k|                         0,
 1520|  1.70k|                         0))
 1521|  1.70k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_asset))
  ------------------
  |  |   30|  1.70k|    {                           \
  |  |   31|  1.70k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.70k]
  |  |  ------------------
  |  |   32|  1.70k|    }
  ------------------
 1522|  1.70k|    return true;
 1523|  1.70k|}
formatter.c:format_set_trust_line_asset:
 1502|  1.70k|static bool format_set_trust_line_asset(formatter_data_t *fdata) {
 1503|  1.70k|    STRLCPY(fdata->caption, "Asset", fdata->caption_len);
  ------------------
  |  |   35|  1.70k|    {                                         \
  |  |   36|  1.70k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.70k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.70k]
  |  |  ------------------
  |  |   38|  1.70k|    }
  ------------------
 1504|  1.70k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.70k|    {                           \
  |  |   31|  1.70k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.70k]
  |  |  ------------------
  |  |   32|  1.70k|    }
  ------------------
 1505|  1.70k|        print_asset(&fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.asset,
 1506|  1.70k|                    fdata->envelope->network,
 1507|  1.70k|                    fdata->value,
 1508|  1.70k|                    fdata->value_len))
 1509|  1.70k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_clear_flags))
  ------------------
  |  |   30|  1.70k|    {                           \
  |  |   31|  1.70k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.70k]
  |  |  ------------------
  |  |   32|  1.70k|    }
  ------------------
 1510|  1.70k|    return true;
 1511|  1.70k|}
formatter.c:format_set_trust_line_clear_flags:
 1488|  1.70k|static bool format_set_trust_line_clear_flags(formatter_data_t *fdata) {
 1489|  1.70k|    STRLCPY(fdata->caption, "Clear Flags", fdata->caption_len);
  ------------------
  |  |   35|  1.70k|    {                                         \
  |  |   36|  1.70k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.70k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.70k]
  |  |  ------------------
  |  |   38|  1.70k|    }
  ------------------
 1490|  1.70k|    if (fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.clear_flags) {
  ------------------
  |  Branch (1490:9): [True: 804, False: 901]
  ------------------
 1491|    804|        FORMATTER_CHECK(print_trust_line_flags(
  ------------------
  |  |   30|    804|    {                           \
  |  |   31|    804|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 804]
  |  |  ------------------
  |  |   32|    804|    }
  ------------------
 1492|    804|            fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.clear_flags,
 1493|    804|            fdata->value,
 1494|    804|            fdata->value_len))
 1495|    901|    } else {
 1496|    901|        STRLCPY(fdata->value, "[none]", fdata->value_len);
  ------------------
  |  |   35|    901|    {                                         \
  |  |   36|    901|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    901|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 901]
  |  |  ------------------
  |  |   38|    901|    }
  ------------------
 1497|    901|    }
 1498|  1.70k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_set_flags))
  ------------------
  |  |   30|  1.70k|    {                           \
  |  |   31|  1.70k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.70k]
  |  |  ------------------
  |  |   32|  1.70k|    }
  ------------------
 1499|  1.70k|    return true;
 1500|  1.70k|}
formatter.c:format_set_trust_line_set_flags:
 1475|  1.70k|static bool format_set_trust_line_set_flags(formatter_data_t *fdata) {
 1476|  1.70k|    STRLCPY(fdata->caption, "Set Flags", fdata->caption_len);
  ------------------
  |  |   35|  1.70k|    {                                         \
  |  |   36|  1.70k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.70k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.70k]
  |  |  ------------------
  |  |   38|  1.70k|    }
  ------------------
 1477|  1.70k|    if (fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.set_flags) {
  ------------------
  |  Branch (1477:9): [True: 797, False: 908]
  ------------------
 1478|    797|        FORMATTER_CHECK(print_trust_line_flags(
  ------------------
  |  |   30|    797|    {                           \
  |  |   31|    797|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 797]
  |  |  ------------------
  |  |   32|    797|    }
  ------------------
 1479|    797|            fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.set_flags,
 1480|    797|            fdata->value,
 1481|    797|            fdata->value_len))
 1482|    908|    } else {
 1483|    908|        STRLCPY(fdata->value, "[none]", fdata->value_len);
  ------------------
  |  |   35|    908|    {                                         \
  |  |   36|    908|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    908|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 908]
  |  |  ------------------
  |  |   38|    908|    }
  ------------------
 1484|    908|    }
 1485|  1.70k|    return format_operation_source_prepare(fdata);
 1486|  1.70k|}
formatter.c:format_liquidity_pool_deposit:
 1597|     75|static bool format_liquidity_pool_deposit(formatter_data_t *fdata) {
 1598|     75|    (void) fdata;
 1599|     75|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1600|     75|    STRLCPY(fdata->value, "Liquidity Pool Deposit", fdata->value_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1601|     75|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_liquidity_pool_id))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1602|     75|    return true;
 1603|     75|}
formatter.c:format_liquidity_pool_deposit_liquidity_pool_id:
 1584|     75|static bool format_liquidity_pool_deposit_liquidity_pool_id(formatter_data_t *fdata) {
 1585|     75|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1586|     75|    FORMATTER_CHECK(print_binary(
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1587|     75|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.liquidity_pool_id,
 1588|     75|        LIQUIDITY_POOL_ID_SIZE,
 1589|     75|        fdata->value,
 1590|     75|        fdata->value_len,
 1591|     75|        0,
 1592|     75|        0))
 1593|     75|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_amount_a))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1594|     75|    return true;
 1595|     75|}
formatter.c:format_liquidity_pool_deposit_max_amount_a:
 1572|     75|static bool format_liquidity_pool_deposit_max_amount_a(formatter_data_t *fdata) {
 1573|     75|    STRLCPY(fdata->caption, "Max Amount A", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1574|     75|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1575|     75|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.max_amount_a,
 1576|     75|        NULL,
 1577|     75|        fdata->envelope->network,
 1578|     75|        fdata->value,
 1579|     75|        fdata->value_len))
 1580|     75|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_amount_b))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1581|     75|    return true;
 1582|     75|}
formatter.c:format_liquidity_pool_deposit_max_amount_b:
 1560|     75|static bool format_liquidity_pool_deposit_max_amount_b(formatter_data_t *fdata) {
 1561|     75|    STRLCPY(fdata->caption, "Max Amount B", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1562|     75|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1563|     75|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.max_amount_b,
 1564|     75|        NULL,
 1565|     75|        fdata->envelope->network,
 1566|     75|        fdata->value,
 1567|     75|        fdata->value_len))
 1568|     75|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_min_price))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1569|     75|    return true;
 1570|     75|}
formatter.c:format_liquidity_pool_deposit_min_price:
 1546|     75|static bool format_liquidity_pool_deposit_min_price(formatter_data_t *fdata) {
 1547|     75|    liquidity_pool_deposit_op_t *op =
 1548|     75|        &fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op;
 1549|     75|    STRLCPY(fdata->caption, "Min Price", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1550|     75|    FORMATTER_CHECK(print_price(&op->min_price,
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1551|     75|                                NULL,
 1552|     75|                                NULL,
 1553|     75|                                fdata->envelope->network,
 1554|     75|                                fdata->value,
 1555|     75|                                fdata->value_len))
 1556|     75|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_price))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1557|     75|    return true;
 1558|     75|}
formatter.c:format_liquidity_pool_deposit_max_price:
 1533|     75|static bool format_liquidity_pool_deposit_max_price(formatter_data_t *fdata) {
 1534|     75|    liquidity_pool_deposit_op_t *op =
 1535|     75|        &fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op;
 1536|     75|    STRLCPY(fdata->caption, "Max Price", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1537|     75|    FORMATTER_CHECK(print_price(&op->max_price,
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1538|     75|                                NULL,
 1539|     75|                                NULL,
 1540|     75|                                fdata->envelope->network,
 1541|     75|                                fdata->value,
 1542|     75|                                fdata->value_len))
 1543|     75|    return format_operation_source_prepare(fdata);
 1544|     75|}
formatter.c:format_liquidity_pool_withdraw:
 1653|    341|static bool format_liquidity_pool_withdraw(formatter_data_t *fdata) {
 1654|    341|    (void) fdata;
 1655|    341|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1656|    341|    STRLCPY(fdata->value, "Liquidity Pool Withdraw", fdata->value_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1657|    341|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_liquidity_pool_id))
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1658|    341|    return true;
 1659|    341|}
formatter.c:format_liquidity_pool_withdraw_liquidity_pool_id:
 1640|    341|static bool format_liquidity_pool_withdraw_liquidity_pool_id(formatter_data_t *fdata) {
 1641|    341|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1642|    341|    FORMATTER_CHECK(print_binary(
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1643|    341|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.liquidity_pool_id,
 1644|    341|        LIQUIDITY_POOL_ID_SIZE,
 1645|    341|        fdata->value,
 1646|    341|        fdata->value_len,
 1647|    341|        0,
 1648|    341|        0))
 1649|    341|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_amount))
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1650|    341|    return true;
 1651|    341|}
formatter.c:format_liquidity_pool_withdraw_amount:
 1628|    341|static bool format_liquidity_pool_withdraw_amount(formatter_data_t *fdata) {
 1629|    341|    STRLCPY(fdata->caption, "Amount", fdata->caption_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1630|    341|    FORMATTER_CHECK(
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1631|    341|        print_amount(fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.amount,
 1632|    341|                     NULL,
 1633|    341|                     fdata->envelope->network,
 1634|    341|                     fdata->value,
 1635|    341|                     fdata->value_len))
 1636|    341|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_min_amount_a))
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1637|    341|    return true;
 1638|    341|}
formatter.c:format_liquidity_pool_withdraw_min_amount_a:
 1616|    341|static bool format_liquidity_pool_withdraw_min_amount_a(formatter_data_t *fdata) {
 1617|    341|    STRLCPY(fdata->caption, "Min Amount A", fdata->caption_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1618|    341|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1619|    341|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.min_amount_a,
 1620|    341|        NULL,
 1621|    341|        fdata->envelope->network,
 1622|    341|        fdata->value,
 1623|    341|        fdata->value_len))
 1624|    341|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_min_amount_b))
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1625|    341|    return true;
 1626|    341|}
formatter.c:format_liquidity_pool_withdraw_min_amount_b:
 1605|    341|static bool format_liquidity_pool_withdraw_min_amount_b(formatter_data_t *fdata) {
 1606|    341|    STRLCPY(fdata->caption, "Min Amount B", fdata->caption_len);
  ------------------
  |  |   35|    341|    {                                         \
  |  |   36|    341|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    341|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   38|    341|    }
  ------------------
 1607|    341|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    341|    {                           \
  |  |   31|    341|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 341]
  |  |  ------------------
  |  |   32|    341|    }
  ------------------
 1608|    341|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.min_amount_b,
 1609|    341|        NULL,
 1610|    341|        fdata->envelope->network,
 1611|    341|        fdata->value,
 1612|    341|        fdata->value_len))
 1613|    341|    return format_operation_source_prepare(fdata);
 1614|    341|}
formatter.c:format_invoke_host_function:
 2172|  1.29k|static bool format_invoke_host_function(formatter_data_t *fdata) {
 2173|       |    // avoid the host function op be overwritten by the sub-invocation
 2174|  1.29k|    if (fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocations_count) {
  ------------------
  |  Branch (2174:9): [True: 175, False: 1.12k]
  ------------------
 2175|    175|        if (!parse_transaction_operation(fdata->raw_data,
  ------------------
  |  Branch (2175:13): [True: 0, False: 175]
  ------------------
 2176|    175|                                         fdata->raw_data_len,
 2177|    175|                                         fdata->envelope,
 2178|    175|                                         fdata->envelope->tx_details.tx.operation_index)) {
 2179|      0|            return false;
 2180|    175|        };
 2181|    175|    }
 2182|  1.29k|    switch (fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.host_function_type) {
 2183|    873|        case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:
  ------------------
  |  Branch (2183:9): [True: 873, False: 425]
  ------------------
 2184|    873|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    873|    {                                         \
  |  |   36|    873|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    873|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 873]
  |  |  ------------------
  |  |   38|    873|    }
  ------------------
 2185|    873|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|    873|    {                                         \
  |  |   36|    873|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    873|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 873]
  |  |  ------------------
  |  |   38|    873|    }
  ------------------
 2186|    873|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_contract_id));
  ------------------
  |  |   30|    873|    {                           \
  |  |   31|    873|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 873]
  |  |  ------------------
  |  |   32|    873|    }
  ------------------
 2187|    873|            break;
 2188|    239|        case HOST_FUNCTION_TYPE_CREATE_CONTRACT:
  ------------------
  |  Branch (2188:9): [True: 239, False: 1.05k]
  ------------------
 2189|    239|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    239|    {                                         \
  |  |   36|    239|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    239|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 239]
  |  |  ------------------
  |  |   38|    239|    }
  ------------------
 2190|    239|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|    239|    {                                         \
  |  |   36|    239|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    239|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 239]
  |  |  ------------------
  |  |   38|    239|    }
  ------------------
 2191|       |            // we dont need to care the sub-invocation here
 2192|    239|            return format_operation_source_prepare(fdata);
 2193|      0|            break;
 2194|    186|        case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM:
  ------------------
  |  Branch (2194:9): [True: 186, False: 1.11k]
  ------------------
 2195|    186|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    186|    {                                         \
  |  |   36|    186|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    186|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 186]
  |  |  ------------------
  |  |   38|    186|    }
  ------------------
 2196|    186|            STRLCPY(fdata->value, "Upload Smart Contract Wasm", fdata->value_len);
  ------------------
  |  |   35|    186|    {                                         \
  |  |   36|    186|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    186|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 186]
  |  |  ------------------
  |  |   38|    186|    }
  ------------------
 2197|    186|            return format_operation_source_prepare(fdata);
 2198|      0|            break;
 2199|      0|        default:
  ------------------
  |  Branch (2199:9): [True: 0, False: 1.29k]
  ------------------
 2200|      0|            return false;
 2201|  1.29k|    }
 2202|    873|    return true;
 2203|  1.29k|}
formatter.c:format_extend_footprint_ttl:
 2224|    198|static bool format_extend_footprint_ttl(formatter_data_t *fdata) {
 2225|    198|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    198|    {                                         \
  |  |   36|    198|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    198|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 198]
  |  |  ------------------
  |  |   38|    198|    }
  ------------------
 2226|    198|    STRLCPY(fdata->value, "Extend Footprint TTL", fdata->value_len);
  ------------------
  |  |   35|    198|    {                                         \
  |  |   36|    198|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    198|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 198]
  |  |  ------------------
  |  |   38|    198|    }
  ------------------
 2227|    198|    return format_operation_source_prepare(fdata);
 2228|    198|}
formatter.c:format_restore_footprint:
 2230|    534|static bool format_restore_footprint(formatter_data_t *fdata) {
 2231|    534|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    534|    {                                         \
  |  |   36|    534|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    534|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 534]
  |  |  ------------------
  |  |   38|    534|    }
  ------------------
 2232|    534|    STRLCPY(fdata->value, "Restore Footprint", fdata->value_len);
  ------------------
  |  |   35|    534|    {                                         \
  |  |   36|    534|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    534|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 534]
  |  |  ------------------
  |  |   38|    534|    }
  ------------------
 2233|    534|    return format_operation_source_prepare(fdata);
 2234|    534|}

parse_bool:
   48|  4.74M|bool parse_bool(buffer_t *buffer, bool *b) {
   49|  4.74M|    uint32_t val;
   50|       |
   51|  4.74M|    if (!parse_uint32(buffer, &val)) {
  ------------------
  |  Branch (51:9): [True: 366, False: 4.74M]
  ------------------
   52|    366|        return false;
   53|    366|    }
   54|  4.74M|    if (val != 0 && val != 1) {
  ------------------
  |  Branch (54:9): [True: 4.19M, False: 543k]
  |  Branch (54:21): [True: 2.33k, False: 4.19M]
  ------------------
   55|  2.33k|        return false;
   56|  2.33k|    }
   57|  4.73M|    *b = val == 1 ? true : false;
  ------------------
  |  Branch (57:10): [True: 4.19M, False: 543k]
  ------------------
   58|  4.73M|    return true;
   59|  4.74M|}
parse_uint64:
   61|  31.1k|bool parse_uint64(buffer_t *buffer, uint64_t *n) {
   62|  31.1k|    return buffer_read_u64(buffer, n, BE);
   63|  31.1k|}
parse_int64:
   65|   302k|bool parse_int64(buffer_t *buffer, int64_t *n) {
   66|   302k|    if (!buffer_can_read(buffer, 8)) {
  ------------------
  |  Branch (66:9): [True: 146, False: 302k]
  ------------------
   67|    146|        *n = 0;
   68|    146|        return false;
   69|    146|    }
   70|   302k|    *n = read_i64_be(buffer->ptr, buffer->offset);
   71|   302k|    return buffer_seek_cur(buffer, 8);
   72|   302k|}
parse_uint32:
   74|  65.7M|bool parse_uint32(buffer_t *buffer, uint32_t *n) {
   75|  65.7M|    return buffer_read_u32(buffer, n, BE);
   76|  65.7M|}
parse_int32:
   78|  16.7k|bool parse_int32(buffer_t *buffer, int32_t *n) {
   79|  16.7k|    if (!buffer_can_read(buffer, 4)) {
  ------------------
  |  Branch (79:9): [True: 39, False: 16.7k]
  ------------------
   80|     39|        *n = 0;
   81|     39|        return false;
   82|     39|    }
   83|  16.7k|    *n = read_i32_be(buffer->ptr, buffer->offset);
   84|  16.7k|    return buffer_seek_cur(buffer, 4);
   85|  16.7k|}
parse_scv_symbol:
  152|    407|bool parse_scv_symbol(buffer_t *buffer, scv_symbol_t *symbol) {
  153|    407|    PARSER_CHECK(
  ------------------
  |  |   15|    407|    {                           \
  |  |   16|    407|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 397]
  |  |  ------------------
  |  |   17|    407|    }
  ------------------
  154|    407|        parse_binary_string_ptr(buffer, &symbol->symbol, &symbol->size, SCV_SYMBOL_MAX_SIZE))
  155|    397|    return true;
  156|    407|}
parse_scv_string:
  158|    792|bool parse_scv_string(buffer_t *buffer, scv_string_t *string) {
  159|    792|    PARSER_CHECK(parse_binary_string_ptr(buffer, &string->string, &string->size, 0))
  ------------------
  |  |   15|    792|    {                           \
  |  |   16|    792|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 787]
  |  |  ------------------
  |  |   17|    792|    }
  ------------------
  160|    787|    return true;
  161|    792|}
parse_sc_address:
  684|  68.7k|bool parse_sc_address(buffer_t *buffer, sc_address_t *sc_address) {
  685|  68.7k|    PARSER_CHECK(parse_uint32(buffer, &sc_address->type))
  ------------------
  |  |   15|  68.7k|    {                           \
  |  |   16|  68.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 66, False: 68.7k]
  |  |  ------------------
  |  |   17|  68.7k|    }
  ------------------
  686|  68.7k|    switch (sc_address->type) {
  687|  54.8k|        case SC_ADDRESS_TYPE_ACCOUNT:
  ------------------
  |  Branch (687:9): [True: 54.8k, False: 13.8k]
  ------------------
  688|  54.8k|            PARSER_CHECK(parse_account_id(buffer, &sc_address->address))
  ------------------
  |  |   15|  54.8k|    {                           \
  |  |   16|  54.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.25k, False: 53.5k]
  |  |  ------------------
  |  |   17|  54.8k|    }
  ------------------
  689|  53.5k|            return true;
  690|  13.2k|        case SC_ADDRESS_TYPE_CONTRACT:
  ------------------
  |  Branch (690:9): [True: 13.2k, False: 55.4k]
  ------------------
  691|  13.2k|            PARSER_CHECK(buffer_read_bytes(buffer, &sc_address->address, RAW_CONTRACT_KEY_SIZE))
  ------------------
  |  |   15|  13.2k|    {                           \
  |  |   16|  13.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 62, False: 13.1k]
  |  |  ------------------
  |  |   17|  13.2k|    }
  ------------------
  692|  13.1k|            return true;
  693|    654|        default:
  ------------------
  |  Branch (693:9): [True: 654, False: 68.0k]
  ------------------
  694|    654|            return false;
  695|  68.7k|    }
  696|  68.7k|}
read_scval_advance:
  733|  55.4M|bool read_scval_advance(buffer_t *buffer) {
  734|  55.4M|    uint32_t sc_type;
  735|  55.4M|    PARSER_CHECK(parse_uint32(buffer, &sc_type))
  ------------------
  |  |   15|  55.4M|    {                           \
  |  |   16|  55.4M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.15k, False: 55.4M]
  |  |  ------------------
  |  |   17|  55.4M|    }
  ------------------
  736|       |
  737|  55.4M|    switch (sc_type) {
  738|  45.8M|        case SCV_BOOL:
  ------------------
  |  Branch (738:9): [True: 45.8M, False: 9.52M]
  ------------------
  739|  45.8M|            PARSER_CHECK(buffer_advance(buffer, 4))
  ------------------
  |  |   15|  45.8M|    {                           \
  |  |   16|  45.8M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 250, False: 45.8M]
  |  |  ------------------
  |  |   17|  45.8M|    }
  ------------------
  740|  45.8M|            break;
  741|  45.8M|        case SCV_VOID:
  ------------------
  |  Branch (741:9): [True: 8.15k, False: 55.4M]
  ------------------
  742|  8.15k|            break;  // void
  743|    167|        case SCV_ERROR:
  ------------------
  |  Branch (743:9): [True: 167, False: 55.4M]
  ------------------
  744|    167|            return false;  // not implemented
  745|   753k|        case SCV_U32:
  ------------------
  |  Branch (745:9): [True: 753k, False: 54.6M]
  ------------------
  746|   762k|        case SCV_I32:
  ------------------
  |  Branch (746:9): [True: 8.76k, False: 55.4M]
  ------------------
  747|   762k|            PARSER_CHECK(buffer_advance(buffer, 4))
  ------------------
  |  |   15|   762k|    {                           \
  |  |   16|   762k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 22, False: 761k]
  |  |  ------------------
  |  |   17|   762k|    }
  ------------------
  748|   761k|            break;
  749|   761k|        case SCV_U64:
  ------------------
  |  Branch (749:9): [True: 1.30k, False: 55.4M]
  ------------------
  750|  2.64k|        case SCV_I64:
  ------------------
  |  Branch (750:9): [True: 1.34k, False: 55.4M]
  ------------------
  751|  3.50M|        case SCV_TIMEPOINT:
  ------------------
  |  Branch (751:9): [True: 3.50M, False: 51.9M]
  ------------------
  752|  3.50M|        case SCV_DURATION:
  ------------------
  |  Branch (752:9): [True: 2.02k, False: 55.4M]
  ------------------
  753|  3.50M|            PARSER_CHECK(buffer_advance(buffer, 8))
  ------------------
  |  |   15|  3.50M|    {                           \
  |  |   16|  3.50M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 41, False: 3.50M]
  |  |  ------------------
  |  |   17|  3.50M|    }
  ------------------
  754|  3.50M|            break;
  755|  3.50M|        case SCV_U128:
  ------------------
  |  Branch (755:9): [True: 1.03M, False: 54.3M]
  ------------------
  756|  1.04M|        case SCV_I128:
  ------------------
  |  Branch (756:9): [True: 9.65k, False: 55.4M]
  ------------------
  757|  1.04M|            PARSER_CHECK(buffer_advance(buffer, 16))
  ------------------
  |  |   15|  1.04M|    {                           \
  |  |   16|  1.04M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 49, False: 1.04M]
  |  |  ------------------
  |  |   17|  1.04M|    }
  ------------------
  758|  1.04M|            break;
  759|  1.04M|        case SCV_U256:
  ------------------
  |  Branch (759:9): [True: 1.44k, False: 55.4M]
  ------------------
  760|  4.22k|        case SCV_I256:
  ------------------
  |  Branch (760:9): [True: 2.78k, False: 55.4M]
  ------------------
  761|  4.22k|            PARSER_CHECK(buffer_advance(buffer, 32))
  ------------------
  |  |   15|  4.22k|    {                           \
  |  |   16|  4.22k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 67, False: 4.16k]
  |  |  ------------------
  |  |   17|  4.22k|    }
  ------------------
  762|  4.16k|            break;
  763|  4.16k|        case SCV_BYTES:
  ------------------
  |  Branch (763:9): [True: 1.95k, False: 55.4M]
  ------------------
  764|  6.25k|        case SCV_STRING:
  ------------------
  |  Branch (764:9): [True: 4.30k, False: 55.4M]
  ------------------
  765|  8.58k|        case SCV_SYMBOL: {
  ------------------
  |  Branch (765:9): [True: 2.33k, False: 55.4M]
  ------------------
  766|  8.58k|            size_t data_size = 0;
  767|  8.58k|            PARSER_CHECK(parse_uint32(buffer, &data_size))
  ------------------
  |  |   15|  8.58k|    {                           \
  |  |   16|  8.58k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 17, False: 8.56k]
  |  |  ------------------
  |  |   17|  8.58k|    }
  ------------------
  768|  8.56k|            PARSER_CHECK(num_bytes(data_size, &data_size))
  ------------------
  |  |   15|  8.56k|    {                           \
  |  |   16|  8.56k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 8.56k]
  |  |  ------------------
  |  |   17|  8.56k|    }
  ------------------
  769|  8.56k|            PARSER_CHECK(buffer_advance(buffer, data_size))
  ------------------
  |  |   15|  8.56k|    {                           \
  |  |   16|  8.56k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 161, False: 8.40k]
  |  |  ------------------
  |  |   17|  8.56k|    }
  ------------------
  770|  8.40k|            break;
  771|  8.56k|        }
  772|  12.0k|        case SCV_VEC: {
  ------------------
  |  Branch (772:9): [True: 12.0k, False: 55.4M]
  ------------------
  773|  12.0k|            bool vec_exists;
  774|  12.0k|            PARSER_CHECK(parse_bool(buffer, &vec_exists))
  ------------------
  |  |   15|  12.0k|    {                           \
  |  |   16|  12.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 314, False: 11.7k]
  |  |  ------------------
  |  |   17|  12.0k|    }
  ------------------
  775|  11.7k|            if (vec_exists) {
  ------------------
  |  Branch (775:17): [True: 11.0k, False: 641]
  ------------------
  776|  11.0k|                PARSER_CHECK(read_scval_vec_advance(buffer));
  ------------------
  |  |   15|  11.0k|    {                           \
  |  |   16|  11.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10.5k, False: 559]
  |  |  ------------------
  |  |   17|  11.0k|    }
  ------------------
  777|    559|            }
  778|  1.20k|            break;
  779|  11.7k|        }
  780|  4.15M|        case SCV_MAP: {
  ------------------
  |  Branch (780:9): [True: 4.15M, False: 51.2M]
  ------------------
  781|  4.15M|            bool map_exists;
  782|  4.15M|            PARSER_CHECK(parse_bool(buffer, &map_exists))
  ------------------
  |  |   15|  4.15M|    {                           \
  |  |   16|  4.15M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 444, False: 4.15M]
  |  |  ------------------
  |  |   17|  4.15M|    }
  ------------------
  783|  4.15M|            if (map_exists) {
  ------------------
  |  Branch (783:17): [True: 4.15M, False: 1.97k]
  ------------------
  784|  4.15M|                PARSER_CHECK(read_scval_map_advance(buffer));
  ------------------
  |  |   15|  4.15M|    {                           \
  |  |   16|  4.15M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4.07M, False: 76.0k]
  |  |  ------------------
  |  |   17|  4.15M|    }
  ------------------
  785|  76.0k|            }
  786|  78.0k|            break;
  787|  4.15M|        }
  788|  78.0k|        case SCV_ADDRESS: {
  ------------------
  |  Branch (788:9): [True: 6.51k, False: 55.4M]
  ------------------
  789|  6.51k|            sc_address_t sc_address;
  790|  6.51k|            PARSER_CHECK(parse_sc_address(buffer, &sc_address));
  ------------------
  |  |   15|  6.51k|    {                           \
  |  |   16|  6.51k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 369, False: 6.14k]
  |  |  ------------------
  |  |   17|  6.51k|    }
  ------------------
  791|  6.14k|            break;
  792|  6.51k|        }
  793|  6.67k|        case SCV_CONTRACT_INSTANCE: {
  ------------------
  |  Branch (793:9): [True: 6.67k, False: 55.4M]
  ------------------
  794|  6.67k|            PARSER_CHECK(read_contract_executable_advance(buffer))
  ------------------
  |  |   15|  6.67k|    {                           \
  |  |   16|  6.67k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 213, False: 6.46k]
  |  |  ------------------
  |  |   17|  6.67k|    }
  ------------------
  795|  6.46k|            bool map_exists;
  796|  6.46k|            PARSER_CHECK(parse_bool(buffer, &map_exists))
  ------------------
  |  |   15|  6.46k|    {                           \
  |  |   16|  6.46k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 349, False: 6.11k]
  |  |  ------------------
  |  |   17|  6.46k|    }
  ------------------
  797|  6.11k|            if (map_exists) {
  ------------------
  |  Branch (797:17): [True: 5.30k, False: 807]
  ------------------
  798|  5.30k|                PARSER_CHECK(read_scval_map_advance(buffer));
  ------------------
  |  |   15|  5.30k|    {                           \
  |  |   16|  5.30k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 687, False: 4.61k]
  |  |  ------------------
  |  |   17|  5.30k|    }
  ------------------
  799|  4.61k|            }
  800|  5.42k|            break;
  801|  6.11k|        }
  802|  5.42k|        case SCV_LEDGER_KEY_CONTRACT_INSTANCE:
  ------------------
  |  Branch (802:9): [True: 1.18k, False: 55.4M]
  ------------------
  803|  1.18k|            break;  // void
  804|  1.26k|        case SCV_LEDGER_KEY_NONCE:
  ------------------
  |  Branch (804:9): [True: 1.26k, False: 55.4M]
  ------------------
  805|  1.26k|            PARSER_CHECK(buffer_advance(buffer, 8))
  ------------------
  |  |   15|  1.26k|    {                           \
  |  |   16|  1.26k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 1.25k]
  |  |  ------------------
  |  |   17|  1.26k|    }
  ------------------
  806|  1.25k|            break;
  807|  7.87k|        default:
  ------------------
  |  Branch (807:9): [True: 7.87k, False: 55.4M]
  ------------------
  808|  7.87k|            return false;
  809|  55.4M|    }
  810|  51.3M|    return true;
  811|  55.4M|}
parse_transaction_envelope:
 1307|  26.0k|bool parse_transaction_envelope(const uint8_t *data, size_t data_len, envelope_t *envelope) {
 1308|  26.0k|    PRINTF("parse_transaction_envelope\n");
 1309|  26.0k|    buffer_t buffer = {
 1310|  26.0k|        .ptr = data,
 1311|  26.0k|        .size = data_len,
 1312|  26.0k|        .offset = 0,
 1313|  26.0k|    };
 1314|       |
 1315|  26.0k|    explicit_bzero(&envelope->tx_details, sizeof(tx_details_t));
 1316|  26.0k|    uint32_t envelope_type;
 1317|  26.0k|    PARSER_CHECK(parse_network(&buffer, &envelope->network))
  ------------------
  |  |   15|  26.0k|    {                           \
  |  |   16|  26.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 26.0k]
  |  |  ------------------
  |  |   17|  26.0k|    }
  ------------------
 1318|  26.0k|    PARSER_CHECK(parse_uint32(&buffer, &envelope_type))
  ------------------
  |  |   15|  26.0k|    {                           \
  |  |   16|  26.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 26.0k]
  |  |  ------------------
  |  |   17|  26.0k|    }
  ------------------
 1319|  26.0k|    envelope->type = envelope_type;
 1320|  26.0k|    switch (envelope_type) {
 1321|  10.5k|        case ENVELOPE_TYPE_TX:
  ------------------
  |  Branch (1321:9): [True: 10.5k, False: 15.4k]
  ------------------
 1322|  10.5k|            PARSER_CHECK(parse_transaction_details(&buffer, &envelope->tx_details.tx))
  ------------------
  |  |   15|  10.5k|    {                           \
  |  |   16|  10.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 611, False: 9.97k]
  |  |  ------------------
  |  |   17|  10.5k|    }
  ------------------
 1323|  9.97k|            break;
 1324|  9.97k|        case ENVELOPE_TYPE_TX_FEE_BUMP:
  ------------------
  |  Branch (1324:9): [True: 131, False: 25.9k]
  ------------------
 1325|    131|            PARSER_CHECK(
  ------------------
  |  |   15|    131|    {                           \
  |  |   16|    131|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 107]
  |  |  ------------------
  |  |   17|    131|    }
  ------------------
 1326|    131|                parse_fee_bump_transaction_details(&buffer, &envelope->tx_details.fee_bump_tx))
 1327|    107|            uint32_t inner_envelope_type;
 1328|    107|            PARSER_CHECK(parse_uint32(&buffer, &inner_envelope_type))
  ------------------
  |  |   15|    107|    {                           \
  |  |   16|    107|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 104]
  |  |  ------------------
  |  |   17|    107|    }
  ------------------
 1329|    104|            if (inner_envelope_type != ENVELOPE_TYPE_TX) {
  ------------------
  |  Branch (1329:17): [True: 3, False: 101]
  ------------------
 1330|      3|                return false;
 1331|      3|            }
 1332|    101|            PARSER_CHECK(parse_transaction_details(&buffer, &envelope->tx_details.tx))
  ------------------
  |  |   15|    101|    {                           \
  |  |   16|    101|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 93]
  |  |  ------------------
  |  |   17|    101|    }
  ------------------
 1333|     93|            break;
 1334|  15.3k|        default:
  ------------------
  |  Branch (1334:9): [True: 15.3k, False: 10.7k]
  ------------------
 1335|  15.3k|            return false;
 1336|  26.0k|    }
 1337|       |
 1338|  10.0k|    envelope->tx_details.tx.operation_position = buffer.offset;
 1339|       |
 1340|       |    // check all operations are valid
 1341|  10.0k|    PARSER_CHECK(check_operations(&buffer, envelope->tx_details.tx.operations_count));
  ------------------
  |  |   15|  10.0k|    {                           \
  |  |   16|  10.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.53k, False: 7.52k]
  |  |  ------------------
  |  |   17|  10.0k|    }
  ------------------
 1342|  7.52k|    return true;
 1343|  10.0k|}
parse_transaction_operation:
 1348|  49.9k|                                 uint8_t operation_index) {
 1349|  49.9k|    buffer_t buffer = {
 1350|  49.9k|        .ptr = data,
 1351|  49.9k|        .size = data_len,
 1352|  49.9k|        .offset = envelope->tx_details.tx.operation_position,
 1353|  49.9k|    };
 1354|   374k|    for (uint8_t i = 0; i <= operation_index; i++) {
  ------------------
  |  Branch (1354:25): [True: 324k, False: 49.9k]
  ------------------
 1355|   324k|        PARSER_CHECK(parse_operation(&buffer, &envelope->tx_details.tx.op_details));
  ------------------
  |  |   15|   324k|    {                           \
  |  |   16|   324k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 324k]
  |  |  ------------------
  |  |   17|   324k|    }
  ------------------
 1356|   324k|    }
 1357|  49.9k|    envelope->tx_details.tx.operation_index = operation_index;
 1358|  49.9k|    return true;
 1359|  49.9k|}
parse_auth_function:
 1361|  34.1k|bool parse_auth_function(buffer_t *buffer, uint32_t *type, invoke_contract_args_t *args) {
 1362|       |    // function
 1363|  34.1k|    PARSER_CHECK(parse_uint32(buffer, type))
  ------------------
  |  |   15|  34.1k|    {                           \
  |  |   16|  34.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 34.1k]
  |  |  ------------------
  |  |   17|  34.1k|    }
  ------------------
 1364|  34.1k|    switch (*type) {
 1365|  32.1k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN: {
  ------------------
  |  Branch (1365:9): [True: 32.1k, False: 2.00k]
  ------------------
 1366|       |            // contractFn
 1367|  32.1k|            PARSER_CHECK(parse_invoke_contract_args(buffer, args))
  ------------------
  |  |   15|  32.1k|    {                           \
  |  |   16|  32.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15.0k, False: 17.1k]
  |  |  ------------------
  |  |   17|  32.1k|    }
  ------------------
 1368|  17.1k|            break;
 1369|  32.1k|        }
 1370|  17.1k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1370:9): [True: 533, False: 33.6k]
  ------------------
 1371|       |            // createContractHostFn
 1372|    533|            PARSER_CHECK(read_create_contract_args_advance(buffer))
  ------------------
  |  |   15|    533|    {                           \
  |  |   16|    533|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 47, False: 486]
  |  |  ------------------
  |  |   17|    533|    }
  ------------------
 1373|    486|            break;
 1374|  1.47k|        default:
  ------------------
  |  Branch (1374:9): [True: 1.47k, False: 32.6k]
  ------------------
 1375|  1.47k|            return false;
 1376|  34.1k|    }
 1377|  17.6k|    return true;
 1378|  34.1k|}
parse_soroban_authorization_envelope:
 1382|  30.7k|                                          envelope_t *envelope) {
 1383|  30.7k|    PRINTF("parse_soroban_authorization_envelope\n");
 1384|  30.7k|    buffer_t buffer = {
 1385|  30.7k|        .ptr = data,
 1386|  30.7k|        .size = data_len,
 1387|  30.7k|        .offset = 0,
 1388|  30.7k|    };
 1389|       |
 1390|  30.7k|    explicit_bzero(&envelope->soroban_authorization, sizeof(soroban_authorization_t));
 1391|       |
 1392|  30.7k|    uint32_t envelope_type;
 1393|  30.7k|    PARSER_CHECK(parse_uint32(&buffer, &envelope_type))
  ------------------
  |  |   15|  30.7k|    {                           \
  |  |   16|  30.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 30.7k]
  |  |  ------------------
  |  |   17|  30.7k|    }
  ------------------
 1394|  30.7k|    if (envelope_type != ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1394:9): [True: 3.83k, False: 26.8k]
  ------------------
 1395|  3.83k|        return false;
 1396|  3.83k|    }
 1397|  26.8k|    envelope->type = envelope_type;
 1398|       |
 1399|  26.8k|    PARSER_CHECK(parse_network(&buffer, &envelope->network))
  ------------------
  |  |   15|  26.8k|    {                           \
  |  |   16|  26.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 26.8k]
  |  |  ------------------
  |  |   17|  26.8k|    }
  ------------------
 1400|  26.8k|    PARSER_CHECK(parse_uint64(&buffer, &envelope->soroban_authorization.nonce))
  ------------------
  |  |   15|  26.8k|    {                           \
  |  |   16|  26.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 26.8k]
  |  |  ------------------
  |  |   17|  26.8k|    }
  ------------------
 1401|  26.8k|    PARSER_CHECK(
  ------------------
  |  |   15|  26.8k|    {                           \
  |  |   16|  26.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 26.8k]
  |  |  ------------------
  |  |   17|  26.8k|    }
  ------------------
 1402|  26.8k|        parse_uint32(&buffer, &envelope->soroban_authorization.signature_expiration_ledger))
 1403|       |
 1404|       |    // function
 1405|  26.8k|    PARSER_CHECK(parse_auth_function(&buffer,
  ------------------
  |  |   15|  26.8k|    {                           \
  |  |   16|  26.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 16.5k, False: 10.3k]
  |  |  ------------------
  |  |   17|  26.8k|    }
  ------------------
 1406|  26.8k|                                     &envelope->soroban_authorization.auth_function_type,
 1407|  26.8k|                                     &envelope->soroban_authorization.invoke_contract_args))
 1408|       |    // subInvocations
 1409|  10.3k|    uint32_t len;
 1410|  10.3k|    uint8_t sub_invocations_count = 0;
 1411|  10.3k|    PARSER_CHECK(parse_uint32(&buffer, &len))
  ------------------
  |  |   15|  10.3k|    {                           \
  |  |   16|  10.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 56, False: 10.2k]
  |  |  ------------------
  |  |   17|  10.3k|    }
  ------------------
 1412|  17.8k|    for (uint32_t i = 0; i < len; i++) {
  ------------------
  |  Branch (1412:26): [True: 8.54k, False: 9.30k]
  ------------------
 1413|  8.54k|        PARSER_CHECK(read_soroban_authorized_invocation_advance(
  ------------------
  |  |   15|  8.54k|    {                           \
  |  |   16|  8.54k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 974, False: 7.56k]
  |  |  ------------------
  |  |   17|  8.54k|    }
  ------------------
 1414|  8.54k|            &buffer,
 1415|  8.54k|            &sub_invocations_count,
 1416|  8.54k|            envelope->soroban_authorization.sub_invocation_positions));
 1417|  7.56k|    }
 1418|  9.30k|    envelope->soroban_authorization.sub_invocations_count = sub_invocations_count;
 1419|  9.30k|    PRINTF("sub_invocations_count=%d\n", sub_invocations_count);
 1420|       |    // for (uint8_t i = 0; i < 16; i++) {
 1421|       |    //     PRINTF("sub_invocation_positions[%d]=%d\n",
 1422|       |    //            i,
 1423|       |    //            envelope->soroban_authorization.sub_invocation_positions[i]);
 1424|       |    // }
 1425|  9.30k|    return true;
 1426|  10.2k|}
parser.c:read_i64_be:
   32|   302k|static int64_t read_i64_be(const uint8_t *ptr, size_t offset) {
   33|   302k|    uint64_t result = 0;
   34|  2.72M|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (34:21): [True: 2.42M, False: 302k]
  ------------------
   35|  2.42M|        result = (result << 8) | ptr[offset + i];
   36|  2.42M|    }
   37|   302k|    return (int64_t) result;
   38|   302k|}
parser.c:read_i32_be:
   40|  16.7k|static int32_t read_i32_be(const uint8_t *ptr, size_t offset) {
   41|  16.7k|    uint32_t result = 0;
   42|  83.5k|    for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (42:21): [True: 66.8k, False: 16.7k]
  ------------------
   43|  66.8k|        result = (result << 8) | ptr[offset + i];
   44|  66.8k|    }
   45|  16.7k|    return (int32_t) result;
   46|  16.7k|}
parser.c:parse_binary_string_ptr:
  114|  80.2k|                                    size_t max_length) {
  115|       |    /* max_length does not include terminal null character */
  116|  80.2k|    uint32_t size;
  117|       |
  118|  80.2k|    PARSER_CHECK(parse_uint32(buffer, &size))
  ------------------
  |  |   15|  80.2k|    {                           \
  |  |   16|  80.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 46, False: 80.1k]
  |  |  ------------------
  |  |   17|  80.2k|    }
  ------------------
  119|  80.1k|    if (max_length != 0 && size > max_length) {
  ------------------
  |  Branch (119:9): [True: 79.3k, False: 792]
  |  Branch (119:28): [True: 80, False: 79.3k]
  ------------------
  120|     80|        return false;
  121|     80|    }
  122|       |
  123|  80.0k|    size_t data_size = 0;
  124|  80.0k|    PARSER_CHECK(num_bytes(size, &data_size))
  ------------------
  |  |   15|  80.0k|    {                           \
  |  |   16|  80.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 80.0k]
  |  |  ------------------
  |  |   17|  80.0k|    }
  ------------------
  125|  80.0k|    PARSER_CHECK(buffer_read_bytes(buffer, string, data_size))
  ------------------
  |  |   15|  80.0k|    {                           \
  |  |   16|  80.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 78, False: 80.0k]
  |  |  ------------------
  |  |   17|  80.0k|    }
  ------------------
  126|       |    PARSER_CHECK(check_padding(*string, size, data_size))  // security check
  ------------------
  |  |   15|  80.0k|    {                           \
  |  |   16|  80.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.74k, False: 78.2k]
  |  |  ------------------
  |  |   17|  80.0k|    }
  ------------------
  127|  78.2k|    if (out_len) {
  ------------------
  |  Branch (127:9): [True: 78.2k, False: 0]
  ------------------
  128|  78.2k|        *out_len = size;
  129|  78.2k|    }
  130|  78.2k|    return true;
  131|  80.0k|}
parser.c:check_padding:
  101|  80.0k|static bool check_padding(const uint8_t *buffer, size_t offset, size_t length) {
  102|  80.0k|    size_t i;
  103|   103k|    for (i = 0; i < length - offset; i++) {
  ------------------
  |  Branch (103:17): [True: 25.5k, False: 78.2k]
  ------------------
  104|  25.5k|        if (buffer[offset + i] != 0x00) {
  ------------------
  |  Branch (104:13): [True: 1.74k, False: 23.7k]
  ------------------
  105|  1.74k|            return false;
  106|  1.74k|        }
  107|  25.5k|    }
  108|  78.2k|    return true;
  109|  80.0k|}
parser.c:parse_account_id:
  194|   353k|static bool parse_account_id(buffer_t *buffer, const uint8_t **account_id) {
  195|   353k|    uint32_t account_type;
  196|       |
  197|   353k|    PARSER_CHECK(parse_uint32(buffer, &account_type))
  ------------------
  |  |   15|   353k|    {                           \
  |  |   16|   353k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 124, False: 353k]
  |  |  ------------------
  |  |   17|   353k|    }
  ------------------
  198|   353k|    if (account_type != PUBLIC_KEY_TYPE_ED25519) {
  ------------------
  |  |   50|   353k|#define PUBLIC_KEY_TYPE_ED25519 0
  ------------------
  |  Branch (198:9): [True: 1.22k, False: 351k]
  ------------------
  199|  1.22k|        return false;
  200|  1.22k|    }
  201|   351k|    PARSER_CHECK(buffer_read_bytes(buffer, account_id, RAW_ED25519_PUBLIC_KEY_SIZE))
  ------------------
  |  |   15|   351k|    {                           \
  |  |   16|   351k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 152, False: 351k]
  |  |  ------------------
  |  |   17|   351k|    }
  ------------------
  202|   351k|    return true;
  203|   351k|}
parser.c:buffer_read_bytes:
   25|   562k|static bool buffer_read_bytes(buffer_t *buffer, const uint8_t **data, size_t size) {
   26|   562k|    PARSER_CHECK(buffer_can_read(buffer, size))
  ------------------
  |  |   15|   562k|    {                           \
  |  |   16|   562k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 507, False: 561k]
  |  |  ------------------
  |  |   17|   562k|    }
  ------------------
   27|   561k|    *data = buffer->ptr + buffer->offset;
   28|   561k|    PARSER_CHECK(buffer_advance(buffer, size))
  ------------------
  |  |   15|   561k|    {                           \
  |  |   16|   561k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 561k]
  |  |  ------------------
  |  |   17|   561k|    }
  ------------------
   29|   561k|    return true;
   30|   561k|}
parser.c:buffer_advance:
   21|  51.7M|static bool buffer_advance(buffer_t *buffer, size_t num_bytes) {
   22|  51.7M|    return buffer_seek_cur(buffer, num_bytes);
   23|  51.7M|}
parser.c:num_bytes:
   87|  92.0k|static bool num_bytes(size_t size, size_t *out_size) {
   88|  92.0k|    size_t remainder = size % 4;
   89|  92.0k|    if (remainder == 0) {
  ------------------
  |  Branch (89:9): [True: 76.2k, False: 15.7k]
  ------------------
   90|  76.2k|        *out_size = size;
   91|  76.2k|        return true;
   92|  76.2k|    }
   93|  15.7k|    if (size > SIZE_MAX - 4) {
  ------------------
  |  Branch (93:9): [True: 0, False: 15.7k]
  ------------------
   94|       |        // size + 4 would overflow
   95|      0|        return false;
   96|      0|    }
   97|  15.7k|    *out_size = size + 4 - remainder;
   98|  15.7k|    return true;
   99|  15.7k|}
parser.c:read_scval_vec_advance:
  698|  11.0k|static bool read_scval_vec_advance(buffer_t *buffer) {
  699|  11.0k|    uint32_t vec_len;
  700|  11.0k|    PARSER_CHECK(parse_uint32(buffer, &vec_len))
  ------------------
  |  |   15|  11.0k|    {                           \
  |  |   16|  11.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 11.0k]
  |  |  ------------------
  |  |   17|  11.0k|    }
  ------------------
  701|  47.6k|    for (uint32_t i = 0; i < vec_len; i++) {
  ------------------
  |  Branch (701:26): [True: 47.0k, False: 559]
  ------------------
  702|  47.0k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  47.0k|    {                           \
  |  |   16|  47.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10.5k, False: 36.5k]
  |  |  ------------------
  |  |   17|  47.0k|    }
  ------------------
  703|  47.0k|    }
  704|    559|    return true;
  705|  11.0k|}
parser.c:read_scval_map_advance:
  707|  4.16M|static bool read_scval_map_advance(buffer_t *buffer) {
  708|  4.16M|    uint32_t map_len;
  709|  4.16M|    PARSER_CHECK(parse_uint32(buffer, &map_len))
  ------------------
  |  |   15|  4.16M|    {                           \
  |  |   16|  4.16M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 54, False: 4.16M]
  |  |  ------------------
  |  |   17|  4.16M|    }
  ------------------
  710|  29.1M|    for (uint32_t i = 0; i < map_len; i++) {
  ------------------
  |  Branch (710:26): [True: 29.0M, False: 80.6k]
  ------------------
  711|  29.0M|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  29.0M|    {                           \
  |  |   16|  29.0M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.96M, False: 26.1M]
  |  |  ------------------
  |  |   17|  29.0M|    }
  ------------------
  712|  26.1M|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  26.1M|    {                           \
  |  |   16|  26.1M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.11M, False: 25.0M]
  |  |  ------------------
  |  |   17|  26.1M|    }
  ------------------
  713|  26.1M|    }
  714|  80.6k|    return true;
  715|  4.16M|}
parser.c:read_contract_executable_advance:
  717|  10.1k|static bool read_contract_executable_advance(buffer_t *buffer) {
  718|  10.1k|    uint32_t type;
  719|  10.1k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  10.1k|    {                           \
  |  |   16|  10.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 39, False: 10.1k]
  |  |  ------------------
  |  |   17|  10.1k|    }
  ------------------
  720|  10.1k|    switch (type) {
  721|  4.29k|        case CONTRACT_EXECUTABLE_WASM:
  ------------------
  |  |  491|  4.29k|#define CONTRACT_EXECUTABLE_WASM          0
  ------------------
  |  Branch (721:9): [True: 4.29k, False: 5.82k]
  ------------------
  722|       |            PARSER_CHECK(buffer_advance(buffer, HASH_SIZE))  // code
  ------------------
  |  |   15|  4.29k|    {                           \
  |  |   16|  4.29k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 67, False: 4.22k]
  |  |  ------------------
  |  |   17|  4.29k|    }
  ------------------
  723|  4.22k|            break;
  724|  5.63k|        case CONTRACT_EXECUTABLE_STELLAR_ASSET:
  ------------------
  |  |  492|  5.63k|#define CONTRACT_EXECUTABLE_STELLAR_ASSET 1
  ------------------
  |  Branch (724:9): [True: 5.63k, False: 4.48k]
  ------------------
  725|       |            // void
  726|  5.63k|            break;
  727|    191|        default:
  ------------------
  |  Branch (727:9): [True: 191, False: 9.92k]
  ------------------
  728|    191|            return false;
  729|  10.1k|    }
  730|  9.85k|    return true;
  731|  10.1k|}
parser.c:parse_network:
 1293|  52.9k|static bool parse_network(buffer_t *buffer, uint8_t *network) {
 1294|  52.9k|    const uint8_t *network_id;
 1295|  52.9k|    PARSER_CHECK(buffer_read_bytes(buffer, &network_id, HASH_SIZE))
  ------------------
  |  |   15|  52.9k|    {                           \
  |  |   16|  52.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 52.9k]
  |  |  ------------------
  |  |   17|  52.9k|    }
  ------------------
 1296|       |
 1297|  52.9k|    if (memcmp(network_id, NETWORK_ID_PUBLIC_HASH, HASH_SIZE) == 0) {
  ------------------
  |  |   46|  52.9k|#define HASH_SIZE                 32
  ------------------
  |  Branch (1297:9): [True: 1.14k, False: 51.8k]
  ------------------
 1298|  1.14k|        *network = NETWORK_TYPE_PUBLIC;
  ------------------
  |  |   57|  1.14k|#define NETWORK_TYPE_PUBLIC  0
  ------------------
 1299|  51.8k|    } else if (memcmp(network_id, NETWORK_ID_TEST_HASH, HASH_SIZE) == 0) {
  ------------------
  |  |   46|  51.8k|#define HASH_SIZE                 32
  ------------------
  |  Branch (1299:16): [True: 551, False: 51.2k]
  ------------------
 1300|    551|        *network = NETWORK_TYPE_TEST;
  ------------------
  |  |   58|    551|#define NETWORK_TYPE_TEST    1
  ------------------
 1301|  51.2k|    } else {
 1302|  51.2k|        *network = NETWORK_TYPE_UNKNOWN;
  ------------------
  |  |   59|  51.2k|#define NETWORK_TYPE_UNKNOWN 2
  ------------------
 1303|  51.2k|    }
 1304|  52.9k|    return true;
 1305|  52.9k|}
parser.c:parse_transaction_details:
 1242|  10.6k|static bool parse_transaction_details(buffer_t *buffer, transaction_details_t *transaction) {
 1243|       |    // account used to run the (inner)transaction
 1244|  10.6k|    PARSER_CHECK(parse_transaction_source(buffer, &transaction->source_account))
  ------------------
  |  |   15|  10.6k|    {                           \
  |  |   16|  10.6k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 129, False: 10.5k]
  |  |  ------------------
  |  |   17|  10.6k|    }
  ------------------
 1245|       |
 1246|       |    // the fee the source_account will pay
 1247|  10.5k|    PARSER_CHECK(parse_transaction_fee(buffer, &transaction->fee))
  ------------------
  |  |   15|  10.5k|    {                           \
  |  |   16|  10.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 10.5k]
  |  |  ------------------
  |  |   17|  10.5k|    }
  ------------------
 1248|       |
 1249|       |    // sequence number to consume in the account
 1250|  10.5k|    PARSER_CHECK(parse_transaction_sequence(buffer, &transaction->sequence_number))
  ------------------
  |  |   15|  10.5k|    {                           \
  |  |   16|  10.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 10.5k]
  |  |  ------------------
  |  |   17|  10.5k|    }
  ------------------
 1251|       |
 1252|       |    // validity conditions
 1253|  10.5k|    PARSER_CHECK(parse_transaction_preconditions(buffer, &transaction->cond))
  ------------------
  |  |   15|  10.5k|    {                           \
  |  |   16|  10.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 163, False: 10.3k]
  |  |  ------------------
  |  |   17|  10.5k|    }
  ------------------
 1254|       |
 1255|  10.3k|    PARSER_CHECK(parse_transaction_memo(buffer, &transaction->memo))
  ------------------
  |  |   15|  10.3k|    {                           \
  |  |   16|  10.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 299, False: 10.0k]
  |  |  ------------------
  |  |   17|  10.3k|    }
  ------------------
 1256|  10.0k|    PARSER_CHECK(parse_transaction_operation_len(buffer, &transaction->operations_count))
  ------------------
  |  |   15|  10.0k|    {                           \
  |  |   16|  10.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 22, False: 10.0k]
  |  |  ------------------
  |  |   17|  10.0k|    }
  ------------------
 1257|       |
 1258|       |    // check ops is valid
 1259|       |    // size_t offset = buffer->offset;
 1260|       |    // PARSER_CHECK(check_operations(buffer, transaction->operations_count))
 1261|       |    // buffer->offset = offset;
 1262|       |
 1263|  10.0k|    return true;
 1264|  10.0k|}
parser.c:parse_transaction_source:
 1203|  10.6k|static bool parse_transaction_source(buffer_t *buffer, muxed_account_t *source) {
 1204|  10.6k|    return parse_muxed_account(buffer, source);
 1205|  10.6k|}
parser.c:parse_muxed_account:
  205|  33.0k|static bool parse_muxed_account(buffer_t *buffer, muxed_account_t *muxed_account) {
  206|  33.0k|    PARSER_CHECK(parse_uint32(buffer, &muxed_account->type))
  ------------------
  |  |   15|  33.0k|    {                           \
  |  |   16|  33.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 28, False: 33.0k]
  |  |  ------------------
  |  |   17|  33.0k|    }
  ------------------
  207|       |
  208|  33.0k|    switch (muxed_account->type) {
  209|  30.1k|        case KEY_TYPE_ED25519:
  ------------------
  |  Branch (209:9): [True: 30.1k, False: 2.87k]
  ------------------
  210|  30.1k|            PARSER_CHECK(
  ------------------
  |  |   15|  30.1k|    {                           \
  |  |   16|  30.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 22, False: 30.1k]
  |  |  ------------------
  |  |   17|  30.1k|    }
  ------------------
  211|  30.1k|                buffer_read_bytes(buffer, &muxed_account->ed25519, RAW_ED25519_PUBLIC_KEY_SIZE))
  212|  30.1k|            return true;
  213|  2.75k|        case KEY_TYPE_MUXED_ED25519:
  ------------------
  |  Branch (213:9): [True: 2.75k, False: 30.3k]
  ------------------
  214|  2.75k|            PARSER_CHECK(parse_uint64(buffer, &muxed_account->med25519.id))
  ------------------
  |  |   15|  2.75k|    {                           \
  |  |   16|  2.75k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 2.75k]
  |  |  ------------------
  |  |   17|  2.75k|    }
  ------------------
  215|  2.75k|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|  2.75k|    {                           \
  |  |   16|  2.75k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 2.74k]
  |  |  ------------------
  |  |   17|  2.75k|    }
  ------------------
  216|  2.75k|                                           &muxed_account->med25519.ed25519,
  217|  2.75k|                                           RAW_ED25519_PUBLIC_KEY_SIZE))
  218|  2.74k|            return true;
  219|    119|        default:
  ------------------
  |  Branch (219:9): [True: 119, False: 32.9k]
  ------------------
  220|    119|            return false;
  221|  33.0k|    }
  222|  33.0k|}
parser.c:parse_transaction_fee:
 1207|  10.5k|static bool parse_transaction_fee(buffer_t *buffer, uint32_t *fee) {
 1208|  10.5k|    return parse_uint32(buffer, fee);
 1209|  10.5k|}
parser.c:parse_transaction_sequence:
 1211|  10.5k|static bool parse_transaction_sequence(buffer_t *buffer, sequence_number_t *sequence_number) {
 1212|  10.5k|    return parse_int64(buffer, sequence_number);
 1213|  10.5k|}
parser.c:parse_transaction_preconditions:
 1215|  10.5k|static bool parse_transaction_preconditions(buffer_t *buffer, preconditions_t *preconditions) {
 1216|  10.5k|    return parse_preconditions(buffer, preconditions);
 1217|  10.5k|}
parser.c:parse_preconditions:
  249|  10.5k|static bool parse_preconditions(buffer_t *buffer, preconditions_t *cond) {
  250|  10.5k|    uint32_t precondition_type;
  251|  10.5k|    PARSER_CHECK(parse_uint32(buffer, &precondition_type))
  ------------------
  |  |   15|  10.5k|    {                           \
  |  |   16|  10.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 10.5k]
  |  |  ------------------
  |  |   17|  10.5k|    }
  ------------------
  252|  10.5k|    switch (precondition_type) {
  253|  9.69k|        case PRECOND_NONE:
  ------------------
  |  Branch (253:9): [True: 9.69k, False: 853]
  ------------------
  254|  9.69k|            cond->time_bounds_present = false;
  255|  9.69k|            cond->min_seq_num_present = false;
  256|  9.69k|            cond->ledger_bounds_present = false;
  257|  9.69k|            cond->min_seq_ledger_gap = 0;
  258|  9.69k|            cond->min_seq_age = 0;
  259|  9.69k|            return true;
  260|    590|        case PRECOND_TIME:
  ------------------
  |  Branch (260:9): [True: 590, False: 9.95k]
  ------------------
  261|    590|            cond->time_bounds_present = true;
  262|    590|            PARSER_CHECK(parse_time_bounds(buffer, &cond->time_bounds))
  ------------------
  |  |   15|    590|    {                           \
  |  |   16|    590|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 580]
  |  |  ------------------
  |  |   17|    590|    }
  ------------------
  263|    580|            cond->min_seq_num_present = false;
  264|    580|            cond->ledger_bounds_present = false;
  265|    580|            cond->min_seq_ledger_gap = 0;
  266|    580|            cond->min_seq_age = 0;
  267|    580|            return true;
  268|    253|        case PRECOND_V2:
  ------------------
  |  Branch (268:9): [True: 253, False: 10.2k]
  ------------------
  269|    253|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|    253|    {                           \
  |  |   16|    253|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 247]
  |  |  ------------------
  |  |   17|    253|    }
  ------------------
  270|    253|                                             (xdr_type_reader) parse_time_bounds,
  271|    253|                                             &cond->time_bounds,
  272|    253|                                             &cond->time_bounds_present))
  273|    247|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|    247|    {                           \
  |  |   16|    247|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 232]
  |  |  ------------------
  |  |   17|    247|    }
  ------------------
  274|    247|                                             (xdr_type_reader) parse_ledger_bounds,
  275|    247|                                             &cond->ledger_bounds,
  276|    247|                                             &cond->ledger_bounds_present))
  277|    232|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|    232|    {                           \
  |  |   16|    232|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 223]
  |  |  ------------------
  |  |   17|    232|    }
  ------------------
  278|    232|                                             (xdr_type_reader) parse_int64,
  279|    232|                                             &cond->min_seq_num,
  280|    232|                                             &cond->min_seq_num_present))
  281|    223|            PARSER_CHECK(parse_int64(buffer, &cond->min_seq_age))
  ------------------
  |  |   15|    223|    {                           \
  |  |   16|    223|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 220]
  |  |  ------------------
  |  |   17|    223|    }
  ------------------
  282|    220|            PARSER_CHECK(parse_uint32(buffer, &cond->min_seq_ledger_gap))
  ------------------
  |  |   15|    220|    {                           \
  |  |   16|    220|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 216]
  |  |  ------------------
  |  |   17|    220|    }
  ------------------
  283|    216|            PARSER_CHECK(parse_extra_signers(buffer))
  ------------------
  |  |   15|    216|    {                           \
  |  |   16|    216|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 102, False: 114]
  |  |  ------------------
  |  |   17|    216|    }
  ------------------
  284|    114|            return true;
  285|     10|        default:
  ------------------
  |  Branch (285:9): [True: 10, False: 10.5k]
  ------------------
  286|     10|            return false;
  287|  10.5k|    }
  288|  10.5k|}
parser.c:parse_time_bounds:
  224|    601|static bool parse_time_bounds(buffer_t *buffer, time_bounds_t *bounds) {
  225|    601|    PARSER_CHECK(parse_uint64(buffer, &bounds->min_time))
  ------------------
  |  |   15|    601|    {                           \
  |  |   16|    601|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 595]
  |  |  ------------------
  |  |   17|    601|    }
  ------------------
  226|    595|    PARSER_CHECK(parse_uint64(buffer, &bounds->max_time))
  ------------------
  |  |   15|    595|    {                           \
  |  |   16|    595|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 591]
  |  |  ------------------
  |  |   17|    595|    }
  ------------------
  227|    591|    return true;
  228|    595|}
parser.c:parse_optional_type:
  135|   541k|static bool parse_optional_type(buffer_t *buffer, xdr_type_reader reader, void *dst, bool *opted) {
  136|   541k|    bool is_present;
  137|       |
  138|   541k|    PARSER_CHECK(parse_bool(buffer, &is_present))
  ------------------
  |  |   15|   541k|    {                           \
  |  |   16|   541k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 399, False: 541k]
  |  |  ------------------
  |  |   17|   541k|    }
  ------------------
  139|   541k|    if (is_present) {
  ------------------
  |  Branch (139:9): [True: 18.9k, False: 522k]
  ------------------
  140|  18.9k|        if (opted) {
  ------------------
  |  Branch (140:13): [True: 18.9k, False: 0]
  ------------------
  141|  18.9k|            *opted = true;
  142|  18.9k|        }
  143|  18.9k|        return reader(buffer, dst);
  144|   522k|    } else {
  145|   522k|        if (opted) {
  ------------------
  |  Branch (145:13): [True: 522k, False: 0]
  ------------------
  146|   522k|            *opted = false;
  147|   522k|        }
  148|   522k|        return true;
  149|   522k|    }
  150|   541k|}
parser.c:parse_ledger_bounds:
  230|    112|static bool parse_ledger_bounds(buffer_t *buffer, ledger_bounds_t *ledger_bounds) {
  231|    112|    PARSER_CHECK(parse_uint32(buffer, &ledger_bounds->min_ledger))
  ------------------
  |  |   15|    112|    {                           \
  |  |   16|    112|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 107]
  |  |  ------------------
  |  |   17|    112|    }
  ------------------
  232|    107|    PARSER_CHECK(parse_uint32(buffer, &ledger_bounds->max_ledger))
  ------------------
  |  |   15|    107|    {                           \
  |  |   16|    107|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 104]
  |  |  ------------------
  |  |   17|    107|    }
  ------------------
  233|    104|    return true;
  234|    107|}
parser.c:parse_extra_signers:
  236|    216|static bool parse_extra_signers(buffer_t *buffer) {
  237|    216|    uint32_t length;
  238|    216|    PARSER_CHECK(parse_uint32(buffer, &length))
  ------------------
  |  |   15|    216|    {                           \
  |  |   16|    216|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 214]
  |  |  ------------------
  |  |   17|    216|    }
  ------------------
  239|    214|    if (length > 2) {  // maximum length is 2
  ------------------
  |  Branch (239:9): [True: 6, False: 208]
  ------------------
  240|      6|        return false;
  241|      6|    }
  242|    208|    signer_key_t signer_key;
  243|    351|    for (uint32_t i = 0; i < length; i++) {
  ------------------
  |  Branch (243:26): [True: 237, False: 114]
  ------------------
  244|    237|        PARSER_CHECK(parse_signer_key(buffer, &signer_key))
  ------------------
  |  |   15|    237|    {                           \
  |  |   16|    237|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 94, False: 143]
  |  |  ------------------
  |  |   17|    237|    }
  ------------------
  245|    237|    }
  246|    114|    return true;
  247|    208|}
parser.c:parse_signer_key:
  163|  9.20k|static bool parse_signer_key(buffer_t *buffer, signer_key_t *key) {
  164|  9.20k|    PARSER_CHECK(parse_uint32(buffer, &key->type))
  ------------------
  |  |   15|  9.20k|    {                           \
  |  |   16|  9.20k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 28, False: 9.18k]
  |  |  ------------------
  |  |   17|  9.20k|    }
  ------------------
  165|  9.18k|    switch (key->type) {
  166|  4.37k|        case SIGNER_KEY_TYPE_ED25519:
  ------------------
  |  Branch (166:9): [True: 4.37k, False: 4.80k]
  ------------------
  167|  4.37k|            PARSER_CHECK(buffer_read_bytes(buffer, &key->ed25519, RAW_ED25519_PUBLIC_KEY_SIZE))
  ------------------
  |  |   15|  4.37k|    {                           \
  |  |   16|  4.37k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 4.36k]
  |  |  ------------------
  |  |   17|  4.37k|    }
  ------------------
  168|  4.36k|            return true;
  169|  1.95k|        case SIGNER_KEY_TYPE_PRE_AUTH_TX:
  ------------------
  |  Branch (169:9): [True: 1.95k, False: 7.22k]
  ------------------
  170|  1.95k|            PARSER_CHECK(buffer_read_bytes(buffer, &key->pre_auth_tx, RAW_PRE_AUTH_TX_KEY_SIZE))
  ------------------
  |  |   15|  1.95k|    {                           \
  |  |   16|  1.95k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 1.94k]
  |  |  ------------------
  |  |   17|  1.95k|    }
  ------------------
  171|  1.94k|            return true;
  172|    946|        case SIGNER_KEY_TYPE_HASH_X:
  ------------------
  |  Branch (172:9): [True: 946, False: 8.23k]
  ------------------
  173|    946|            PARSER_CHECK(buffer_read_bytes(buffer, &key->hash_x, RAW_HASH_X_KEY_SIZE))
  ------------------
  |  |   15|    946|    {                           \
  |  |   16|    946|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 940]
  |  |  ------------------
  |  |   17|    946|    }
  ------------------
  174|    940|            return true;
  175|  1.88k|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:
  ------------------
  |  Branch (175:9): [True: 1.88k, False: 7.29k]
  ------------------
  176|  1.88k|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|  1.88k|    {                           \
  |  |   16|  1.88k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 1.87k]
  |  |  ------------------
  |  |   17|  1.88k|    }
  ------------------
  177|  1.88k|                                           &key->ed25519_signed_payload.ed25519,
  178|  1.88k|                                           RAW_ED25519_PUBLIC_KEY_SIZE))
  179|  1.87k|            PARSER_CHECK(parse_uint32(buffer, &key->ed25519_signed_payload.payload_len))
  ------------------
  |  |   15|  1.87k|    {                           \
  |  |   16|  1.87k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.87k]
  |  |  ------------------
  |  |   17|  1.87k|    }
  ------------------
  180|       |            // valid length [1, 64]
  181|  1.87k|            if (key->ed25519_signed_payload.payload_len == 0 ||
  ------------------
  |  Branch (181:17): [True: 9, False: 1.86k]
  ------------------
  182|  1.87k|                key->ed25519_signed_payload.payload_len > 64) {
  ------------------
  |  Branch (182:17): [True: 8, False: 1.85k]
  ------------------
  183|     17|                return false;
  184|     17|            }
  185|  1.85k|            size_t data_size = 0;
  186|  1.85k|            PARSER_CHECK(num_bytes(key->ed25519_signed_payload.payload_len, &data_size))
  ------------------
  |  |   15|  1.85k|    {                           \
  |  |   16|  1.85k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 1.85k]
  |  |  ------------------
  |  |   17|  1.85k|    }
  ------------------
  187|  1.85k|            PARSER_CHECK(buffer_read_bytes(buffer, &key->ed25519_signed_payload.payload, data_size))
  ------------------
  |  |   15|  1.85k|    {                           \
  |  |   16|  1.85k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 1.83k]
  |  |  ------------------
  |  |   17|  1.85k|    }
  ------------------
  188|  1.83k|            return true;
  189|     21|        default:
  ------------------
  |  Branch (189:9): [True: 21, False: 9.15k]
  ------------------
  190|     21|            return false;
  191|  9.18k|    }
  192|  9.18k|}
parser.c:parse_transaction_memo:
 1219|  10.3k|static bool parse_transaction_memo(buffer_t *buffer, memo_t *memo) {
 1220|  10.3k|    return parse_memo(buffer, memo);
 1221|  10.3k|}
parser.c:parse_memo:
  290|  10.3k|static bool parse_memo(buffer_t *buffer, memo_t *memo) {
  291|  10.3k|    PARSER_CHECK(parse_uint32(buffer, &memo->type))
  ------------------
  |  |   15|  10.3k|    {                           \
  |  |   16|  10.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 35, False: 10.3k]
  |  |  ------------------
  |  |   17|  10.3k|    }
  ------------------
  292|  10.3k|    switch (memo->type) {
  293|  9.51k|        case MEMO_NONE:
  ------------------
  |  Branch (293:9): [True: 9.51k, False: 839]
  ------------------
  294|  9.51k|            return true;
  295|     36|        case MEMO_ID:
  ------------------
  |  Branch (295:9): [True: 36, False: 10.3k]
  ------------------
  296|     36|            return parse_uint64(buffer, &memo->id);
  297|    554|        case MEMO_TEXT: {
  ------------------
  |  Branch (297:9): [True: 554, False: 9.79k]
  ------------------
  298|    554|            PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|    554|    {                           \
  |  |   16|    554|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 530]
  |  |  ------------------
  |  |   17|    554|    }
  ------------------
  299|    554|                                                 &memo->text.text,
  300|    554|                                                 &memo->text.text_size,
  301|    554|                                                 MEMO_TEXT_MAX_SIZE))
  302|    530|            return true;
  303|    554|        }
  304|     10|        case MEMO_HASH:
  ------------------
  |  Branch (304:9): [True: 10, False: 10.3k]
  ------------------
  305|     10|            return buffer_read_bytes(buffer, &memo->hash, HASH_SIZE);
  ------------------
  |  |   46|     10|#define HASH_SIZE                 32
  ------------------
  306|     13|        case MEMO_RETURN:
  ------------------
  |  Branch (306:9): [True: 13, False: 10.3k]
  ------------------
  307|     13|            return buffer_read_bytes(buffer, &memo->return_hash, HASH_SIZE);
  ------------------
  |  |   46|     13|#define HASH_SIZE                 32
  ------------------
  308|    226|        default:
  ------------------
  |  Branch (308:9): [True: 226, False: 10.1k]
  ------------------
  309|    226|            return false;  // unknown memo type
  310|  10.3k|    }
  311|  10.3k|}
parser.c:parse_transaction_operation_len:
 1223|  10.0k|static bool parse_transaction_operation_len(buffer_t *buffer, uint8_t *operations_count) {
 1224|  10.0k|    uint32_t len;
 1225|  10.0k|    PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  10.0k|    {                           \
  |  |   16|  10.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 10.0k]
  |  |  ------------------
  |  |   17|  10.0k|    }
  ------------------
 1226|  10.0k|    if (len > MAX_OPS) {
  ------------------
  |  |   39|  10.0k|#define MAX_OPS 35
  ------------------
  |  Branch (1226:9): [True: 10, False: 10.0k]
  ------------------
 1227|     10|        return false;
 1228|     10|    }
 1229|  10.0k|    *operations_count = len;
 1230|  10.0k|    return true;
 1231|  10.0k|}
parser.c:parse_fee_bump_transaction_details:
 1276|    131|    fee_bump_transaction_details_t *fee_bump_transaction) {
 1277|    131|    PARSER_CHECK(parse_fee_bump_transaction_fee_source(buffer, &fee_bump_transaction->fee_source))
  ------------------
  |  |   15|    131|    {                           \
  |  |   16|    131|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 19, False: 112]
  |  |  ------------------
  |  |   17|    131|    }
  ------------------
 1278|    112|    PARSER_CHECK(parse_fee_bump_transaction_fee(buffer, &fee_bump_transaction->fee))
  ------------------
  |  |   15|    112|    {                           \
  |  |   16|    112|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 107]
  |  |  ------------------
  |  |   17|    112|    }
  ------------------
 1279|    107|    return true;
 1280|    112|}
parser.c:parse_fee_bump_transaction_fee_source:
 1266|    131|static bool parse_fee_bump_transaction_fee_source(buffer_t *buffer, muxed_account_t *fee_source) {
 1267|    131|    return parse_muxed_account(buffer, fee_source);
 1268|    131|}
parser.c:parse_fee_bump_transaction_fee:
 1270|    112|static bool parse_fee_bump_transaction_fee(buffer_t *buffer, int64_t *fee) {
 1271|    112|    return parse_int64(buffer, fee);
 1272|    112|}
parser.c:check_operations:
 1233|  10.0k|static bool check_operations(buffer_t *buffer, uint8_t op_count) {
 1234|  10.0k|    PRINTF("check_operations: op_count=%d, offset=%d\n", op_count, buffer->offset);
 1235|  10.0k|    operation_t op;
 1236|  62.7k|    for (uint8_t i = 0; i < op_count; i++) {
  ------------------
  |  Branch (1236:25): [True: 55.2k, False: 7.52k]
  ------------------
 1237|  55.2k|        PARSER_CHECK(parse_operation(buffer, &op))
  ------------------
  |  |   15|  55.2k|    {                           \
  |  |   16|  55.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.53k, False: 52.7k]
  |  |  ------------------
  |  |   17|  55.2k|    }
  ------------------
 1238|  55.2k|    }
 1239|  7.52k|    return true;
 1240|  10.0k|}
parser.c:parse_operation:
 1101|   380k|static bool parse_operation(buffer_t *buffer, operation_t *operation) {
 1102|   380k|    PRINTF("parse_operation: offset=%d\n", buffer->offset);
 1103|   380k|    explicit_bzero(operation, sizeof(operation_t));
 1104|       |
 1105|   380k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|   380k|    {                           \
  |  |   16|   380k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 322, False: 379k]
  |  |  ------------------
  |  |   17|   380k|    }
  ------------------
 1106|   380k|                                     (xdr_type_reader) parse_muxed_account,
 1107|   380k|                                     &operation->source_account,
 1108|   380k|                                     &operation->source_account_present))
 1109|   379k|    PRINTF("operation->source_account_present: %d\n", operation->source_account_present);
 1110|       |
 1111|   379k|    PARSER_CHECK(parse_uint32(buffer, &operation->type))
  ------------------
  |  |   15|   379k|    {                           \
  |  |   16|   379k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 32, False: 379k]
  |  |  ------------------
  |  |   17|   379k|    }
  ------------------
 1112|   379k|    PRINTF("sizeof operation->type: %d\n", sizeof(operation->type));
 1113|       |
 1114|   379k|    switch (operation->type) {
 1115|   254k|        case OPERATION_TYPE_CREATE_ACCOUNT: {
  ------------------
  |  Branch (1115:9): [True: 254k, False: 125k]
  ------------------
 1116|   254k|            return parse_create_account(buffer, &operation->create_account_op);
 1117|      0|        }
 1118|  4.84k|        case OPERATION_TYPE_PAYMENT: {
  ------------------
  |  Branch (1118:9): [True: 4.84k, False: 375k]
  ------------------
 1119|  4.84k|            return parse_payment(buffer, &operation->payment_op);
 1120|      0|        }
 1121|  2.00k|        case OPERATION_TYPE_PATH_PAYMENT_STRICT_RECEIVE: {
  ------------------
  |  Branch (1121:9): [True: 2.00k, False: 377k]
  ------------------
 1122|  2.00k|            return parse_path_payment_strict_receive(buffer,
 1123|  2.00k|                                                     &operation->path_payment_strict_receive_op);
 1124|      0|        }
 1125|  3.83k|        case OPERATION_TYPE_CREATE_PASSIVE_SELL_OFFER: {
  ------------------
  |  Branch (1125:9): [True: 3.83k, False: 376k]
  ------------------
 1126|  3.83k|            return parse_create_passive_sell_offer(buffer,
 1127|  3.83k|                                                   &operation->create_passive_sell_offer_op);
 1128|      0|        }
 1129|  1.58k|        case OPERATION_TYPE_MANAGE_SELL_OFFER: {
  ------------------
  |  Branch (1129:9): [True: 1.58k, False: 378k]
  ------------------
 1130|  1.58k|            return parse_manage_sell_offer(buffer, &operation->manage_sell_offer_op);
 1131|      0|        }
 1132|  20.1k|        case OPERATION_TYPE_SET_OPTIONS: {
  ------------------
  |  Branch (1132:9): [True: 20.1k, False: 359k]
  ------------------
 1133|  20.1k|            return parse_set_options(buffer, &operation->set_options_op);
 1134|      0|        }
 1135|  3.18k|        case OPERATION_TYPE_CHANGE_TRUST: {
  ------------------
  |  Branch (1135:9): [True: 3.18k, False: 376k]
  ------------------
 1136|  3.18k|            return parse_change_trust(buffer, &operation->change_trust_op);
 1137|      0|        }
 1138|  1.13k|        case OPERATION_TYPE_ALLOW_TRUST: {
  ------------------
  |  Branch (1138:9): [True: 1.13k, False: 378k]
  ------------------
 1139|  1.13k|            return parse_allow_trust(buffer, &operation->allow_trust_op);
 1140|      0|        }
 1141|  4.96k|        case OPERATION_TYPE_ACCOUNT_MERGE: {
  ------------------
  |  Branch (1141:9): [True: 4.96k, False: 374k]
  ------------------
 1142|  4.96k|            return parse_account_merge(buffer, &operation->account_merge_op);
 1143|      0|        }
 1144|  3.85k|        case OPERATION_TYPE_INFLATION: {
  ------------------
  |  Branch (1144:9): [True: 3.85k, False: 375k]
  ------------------
 1145|  3.85k|            return true;
 1146|      0|        }
 1147|  10.5k|        case OPERATION_TYPE_MANAGE_DATA: {
  ------------------
  |  Branch (1147:9): [True: 10.5k, False: 369k]
  ------------------
 1148|  10.5k|            return parse_manage_data(buffer, &operation->manage_data_op);
 1149|      0|        }
 1150|  1.77k|        case OPERATION_TYPE_BUMP_SEQUENCE: {
  ------------------
  |  Branch (1150:9): [True: 1.77k, False: 378k]
  ------------------
 1151|  1.77k|            return parse_bump_sequence(buffer, &operation->bump_sequence_op);
 1152|      0|        }
 1153|  1.97k|        case OPERATION_TYPE_MANAGE_BUY_OFFER: {
  ------------------
  |  Branch (1153:9): [True: 1.97k, False: 377k]
  ------------------
 1154|  1.97k|            return parse_manage_buy_offer(buffer, &operation->manage_buy_offer_op);
 1155|      0|        }
 1156|  1.63k|        case OPERATION_TYPE_PATH_PAYMENT_STRICT_SEND: {
  ------------------
  |  Branch (1156:9): [True: 1.63k, False: 378k]
  ------------------
 1157|  1.63k|            return parse_path_payment_strict_send(buffer, &operation->path_payment_strict_send_op);
 1158|      0|        }
 1159|  2.31k|        case OPERATION_TYPE_CREATE_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1159:9): [True: 2.31k, False: 377k]
  ------------------
 1160|  2.31k|            return parse_create_claimable_balance(buffer, &operation->create_claimable_balance_op);
 1161|      0|        }
 1162|  2.12k|        case OPERATION_TYPE_CLAIM_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1162:9): [True: 2.12k, False: 377k]
  ------------------
 1163|  2.12k|            return parse_claim_claimable_balance(buffer, &operation->claim_claimable_balance_op);
 1164|      0|        }
 1165|  7.05k|        case OPERATION_TYPE_BEGIN_SPONSORING_FUTURE_RESERVES: {
  ------------------
  |  Branch (1165:9): [True: 7.05k, False: 372k]
  ------------------
 1166|  7.05k|            return parse_begin_sponsoring_future_reserves(
 1167|  7.05k|                buffer,
 1168|  7.05k|                &operation->begin_sponsoring_future_reserves_op);
 1169|      0|        }
 1170|  1.82k|        case OPERATION_TYPE_END_SPONSORING_FUTURE_RESERVES: {
  ------------------
  |  Branch (1170:9): [True: 1.82k, False: 378k]
  ------------------
 1171|  1.82k|            return true;
 1172|      0|        }
 1173|  23.4k|        case OPERATION_TYPE_REVOKE_SPONSORSHIP: {
  ------------------
  |  Branch (1173:9): [True: 23.4k, False: 356k]
  ------------------
 1174|  23.4k|            return parse_revoke_sponsorship(buffer, &operation->revoke_sponsorship_op);
 1175|      0|        }
 1176|    679|        case OPERATION_TYPE_CLAWBACK: {
  ------------------
  |  Branch (1176:9): [True: 679, False: 379k]
  ------------------
 1177|    679|            return parse_clawback(buffer, &operation->clawback_op);
 1178|      0|        }
 1179|  1.01k|        case OPERATION_TYPE_CLAWBACK_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1179:9): [True: 1.01k, False: 378k]
  ------------------
 1180|  1.01k|            return parse_clawback_claimable_balance(buffer,
 1181|  1.01k|                                                    &operation->clawback_claimable_balance_op);
 1182|      0|        }
 1183|  10.2k|        case OPERATION_TYPE_SET_TRUST_LINE_FLAGS: {
  ------------------
  |  Branch (1183:9): [True: 10.2k, False: 369k]
  ------------------
 1184|  10.2k|            return parse_set_trust_line_flags(buffer, &operation->set_trust_line_flags_op);
 1185|      0|        }
 1186|    263|        case OPERATION_TYPE_LIQUIDITY_POOL_DEPOSIT:
  ------------------
  |  Branch (1186:9): [True: 263, False: 379k]
  ------------------
 1187|    263|            return parse_liquidity_pool_deposit(buffer, &operation->liquidity_pool_deposit_op);
 1188|  1.88k|        case OPERATION_TYPE_LIQUIDITY_POOL_WITHDRAW:
  ------------------
  |  Branch (1188:9): [True: 1.88k, False: 377k]
  ------------------
 1189|  1.88k|            return parse_liquidity_pool_withdraw(buffer, &operation->liquidity_pool_withdraw_op);
 1190|  7.86k|        case OPERATION_INVOKE_HOST_FUNCTION: {
  ------------------
  |  Branch (1190:9): [True: 7.86k, False: 371k]
  ------------------
 1191|  7.86k|            return parse_invoke_host_function(buffer, &operation->invoke_host_function_op);
 1192|      0|        }
 1193|  1.18k|        case OPERATION_EXTEND_FOOTPRINT_TTL:
  ------------------
  |  Branch (1193:9): [True: 1.18k, False: 378k]
  ------------------
 1194|  1.18k|            return parse_extend_footprint_ttl(buffer, &operation->extend_footprint_ttl_op);
 1195|  4.24k|        case OPERATION_RESTORE_FOOTPRINT:
  ------------------
  |  Branch (1195:9): [True: 4.24k, False: 375k]
  ------------------
 1196|  4.24k|            return parse_restore_footprint(buffer, &operation->restore_footprint_op);
 1197|     21|        default:
  ------------------
  |  Branch (1197:9): [True: 21, False: 379k]
  ------------------
 1198|     21|            return false;
 1199|   379k|    }
 1200|      0|    return false;
 1201|   379k|}
parser.c:parse_create_account:
  401|   254k|static bool parse_create_account(buffer_t *buffer, create_account_op_t *create_account_op) {
  402|   254k|    PARSER_CHECK(parse_account_id(buffer, &create_account_op->destination))
  ------------------
  |  |   15|   254k|    {                           \
  |  |   16|   254k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 93, False: 254k]
  |  |  ------------------
  |  |   17|   254k|    }
  ------------------
  403|   254k|    PARSER_CHECK(parse_int64(buffer, &create_account_op->starting_balance))
  ------------------
  |  |   15|   254k|    {                           \
  |  |   16|   254k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 254k]
  |  |  ------------------
  |  |   17|   254k|    }
  ------------------
  404|   254k|    return true;
  405|   254k|}
parser.c:parse_payment:
  407|  4.84k|static bool parse_payment(buffer_t *buffer, payment_op_t *payment_op) {
  408|  4.84k|    PARSER_CHECK(parse_muxed_account(buffer, &payment_op->destination))
  ------------------
  |  |   15|  4.84k|    {                           \
  |  |   16|  4.84k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 4.83k]
  |  |  ------------------
  |  |   17|  4.84k|    }
  ------------------
  409|  4.83k|    PARSER_CHECK(parse_asset(buffer, &payment_op->asset))
  ------------------
  |  |   15|  4.83k|    {                           \
  |  |   16|  4.83k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 4.82k]
  |  |  ------------------
  |  |   17|  4.83k|    }
  ------------------
  410|  4.82k|    PARSER_CHECK(parse_int64(buffer, &payment_op->amount))
  ------------------
  |  |   15|  4.82k|    {                           \
  |  |   16|  4.82k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 4.82k]
  |  |  ------------------
  |  |   17|  4.82k|    }
  ------------------
  411|  4.82k|    return true;
  412|  4.82k|}
parser.c:parse_asset:
  325|  50.9k|static bool parse_asset(buffer_t *buffer, asset_t *asset) {
  326|  50.9k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  50.9k|    {                           \
  |  |   16|  50.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 86, False: 50.8k]
  |  |  ------------------
  |  |   17|  50.9k|    }
  ------------------
  327|  50.8k|    switch (asset->type) {
  328|  47.6k|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (328:9): [True: 47.6k, False: 3.22k]
  ------------------
  329|  47.6k|            return true;
  330|      0|        }
  331|  1.66k|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (331:9): [True: 1.66k, False: 49.2k]
  ------------------
  332|  1.66k|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  333|      0|        }
  334|  1.43k|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (334:9): [True: 1.43k, False: 49.4k]
  ------------------
  335|  1.43k|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  336|      0|        }
  337|    123|        default:
  ------------------
  |  Branch (337:9): [True: 123, False: 50.7k]
  ------------------
  338|    123|            return false;  // unknown asset type
  339|  50.8k|    }
  340|  50.8k|}
parser.c:parse_alpha_num4_asset:
  313|  2.73k|static bool parse_alpha_num4_asset(buffer_t *buffer, alpha_num4_t *asset) {
  314|  2.73k|    PARSER_CHECK(buffer_read_bytes(buffer, &asset->asset_code, 4))
  ------------------
  |  |   15|  2.73k|    {                           \
  |  |   16|  2.73k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 22, False: 2.71k]
  |  |  ------------------
  |  |   17|  2.73k|    }
  ------------------
  315|  2.71k|    PARSER_CHECK(parse_account_id(buffer, &asset->issuer))
  ------------------
  |  |   15|  2.71k|    {                           \
  |  |   16|  2.71k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 29, False: 2.68k]
  |  |  ------------------
  |  |   17|  2.71k|    }
  ------------------
  316|  2.68k|    return true;
  317|  2.71k|}
parser.c:parse_alpha_num12_asset:
  319|  2.25k|static bool parse_alpha_num12_asset(buffer_t *buffer, alpha_num12_t *asset) {
  320|  2.25k|    PARSER_CHECK(buffer_read_bytes(buffer, &asset->asset_code, 12))
  ------------------
  |  |   15|  2.25k|    {                           \
  |  |   16|  2.25k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 34, False: 2.21k]
  |  |  ------------------
  |  |   17|  2.25k|    }
  ------------------
  321|  2.21k|    PARSER_CHECK(parse_account_id(buffer, &asset->issuer))
  ------------------
  |  |   15|  2.21k|    {                           \
  |  |   16|  2.21k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 23, False: 2.19k]
  |  |  ------------------
  |  |   17|  2.21k|    }
  ------------------
  322|  2.19k|    return true;
  323|  2.21k|}
parser.c:parse_path_payment_strict_receive:
  415|  2.00k|                                              path_payment_strict_receive_op_t *op) {
  416|  2.00k|    uint32_t path_len;
  417|       |
  418|  2.00k|    PARSER_CHECK(parse_asset(buffer, &op->send_asset))
  ------------------
  |  |   15|  2.00k|    {                           \
  |  |   16|  2.00k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 1.98k]
  |  |  ------------------
  |  |   17|  2.00k|    }
  ------------------
  419|  1.98k|    PARSER_CHECK(parse_int64(buffer, &op->send_max))
  ------------------
  |  |   15|  1.98k|    {                           \
  |  |   16|  1.98k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 1.97k]
  |  |  ------------------
  |  |   17|  1.98k|    }
  ------------------
  420|  1.97k|    PARSER_CHECK(parse_muxed_account(buffer, &op->destination))
  ------------------
  |  |   15|  1.97k|    {                           \
  |  |   16|  1.97k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.97k]
  |  |  ------------------
  |  |   17|  1.97k|    }
  ------------------
  421|  1.97k|    PARSER_CHECK(parse_asset(buffer, &op->dest_asset))
  ------------------
  |  |   15|  1.97k|    {                           \
  |  |   16|  1.97k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 1.96k]
  |  |  ------------------
  |  |   17|  1.97k|    }
  ------------------
  422|  1.96k|    PARSER_CHECK(parse_int64(buffer, &op->dest_amount))
  ------------------
  |  |   15|  1.96k|    {                           \
  |  |   16|  1.96k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 19, False: 1.94k]
  |  |  ------------------
  |  |   17|  1.96k|    }
  ------------------
  423|       |
  424|  1.94k|    PARSER_CHECK(parse_uint32(buffer, &path_len))
  ------------------
  |  |   15|  1.94k|    {                           \
  |  |   16|  1.94k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.93k]
  |  |  ------------------
  |  |   17|  1.94k|    }
  ------------------
  425|  1.93k|    if (path_len > PATH_PAYMENT_MAX_PATH_LENGTH) {
  ------------------
  |  |   35|  1.93k|#define PATH_PAYMENT_MAX_PATH_LENGTH  5
  ------------------
  |  Branch (425:9): [True: 4, False: 1.93k]
  ------------------
  426|      4|        return false;
  427|      4|    }
  428|  3.75k|    for (uint32_t i = 0; i < path_len; i++) {
  ------------------
  |  Branch (428:26): [True: 1.84k, False: 1.91k]
  ------------------
  429|  1.84k|        asset_t tmp_asset;
  430|  1.84k|        PARSER_CHECK(parse_asset(buffer, &tmp_asset))
  ------------------
  |  |   15|  1.84k|    {                           \
  |  |   16|  1.84k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 1.82k]
  |  |  ------------------
  |  |   17|  1.84k|    }
  ------------------
  431|  1.84k|    }
  432|  1.91k|    return true;
  433|  1.93k|}
parser.c:parse_create_passive_sell_offer:
  500|  3.83k|static bool parse_create_passive_sell_offer(buffer_t *buffer, create_passive_sell_offer_op_t *op) {
  501|  3.83k|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|  3.83k|    {                           \
  |  |   16|  3.83k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 3.83k]
  |  |  ------------------
  |  |   17|  3.83k|    }
  ------------------
  502|  3.83k|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|  3.83k|    {                           \
  |  |   16|  3.83k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 16, False: 3.81k]
  |  |  ------------------
  |  |   17|  3.83k|    }
  ------------------
  503|  3.81k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  3.81k|    {                           \
  |  |   16|  3.81k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 3.80k]
  |  |  ------------------
  |  |   17|  3.81k|    }
  ------------------
  504|  3.80k|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|  3.80k|    {                           \
  |  |   16|  3.80k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 3.79k]
  |  |  ------------------
  |  |   17|  3.80k|    }
  ------------------
  505|  3.79k|    return true;
  506|  3.80k|}
parser.c:parse_price:
  475|  7.80k|static bool parse_price(buffer_t *buffer, price_t *price) {
  476|  7.80k|    PARSER_CHECK(parse_int32(buffer, &price->n))
  ------------------
  |  |   15|  7.80k|    {                           \
  |  |   16|  7.80k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 26, False: 7.77k]
  |  |  ------------------
  |  |   17|  7.80k|    }
  ------------------
  477|  7.77k|    PARSER_CHECK(parse_int32(buffer, &price->d))
  ------------------
  |  |   15|  7.77k|    {                           \
  |  |   16|  7.77k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 7.76k]
  |  |  ------------------
  |  |   17|  7.77k|    }
  ------------------
  478|       |    // Denominator cannot be null, as it would lead to a division by zero.
  479|  7.76k|    return price->d != 0;
  480|  7.77k|}
parser.c:parse_manage_sell_offer:
  482|  1.58k|static bool parse_manage_sell_offer(buffer_t *buffer, manage_sell_offer_op_t *op) {
  483|  1.58k|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|  1.58k|    {                           \
  |  |   16|  1.58k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.58k]
  |  |  ------------------
  |  |   17|  1.58k|    }
  ------------------
  484|  1.58k|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|  1.58k|    {                           \
  |  |   16|  1.58k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 1.56k]
  |  |  ------------------
  |  |   17|  1.58k|    }
  ------------------
  485|  1.56k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  1.56k|    {                           \
  |  |   16|  1.56k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 1.56k]
  |  |  ------------------
  |  |   17|  1.56k|    }
  ------------------
  486|  1.56k|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|  1.56k|    {                           \
  |  |   16|  1.56k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 1.55k]
  |  |  ------------------
  |  |   17|  1.56k|    }
  ------------------
  487|  1.55k|    PARSER_CHECK(parse_int64(buffer, &op->offer_id))
  ------------------
  |  |   15|  1.55k|    {                           \
  |  |   16|  1.55k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 1.54k]
  |  |  ------------------
  |  |   17|  1.55k|    }
  ------------------
  488|  1.54k|    return true;
  489|  1.55k|}
parser.c:parse_set_options:
  521|  20.1k|static bool parse_set_options(buffer_t *buffer, set_options_op_t *set_options) {
  522|  20.1k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  20.1k|    {                           \
  |  |   16|  20.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 20.1k]
  |  |  ------------------
  |  |   17|  20.1k|    }
  ------------------
  523|  20.1k|                                     (xdr_type_reader) parse_account_id,
  524|  20.1k|                                     &set_options->inflation_destination,
  525|  20.1k|                                     &set_options->inflation_destination_present))
  526|       |
  527|  20.1k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  20.1k|    {                           \
  |  |   16|  20.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 20.1k]
  |  |  ------------------
  |  |   17|  20.1k|    }
  ------------------
  528|  20.1k|                                     (xdr_type_reader) parse_uint32,
  529|  20.1k|                                     &set_options->clear_flags,
  530|  20.1k|                                     &set_options->clear_flags_present))
  531|  20.1k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  20.1k|    {                           \
  |  |   16|  20.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 20.1k]
  |  |  ------------------
  |  |   17|  20.1k|    }
  ------------------
  532|  20.1k|                                     (xdr_type_reader) parse_uint32,
  533|  20.1k|                                     &set_options->set_flags,
  534|  20.1k|                                     &set_options->set_flags_present))
  535|  20.1k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  20.1k|    {                           \
  |  |   16|  20.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 20.0k]
  |  |  ------------------
  |  |   17|  20.1k|    }
  ------------------
  536|  20.1k|                                     (xdr_type_reader) parse_uint32,
  537|  20.1k|                                     &set_options->master_weight,
  538|  20.1k|                                     &set_options->master_weight_present))
  539|  20.0k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  20.0k|    {                           \
  |  |   16|  20.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 20.0k]
  |  |  ------------------
  |  |   17|  20.0k|    }
  ------------------
  540|  20.0k|                                     (xdr_type_reader) parse_uint32,
  541|  20.0k|                                     &set_options->low_threshold,
  542|  20.0k|                                     &set_options->low_threshold_present))
  543|  20.0k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  20.0k|    {                           \
  |  |   16|  20.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 20.0k]
  |  |  ------------------
  |  |   17|  20.0k|    }
  ------------------
  544|  20.0k|                                     (xdr_type_reader) parse_uint32,
  545|  20.0k|                                     &set_options->medium_threshold,
  546|  20.0k|                                     &set_options->medium_threshold_present))
  547|  20.0k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  20.0k|    {                           \
  |  |   16|  20.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 20.0k]
  |  |  ------------------
  |  |   17|  20.0k|    }
  ------------------
  548|  20.0k|                                     (xdr_type_reader) parse_uint32,
  549|  20.0k|                                     &set_options->high_threshold,
  550|  20.0k|                                     &set_options->high_threshold_present))
  551|       |
  552|  20.0k|    uint32_t home_domain_present;
  553|  20.0k|    PARSER_CHECK(parse_uint32(buffer, &home_domain_present))
  ------------------
  |  |   15|  20.0k|    {                           \
  |  |   16|  20.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 20.0k]
  |  |  ------------------
  |  |   17|  20.0k|    }
  ------------------
  554|  20.0k|    set_options->home_domain_present = home_domain_present ? true : false;
  ------------------
  |  Branch (554:40): [True: 5.26k, False: 14.8k]
  ------------------
  555|  20.0k|    if (set_options->home_domain_present) {
  ------------------
  |  Branch (555:9): [True: 5.26k, False: 14.8k]
  ------------------
  556|  5.26k|        PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  5.26k|    {                           \
  |  |   16|  5.26k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 5.25k]
  |  |  ------------------
  |  |   17|  5.26k|    }
  ------------------
  557|  5.26k|                                             &set_options->home_domain,
  558|  5.26k|                                             &set_options->home_domain_size,
  559|  5.26k|                                             HOME_DOMAIN_MAX_SIZE))
  560|  14.8k|    } else {
  561|  14.8k|        set_options->home_domain_size = 0;
  562|  14.8k|    }
  563|       |
  564|  20.0k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  20.0k|    {                           \
  |  |   16|  20.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 33, False: 20.0k]
  |  |  ------------------
  |  |   17|  20.0k|    }
  ------------------
  565|  20.0k|                                     (xdr_type_reader) parse_signer,
  566|  20.0k|                                     &set_options->signer,
  567|  20.0k|                                     &set_options->signer_present))
  568|  20.0k|    return true;
  569|  20.0k|}
parser.c:parse_signer:
  515|  1.66k|static bool parse_signer(buffer_t *buffer, signer_t *signer) {
  516|  1.66k|    PARSER_CHECK(parse_signer_key(buffer, &signer->key))
  ------------------
  |  |   15|  1.66k|    {                           \
  |  |   16|  1.66k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 1.65k]
  |  |  ------------------
  |  |   17|  1.66k|    }
  ------------------
  517|  1.65k|    PARSER_CHECK(parse_uint32(buffer, &signer->weight))
  ------------------
  |  |   15|  1.65k|    {                           \
  |  |   16|  1.65k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.64k]
  |  |  ------------------
  |  |   17|  1.65k|    }
  ------------------
  518|  1.64k|    return true;
  519|  1.65k|}
parser.c:parse_change_trust:
  508|  3.18k|static bool parse_change_trust(buffer_t *buffer, change_trust_op_t *op) {
  509|  3.18k|    PARSER_CHECK(parse_change_trust_asset(buffer, &op->line))
  ------------------
  |  |   15|  3.18k|    {                           \
  |  |   16|  3.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 45, False: 3.13k]
  |  |  ------------------
  |  |   17|  3.18k|    }
  ------------------
  510|  3.13k|    PARSER_CHECK(parse_int64(buffer, &op->limit));
  ------------------
  |  |   15|  3.13k|    {                           \
  |  |   16|  3.13k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 3.13k]
  |  |  ------------------
  |  |   17|  3.13k|    }
  ------------------
  511|       |    // Limit cannot be negative
  512|  3.13k|    return op->limit >= 0;
  513|  3.13k|}
parser.c:parse_change_trust_asset:
  381|  3.18k|static bool parse_change_trust_asset(buffer_t *buffer, change_trust_asset_t *asset) {
  382|  3.18k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  3.18k|    {                           \
  |  |   16|  3.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 3.18k]
  |  |  ------------------
  |  |   17|  3.18k|    }
  ------------------
  383|  3.18k|    switch (asset->type) {
  384|    403|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (384:9): [True: 403, False: 2.77k]
  ------------------
  385|    403|            return true;
  386|      0|        }
  387|    952|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (387:9): [True: 952, False: 2.23k]
  ------------------
  388|    952|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  389|      0|        }
  390|    629|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (390:9): [True: 629, False: 2.55k]
  ------------------
  391|    629|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  392|      0|        }
  393|  1.19k|        case ASSET_TYPE_POOL_SHARE: {
  ------------------
  |  Branch (393:9): [True: 1.19k, False: 1.99k]
  ------------------
  394|  1.19k|            return parse_liquidity_pool_parameters(buffer, &asset->liquidity_pool);
  395|      0|        }
  396|      8|        default:
  ------------------
  |  Branch (396:9): [True: 8, False: 3.17k]
  ------------------
  397|      8|            return false;  // unknown asset type
  398|  3.18k|    }
  399|  3.18k|}
parser.c:parse_liquidity_pool_parameters:
  366|  1.19k|    liquidity_pool_parameters_t *liquidity_pool_parameters) {
  367|  1.19k|    uint32_t liquidity_pool_type;
  368|  1.19k|    PARSER_CHECK(parse_uint32(buffer, &liquidity_pool_type))
  ------------------
  |  |   15|  1.19k|    {                           \
  |  |   16|  1.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 1.18k]
  |  |  ------------------
  |  |   17|  1.19k|    }
  ------------------
  369|  1.18k|    switch (liquidity_pool_type) {
  370|  1.18k|        case LIQUIDITY_POOL_CONSTANT_PRODUCT: {
  ------------------
  |  Branch (370:9): [True: 1.18k, False: 3]
  ------------------
  371|  1.18k|            PARSER_CHECK(parse_asset(buffer, &liquidity_pool_parameters->constant_product.asset_a))
  ------------------
  |  |   15|  1.18k|    {                           \
  |  |   16|  1.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.18k]
  |  |  ------------------
  |  |   17|  1.18k|    }
  ------------------
  372|  1.18k|            PARSER_CHECK(parse_asset(buffer, &liquidity_pool_parameters->constant_product.asset_b))
  ------------------
  |  |   15|  1.18k|    {                           \
  |  |   16|  1.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.17k]
  |  |  ------------------
  |  |   17|  1.18k|    }
  ------------------
  373|  1.17k|            PARSER_CHECK(parse_int32(buffer, &liquidity_pool_parameters->constant_product.fee))
  ------------------
  |  |   15|  1.17k|    {                           \
  |  |   16|  1.17k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.17k]
  |  |  ------------------
  |  |   17|  1.17k|    }
  ------------------
  374|  1.17k|            return true;
  375|  1.17k|        }
  376|      3|        default:
  ------------------
  |  Branch (376:9): [True: 3, False: 1.18k]
  ------------------
  377|      3|            return false;
  378|  1.18k|    }
  379|  1.18k|}
parser.c:parse_allow_trust:
  435|  1.13k|static bool parse_allow_trust(buffer_t *buffer, allow_trust_op_t *op) {
  436|  1.13k|    PARSER_CHECK(parse_account_id(buffer, &op->trustor))
  ------------------
  |  |   15|  1.13k|    {                           \
  |  |   16|  1.13k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.13k]
  |  |  ------------------
  |  |   17|  1.13k|    }
  ------------------
  437|  1.13k|    PARSER_CHECK(parse_uint32(buffer, &op->asset_type))
  ------------------
  |  |   15|  1.13k|    {                           \
  |  |   16|  1.13k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.12k]
  |  |  ------------------
  |  |   17|  1.13k|    }
  ------------------
  438|       |
  439|  1.12k|    switch (op->asset_type) {
  440|    717|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (440:9): [True: 717, False: 411]
  ------------------
  441|    717|            PARSER_CHECK(buffer_read_bytes(buffer, &op->asset_code, 4))
  ------------------
  |  |   15|    717|    {                           \
  |  |   16|    717|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 713]
  |  |  ------------------
  |  |   17|    717|    }
  ------------------
  442|    713|            break;
  443|    713|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (443:9): [True: 404, False: 724]
  ------------------
  444|    404|            PARSER_CHECK(buffer_read_bytes(buffer, &op->asset_code, 12))
  ------------------
  |  |   15|    404|    {                           \
  |  |   16|    404|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 396]
  |  |  ------------------
  |  |   17|    404|    }
  ------------------
  445|    396|            break;
  446|    396|        default:
  ------------------
  |  Branch (446:9): [True: 7, False: 1.12k]
  ------------------
  447|      7|            return false;  // unknown asset type
  448|  1.12k|    }
  449|       |
  450|  1.10k|    PARSER_CHECK(parse_uint32(buffer, &op->authorize))
  ------------------
  |  |   15|  1.10k|    {                           \
  |  |   16|  1.10k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.10k]
  |  |  ------------------
  |  |   17|  1.10k|    }
  ------------------
  451|  1.10k|    return true;
  452|  1.10k|}
parser.c:parse_account_merge:
  454|  4.96k|static bool parse_account_merge(buffer_t *buffer, account_merge_op_t *op) {
  455|  4.96k|    return parse_muxed_account(buffer, &op->destination);
  456|  4.96k|}
parser.c:parse_manage_data:
  458|  10.5k|static bool parse_manage_data(buffer_t *buffer, manage_data_op_t *op) {
  459|  10.5k|    PARSER_CHECK(
  ------------------
  |  |   15|  10.5k|    {                           \
  |  |   16|  10.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 10.5k]
  |  |  ------------------
  |  |   17|  10.5k|    }
  ------------------
  460|  10.5k|        parse_binary_string_ptr(buffer, &op->data_name, &op->data_name_size, DATA_NAME_MAX_SIZE))
  461|       |
  462|  10.5k|    bool has_value;
  463|  10.5k|    PARSER_CHECK(parse_bool(buffer, &has_value))
  ------------------
  |  |   15|  10.5k|    {                           \
  |  |   16|  10.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 10.5k]
  |  |  ------------------
  |  |   17|  10.5k|    }
  ------------------
  464|  10.5k|    if (has_value) {
  ------------------
  |  Branch (464:9): [True: 3.65k, False: 6.84k]
  ------------------
  465|  3.65k|        PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  3.65k|    {                           \
  |  |   16|  3.65k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 3.64k]
  |  |  ------------------
  |  |   17|  3.65k|    }
  ------------------
  466|  3.65k|                                             &op->data_value,
  467|  3.65k|                                             &op->data_value_size,
  468|  3.65k|                                             DATA_VALUE_MAX_SIZE))
  469|  6.84k|    } else {
  470|  6.84k|        op->data_value_size = 0;
  471|  6.84k|    }
  472|  10.4k|    return true;
  473|  10.5k|}
parser.c:parse_bump_sequence:
  571|  1.77k|static bool parse_bump_sequence(buffer_t *buffer, bump_sequence_op_t *op) {
  572|  1.77k|    return parse_int64(buffer, &op->bump_to);
  573|  1.77k|}
parser.c:parse_manage_buy_offer:
  491|  1.97k|static bool parse_manage_buy_offer(buffer_t *buffer, manage_buy_offer_op_t *op) {
  492|  1.97k|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|  1.97k|    {                           \
  |  |   16|  1.97k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 17, False: 1.96k]
  |  |  ------------------
  |  |   17|  1.97k|    }
  ------------------
  493|  1.96k|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|  1.96k|    {                           \
  |  |   16|  1.96k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 1.95k]
  |  |  ------------------
  |  |   17|  1.96k|    }
  ------------------
  494|  1.95k|    PARSER_CHECK(parse_int64(buffer, &op->buy_amount))
  ------------------
  |  |   15|  1.95k|    {                           \
  |  |   16|  1.95k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 1.94k]
  |  |  ------------------
  |  |   17|  1.95k|    }
  ------------------
  495|  1.94k|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|  1.94k|    {                           \
  |  |   16|  1.94k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 1.93k]
  |  |  ------------------
  |  |   17|  1.94k|    }
  ------------------
  496|  1.93k|    PARSER_CHECK(parse_int64(buffer, &op->offer_id))
  ------------------
  |  |   15|  1.93k|    {                           \
  |  |   16|  1.93k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.93k]
  |  |  ------------------
  |  |   17|  1.93k|    }
  ------------------
  497|  1.93k|    return true;
  498|  1.93k|}
parser.c:parse_path_payment_strict_send:
  575|  1.63k|static bool parse_path_payment_strict_send(buffer_t *buffer, path_payment_strict_send_op_t *op) {
  576|  1.63k|    uint32_t path_len;
  577|       |
  578|  1.63k|    PARSER_CHECK(parse_asset(buffer, &op->send_asset))
  ------------------
  |  |   15|  1.63k|    {                           \
  |  |   16|  1.63k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 1.62k]
  |  |  ------------------
  |  |   17|  1.63k|    }
  ------------------
  579|  1.62k|    PARSER_CHECK(parse_int64(buffer, &op->send_amount))
  ------------------
  |  |   15|  1.62k|    {                           \
  |  |   16|  1.62k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.62k]
  |  |  ------------------
  |  |   17|  1.62k|    }
  ------------------
  580|  1.62k|    PARSER_CHECK(parse_muxed_account(buffer, &op->destination))
  ------------------
  |  |   15|  1.62k|    {                           \
  |  |   16|  1.62k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.62k]
  |  |  ------------------
  |  |   17|  1.62k|    }
  ------------------
  581|  1.62k|    PARSER_CHECK(parse_asset(buffer, &op->dest_asset))
  ------------------
  |  |   15|  1.62k|    {                           \
  |  |   16|  1.62k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.61k]
  |  |  ------------------
  |  |   17|  1.62k|    }
  ------------------
  582|  1.61k|    PARSER_CHECK(parse_int64(buffer, &op->dest_min))
  ------------------
  |  |   15|  1.61k|    {                           \
  |  |   16|  1.61k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.61k]
  |  |  ------------------
  |  |   17|  1.61k|    }
  ------------------
  583|  1.61k|    PARSER_CHECK(parse_uint32(buffer, &path_len))
  ------------------
  |  |   15|  1.61k|    {                           \
  |  |   16|  1.61k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.60k]
  |  |  ------------------
  |  |   17|  1.61k|    }
  ------------------
  584|  1.60k|    if (path_len > PATH_PAYMENT_MAX_PATH_LENGTH) {
  ------------------
  |  |   35|  1.60k|#define PATH_PAYMENT_MAX_PATH_LENGTH  5
  ------------------
  |  Branch (584:9): [True: 4, False: 1.60k]
  ------------------
  585|      4|        return false;
  586|      4|    }
  587|  7.68k|    for (uint32_t i = 0; i < path_len; i++) {
  ------------------
  |  Branch (587:26): [True: 6.09k, False: 1.58k]
  ------------------
  588|  6.09k|        asset_t tmp_asset;
  589|  6.09k|        PARSER_CHECK(parse_asset(buffer, &tmp_asset))
  ------------------
  |  |   15|  6.09k|    {                           \
  |  |   16|  6.09k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 16, False: 6.08k]
  |  |  ------------------
  |  |   17|  6.09k|    }
  ------------------
  590|  6.09k|    }
  591|  1.58k|    return true;
  592|  1.60k|}
parser.c:parse_create_claimable_balance:
  645|  2.31k|static bool parse_create_claimable_balance(buffer_t *buffer, create_claimable_balance_op_t *op) {
  646|  2.31k|    uint32_t claimant_len;
  647|  2.31k|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|  2.31k|    {                           \
  |  |   16|  2.31k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 2.30k]
  |  |  ------------------
  |  |   17|  2.31k|    }
  ------------------
  648|  2.30k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  2.30k|    {                           \
  |  |   16|  2.30k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 2.29k]
  |  |  ------------------
  |  |   17|  2.30k|    }
  ------------------
  649|  2.29k|    PARSER_CHECK(parse_uint32(buffer, &claimant_len))
  ------------------
  |  |   15|  2.29k|    {                           \
  |  |   16|  2.29k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 2.29k]
  |  |  ------------------
  |  |   17|  2.29k|    }
  ------------------
  650|  2.29k|    if (claimant_len > CLAIMANTS_MAX_LENGTH) {
  ------------------
  |  |   34|  2.29k|#define CLAIMANTS_MAX_LENGTH          10
  ------------------
  |  Branch (650:9): [True: 4, False: 2.29k]
  ------------------
  651|      4|        return false;
  652|      4|    }
  653|  2.29k|    op->claimant_len = claimant_len;
  654|  7.46k|    for (int i = 0; i < op->claimant_len; i++) {
  ------------------
  |  Branch (654:21): [True: 5.49k, False: 1.97k]
  ------------------
  655|  5.49k|        PARSER_CHECK(parse_claimant(buffer, &op->claimants[i]))
  ------------------
  |  |   15|  5.49k|    {                           \
  |  |   16|  5.49k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 322, False: 5.16k]
  |  |  ------------------
  |  |   17|  5.49k|    }
  ------------------
  656|  5.49k|    }
  657|  1.97k|    return true;
  658|  2.29k|}
parser.c:parse_claimant:
  633|  5.49k|static bool parse_claimant(buffer_t *buffer, claimant_t *claimant) {
  634|  5.49k|    PARSER_CHECK(parse_uint32(buffer, &claimant->type))
  ------------------
  |  |   15|  5.49k|    {                           \
  |  |   16|  5.49k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 62, False: 5.42k]
  |  |  ------------------
  |  |   17|  5.49k|    }
  ------------------
  635|  5.42k|    switch (claimant->type) {
  636|  5.37k|        case CLAIMANT_TYPE_V0:
  ------------------
  |  Branch (636:9): [True: 5.37k, False: 49]
  ------------------
  637|  5.37k|            PARSER_CHECK(parse_account_id(buffer, &claimant->v0.destination))
  ------------------
  |  |   15|  5.37k|    {                           \
  |  |   16|  5.37k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 5.35k]
  |  |  ------------------
  |  |   17|  5.37k|    }
  ------------------
  638|  5.35k|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|  5.35k|    {                           \
  |  |   16|  5.35k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 187, False: 5.16k]
  |  |  ------------------
  |  |   17|  5.35k|    }
  ------------------
  639|  5.16k|            return true;
  640|     49|        default:
  ------------------
  |  Branch (640:9): [True: 49, False: 5.37k]
  ------------------
  641|     49|            return false;
  642|  5.42k|    }
  643|  5.42k|}
parser.c:parse_claimant_predicate:
  594|  6.34k|static bool parse_claimant_predicate(buffer_t *buffer) {
  595|       |    // Currently, does not support displaying claimant details.
  596|       |    // So here we will not store the parsed data, just to ensure that the data can be parsed
  597|       |    // correctly.
  598|  6.34k|    uint32_t claim_predicate_type;
  599|  6.34k|    uint32_t predicates_len;
  600|  6.34k|    bool not_predicate_present;
  601|  6.34k|    int64_t abs_before;
  602|  6.34k|    int64_t rel_before;
  603|  6.34k|    PARSER_CHECK(parse_uint32(buffer, &claim_predicate_type))
  ------------------
  |  |   15|  6.34k|    {                           \
  |  |   16|  6.34k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 34, False: 6.30k]
  |  |  ------------------
  |  |   17|  6.34k|    }
  ------------------
  604|  6.30k|    switch (claim_predicate_type) {
  605|  4.65k|        case CLAIM_PREDICATE_UNCONDITIONAL:
  ------------------
  |  Branch (605:9): [True: 4.65k, False: 1.65k]
  ------------------
  606|  4.65k|            return true;
  607|    282|        case CLAIM_PREDICATE_AND:
  ------------------
  |  Branch (607:9): [True: 282, False: 6.02k]
  ------------------
  608|    477|        case CLAIM_PREDICATE_OR:
  ------------------
  |  Branch (608:9): [True: 195, False: 6.11k]
  ------------------
  609|    477|            PARSER_CHECK(parse_uint32(buffer, &predicates_len))
  ------------------
  |  |   15|    477|    {                           \
  |  |   16|    477|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 25, False: 452]
  |  |  ------------------
  |  |   17|    477|    }
  ------------------
  610|    452|            if (predicates_len != 2) {
  ------------------
  |  Branch (610:17): [True: 63, False: 389]
  ------------------
  611|     63|                return false;
  612|     63|            }
  613|    389|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|    389|    {                           \
  |  |   16|    389|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 135, False: 254]
  |  |  ------------------
  |  |   17|    389|    }
  ------------------
  614|    254|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|    254|    {                           \
  |  |   16|    254|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 71, False: 183]
  |  |  ------------------
  |  |   17|    254|    }
  ------------------
  615|    183|            return true;
  616|    678|        case CLAIM_PREDICATE_NOT:
  ------------------
  |  Branch (616:9): [True: 678, False: 5.62k]
  ------------------
  617|    678|            PARSER_CHECK(parse_bool(buffer, &not_predicate_present))
  ------------------
  |  |   15|    678|    {                           \
  |  |   16|    678|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 669]
  |  |  ------------------
  |  |   17|    678|    }
  ------------------
  618|    669|            if (not_predicate_present) {
  ------------------
  |  Branch (618:17): [True: 342, False: 327]
  ------------------
  619|    342|                PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|    342|    {                           \
  |  |   16|    342|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 327]
  |  |  ------------------
  |  |   17|    342|    }
  ------------------
  620|    342|            }
  621|    654|            return true;
  622|    329|        case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:
  ------------------
  |  Branch (622:9): [True: 329, False: 5.97k]
  ------------------
  623|    329|            PARSER_CHECK(parse_int64(buffer, &abs_before))
  ------------------
  |  |   15|    329|    {                           \
  |  |   16|    329|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 320]
  |  |  ------------------
  |  |   17|    329|    }
  ------------------
  624|    320|            return true;
  625|    134|        case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:
  ------------------
  |  Branch (625:9): [True: 134, False: 6.17k]
  ------------------
  626|    134|            PARSER_CHECK(parse_int64(buffer, &rel_before))
  ------------------
  |  |   15|    134|    {                           \
  |  |   16|    134|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 125]
  |  |  ------------------
  |  |   17|    134|    }
  ------------------
  627|    125|            return true;
  628|     38|        default:
  ------------------
  |  Branch (628:9): [True: 38, False: 6.26k]
  ------------------
  629|     38|            return false;
  630|  6.30k|    }
  631|  6.30k|}
parser.c:parse_claim_claimable_balance:
  673|  2.12k|static bool parse_claim_claimable_balance(buffer_t *buffer, claim_claimable_balance_op_t *op) {
  674|  2.12k|    PARSER_CHECK(parse_claimable_balance_id(buffer, &op->balance_id))
  ------------------
  |  |   15|  2.12k|    {                           \
  |  |   16|  2.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 2.11k]
  |  |  ------------------
  |  |   17|  2.12k|    }
  ------------------
  675|  2.11k|    return true;
  676|  2.12k|}
parser.c:parse_claimable_balance_id:
  661|  3.77k|                                       claimable_balance_id_t *claimable_balance_id_t) {
  662|  3.77k|    PARSER_CHECK(parse_uint32(buffer, &claimable_balance_id_t->type))
  ------------------
  |  |   15|  3.77k|    {                           \
  |  |   16|  3.77k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 3.76k]
  |  |  ------------------
  |  |   17|  3.77k|    }
  ------------------
  663|  3.76k|    switch (claimable_balance_id_t->type) {
  664|  3.75k|        case CLAIMABLE_BALANCE_ID_TYPE_V0:
  ------------------
  |  Branch (664:9): [True: 3.75k, False: 12]
  ------------------
  665|  3.75k|            PARSER_CHECK(
  ------------------
  |  |   15|  3.75k|    {                           \
  |  |   16|  3.75k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 3.74k]
  |  |  ------------------
  |  |   17|  3.75k|    }
  ------------------
  666|  3.75k|                buffer_read_bytes(buffer, &claimable_balance_id_t->v0, CLAIMABLE_BALANCE_ID_SIZE))
  667|  3.74k|            return true;
  668|     12|        default:
  ------------------
  |  Branch (668:9): [True: 12, False: 3.75k]
  ------------------
  669|     12|            return false;
  670|  3.76k|    }
  671|  3.76k|}
parser.c:parse_begin_sponsoring_future_reserves:
  679|  7.05k|                                                   begin_sponsoring_future_reserves_op_t *op) {
  680|  7.05k|    PARSER_CHECK(parse_account_id(buffer, &op->sponsored_id))
  ------------------
  |  |   15|  7.05k|    {                           \
  |  |   16|  7.05k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 7.04k]
  |  |  ------------------
  |  |   17|  7.05k|    }
  ------------------
  681|  7.04k|    return true;
  682|  7.05k|}
parser.c:parse_revoke_sponsorship:
  849|  23.4k|static bool parse_revoke_sponsorship(buffer_t *buffer, revoke_sponsorship_op_t *op) {
  850|  23.4k|    PARSER_CHECK(parse_uint32(buffer, &op->type))
  ------------------
  |  |   15|  23.4k|    {                           \
  |  |   16|  23.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 23.4k]
  |  |  ------------------
  |  |   17|  23.4k|    }
  ------------------
  851|  23.4k|    switch (op->type) {
  852|  16.1k|        case REVOKE_SPONSORSHIP_LEDGER_ENTRY:
  ------------------
  |  Branch (852:9): [True: 16.1k, False: 7.31k]
  ------------------
  853|  16.1k|            PARSER_CHECK(parse_ledger_key(buffer, &op->ledger_key))
  ------------------
  |  |   15|  16.1k|    {                           \
  |  |   16|  16.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 107, False: 16.0k]
  |  |  ------------------
  |  |   17|  16.1k|    }
  ------------------
  854|  16.0k|            return true;
  855|  7.31k|        case REVOKE_SPONSORSHIP_SIGNER:
  ------------------
  |  Branch (855:9): [True: 7.31k, False: 16.1k]
  ------------------
  856|  7.31k|            PARSER_CHECK(parse_account_id(buffer, &op->signer.account_id))
  ------------------
  |  |   15|  7.31k|    {                           \
  |  |   16|  7.31k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 7.30k]
  |  |  ------------------
  |  |   17|  7.31k|    }
  ------------------
  857|  7.30k|            PARSER_CHECK(parse_signer_key(buffer, &op->signer.signer_key))
  ------------------
  |  |   15|  7.30k|    {                           \
  |  |   16|  7.30k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 7.29k]
  |  |  ------------------
  |  |   17|  7.30k|    }
  ------------------
  858|  7.29k|            return true;
  859|      4|        default:
  ------------------
  |  Branch (859:9): [True: 4, False: 23.4k]
  ------------------
  860|      4|            return false;
  861|  23.4k|    }
  862|  23.4k|}
parser.c:parse_ledger_key:
  813|  16.1k|static bool parse_ledger_key(buffer_t *buffer, ledger_key_t *ledger_key) {
  814|  16.1k|    PARSER_CHECK(parse_uint32(buffer, &ledger_key->type))
  ------------------
  |  |   15|  16.1k|    {                           \
  |  |   16|  16.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 16.1k]
  |  |  ------------------
  |  |   17|  16.1k|    }
  ------------------
  815|  16.1k|    switch (ledger_key->type) {
  816|  2.70k|        case ACCOUNT:
  ------------------
  |  Branch (816:9): [True: 2.70k, False: 13.4k]
  ------------------
  817|  2.70k|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->account.account_id))
  ------------------
  |  |   15|  2.70k|    {                           \
  |  |   16|  2.70k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 2.69k]
  |  |  ------------------
  |  |   17|  2.70k|    }
  ------------------
  818|  2.69k|            return true;
  819|  2.12k|        case TRUSTLINE:
  ------------------
  |  Branch (819:9): [True: 2.12k, False: 14.0k]
  ------------------
  820|  2.12k|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->trust_line.account_id))
  ------------------
  |  |   15|  2.12k|    {                           \
  |  |   16|  2.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 2.12k]
  |  |  ------------------
  |  |   17|  2.12k|    }
  ------------------
  821|  2.12k|            PARSER_CHECK(parse_trust_line_asset(buffer, &ledger_key->trust_line.asset))
  ------------------
  |  |   15|  2.12k|    {                           \
  |  |   16|  2.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 43, False: 2.07k]
  |  |  ------------------
  |  |   17|  2.12k|    }
  ------------------
  822|  2.07k|            return true;
  823|    610|        case OFFER:
  ------------------
  |  Branch (823:9): [True: 610, False: 15.5k]
  ------------------
  824|    610|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->offer.seller_id))
  ------------------
  |  |   15|    610|    {                           \
  |  |   16|    610|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 601]
  |  |  ------------------
  |  |   17|    610|    }
  ------------------
  825|    601|            PARSER_CHECK(parse_int64(buffer, &ledger_key->offer.offer_id))
  ------------------
  |  |   15|    601|    {                           \
  |  |   16|    601|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 598]
  |  |  ------------------
  |  |   17|    601|    }
  ------------------
  826|    598|            return true;
  827|  2.47k|        case DATA:
  ------------------
  |  Branch (827:9): [True: 2.47k, False: 13.6k]
  ------------------
  828|  2.47k|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->data.account_id))
  ------------------
  |  |   15|  2.47k|    {                           \
  |  |   16|  2.47k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 2.46k]
  |  |  ------------------
  |  |   17|  2.47k|    }
  ------------------
  829|  2.46k|            PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  2.46k|    {                           \
  |  |   16|  2.46k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 2.46k]
  |  |  ------------------
  |  |   17|  2.46k|    }
  ------------------
  830|  2.46k|                                                 &ledger_key->data.data_name,
  831|  2.46k|                                                 &ledger_key->data.data_name_size,
  832|  2.46k|                                                 DATA_NAME_MAX_SIZE))
  833|  2.46k|            return true;
  834|    642|        case CLAIMABLE_BALANCE:
  ------------------
  |  Branch (834:9): [True: 642, False: 15.5k]
  ------------------
  835|    642|            PARSER_CHECK(
  ------------------
  |  |   15|    642|    {                           \
  |  |   16|    642|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 638]
  |  |  ------------------
  |  |   17|    642|    }
  ------------------
  836|    642|                parse_claimable_balance_id(buffer, &ledger_key->claimable_balance.balance_id))
  837|    638|            return true;
  838|  7.60k|        case LIQUIDITY_POOL:
  ------------------
  |  Branch (838:9): [True: 7.60k, False: 8.56k]
  ------------------
  839|  7.60k|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|  7.60k|    {                           \
  |  |   16|  7.60k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 7.60k]
  |  |  ------------------
  |  |   17|  7.60k|    }
  ------------------
  840|  7.60k|                                           &ledger_key->liquidity_pool.liquidity_pool_id,
  841|  7.60k|                                           LIQUIDITY_POOL_ID_SIZE))
  842|       |
  843|  7.60k|            return true;
  844|      6|        default:
  ------------------
  |  Branch (844:9): [True: 6, False: 16.1k]
  ------------------
  845|      6|            return false;
  846|  16.1k|    }
  847|  16.1k|}
parser.c:parse_trust_line_asset:
  342|  2.12k|static bool parse_trust_line_asset(buffer_t *buffer, trust_line_asset_t *asset) {
  343|  2.12k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  2.12k|    {                           \
  |  |   16|  2.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 2.11k]
  |  |  ------------------
  |  |   17|  2.12k|    }
  ------------------
  344|  2.11k|    switch (asset->type) {
  345|  1.37k|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (345:9): [True: 1.37k, False: 741]
  ------------------
  346|  1.37k|            return true;
  347|      0|        }
  348|    119|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (348:9): [True: 119, False: 1.99k]
  ------------------
  349|    119|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  350|      0|        }
  351|    184|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (351:9): [True: 184, False: 1.93k]
  ------------------
  352|    184|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  353|      0|        }
  354|    427|        case ASSET_TYPE_POOL_SHARE: {
  ------------------
  |  Branch (354:9): [True: 427, False: 1.68k]
  ------------------
  355|    427|            PARSER_CHECK(
  ------------------
  |  |   15|    427|    {                           \
  |  |   16|    427|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 420]
  |  |  ------------------
  |  |   17|    427|    }
  ------------------
  356|    427|                buffer_read_bytes(buffer, &asset->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  357|    420|            return true;
  358|    427|        }
  359|     11|        default:
  ------------------
  |  Branch (359:9): [True: 11, False: 2.10k]
  ------------------
  360|     11|            return false;  // unknown asset type
  361|  2.11k|    }
  362|  2.11k|}
parser.c:parse_clawback:
  864|    679|static bool parse_clawback(buffer_t *buffer, clawback_op_t *op) {
  865|    679|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|    679|    {                           \
  |  |   16|    679|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 659]
  |  |  ------------------
  |  |   17|    679|    }
  ------------------
  866|    659|    PARSER_CHECK(parse_muxed_account(buffer, &op->from))
  ------------------
  |  |   15|    659|    {                           \
  |  |   16|    659|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 655]
  |  |  ------------------
  |  |   17|    659|    }
  ------------------
  867|    655|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    655|    {                           \
  |  |   16|    655|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 652]
  |  |  ------------------
  |  |   17|    655|    }
  ------------------
  868|    652|    return true;
  869|    655|}
parser.c:parse_clawback_claimable_balance:
  872|  1.01k|                                             clawback_claimable_balance_op_t *op) {
  873|  1.01k|    PARSER_CHECK(parse_claimable_balance_id(buffer, &op->balance_id))
  ------------------
  |  |   15|  1.01k|    {                           \
  |  |   16|  1.01k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 999]
  |  |  ------------------
  |  |   17|  1.01k|    }
  ------------------
  874|    999|    return true;
  875|  1.01k|}
parser.c:parse_set_trust_line_flags:
  877|  10.2k|static bool parse_set_trust_line_flags(buffer_t *buffer, set_trust_line_flags_op_t *op) {
  878|  10.2k|    PARSER_CHECK(parse_account_id(buffer, &op->trustor))
  ------------------
  |  |   15|  10.2k|    {                           \
  |  |   16|  10.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 10.1k]
  |  |  ------------------
  |  |   17|  10.2k|    }
  ------------------
  879|  10.1k|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|  10.1k|    {                           \
  |  |   16|  10.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 10.1k]
  |  |  ------------------
  |  |   17|  10.1k|    }
  ------------------
  880|  10.1k|    PARSER_CHECK(parse_uint32(buffer, &op->clear_flags))
  ------------------
  |  |   15|  10.1k|    {                           \
  |  |   16|  10.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 10.1k]
  |  |  ------------------
  |  |   17|  10.1k|    }
  ------------------
  881|  10.1k|    PARSER_CHECK(parse_uint32(buffer, &op->set_flags))
  ------------------
  |  |   15|  10.1k|    {                           \
  |  |   16|  10.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 10.1k]
  |  |  ------------------
  |  |   17|  10.1k|    }
  ------------------
  882|  10.1k|    return true;
  883|  10.1k|}
parser.c:parse_liquidity_pool_deposit:
  885|    263|static bool parse_liquidity_pool_deposit(buffer_t *buffer, liquidity_pool_deposit_op_t *op) {
  886|    263|    PARSER_CHECK(buffer_read_bytes(buffer, &op->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  ------------------
  |  |   15|    263|    {                           \
  |  |   16|    263|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 250]
  |  |  ------------------
  |  |   17|    263|    }
  ------------------
  887|    250|    PARSER_CHECK(parse_int64(buffer, &op->max_amount_a))
  ------------------
  |  |   15|    250|    {                           \
  |  |   16|    250|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 247]
  |  |  ------------------
  |  |   17|    250|    }
  ------------------
  888|    247|    PARSER_CHECK(parse_int64(buffer, &op->max_amount_b))
  ------------------
  |  |   15|    247|    {                           \
  |  |   16|    247|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 245]
  |  |  ------------------
  |  |   17|    247|    }
  ------------------
  889|    245|    PARSER_CHECK(parse_price(buffer, &op->min_price))
  ------------------
  |  |   15|    245|    {                           \
  |  |   16|    245|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 242]
  |  |  ------------------
  |  |   17|    245|    }
  ------------------
  890|    242|    PARSER_CHECK(parse_price(buffer, &op->max_price))
  ------------------
  |  |   15|    242|    {                           \
  |  |   16|    242|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 235]
  |  |  ------------------
  |  |   17|    242|    }
  ------------------
  891|    235|    return true;
  892|    242|}
parser.c:parse_liquidity_pool_withdraw:
  894|  1.88k|static bool parse_liquidity_pool_withdraw(buffer_t *buffer, liquidity_pool_withdraw_op_t *op) {
  895|  1.88k|    PARSER_CHECK(buffer_read_bytes(buffer, &op->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  ------------------
  |  |   15|  1.88k|    {                           \
  |  |   16|  1.88k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 1.87k]
  |  |  ------------------
  |  |   17|  1.88k|    }
  ------------------
  896|  1.87k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  1.87k|    {                           \
  |  |   16|  1.87k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.86k]
  |  |  ------------------
  |  |   17|  1.87k|    }
  ------------------
  897|  1.86k|    PARSER_CHECK(parse_int64(buffer, &op->min_amount_a))
  ------------------
  |  |   15|  1.86k|    {                           \
  |  |   16|  1.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 1.86k]
  |  |  ------------------
  |  |   17|  1.86k|    }
  ------------------
  898|  1.86k|    PARSER_CHECK(parse_int64(buffer, &op->min_amount_b))
  ------------------
  |  |   15|  1.86k|    {                           \
  |  |   16|  1.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.86k]
  |  |  ------------------
  |  |   17|  1.86k|    }
  ------------------
  899|  1.86k|    return true;
  900|  1.86k|}
parser.c:parse_invoke_host_function:
 1035|  7.86k|static bool parse_invoke_host_function(buffer_t *buffer, invoke_host_function_op_t *op) {
 1036|       |    // hostFunction
 1037|  7.86k|    PARSER_CHECK(parse_uint32(buffer, &op->host_function_type));
  ------------------
  |  |   15|  7.86k|    {                           \
  |  |   16|  7.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 7.85k]
  |  |  ------------------
  |  |   17|  7.86k|    }
  ------------------
 1038|  7.85k|    PRINTF("host_function_type=%d\n", op->host_function_type);
 1039|  7.85k|    switch (op->host_function_type) {
 1040|  4.16k|        case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:
  ------------------
  |  Branch (1040:9): [True: 4.16k, False: 3.69k]
  ------------------
 1041|  4.16k|            PARSER_CHECK(parse_invoke_contract_args(buffer, &op->invoke_contract_args))
  ------------------
  |  |   15|  4.16k|    {                           \
  |  |   16|  4.16k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 165, False: 3.99k]
  |  |  ------------------
  |  |   17|  4.16k|    }
  ------------------
 1042|  3.99k|            break;
 1043|  3.99k|        case HOST_FUNCTION_TYPE_CREATE_CONTRACT:
  ------------------
  |  Branch (1043:9): [True: 2.13k, False: 5.72k]
  ------------------
 1044|  2.13k|            PARSER_CHECK(read_create_contract_args_advance(buffer))
  ------------------
  |  |   15|  2.13k|    {                           \
  |  |   16|  2.13k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 84, False: 2.05k]
  |  |  ------------------
  |  |   17|  2.13k|    }
  ------------------
 1045|  2.05k|            break;
 1046|  2.05k|        case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM: {
  ------------------
  |  Branch (1046:9): [True: 1.56k, False: 6.29k]
  ------------------
 1047|  1.56k|            size_t data_size = 0;
 1048|  1.56k|            PARSER_CHECK(parse_uint32(buffer, &data_size))
  ------------------
  |  |   15|  1.56k|    {                           \
  |  |   16|  1.56k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.55k]
  |  |  ------------------
  |  |   17|  1.56k|    }
  ------------------
 1049|  1.55k|            PARSER_CHECK(num_bytes(data_size, &data_size))
  ------------------
  |  |   15|  1.55k|    {                           \
  |  |   16|  1.55k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 1.55k]
  |  |  ------------------
  |  |   17|  1.55k|    }
  ------------------
 1050|  1.55k|            PARSER_CHECK(buffer_advance(buffer, data_size))
  ------------------
  |  |   15|  1.55k|    {                           \
  |  |   16|  1.55k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.55k]
  |  |  ------------------
  |  |   17|  1.55k|    }
  ------------------
 1051|  1.55k|            break;
 1052|  1.55k|        }
 1053|  1.55k|        default:
  ------------------
  |  Branch (1053:9): [True: 4, False: 7.85k]
  ------------------
 1054|      4|            return false;
 1055|  7.85k|    }
 1056|       |
 1057|       |    // auth<>
 1058|  7.59k|    uint32_t auth_len;
 1059|  7.59k|    uint8_t sub_invocations_count = 0;
 1060|  7.59k|    PARSER_CHECK(parse_uint32(buffer, &auth_len))
  ------------------
  |  |   15|  7.59k|    {                           \
  |  |   16|  7.59k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 32, False: 7.56k]
  |  |  ------------------
  |  |   17|  7.59k|    }
  ------------------
 1061|  10.1k|    for (uint32_t i = 0; i < auth_len; i++) {
  ------------------
  |  Branch (1061:26): [True: 3.16k, False: 6.95k]
  ------------------
 1062|       |        // PARSER_CHECK(read_soroban_authorization_entry_advance(buffer,
 1063|       |        //                                                       &sub_invocations_count,
 1064|       |        //                                                       op->sub_invocation_positions))
 1065|       |        // PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, count, positions))
 1066|       |        // 1. read credentials
 1067|  3.16k|        uint32_t credentials_type;
 1068|  3.16k|        PARSER_CHECK(read_parse_soroban_credentials_advance(buffer, &credentials_type))
  ------------------
  |  |   15|  3.16k|    {                           \
  |  |   16|  3.16k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 152, False: 3.01k]
  |  |  ------------------
  |  |   17|  3.16k|    }
  ------------------
 1069|       |        // 2. read rootInvocation.function
 1070|  3.01k|        PARSER_CHECK(read_soroban_authorized_function_advance(buffer))
  ------------------
  |  |   15|  3.01k|    {                           \
  |  |   16|  3.01k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 163, False: 2.84k]
  |  |  ------------------
  |  |   17|  3.01k|    }
  ------------------
 1071|       |        // 3. read rootInvocation.subInvocations
 1072|       |        // subInvocations
 1073|  2.84k|        uint32_t len;
 1074|  2.84k|        PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  2.84k|    {                           \
  |  |   16|  2.84k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 2.84k]
  |  |  ------------------
  |  |   17|  2.84k|    }
  ------------------
 1075|  5.41k|        for (uint32_t j = 0; j < len; j++) {
  ------------------
  |  Branch (1075:30): [True: 2.85k, False: 2.55k]
  ------------------
 1076|  2.85k|            if (credentials_type == SOROBAN_CREDENTIALS_SOURCE_ACCOUNT) {
  ------------------
  |  Branch (1076:17): [True: 1.61k, False: 1.24k]
  ------------------
 1077|  1.61k|                PARSER_CHECK(
  ------------------
  |  |   15|  1.61k|    {                           \
  |  |   16|  1.61k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 117, False: 1.49k]
  |  |  ------------------
  |  |   17|  1.61k|    }
  ------------------
 1078|  1.61k|                    read_soroban_authorized_invocation_advance(buffer,
 1079|  1.61k|                                                               &sub_invocations_count,
 1080|  1.61k|                                                               op->sub_invocation_positions))
 1081|  1.61k|            } else {
 1082|  1.24k|                PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, NULL, NULL))
  ------------------
  |  |   15|  1.24k|    {                           \
  |  |   16|  1.24k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 169, False: 1.07k]
  |  |  ------------------
  |  |   17|  1.24k|    }
  ------------------
 1083|  1.24k|            }
 1084|  2.85k|        }
 1085|  2.84k|    }
 1086|  6.95k|    op->sub_invocations_count = sub_invocations_count;
 1087|       |
 1088|  6.95k|    PRINTF("sub_invocations_count=%d\n", sub_invocations_count);
 1089|       |    // for (uint8_t i = 0; i < 16; i++) {
 1090|       |    //     PRINTF("sub_invocation_positions[%d]=%d\n", i, op->sub_invocation_positions[i]);
 1091|       |    // }
 1092|  6.95k|    return true;
 1093|  7.56k|}
parser.c:read_parse_soroban_credentials_advance:
  917|  3.16k|static bool read_parse_soroban_credentials_advance(buffer_t *buffer, uint32_t *credentials_type) {
  918|  3.16k|    PARSER_CHECK(parse_uint32(buffer, credentials_type))
  ------------------
  |  |   15|  3.16k|    {                           \
  |  |   16|  3.16k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 44, False: 3.11k]
  |  |  ------------------
  |  |   17|  3.16k|    }
  ------------------
  919|  3.11k|    switch (*credentials_type) {
  920|  2.51k|        case SOROBAN_CREDENTIALS_SOURCE_ACCOUNT:
  ------------------
  |  Branch (920:9): [True: 2.51k, False: 605]
  ------------------
  921|       |            // void
  922|  2.51k|            break;
  923|    558|        case SOROBAN_CREDENTIALS_ADDRESS: {
  ------------------
  |  Branch (923:9): [True: 558, False: 2.56k]
  ------------------
  924|    558|            sc_address_t address;
  925|    558|            PARSER_CHECK(parse_sc_address(buffer, &address))
  ------------------
  |  |   15|    558|    {                           \
  |  |   16|    558|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 21, False: 537]
  |  |  ------------------
  |  |   17|    558|    }
  ------------------
  926|       |            PARSER_CHECK(buffer_advance(buffer, 8))   // nonce
  ------------------
  |  |   15|    537|    {                           \
  |  |   16|    537|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 528]
  |  |  ------------------
  |  |   17|    537|    }
  ------------------
  927|       |            PARSER_CHECK(buffer_advance(buffer, 4))   // signatureExpirationLedger
  ------------------
  |  |   15|    528|    {                           \
  |  |   16|    528|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 514]
  |  |  ------------------
  |  |   17|    528|    }
  ------------------
  928|       |            PARSER_CHECK(read_scval_advance(buffer))  // signature
  ------------------
  |  |   15|    514|    {                           \
  |  |   16|    514|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 17, False: 497]
  |  |  ------------------
  |  |   17|    514|    }
  ------------------
  929|    497|            break;
  930|    514|        }
  931|    497|        default:
  ------------------
  |  Branch (931:9): [True: 47, False: 3.07k]
  ------------------
  932|     47|            return false;
  933|  3.11k|    }
  934|  3.01k|    return true;
  935|  3.11k|}
parser.c:read_soroban_authorized_function_advance:
  994|  23.4k|static bool read_soroban_authorized_function_advance(buffer_t *buffer) {
  995|  23.4k|    uint32_t type;
  996|  23.4k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  23.4k|    {                           \
  |  |   16|  23.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 281, False: 23.1k]
  |  |  ------------------
  |  |   17|  23.4k|    }
  ------------------
  997|  23.1k|    switch (type) {
  998|  21.8k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN: {
  ------------------
  |  Branch (998:9): [True: 21.8k, False: 1.26k]
  ------------------
  999|       |            // contractFn
 1000|  21.8k|            invoke_contract_args_t args;
 1001|  21.8k|            PARSER_CHECK(parse_invoke_contract_args(buffer, &args));
  ------------------
  |  |   15|  21.8k|    {                           \
  |  |   16|  21.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 637, False: 21.2k]
  |  |  ------------------
  |  |   17|  21.8k|    }
  ------------------
 1002|  21.2k|            break;
 1003|  21.8k|        }
 1004|    987|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1004:9): [True: 987, False: 22.1k]
  ------------------
 1005|       |            // createContractHostFn
 1006|    987|            PARSER_CHECK(read_create_contract_args_advance(buffer));
  ------------------
  |  |   15|    987|    {                           \
  |  |   16|    987|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 129, False: 858]
  |  |  ------------------
  |  |   17|    987|    }
  ------------------
 1007|    858|            break;
 1008|    282|        default:
  ------------------
  |  Branch (1008:9): [True: 282, False: 22.8k]
  ------------------
 1009|    282|            return false;
 1010|  23.1k|    }
 1011|  22.1k|    return true;
 1012|  23.1k|}
parser.c:parse_extend_footprint_ttl:
 1095|  1.18k|static bool parse_extend_footprint_ttl(buffer_t *buffer, extend_footprint_ttl_op_t *op) {
 1096|  1.18k|    PARSER_CHECK(parse_extension_point_v0(buffer))
  ------------------
  |  |   15|  1.18k|    {                           \
  |  |   16|  1.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.17k]
  |  |  ------------------
  |  |   17|  1.18k|    }
  ------------------
 1097|  1.17k|    PARSER_CHECK(parse_uint32(buffer, &op->extend_to))
  ------------------
  |  |   15|  1.17k|    {                           \
  |  |   16|  1.17k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.16k]
  |  |  ------------------
  |  |   17|  1.17k|    }
  ------------------
 1098|  1.16k|    return true;
 1099|  1.17k|}
parser.c:parse_extension_point_v0:
  902|  5.42k|static bool parse_extension_point_v0(buffer_t *buffer) {
  903|  5.42k|    uint32_t v;
  904|  5.42k|    PARSER_CHECK(parse_uint32(buffer, &v))
  ------------------
  |  |   15|  5.42k|    {                           \
  |  |   16|  5.42k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 5.42k]
  |  |  ------------------
  |  |   17|  5.42k|    }
  ------------------
  905|  5.42k|    if (v != 0) {
  ------------------
  |  Branch (905:9): [True: 11, False: 5.41k]
  ------------------
  906|     11|        return false;
  907|     11|    }
  908|  5.41k|    return true;
  909|  5.42k|}
parser.c:parse_restore_footprint:
  911|  4.24k|static bool parse_restore_footprint(buffer_t *buffer, restore_footprint_op_t *op) {
  912|  4.24k|    (void) op;
  913|  4.24k|    PARSER_CHECK(parse_extension_point_v0(buffer))
  ------------------
  |  |   15|  4.24k|    {                           \
  |  |   16|  4.24k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 4.23k]
  |  |  ------------------
  |  |   17|  4.24k|    }
  ------------------
  914|  4.23k|    return true;
  915|  4.24k|}
parser.c:parse_invoke_contract_args:
  962|  58.1k|static bool parse_invoke_contract_args(buffer_t *buffer, invoke_contract_args_t *args) {
  963|       |    // contractAddress
  964|  58.1k|    PARSER_CHECK(parse_sc_address(buffer, &args->address))
  ------------------
  |  |   15|  58.1k|    {                           \
  |  |   16|  58.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.62k, False: 56.5k]
  |  |  ------------------
  |  |   17|  58.1k|    }
  ------------------
  965|       |    // functionName
  966|  56.5k|    PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  56.5k|    {                           \
  |  |   16|  56.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.88k, False: 54.6k]
  |  |  ------------------
  |  |   17|  56.5k|    }
  ------------------
  967|  56.5k|                                         &args->function.name,
  968|  56.5k|                                         &args->function.name_size,
  969|  56.5k|                                         SCV_SYMBOL_MAX_SIZE))
  970|       |
  971|       |    // args
  972|  54.6k|    uint32_t args_len;
  973|  54.6k|    PARSER_CHECK(parse_uint32(buffer, &args_len))
  ------------------
  |  |   15|  54.6k|    {                           \
  |  |   16|  54.6k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 40, False: 54.6k]
  |  |  ------------------
  |  |   17|  54.6k|    }
  ------------------
  974|       |
  975|  54.6k|    args->parameters_length = args_len;
  976|  54.6k|    args->parameters_position = buffer->offset;
  977|       |
  978|  54.6k|    if (args_len > HOST_FUNCTION_ARGS_MAX_LENGTH) {
  ------------------
  |  |   36|  54.6k|#define HOST_FUNCTION_ARGS_MAX_LENGTH 10
  ------------------
  |  Branch (978:9): [True: 740, False: 53.9k]
  ------------------
  979|       |        // We dont support more than 10 arguments
  980|    740|        return false;
  981|    740|    }
  982|       |
  983|       |    // PRINTF("function_name.text_size=%d, function_name.text=%s, args->parameters_length=%d\n",
  984|       |    //        args->function.name_size,
  985|       |    //        args->function.name,
  986|       |    //        args->parameters_length);
  987|       |
  988|   136k|    for (uint32_t i = 0; i < args_len; i++) {
  ------------------
  |  Branch (988:26): [True: 94.4k, False: 42.3k]
  ------------------
  989|  94.4k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  94.4k|    {                           \
  |  |   16|  94.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11.5k, False: 82.8k]
  |  |  ------------------
  |  |   17|  94.4k|    }
  ------------------
  990|  94.4k|    }
  991|  42.3k|    return true;
  992|  53.9k|}
parser.c:read_create_contract_args_advance:
  937|  3.65k|static bool read_create_contract_args_advance(buffer_t *buffer) {
  938|       |    // contract_id_preimage
  939|  3.65k|    uint32_t type;
  940|  3.65k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  3.65k|    {                           \
  |  |   16|  3.65k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 26, False: 3.62k]
  |  |  ------------------
  |  |   17|  3.65k|    }
  ------------------
  941|  3.62k|    switch (type) {
  942|  2.95k|        case CONTRACT_ID_PREIMAGE_FROM_ADDRESS: {
  ------------------
  |  |  489|  2.95k|#define CONTRACT_ID_PREIMAGE_FROM_ADDRESS 0
  ------------------
  |  Branch (942:9): [True: 2.95k, False: 673]
  ------------------
  943|  2.95k|            sc_address_t address;
  944|  2.95k|            PARSER_CHECK(parse_sc_address(buffer, &address))
  ------------------
  |  |   15|  2.95k|    {                           \
  |  |   16|  2.95k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 2.93k]
  |  |  ------------------
  |  |   17|  2.95k|    }
  ------------------
  945|       |            PARSER_CHECK(buffer_advance(buffer, 32))  // salt
  ------------------
  |  |   15|  2.93k|    {                           \
  |  |   16|  2.93k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 2.91k]
  |  |  ------------------
  |  |   17|  2.93k|    }
  ------------------
  946|  2.91k|            break;
  947|  2.93k|        }
  948|  2.91k|        case CONTRACT_ID_PREIMAGE_FROM_ASSET: {
  ------------------
  |  |  490|    637|#define CONTRACT_ID_PREIMAGE_FROM_ASSET   1
  ------------------
  |  Branch (948:9): [True: 637, False: 2.99k]
  ------------------
  949|    637|            asset_t asset;
  950|    637|            PARSER_CHECK(parse_asset(buffer, &asset))
  ------------------
  |  |   15|    637|    {                           \
  |  |   16|    637|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 75, False: 562]
  |  |  ------------------
  |  |   17|    637|    }
  ------------------
  951|    562|            break;
  952|    637|        }
  953|    562|        default:
  ------------------
  |  Branch (953:9): [True: 36, False: 3.59k]
  ------------------
  954|     36|            return false;
  955|  3.62k|    }
  956|       |
  957|       |    // executable
  958|  3.47k|    PARSER_CHECK(read_contract_executable_advance(buffer))
  ------------------
  |  |   15|  3.47k|    {                           \
  |  |   16|  3.47k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 84, False: 3.39k]
  |  |  ------------------
  |  |   17|  3.47k|    }
  ------------------
  959|  3.39k|    return true;
  960|  3.47k|}
parser.c:read_soroban_authorized_invocation_advance:
 1016|  20.4k|                                                       size_t *positions) {
 1017|  20.4k|    if (count != NULL && positions != NULL) {
  ------------------
  |  Branch (1017:9): [True: 19.1k, False: 1.33k]
  |  Branch (1017:26): [True: 19.1k, False: 0]
  ------------------
 1018|  19.1k|        if (*count >= MAX_SUB_INVOCATIONS_SIZE) {
  ------------------
  |  |   44|  19.1k|#define MAX_SUB_INVOCATIONS_SIZE 16
  ------------------
  |  Branch (1018:13): [True: 61, False: 19.0k]
  ------------------
 1019|     61|            return false;
 1020|     61|        }
 1021|  19.0k|        positions[(*count)++] = buffer->offset;
 1022|  19.0k|    }
 1023|       |    // function
 1024|  20.4k|    PARSER_CHECK(read_soroban_authorized_function_advance(buffer))
  ------------------
  |  |   15|  20.4k|    {                           \
  |  |   16|  20.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.16k, False: 19.2k]
  |  |  ------------------
  |  |   17|  20.4k|    }
  ------------------
 1025|       |
 1026|       |    // subInvocations
 1027|  19.2k|    uint32_t len;
 1028|  19.2k|    PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  19.2k|    {                           \
  |  |   16|  19.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 33, False: 19.2k]
  |  |  ------------------
  |  |   17|  19.2k|    }
  ------------------
 1029|  27.4k|    for (uint32_t i = 0; i < len; i++) {
  ------------------
  |  Branch (1029:26): [True: 9.08k, False: 18.3k]
  ------------------
 1030|  9.08k|        PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, count, positions))
  ------------------
  |  |   15|  9.08k|    {                           \
  |  |   16|  9.08k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 885, False: 8.19k]
  |  |  ------------------
  |  |   17|  9.08k|    }
  ------------------
 1031|  9.08k|    }
 1032|  18.3k|    return true;
 1033|  19.2k|}

crc16:
   15|  63.0k|uint16_t crc16(const uint8_t *input_str, uint32_t num_bytes) {
   16|  63.0k|    uint16_t crc = 0;
   17|  2.16M|    while (num_bytes-- > 0) {
  ------------------
  |  Branch (17:12): [True: 2.09M, False: 63.0k]
  ------------------
   18|  2.09M|        crc = crc ^ (uint32_t) *input_str++ << 8;
   19|  2.09M|        int i = 8;
   20|  16.7M|        do {
   21|  16.7M|            if (crc & 0x8000)
  ------------------
  |  Branch (21:17): [True: 8.24M, False: 8.54M]
  ------------------
   22|  8.24M|                crc = crc << 1 ^ 0x1021;
   23|  8.54M|            else
   24|  8.54M|                crc = crc << 1;
   25|  16.7M|        } while (--i);
  ------------------
  |  Branch (25:18): [True: 14.6M, False: 2.09M]
  ------------------
   26|  2.09M|    }
   27|  63.0k|    return crc;
   28|  63.0k|}
encode_key:
   30|  62.1k|bool encode_key(const uint8_t *in, uint8_t version_byte, char *out, uint8_t out_len) {
   31|  62.1k|    if (in == NULL || out_len < 56 + 1) {
  ------------------
  |  Branch (31:9): [True: 0, False: 62.1k]
  |  Branch (31:23): [True: 0, False: 62.1k]
  ------------------
   32|      0|        return false;
   33|      0|    }
   34|  62.1k|    uint8_t buffer[35] = {0};
   35|  62.1k|    buffer[0] = version_byte;
   36|  2.05M|    for (uint8_t i = 0; i < 32; i++) {
  ------------------
  |  Branch (36:25): [True: 1.98M, False: 62.1k]
  ------------------
   37|  1.98M|        buffer[i + 1] = in[i];
   38|  1.98M|    }
   39|  62.1k|    uint16_t crc = crc16(buffer, 33);  // checksum
   40|  62.1k|    buffer[33] = crc;
   41|  62.1k|    buffer[34] = crc >> 8;
   42|  62.1k|    if (base32_encode(buffer, 35, (uint8_t *) out, 56) == -1) {
  ------------------
  |  Branch (42:9): [True: 0, False: 62.1k]
  ------------------
   43|      0|        return false;
   44|      0|    }
   45|  62.1k|    out[56] = '\0';
   46|  62.1k|    return true;
   47|  62.1k|}
encode_ed25519_public_key:
   51|  57.6k|                               size_t out_len) {
   52|  57.6k|    return encode_key(raw_public_key, VERSION_BYTE_ED25519_PUBLIC_KEY, out, out_len);
  ------------------
  |  |   25|  57.6k|#define VERSION_BYTE_ED25519_PUBLIC_KEY     6 << 3
  ------------------
   53|  57.6k|}
encode_hash_x_key:
   57|    210|                       size_t out_len) {
   58|    210|    return encode_key(raw_hash_x, VERSION_BYTE_HASH_X, out, out_len);
  ------------------
  |  |   28|    210|#define VERSION_BYTE_HASH_X                 23 << 3
  ------------------
   59|    210|}
encode_pre_auth_x_key:
   63|    277|                           size_t out_len) {
   64|    277|    return encode_key(raw_pre_auth_tx, VERSION_BYTE_PRE_AUTH_TX_KEY, out, out_len);
  ------------------
  |  |   27|    277|#define VERSION_BYTE_PRE_AUTH_TX_KEY        19 << 3
  ------------------
   65|    277|}
encode_contract:
   69|  4.05k|                     size_t out_len) {
   70|  4.05k|    return encode_key(raw_contract, VERSION_BYTE_CONTRACT, out, out_len);
  ------------------
  |  |   31|  4.05k|#define VERSION_BYTE_CONTRACT               2 << 3
  ------------------
   71|  4.05k|}
encode_ed25519_signed_payload:
   75|    368|                                   size_t out_len) {
   76|    368|    if (out_len < ED25519_SIGNED_PAYLOAD_MAX_LENGTH) {  // (103 * 8 + 4) / 5
  ------------------
  |  |   12|    368|#define ED25519_SIGNED_PAYLOAD_MAX_LENGTH 166  // include the null terminator
  ------------------
  |  Branch (76:9): [True: 0, False: 368]
  ------------------
   77|      0|        return false;
   78|      0|    }
   79|    368|    if (signed_payload->payload_len > 64 || signed_payload->payload_len <= 0) {
  ------------------
  |  Branch (79:9): [True: 0, False: 368]
  |  Branch (79:45): [True: 0, False: 368]
  ------------------
   80|      0|        return false;
   81|      0|    }
   82|    368|    uint8_t data_len = RAW_ED25519_PUBLIC_KEY_SIZE + 4 + signed_payload->payload_len +
  ------------------
  |  |   18|    368|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
   83|    368|                       ((4 - signed_payload->payload_len % 4) % 4);
   84|    368|    uint8_t buffer[1 + 32 + 4 + 64 + 2] = {0};
   85|    368|    buffer[0] = VERSION_BYTE_ED25519_SIGNED_PAYLOAD;
  ------------------
  |  |   30|    368|#define VERSION_BYTE_ED25519_SIGNED_PAYLOAD 15 << 3
  ------------------
   86|  12.1k|    for (uint8_t i = 0; i < 32; i++) {
  ------------------
  |  Branch (86:25): [True: 11.7k, False: 368]
  ------------------
   87|  11.7k|        buffer[i + 1] = signed_payload->ed25519[i];
   88|  11.7k|    }
   89|    368|    buffer[36] = signed_payload->payload_len;
   90|  11.8k|    for (uint32_t i = 0; i < signed_payload->payload_len; i++) {
  ------------------
  |  Branch (90:26): [True: 11.4k, False: 368]
  ------------------
   91|  11.4k|        buffer[i + 37] = signed_payload->payload[i];
   92|  11.4k|    }
   93|    368|    uint16_t crc = crc16(buffer, data_len + 1);  // checksum
   94|    368|    buffer[1 + data_len] = crc;
   95|    368|    buffer[1 + data_len + 1] = crc >> 8;
   96|    368|    int ret = base32_encode(buffer, data_len + 3, (uint8_t *) out, out_len);
   97|    368|    if (ret == -1) {
  ------------------
  |  Branch (97:9): [True: 0, False: 368]
  ------------------
   98|      0|        return false;
   99|      0|    }
  100|    368|    out[ret] = '\0';
  101|    368|    return true;
  102|    368|}
encode_muxed_account:
  104|  11.0k|bool encode_muxed_account(const muxed_account_t *raw_muxed_account, char *out, size_t out_len) {
  105|  11.0k|    if (raw_muxed_account == NULL) {
  ------------------
  |  Branch (105:9): [True: 0, False: 11.0k]
  ------------------
  106|      0|        return false;
  107|      0|    }
  108|  11.0k|    if (raw_muxed_account->type == KEY_TYPE_ED25519) {
  ------------------
  |  Branch (108:9): [True: 10.5k, False: 533]
  ------------------
  109|  10.5k|        return encode_ed25519_public_key(raw_muxed_account->ed25519, out, out_len);
  110|  10.5k|    } else {
  111|    533|        if (out_len < ENCODED_MUXED_ACCOUNT_KEY_LENGTH) {
  ------------------
  |  |   16|    533|#define ENCODED_MUXED_ACCOUNT_KEY_LENGTH   70
  ------------------
  |  Branch (111:13): [True: 0, False: 533]
  ------------------
  112|      0|            return false;
  113|      0|        }
  114|    533|        uint8_t buffer[MUXED_ACCOUNT_MED_25519_SIZE] = {0};
  115|    533|        buffer[0] = VERSION_BYTE_MUXED_ACCOUNT;
  ------------------
  |  |   29|    533|#define VERSION_BYTE_MUXED_ACCOUNT          12 << 3
  ------------------
  116|    533|        memcpy(buffer + 1, raw_muxed_account->med25519.ed25519, RAW_ED25519_PUBLIC_KEY_SIZE);
  ------------------
  |  |   18|    533|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  117|  4.79k|        for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (117:25): [True: 4.26k, False: 533]
  ------------------
  118|  4.26k|            buffer[33 + i] = raw_muxed_account->med25519.id >> 8 * (7 - i);
  119|  4.26k|        }
  120|    533|        uint16_t crc = crc16(buffer, MUXED_ACCOUNT_MED_25519_SIZE - 2);  // checksum
  ------------------
  |  |   10|    533|#define MUXED_ACCOUNT_MED_25519_SIZE      43
  ------------------
  121|    533|        buffer[41] = crc;
  122|    533|        buffer[42] = crc >> 8;
  123|    533|        if (base32_encode(buffer,
  ------------------
  |  Branch (123:13): [True: 0, False: 533]
  ------------------
  124|    533|                          MUXED_ACCOUNT_MED_25519_SIZE,
  ------------------
  |  |   10|    533|#define MUXED_ACCOUNT_MED_25519_SIZE      43
  ------------------
  125|    533|                          (uint8_t *) out,
  126|    533|                          ENCODED_MUXED_ACCOUNT_KEY_LENGTH) == -1) {
  ------------------
  |  |   16|    533|#define ENCODED_MUXED_ACCOUNT_KEY_LENGTH   70
  ------------------
  127|      0|            return false;
  128|      0|        }
  129|    533|        out[69] = '\0';
  130|    533|        return true;
  131|    533|    }
  132|  11.0k|}
print_binary:
  162|  1.82k|                  uint8_t num_chars_r) {
  163|  1.82k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (163:9): [True: 221, False: 1.60k]
  ------------------
  164|    221|        char buffer[BINARY_MAX_SIZE * 2 + 1];
  165|    221|        if (!format_hex(in, in_len, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (165:13): [True: 0, False: 221]
  ------------------
  166|      0|            return false;
  167|      0|        }
  168|    221|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  169|    221|    }
  170|  1.60k|    return format_hex(in, in_len, out, out_len);
  171|  1.82k|}
print_account_id:
  177|  47.0k|                      uint8_t num_chars_r) {
  178|  47.0k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (178:9): [True: 1.07k, False: 46.0k]
  ------------------
  179|  1.07k|        char buffer[ENCODED_ED25519_PUBLIC_KEY_LENGTH];
  180|  1.07k|        if (!encode_ed25519_public_key(account_id, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (180:13): [True: 0, False: 1.07k]
  ------------------
  181|      0|            return false;
  182|      0|        }
  183|  1.07k|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  184|  1.07k|    }
  185|  46.0k|    return encode_ed25519_public_key(account_id, out, out_len);
  186|  47.0k|}
print_contract_id:
  192|  4.05k|                       uint8_t num_chars_r) {
  193|  4.05k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (193:9): [True: 0, False: 4.05k]
  ------------------
  194|      0|        char buffer[ENCODED_CONTRACT_KEY_LENGTH];
  195|      0|        if (!encode_contract(contract_id, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (195:13): [True: 0, False: 0]
  ------------------
  196|      0|            return false;
  197|      0|        }
  198|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  199|      0|    }
  200|  4.05k|    return encode_contract(contract_id, out, out_len);
  201|  4.05k|}
print_hash_x_key:
  207|    210|                      uint8_t num_chars_r) {
  208|    210|    if (num_chars_l > 0) {
  ------------------
  |  Branch (208:9): [True: 0, False: 210]
  ------------------
  209|      0|        char buffer[ENCODED_HASH_X_KEY_LENGTH];
  210|      0|        if (!encode_hash_x_key(raw_hash_x, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|            return false;
  212|      0|        }
  213|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  214|      0|    }
  215|    210|    return encode_hash_x_key(raw_hash_x, out, out_len);
  216|    210|}
print_pre_auth_x_key:
  222|    277|                          uint8_t num_chars_r) {
  223|    277|    if (num_chars_l > 0) {
  ------------------
  |  Branch (223:9): [True: 0, False: 277]
  ------------------
  224|      0|        char buffer[ENCODED_PRE_AUTH_TX_KEY_LENGTH];
  225|      0|        if (!encode_pre_auth_x_key(raw_pre_auth_tx, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (225:13): [True: 0, False: 0]
  ------------------
  226|      0|            return false;
  227|      0|        }
  228|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  229|      0|    }
  230|    277|    return encode_pre_auth_x_key(raw_pre_auth_tx, out, out_len);
  231|    277|}
print_ed25519_signed_payload:
  237|    368|                                  uint8_t num_chars_r) {
  238|    368|    char tmp[ED25519_SIGNED_PAYLOAD_MAX_LENGTH];
  239|    368|    if (!encode_ed25519_signed_payload(signed_payload, tmp, sizeof(tmp))) {
  ------------------
  |  Branch (239:9): [True: 0, False: 368]
  ------------------
  240|      0|        return false;
  241|    368|    };
  242|       |
  243|    368|    if (num_chars_l > 0) {
  ------------------
  |  Branch (243:9): [True: 368, False: 0]
  ------------------
  244|    368|        if (out_len < num_chars_l + num_chars_r + 2 + 1) {
  ------------------
  |  Branch (244:13): [True: 0, False: 368]
  ------------------
  245|      0|            return false;
  246|      0|        }
  247|    368|        return print_summary(tmp, out, out_len, num_chars_l, num_chars_r);
  248|    368|    } else {
  249|      0|        if (strlcpy(out, tmp, out_len) >= out_len) {
  ------------------
  |  Branch (249:13): [True: 0, False: 0]
  ------------------
  250|      0|            return false;
  251|      0|        }
  252|      0|    }
  253|      0|    return true;
  254|    368|}
print_sc_address:
  260|  12.9k|                      uint8_t num_chars_r) {
  261|  12.9k|    if (sc_address->type == SC_ADDRESS_TYPE_ACCOUNT) {
  ------------------
  |  Branch (261:9): [True: 8.94k, False: 4.05k]
  ------------------
  262|  8.94k|        return print_account_id(sc_address->address, out, out_len, num_chars_l, num_chars_r);
  263|  8.94k|    } else {
  264|  4.05k|        return print_contract_id(sc_address->address, out, out_len, num_chars_l, num_chars_r);
  265|  4.05k|    }
  266|      0|    return true;
  267|  12.9k|}
print_muxed_account:
  273|  11.0k|                         uint8_t num_chars_r) {
  274|  11.0k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (274:9): [True: 1.26k, False: 9.82k]
  ------------------
  275|  1.26k|        char buffer[ENCODED_MUXED_ACCOUNT_KEY_LENGTH];
  276|  1.26k|        if (!encode_muxed_account(muxed_account, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (276:13): [True: 0, False: 1.26k]
  ------------------
  277|      0|            return false;
  278|      0|        }
  279|  1.26k|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  280|  1.26k|    }
  281|  9.82k|    return encode_muxed_account(muxed_account, out, out_len);
  282|  11.0k|}
print_claimable_balance_id:
  288|    528|                                uint8_t num_chars_r) {
  289|    528|    if (out_len < (4 + CLAIMABLE_BALANCE_ID_SIZE) * 2 + 1) {
  ------------------
  |  |   48|    528|#define CLAIMABLE_BALANCE_ID_SIZE 32
  ------------------
  |  Branch (289:9): [True: 0, False: 528]
  ------------------
  290|      0|        return false;
  291|      0|    }
  292|    528|    uint8_t data[(4 + CLAIMABLE_BALANCE_ID_SIZE)];
  293|  2.64k|    for (uint8_t i = 0; i < 4; i++) {
  ------------------
  |  Branch (293:25): [True: 2.11k, False: 528]
  ------------------
  294|  2.11k|        data[i] = claimable_balance_id_t->type >> (8 * (3 - i));
  295|  2.11k|    }
  296|    528|    memcpy(data + 4, claimable_balance_id_t->v0, CLAIMABLE_BALANCE_ID_SIZE);
  ------------------
  |  |   48|    528|#define CLAIMABLE_BALANCE_ID_SIZE 32
  ------------------
  297|    528|    return print_binary(data, sizeof(data), out, out_len, num_chars_l, num_chars_r);
  298|    528|}
print_uint64_num:
  300|   171k|bool print_uint64_num(uint64_t num, char *out, size_t out_len) {
  301|   171k|    uint8_t data[8] = {0};
  302|  1.54M|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (302:21): [True: 1.37M, False: 171k]
  ------------------
  303|  1.37M|        data[i] = num >> (8 * (7 - i));
  304|  1.37M|    }
  305|   171k|    return print_uint64(data, 0, out, out_len, false);
  306|   171k|}
print_int64_num:
  308|    282|bool print_int64_num(int64_t num, char *out, size_t out_len) {
  309|    282|    uint8_t data[8] = {0};
  310|  2.53k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (310:21): [True: 2.25k, False: 282]
  ------------------
  311|  2.25k|        data[i] = num >> (8 * (7 - i));
  312|  2.25k|    }
  313|    282|    return print_int64(data, 0, out, out_len, false);
  314|    282|}
print_time:
  316|    789|bool print_time(uint64_t seconds, char *out, size_t out_len) {
  317|    789|    if (seconds > 253402300799) {
  ------------------
  |  Branch (317:9): [True: 76, False: 713]
  ------------------
  318|       |        // valid range 1970-01-01 00:00:00 - 9999-12-31 23:59:59
  319|     76|        return false;
  320|     76|    }
  321|    713|    char time_str[20] = {0};  // 1970-01-01 00:00:00
  322|       |
  323|    713|    if (out_len < sizeof(time_str)) {
  ------------------
  |  Branch (323:9): [True: 0, False: 713]
  ------------------
  324|      0|        return false;
  325|      0|    }
  326|    713|    struct tm tm;
  327|    713|    if (!gmtime_r((time_t *) &seconds, &tm)) {
  ------------------
  |  Branch (327:9): [True: 0, False: 713]
  ------------------
  328|      0|        return false;
  329|    713|    };
  330|       |
  331|    713|    if (snprintf(time_str,
  ------------------
  |  Branch (331:9): [True: 0, False: 713]
  ------------------
  332|    713|                 sizeof(time_str),
  333|    713|                 "%04d-%02d-%02d %02d:%02d:%02d",
  334|    713|                 tm.tm_year + 1900,
  335|    713|                 tm.tm_mon + 1,
  336|    713|                 tm.tm_mday,
  337|    713|                 tm.tm_hour,
  338|    713|                 tm.tm_min,
  339|    713|                 tm.tm_sec) < 0) {
  340|      0|        return false;
  341|    713|    };
  342|    713|    if (strlcpy(out, time_str, out_len) >= out_len) {
  ------------------
  |  Branch (342:9): [True: 0, False: 713]
  ------------------
  343|      0|        return false;
  344|      0|    }
  345|    713|    return true;
  346|    713|}
print_asset_name:
  348|  47.5k|bool print_asset_name(const asset_t *asset, uint8_t network_id, char *out, size_t out_len) {
  349|  47.5k|    switch (asset->type) {
  350|  46.3k|        case ASSET_TYPE_NATIVE:
  ------------------
  |  Branch (350:9): [True: 46.3k, False: 1.13k]
  ------------------
  351|  46.3k|            if (network_id == NETWORK_TYPE_UNKNOWN) {
  ------------------
  |  |   59|  46.3k|#define NETWORK_TYPE_UNKNOWN 2
  ------------------
  |  Branch (351:17): [True: 44.0k, False: 2.31k]
  ------------------
  352|  44.0k|                if (strlcpy(out, "native", out_len) >= out_len) {
  ------------------
  |  Branch (352:21): [True: 0, False: 44.0k]
  ------------------
  353|      0|                    return false;
  354|      0|                }
  355|  44.0k|            } else {
  356|  2.31k|                if (strlcpy(out, "XLM", out_len) >= out_len) {
  ------------------
  |  Branch (356:21): [True: 0, False: 2.31k]
  ------------------
  357|      0|                    return false;
  358|      0|                }
  359|  2.31k|            }
  360|  46.3k|            return true;
  361|    650|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (361:9): [True: 650, False: 46.8k]
  ------------------
  362|  2.13k|            for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (362:29): [True: 1.83k, False: 299]
  ------------------
  363|  1.83k|                out[i] = asset->alpha_num4.asset_code[i];
  364|  1.83k|                if (out[i] == 0) {
  ------------------
  |  Branch (364:21): [True: 351, False: 1.48k]
  ------------------
  365|    351|                    break;
  366|    351|                }
  367|  1.83k|            }
  368|    650|            out[4] = 0;
  369|    650|            return true;
  370|    483|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (370:9): [True: 483, False: 47.0k]
  ------------------
  371|  1.86k|            for (int i = 0; i < 12; i++) {
  ------------------
  |  Branch (371:29): [True: 1.81k, False: 51]
  ------------------
  372|  1.81k|                out[i] = asset->alpha_num12.asset_code[i];
  373|  1.81k|                if (out[i] == 0) {
  ------------------
  |  Branch (373:21): [True: 432, False: 1.38k]
  ------------------
  374|    432|                    break;
  375|    432|                }
  376|  1.81k|            }
  377|    483|            out[12] = 0;
  378|    483|            return true;
  379|      0|        default:
  ------------------
  |  Branch (379:9): [True: 0, False: 47.5k]
  ------------------
  380|      0|            return false;
  381|  47.5k|    }
  382|  47.5k|}
print_asset:
  384|  45.8k|bool print_asset(const asset_t *asset, uint8_t network_id, char *out, size_t out_len) {
  385|  45.8k|    char asset_code[12 + 1];
  386|  45.8k|    char asset_issuer[3 + 2 + 4 + 1];
  387|  45.8k|    print_asset_name(asset, network_id, asset_code, sizeof(asset_code));
  388|       |
  389|  45.8k|    switch (asset->type) {
  390|    630|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (390:9): [True: 630, False: 45.2k]
  ------------------
  391|    630|            print_account_id(asset->alpha_num4.issuer, asset_issuer, sizeof(asset_issuer), 3, 4);
  392|    630|            break;
  393|    442|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (393:9): [True: 442, False: 45.4k]
  ------------------
  394|    442|            print_account_id(asset->alpha_num12.issuer, asset_issuer, sizeof(asset_issuer), 3, 4);
  395|    442|            break;
  396|  44.8k|        default:
  ------------------
  |  Branch (396:9): [True: 44.8k, False: 1.07k]
  ------------------
  397|  44.8k|            break;
  398|  45.8k|    }
  399|  45.8k|    if (strlcpy(out, asset_code, out_len) >= out_len) {
  ------------------
  |  Branch (399:9): [True: 0, False: 45.8k]
  ------------------
  400|      0|        return false;
  401|      0|    }
  402|  45.8k|    if (asset->type != ASSET_TYPE_NATIVE) {
  ------------------
  |  Branch (402:9): [True: 1.07k, False: 44.8k]
  ------------------
  403|  1.07k|        if (strlcat(out, "@", out_len) >= out_len) {
  ------------------
  |  Branch (403:13): [True: 0, False: 1.07k]
  ------------------
  404|      0|            return false;
  405|      0|        }
  406|  1.07k|        if (strlcat(out, asset_issuer, out_len) >= out_len) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.07k]
  ------------------
  407|      0|            return false;
  408|      0|        }
  409|  1.07k|    }
  410|  45.8k|    return true;
  411|  45.8k|}
print_flag:
  413|  3.72k|bool print_flag(const char *flag, char *out, size_t out_len) {
  414|  3.72k|    if (out[0]) {
  ------------------
  |  Branch (414:9): [True: 1.94k, False: 1.78k]
  ------------------
  415|  1.94k|        if (strlcat(out, ", ", out_len) >= out_len) {
  ------------------
  |  Branch (415:13): [True: 0, False: 1.94k]
  ------------------
  416|      0|            return false;
  417|      0|        }
  418|  1.94k|    }
  419|  3.72k|    if (strlcat(out, flag, out_len) >= out_len) {
  ------------------
  |  Branch (419:9): [True: 0, False: 3.72k]
  ------------------
  420|      0|        return false;
  421|      0|    }
  422|  3.72k|    return true;
  423|  3.72k|}
print_account_flags:
  425|  1.08k|bool print_account_flags(uint32_t flags, char *out, size_t out_len) {
  426|  1.08k|    explicit_bzero(out, out_len);
  427|  1.08k|    if (flags & 0x01u) {
  ------------------
  |  Branch (427:9): [True: 409, False: 676]
  ------------------
  428|    409|        if (!print_flag("AUTH_REQUIRED", out, out_len)) {
  ------------------
  |  Branch (428:13): [True: 0, False: 409]
  ------------------
  429|      0|            return false;
  430|      0|        }
  431|    409|    }
  432|  1.08k|    if (flags & 0x02u) {
  ------------------
  |  Branch (432:9): [True: 687, False: 398]
  ------------------
  433|    687|        if (!print_flag("AUTH_REVOCABLE", out, out_len)) {
  ------------------
  |  Branch (433:13): [True: 0, False: 687]
  ------------------
  434|      0|            return false;
  435|      0|        }
  436|    687|    }
  437|  1.08k|    if (flags & 0x04u) {
  ------------------
  |  Branch (437:9): [True: 506, False: 579]
  ------------------
  438|    506|        if (!print_flag("AUTH_IMMUTABLE", out, out_len)) {
  ------------------
  |  Branch (438:13): [True: 0, False: 506]
  ------------------
  439|      0|            return false;
  440|      0|        }
  441|    506|    }
  442|  1.08k|    if (flags & 0x08u) {
  ------------------
  |  Branch (442:9): [True: 346, False: 739]
  ------------------
  443|    346|        if (!print_flag("AUTH_CLAWBACK_ENABLED", out, out_len)) {
  ------------------
  |  Branch (443:13): [True: 0, False: 346]
  ------------------
  444|      0|            return false;
  445|      0|        }
  446|    346|    }
  447|  1.08k|    return true;
  448|  1.08k|}
print_trust_line_flags:
  450|  1.60k|bool print_trust_line_flags(uint32_t flags, char *out, size_t out_len) {
  451|  1.60k|    explicit_bzero(out, out_len);
  452|  1.60k|    if (flags & AUTHORIZED_FLAG) {
  ------------------
  |  Branch (452:9): [True: 712, False: 889]
  ------------------
  453|    712|        if (!print_flag("AUTHORIZED", out, out_len)) {
  ------------------
  |  Branch (453:13): [True: 0, False: 712]
  ------------------
  454|      0|            return false;
  455|      0|        }
  456|    712|    }
  457|  1.60k|    if (flags & AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG) {
  ------------------
  |  Branch (457:9): [True: 621, False: 980]
  ------------------
  458|    621|        if (!print_flag("AUTHORIZED_TO_MAINTAIN_LIABILITIES", out, out_len)) {
  ------------------
  |  Branch (458:13): [True: 0, False: 621]
  ------------------
  459|      0|            return false;
  460|      0|        }
  461|    621|    }
  462|  1.60k|    if (flags & TRUSTLINE_CLAWBACK_ENABLED_FLAG) {
  ------------------
  |  Branch (462:9): [True: 442, False: 1.15k]
  ------------------
  463|    442|        if (!print_flag("TRUSTLINE_CLAWBACK_ENABLED", out, out_len)) {
  ------------------
  |  Branch (463:13): [True: 0, False: 442]
  ------------------
  464|      0|            return false;
  465|      0|        }
  466|    442|    }
  467|  1.60k|    return true;
  468|  1.60k|}
print_allow_trust_flags:
  470|    294|bool print_allow_trust_flags(uint32_t flag, char *out, size_t out_len) {
  471|    294|    explicit_bzero(out, out_len);
  472|    294|    if (flag & AUTHORIZED_FLAG) {
  ------------------
  |  Branch (472:9): [True: 100, False: 194]
  ------------------
  473|    100|        if (strlcpy(out, "AUTHORIZED", out_len) >= out_len) {
  ------------------
  |  Branch (473:13): [True: 0, False: 100]
  ------------------
  474|      0|            return false;
  475|      0|        }
  476|    194|    } else if (flag & AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG) {
  ------------------
  |  Branch (476:16): [True: 33, False: 161]
  ------------------
  477|     33|        if (strlcpy(out, "AUTHORIZED_TO_MAINTAIN_LIABILITIES", out_len) >= out_len) {
  ------------------
  |  Branch (477:13): [True: 0, False: 33]
  ------------------
  478|      0|            return false;
  479|      0|        }
  480|    161|    } else {
  481|    161|        if (strlcpy(out, "UNAUTHORIZED", out_len) >= out_len) {
  ------------------
  |  Branch (481:13): [True: 0, False: 161]
  ------------------
  482|      0|            return false;
  483|      0|        }
  484|    161|    }
  485|    294|    return true;
  486|    294|}
print_amount:
  492|  44.5k|                  size_t out_len) {
  493|  44.5k|    uint8_t data[8] = {0};
  494|   401k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (494:21): [True: 356k, False: 44.5k]
  ------------------
  495|   356k|        data[i] = amount >> (8 * (7 - i));
  496|   356k|    }
  497|       |
  498|  44.5k|    if (!print_uint64(data, 7, out, out_len, true)) {
  ------------------
  |  Branch (498:9): [True: 0, False: 44.5k]
  ------------------
  499|      0|        return false;
  500|      0|    }
  501|       |
  502|  44.5k|    if (asset) {
  ------------------
  |  Branch (502:9): [True: 42.0k, False: 2.56k]
  ------------------
  503|  42.0k|        if (strlcat(out, " ", out_len) >= out_len) {
  ------------------
  |  Branch (503:13): [True: 0, False: 42.0k]
  ------------------
  504|      0|            return false;
  505|      0|        }
  506|  42.0k|        size_t length = strlen(out);
  507|  42.0k|        if (!print_asset(asset, network_id, out + length, out_len - length)) {
  ------------------
  |  Branch (507:13): [True: 0, False: 42.0k]
  ------------------
  508|      0|            return false;
  509|  42.0k|        };
  510|  42.0k|    }
  511|  44.5k|    return true;
  512|  44.5k|}
is_printable_binary:
  514|  1.12k|bool is_printable_binary(const uint8_t *str, size_t str_len) {
  515|  7.09k|    for (size_t i = 0; i < str_len; i++) {
  ------------------
  |  Branch (515:24): [True: 6.40k, False: 690]
  ------------------
  516|  6.40k|        if (str[i] > 0x7e || str[i] < 0x20) {
  ------------------
  |  Branch (516:13): [True: 178, False: 6.22k]
  |  Branch (516:30): [True: 260, False: 5.96k]
  ------------------
  517|    438|            return false;
  518|    438|        }
  519|  6.40k|    }
  520|    690|    return true;
  521|  1.12k|}
add_decimal_point:
  661|   221k|bool add_decimal_point(char *out, size_t out_len, uint8_t decimals) {
  662|   221k|    if (out == NULL || out_len == 0) {
  ------------------
  |  Branch (662:9): [True: 0, False: 221k]
  |  Branch (662:24): [True: 0, False: 221k]
  ------------------
  663|      0|        return false;
  664|      0|    }
  665|   221k|    if (decimals == 0) {
  ------------------
  |  Branch (665:9): [True: 176k, False: 44.9k]
  ------------------
  666|   176k|        return true;
  667|   176k|    }
  668|       |
  669|  44.9k|    bool is_negative = out[0] == '-';
  670|  44.9k|    char *start = is_negative ? out + 1 : out;
  ------------------
  |  Branch (670:19): [True: 91, False: 44.8k]
  ------------------
  671|       |
  672|  44.9k|    size_t len = strlen(start);
  673|  44.9k|    if (len == 0) {
  ------------------
  |  Branch (673:9): [True: 0, False: 44.9k]
  ------------------
  674|      0|        return true;
  675|      0|    }
  676|       |
  677|  44.9k|    if (is_negative) {
  ------------------
  |  Branch (677:9): [True: 91, False: 44.8k]
  ------------------
  678|     91|        if (decimals >= out_len - 2) {
  ------------------
  |  Branch (678:13): [True: 0, False: 91]
  ------------------
  679|       |            // Not enough space to add decimal point and leading zero.
  680|      0|            return false;
  681|      0|        }
  682|  44.8k|    } else {
  683|  44.8k|        if (decimals >= out_len - 1) {
  ------------------
  |  Branch (683:13): [True: 0, False: 44.8k]
  ------------------
  684|       |            // Not enough space to add decimal point.
  685|      0|            return false;
  686|      0|        }
  687|  44.8k|    }
  688|       |
  689|  44.9k|    if (len <= decimals) {
  ------------------
  |  Branch (689:9): [True: 33.3k, False: 11.5k]
  ------------------
  690|       |        // Shift the number to the right and add leading zeros
  691|  33.3k|        memmove(start + decimals - len + 2, start, len + 1);
  692|  33.3k|        start[0] = '0';
  693|  33.3k|        start[1] = '.';
  694|  33.3k|        memset(start + 2, '0', decimals - len);
  695|  33.3k|    } else {
  696|       |        // Insert the decimal point at the appropriate position
  697|  11.5k|        memmove(start + len - decimals + 1, start + len - decimals, decimals + 1);
  698|  11.5k|        start[len - decimals] = '.';
  699|  11.5k|    }
  700|       |
  701|       |    // Remove trailing zeros after decimal point
  702|  44.9k|    char *p = start + strlen(start) - 1;
  703|   207k|    while (p > start && *p == '0') {
  ------------------
  |  Branch (703:12): [True: 207k, False: 0]
  |  Branch (703:25): [True: 162k, False: 44.9k]
  ------------------
  704|   162k|        *p-- = '\0';
  705|   162k|    }
  706|       |
  707|       |    // Remove decimal point if it's the last character
  708|  44.9k|    if (p > start && *p == '.') {
  ------------------
  |  Branch (708:9): [True: 44.9k, False: 0]
  |  Branch (708:22): [True: 22.5k, False: 22.3k]
  ------------------
  709|  22.5k|        *p = '\0';
  710|  22.5k|    }
  711|       |
  712|       |    // Add the negative sign back if necessary
  713|  44.9k|    if (is_negative && out[0] != '-') {
  ------------------
  |  Branch (713:9): [True: 91, False: 44.8k]
  |  Branch (713:24): [True: 0, False: 91]
  ------------------
  714|      0|        memmove(out + 1, out, strlen(out) + 1);
  715|      0|        out[0] = '-';
  716|      0|    }
  717|       |
  718|  44.9k|    return true;
  719|  44.9k|}
add_separator_to_number:
  721|  48.9k|bool add_separator_to_number(char *out, size_t out_len) {
  722|  48.9k|    if (out == NULL || out_len == 0) {
  ------------------
  |  Branch (722:9): [True: 0, False: 48.9k]
  |  Branch (722:24): [True: 0, False: 48.9k]
  ------------------
  723|      0|        return false;
  724|      0|    }
  725|       |
  726|  48.9k|    size_t length = strlen(out);
  727|  48.9k|    uint8_t negative = (out[0] == '-') ? 1 : 0;  // Check if the number is negative
  ------------------
  |  Branch (727:24): [True: 626, False: 48.2k]
  ------------------
  728|       |
  729|       |    // Find the position of the decimal point
  730|  48.9k|    char *decimal_point = strchr(out, '.');
  731|  48.9k|    size_t decimal_index = decimal_point ? decimal_point - out : length;
  ------------------
  |  Branch (731:28): [True: 22.1k, False: 26.7k]
  ------------------
  732|       |
  733|       |    // Calculate the new length of the string with the commas
  734|  48.9k|    size_t new_length = 0;
  735|  48.9k|    if (negative) {
  ------------------
  |  Branch (735:9): [True: 626, False: 48.2k]
  ------------------
  736|    626|        if (decimal_index < 2) {
  ------------------
  |  Branch (736:13): [True: 0, False: 626]
  ------------------
  737|       |            // The string is too short to have a negative number
  738|      0|            return false;
  739|      0|        }
  740|    626|        new_length = decimal_index + (decimal_index - 2) / 3;
  741|  48.2k|    } else {
  742|  48.2k|        if (decimal_index < 1) {
  ------------------
  |  Branch (742:13): [True: 0, False: 48.2k]
  ------------------
  743|       |            // The string is too short to have a positive number
  744|      0|            return false;
  745|      0|        }
  746|  48.2k|        new_length = decimal_index + (decimal_index - 1) / 3;
  747|  48.2k|    }
  748|       |
  749|       |    // If the new length is greater than the maximum length, return false
  750|  48.9k|    if (new_length >= out_len || new_length >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  48.9k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (750:9): [True: 0, False: 48.9k]
  |  Branch (750:34): [True: 0, False: 48.9k]
  ------------------
  751|      0|        return false;
  752|      0|    }
  753|       |
  754|  48.9k|    char temp[NUMBER_WITH_COMMAS_MAX_LENGTH];
  755|  48.9k|    if (strlcpy(temp, out, NUMBER_WITH_COMMAS_MAX_LENGTH) >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  48.9k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
                  if (strlcpy(temp, out, NUMBER_WITH_COMMAS_MAX_LENGTH) >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  48.9k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (755:9): [True: 0, False: 48.9k]
  ------------------
  756|      0|        return false;
  757|      0|    }
  758|       |
  759|  48.9k|    temp[new_length] = '\0';  // Set the end of the new string
  760|       |
  761|       |    // Start from the end of the string and move the digits to their new positions
  762|   261k|    for (int i = decimal_index - 1, j = new_length - 1; i >= 0; i--, j--) {
  ------------------
  |  Branch (762:57): [True: 212k, False: 48.9k]
  ------------------
  763|   212k|        temp[j] = out[i];
  764|       |
  765|       |        // If the current position is a multiple of 3 and it's not the first digit, add a comma
  766|   212k|        if ((decimal_index - i) % 3 == 0 && i != negative && j > 0) {
  ------------------
  |  Branch (766:13): [True: 55.1k, False: 157k]
  |  Branch (766:45): [True: 49.4k, False: 5.71k]
  |  Branch (766:62): [True: 49.0k, False: 385]
  ------------------
  767|  49.0k|            temp[--j] = ',';
  768|  49.0k|        }
  769|   212k|    }
  770|       |
  771|       |    // If there is a decimal point, append the part after the decimal point
  772|  48.9k|    if (decimal_point) {
  ------------------
  |  Branch (772:9): [True: 22.1k, False: 26.7k]
  ------------------
  773|  22.1k|        if (strlcpy(temp + new_length, decimal_point, NUMBER_WITH_COMMAS_MAX_LENGTH - new_length) >=
  ------------------
  |  |   13|  22.1k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (773:13): [True: 0, False: 22.1k]
  ------------------
  774|  22.1k|            NUMBER_WITH_COMMAS_MAX_LENGTH - new_length) {
  ------------------
  |  |   13|  22.1k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  775|      0|            return false;
  776|      0|        }
  777|  22.1k|    }
  778|       |
  779|  48.9k|    if (strlcpy(out, temp, out_len) >= out_len) {
  ------------------
  |  Branch (779:9): [True: 0, False: 48.9k]
  ------------------
  780|      0|        return false;
  781|      0|    }
  782|       |
  783|  48.9k|    return true;
  784|  48.9k|}
print_int32:
  790|    678|                 bool add_separator) {
  791|    678|    return int256_to_decimal(value, 4, out, out_len) && add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (791:12): [True: 678, False: 0]
  |  Branch (791:57): [True: 678, False: 0]
  ------------------
  792|    678|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (792:13): [True: 311, False: 367]
  |  Branch (792:31): [True: 367, False: 0]
  ------------------
  793|    678|}
print_uint32:
  799|    224|                  bool add_separator) {
  800|    224|    return uint256_to_decimal(value, 4, out, out_len) &&
  ------------------
  |  Branch (800:12): [True: 224, False: 0]
  ------------------
  801|    224|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (801:12): [True: 224, False: 0]
  ------------------
  802|    224|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (802:13): [True: 0, False: 224]
  |  Branch (802:31): [True: 224, False: 0]
  ------------------
  803|    224|}
print_int64:
  809|    850|                 bool add_separator) {
  810|    850|    return int256_to_decimal(value, 8, out, out_len) && add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (810:12): [True: 850, False: 0]
  |  Branch (810:57): [True: 850, False: 0]
  ------------------
  811|    850|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (811:13): [True: 282, False: 568]
  |  Branch (811:31): [True: 568, False: 0]
  ------------------
  812|    850|}
print_uint64:
  818|   216k|                  bool add_separator) {
  819|   216k|    return uint256_to_decimal(value, 8, out, out_len) &&
  ------------------
  |  Branch (819:12): [True: 216k, False: 0]
  ------------------
  820|   216k|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (820:12): [True: 216k, False: 0]
  ------------------
  821|   216k|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (821:13): [True: 171k, False: 44.7k]
  |  Branch (821:31): [True: 44.7k, False: 0]
  ------------------
  822|   216k|}
print_int128:
  828|  1.83k|                  bool add_separator) {
  829|  1.83k|    return int256_to_decimal(value, 16, out, out_len) &&
  ------------------
  |  Branch (829:12): [True: 1.83k, False: 0]
  ------------------
  830|  1.83k|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (830:12): [True: 1.83k, False: 0]
  ------------------
  831|  1.83k|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (831:13): [True: 0, False: 1.83k]
  |  Branch (831:31): [True: 1.83k, False: 0]
  ------------------
  832|  1.83k|}
print_uint128:
  838|    354|                   bool add_separator) {
  839|    354|    return uint256_to_decimal(value, 16, out, out_len) &&
  ------------------
  |  Branch (839:12): [True: 354, False: 0]
  ------------------
  840|    354|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (840:12): [True: 354, False: 0]
  ------------------
  841|    354|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (841:13): [True: 0, False: 354]
  |  Branch (841:31): [True: 354, False: 0]
  ------------------
  842|    354|}
print_int256:
  848|    473|                  bool add_separator) {
  849|    473|    return int256_to_decimal(value, 32, out, out_len) &&
  ------------------
  |  Branch (849:12): [True: 473, False: 0]
  ------------------
  850|    473|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (850:12): [True: 473, False: 0]
  ------------------
  851|    473|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (851:13): [True: 0, False: 473]
  |  Branch (851:31): [True: 473, False: 0]
  ------------------
  852|    473|}
print_uint256:
  858|    322|                   bool add_separator) {
  859|    322|    return uint256_to_decimal(value, 32, out, out_len) &&
  ------------------
  |  Branch (859:12): [True: 322, False: 0]
  ------------------
  860|    322|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (860:12): [True: 322, False: 0]
  ------------------
  861|    322|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (861:13): [True: 0, False: 322]
  |  Branch (861:31): [True: 322, False: 0]
  ------------------
  862|    322|}
print_scv_symbol:
  864|    397|bool print_scv_symbol(const scv_symbol_t *scv_symbol, char *out, size_t out_len) {
  865|    397|    if (scv_symbol == NULL || out == NULL) {
  ------------------
  |  Branch (865:9): [True: 0, False: 397]
  |  Branch (865:31): [True: 0, False: 397]
  ------------------
  866|      0|        return false;
  867|      0|    }
  868|    397|    if (scv_symbol->size > SCV_SYMBOL_MAX_SIZE || scv_symbol->size > out_len - 1) {
  ------------------
  |  |   55|    794|#define SCV_SYMBOL_MAX_SIZE     32
  ------------------
  |  Branch (868:9): [True: 0, False: 397]
  |  Branch (868:51): [True: 0, False: 397]
  ------------------
  869|      0|        return false;
  870|      0|    }
  871|    397|    if (scv_symbol->size == 0) {
  ------------------
  |  Branch (871:9): [True: 149, False: 248]
  ------------------
  872|       |        // print empty symbol
  873|    149|        if (strlcpy(out, "[empty symbol]", out_len) >= out_len) {
  ------------------
  |  Branch (873:13): [True: 0, False: 149]
  ------------------
  874|      0|            return false;
  875|      0|        }
  876|    149|        return true;
  877|    149|    }
  878|    248|    if (!is_printable_binary(scv_symbol->symbol, scv_symbol->size)) {
  ------------------
  |  Branch (878:9): [True: 9, False: 239]
  ------------------
  879|      9|        return false;
  880|      9|    }
  881|    239|    if (!print_string(out, out_len, scv_symbol->symbol, scv_symbol->size)) {
  ------------------
  |  Branch (881:9): [True: 0, False: 239]
  ------------------
  882|      0|        return false;
  883|      0|    }
  884|    239|    return true;
  885|    239|}
print_scv_string:
  887|    787|bool print_scv_string(const scv_string_t *scv_string, char *out, size_t out_len) {
  888|    787|    if (scv_string == NULL || out == NULL) {
  ------------------
  |  Branch (888:9): [True: 0, False: 787]
  |  Branch (888:31): [True: 0, False: 787]
  ------------------
  889|      0|        return false;
  890|      0|    }
  891|       |
  892|    787|    if (scv_string->size == 0) {
  ------------------
  |  Branch (892:9): [True: 474, False: 313]
  ------------------
  893|       |        // print empty symbol
  894|    474|        if (strlcpy(out, "[empty string]", out_len) >= out_len) {
  ------------------
  |  Branch (894:13): [True: 0, False: 474]
  ------------------
  895|      0|            return false;
  896|      0|        }
  897|    474|        return true;
  898|    474|    }
  899|       |
  900|       |    // if the string is not printable, print [unprintable string]
  901|    313|    if (!is_printable_binary(scv_string->string, scv_string->size)) {
  ------------------
  |  Branch (901:9): [True: 269, False: 44]
  ------------------
  902|    269|        if (strlcpy(out, "[unprintable string]", out_len) >= out_len) {
  ------------------
  |  Branch (902:13): [True: 0, False: 269]
  ------------------
  903|      0|            return false;
  904|      0|        }
  905|    269|        return true;
  906|    269|    }
  907|       |
  908|     44|    size_t copy_len = scv_string->size;
  909|       |
  910|       |    // If the output buffer is large enough to hold the entire scv_string, copy it directly and
  911|       |    // append a null terminator.
  912|     44|    if (out_len > copy_len) {
  ------------------
  |  Branch (912:9): [True: 44, False: 0]
  ------------------
  913|     44|        memcpy(out, scv_string->string, copy_len);
  914|     44|        out[copy_len] = '\0';  // Ensure the string is null-terminated.
  915|     44|    } else {
  916|      0|        if (out_len < 3) {
  ------------------
  |  Branch (916:13): [True: 0, False: 0]
  ------------------
  917|      0|            return false;
  918|      0|        }
  919|       |        // Calculate the lengths of the beginning and end parts that can be displayed.
  920|      0|        size_t dots_len = 2;                 // The length of two dots.
  921|      0|        size_t available_len = out_len - 1;  // Subtract 1 to reserve space for the null terminator.
  922|      0|        size_t start_copy_len = available_len / 2;
  923|      0|        size_t end_copy_len = available_len - start_copy_len - dots_len;
  924|       |
  925|       |        // Copy the beginning part of the string.
  926|      0|        memcpy(out, scv_string->string, start_copy_len);
  927|      0|        out[start_copy_len] = '.';
  928|      0|        out[start_copy_len + 1] = '.';
  929|       |
  930|       |        // Copy the end part of the string if there is space for it after the dots.
  931|      0|        if (end_copy_len > 0) {
  ------------------
  |  Branch (931:13): [True: 0, False: 0]
  ------------------
  932|      0|            memcpy(out + start_copy_len + dots_len,
  933|      0|                   scv_string->string + copy_len - end_copy_len,
  934|      0|                   end_copy_len);
  935|      0|        }
  936|       |
  937|       |        // Ensure the output string is null-terminated by placing a null character at the end of the
  938|       |        // buffer.
  939|      0|        out[out_len - 1] = '\0';
  940|      0|    }
  941|       |
  942|     44|    return true;
  943|     44|}
print_string:
  945|  15.0k|bool print_string(char *out, size_t out_len, const uint8_t *src, size_t src_size) {
  946|  15.0k|    if (out == NULL || src == NULL || out_len == 0) {
  ------------------
  |  Branch (946:9): [True: 0, False: 15.0k]
  |  Branch (946:24): [True: 0, False: 15.0k]
  |  Branch (946:39): [True: 0, False: 15.0k]
  ------------------
  947|      0|        return false;
  948|      0|    }
  949|  15.0k|    if (src_size + 1 > out_len) {
  ------------------
  |  Branch (949:9): [True: 0, False: 15.0k]
  ------------------
  950|      0|        return false;
  951|      0|    }
  952|  15.0k|    memcpy(out, src, src_size);
  953|  15.0k|    out[src_size] = '\0';
  954|  15.0k|    return true;
  955|  15.0k|}
print_price:
  962|    953|                 size_t out_len) {
  963|    953|    uint64_t scaled_price = ((uint64_t) price->n * 10000000) / price->d;
  964|    953|    if (!print_amount(scaled_price, NULL, network_id, out, out_len)) {
  ------------------
  |  Branch (964:9): [True: 0, False: 953]
  ------------------
  965|      0|        return false;
  966|      0|    }
  967|       |
  968|    953|    if (asset_a != NULL && asset_b != NULL) {
  ------------------
  |  Branch (968:9): [True: 803, False: 150]
  |  Branch (968:28): [True: 803, False: 0]
  ------------------
  969|    803|        char tmp_asset_code[ASSET_CODE_MAX_LENGTH] = {0};
  970|    803|        if (strlcat(out, " ", out_len) >= out_len ||
  ------------------
  |  Branch (970:13): [True: 0, False: 803]
  ------------------
  971|    803|            !print_asset_name(asset_a, network_id, tmp_asset_code, sizeof(tmp_asset_code)) ||
  ------------------
  |  Branch (971:13): [True: 0, False: 803]
  ------------------
  972|    803|            strlcat(out, tmp_asset_code, out_len) >= out_len ||
  ------------------
  |  Branch (972:13): [True: 0, False: 803]
  ------------------
  973|    803|            strlcat(out, "/", out_len) >= out_len ||
  ------------------
  |  Branch (973:13): [True: 0, False: 803]
  ------------------
  974|    803|            !print_asset_name(asset_b, network_id, tmp_asset_code, sizeof(tmp_asset_code)) ||
  ------------------
  |  Branch (974:13): [True: 0, False: 803]
  ------------------
  975|    803|            strlcat(out, tmp_asset_code, out_len) >= out_len) {
  ------------------
  |  Branch (975:13): [True: 0, False: 803]
  ------------------
  976|      0|            return false;
  977|      0|        }
  978|    803|    }
  979|    953|    return true;
  980|    953|}
printer.c:print_summary:
  138|  2.92k|                          uint8_t num_chars_r) {
  139|  2.92k|    uint8_t result_len = num_chars_l + num_chars_r + 2;
  140|  2.92k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (140:9): [True: 0, False: 2.92k]
  ------------------
  141|      0|        return false;
  142|      0|    }
  143|  2.92k|    uint16_t in_len = strlen(in);
  144|  2.92k|    if (in_len > result_len) {
  ------------------
  |  Branch (144:9): [True: 2.92k, False: 0]
  ------------------
  145|  2.92k|        memcpy(out, in, num_chars_l);
  146|  2.92k|        out[num_chars_l] = '.';
  147|  2.92k|        out[num_chars_l + 1] = '.';
  148|  2.92k|        memcpy(out + num_chars_l + 2, in + in_len - num_chars_r, num_chars_r);
  149|  2.92k|        out[result_len] = '\0';
  150|  2.92k|    } else {
  151|      0|        memcpy(out, in, in_len);
  152|      0|        out[in_len] = '\0';
  153|      0|    }
  154|  2.92k|    return true;
  155|  2.92k|}
printer.c:int256_to_decimal:
  595|  3.84k|static bool int256_to_decimal(const uint8_t *value, size_t value_len, char *out, size_t out_len) {
  596|  3.84k|    if (value_len > INT256_LENGTH) {
  ------------------
  |  |    9|  3.84k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (596:9): [True: 0, False: 3.84k]
  ------------------
  597|       |        // Value length is bigger than INT256_LENGTH
  598|      0|        return false;
  599|      0|    }
  600|       |
  601|  3.84k|    bool is_negative = (value[0] & 0x80) != 0;
  602|  3.84k|    uint8_t n[INT256_LENGTH] = {0};
  603|       |
  604|  3.84k|    if (is_negative) {
  ------------------
  |  Branch (604:9): [True: 717, False: 3.12k]
  ------------------
  605|       |        // Compute the absolute value using two's complement
  606|    717|        bool carry = true;
  607|  16.3k|        for (size_t i = value_len; i-- > 0;) {
  ------------------
  |  Branch (607:36): [True: 15.5k, False: 717]
  ------------------
  608|  15.5k|            n[INT256_LENGTH - value_len + i] = ~value[i] + carry;
  ------------------
  |  |    9|  15.5k|#define INT256_LENGTH                     32
  ------------------
  609|  15.5k|            carry = carry && (value[i] == 0);
  ------------------
  |  Branch (609:21): [True: 8.61k, False: 6.98k]
  |  Branch (609:30): [True: 7.89k, False: 717]
  ------------------
  610|  15.5k|        }
  611|  3.12k|    } else {
  612|  3.12k|        memcpy(n + INT256_LENGTH - value_len, value, value_len);
  ------------------
  |  |    9|  3.12k|#define INT256_LENGTH                     32
  ------------------
  613|  3.12k|    }
  614|       |
  615|  3.84k|    char *p = out + out_len;
  616|  3.84k|    size_t result_len = 0;
  617|       |
  618|  71.7k|    do {
  619|  71.7k|        if (p == out) {
  ------------------
  |  Branch (619:13): [True: 0, False: 71.7k]
  ------------------
  620|       |            // Not enough space in the output buffer
  621|      0|            return false;
  622|      0|        }
  623|       |
  624|  71.7k|        uint32_t remainder = 0;
  625|  2.36M|        for (size_t i = 0; i < INT256_LENGTH; ++i) {
  ------------------
  |  |    9|  2.36M|#define INT256_LENGTH                     32
  ------------------
  |  Branch (625:28): [True: 2.29M, False: 71.7k]
  ------------------
  626|  2.29M|            uint32_t temp = (remainder << 8) | n[i];
  627|  2.29M|            n[i] = temp / 10;
  628|  2.29M|            remainder = temp % 10;
  629|  2.29M|        }
  630|       |
  631|  71.7k|        *--p = '0' + remainder;
  632|  71.7k|        result_len++;
  633|  71.7k|    } while (!allzeroes(n, INT256_LENGTH));
  ------------------
  |  |    9|  71.7k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (633:14): [True: 67.9k, False: 3.84k]
  ------------------
  634|       |
  635|  3.84k|    if (is_negative) {
  ------------------
  |  Branch (635:9): [True: 717, False: 3.12k]
  ------------------
  636|    717|        if (p == out) {
  ------------------
  |  Branch (636:13): [True: 0, False: 717]
  ------------------
  637|       |            // Not enough space in the output buffer
  638|      0|            return false;
  639|      0|        }
  640|    717|        *--p = '-';
  641|    717|        result_len++;
  642|    717|    }
  643|       |
  644|  3.84k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (644:9): [True: 0, False: 3.84k]
  ------------------
  645|       |        // Not enough space to hold the result and \0.
  646|      0|        return false;
  647|      0|    }
  648|       |
  649|  3.84k|    memmove(out, p, result_len);
  650|  3.84k|    out[result_len] = '\0';
  651|       |
  652|       |    // Clear the rest of the 'out' array
  653|       |    // Generally speaking, this is unnecessary,
  654|       |    // but handler_get_app_configuration requires that it must be followed by `\0`.
  655|  3.84k|    if (result_len + 1 < out_len) {
  ------------------
  |  Branch (655:9): [True: 3.84k, False: 0]
  ------------------
  656|  3.84k|        memset(out + result_len + 1, 0, out_len - result_len - 1);
  657|  3.84k|    }
  658|  3.84k|    return true;
  659|  3.84k|}
printer.c:allzeroes:
  523|  1.08M|static int allzeroes(const void *buf, size_t n) {
  524|  1.08M|    uint8_t *p = (uint8_t *) buf;
  525|  32.5M|    for (size_t i = 0; i < n; ++i) {
  ------------------
  |  Branch (525:24): [True: 32.3M, False: 221k]
  ------------------
  526|  32.3M|        if (p[i]) {
  ------------------
  |  Branch (526:13): [True: 862k, False: 31.4M]
  ------------------
  527|   862k|            return 0;
  528|   862k|        }
  529|  32.3M|    }
  530|   221k|    return 1;
  531|  1.08M|}
printer.c:uint256_to_decimal:
  533|   217k|static bool uint256_to_decimal(const uint8_t *value, size_t value_len, char *out, size_t out_len) {
  534|   217k|    if (value_len > INT256_LENGTH) {
  ------------------
  |  |    9|   217k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (534:9): [True: 0, False: 217k]
  ------------------
  535|      0|        return false;
  536|      0|    }
  537|       |
  538|   217k|    uint16_t n[16] = {0};
  539|       |    // Copy and right-align the number
  540|   217k|    memcpy((uint8_t *) n + INT256_LENGTH - value_len, value, value_len);
  ------------------
  |  |    9|   217k|#define INT256_LENGTH                     32
  ------------------
  541|       |
  542|       |    // Special case when value is 0
  543|   217k|    if (allzeroes(n, sizeof(n))) {
  ------------------
  |  Branch (543:9): [True: 27.6k, False: 189k]
  ------------------
  544|  27.6k|        if (out_len < 2) {
  ------------------
  |  Branch (544:13): [True: 0, False: 27.6k]
  ------------------
  545|       |            // Not enough space to hold "0" and \0.
  546|      0|            return false;
  547|      0|        }
  548|  27.6k|        out[0] = '0';
  549|  27.6k|        out[1] = '\0';
  550|  27.6k|        return true;
  551|  27.6k|    }
  552|       |
  553|       |    // Swap the byte order of each uint16_t element in the array
  554|  3.22M|    for (int i = 0; i < 16; i++) {
  ------------------
  |  Branch (554:21): [True: 3.03M, False: 189k]
  ------------------
  555|  3.03M|        n[i] = __builtin_bswap16(n[i]);
  556|  3.03M|    }
  557|       |
  558|   189k|    size_t result_len = 0;
  559|   189k|    int pos = out_len;
  560|       |
  561|   794k|    while (!allzeroes(n, sizeof(n))) {
  ------------------
  |  Branch (561:12): [True: 605k, False: 189k]
  ------------------
  562|   605k|        if (pos == 0) {
  ------------------
  |  Branch (562:13): [True: 0, False: 605k]
  ------------------
  563|      0|            return false;
  564|      0|        }
  565|   605k|        pos--;
  566|   605k|        result_len++;
  567|       |
  568|   605k|        uint32_t carry = 0;
  569|  10.2M|        for (int i = 0; i < 16; i++) {
  ------------------
  |  Branch (569:25): [True: 9.68M, False: 605k]
  ------------------
  570|  9.68M|            uint32_t digit = ((carry << 16) | n[i]);
  571|  9.68M|            n[i] = digit / 10;
  572|  9.68M|            carry = digit % 10;
  573|  9.68M|        }
  574|   605k|        out[pos] = '0' + carry;
  575|   605k|    }
  576|       |
  577|   189k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (577:9): [True: 0, False: 189k]
  ------------------
  578|       |        // Not enough space to hold the result and \0.
  579|      0|        return false;
  580|      0|    }
  581|       |
  582|       |    // Move the result to the beginning of the output buffer
  583|   189k|    memmove(out, out + pos, result_len);
  584|   189k|    out[result_len] = '\0';
  585|       |
  586|       |    // Clear the rest of the 'out' array
  587|       |    // Generally speaking, this is unnecessary,
  588|       |    // but handler_get_app_configuration requires that it must be followed by `\0`.
  589|   189k|    if (result_len + 1 < out_len) {
  ------------------
  |  Branch (589:9): [True: 189k, False: 0]
  ------------------
  590|   189k|        memset(out + result_len + 1, 0, out_len - result_len - 1);
  591|   189k|    }
  592|   189k|    return true;
  593|   189k|}

