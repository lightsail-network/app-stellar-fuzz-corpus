buffer_can_read:
   28|  28.2M|{
   29|  28.2M|    return buffer->size - buffer->offset >= n;
   30|  28.2M|}
buffer_seek_cur:
   44|  35.0M|{
   45|  35.0M|    if (buffer->offset + offset < buffer->offset ||  // overflow
  ------------------
  |  Branch (45:9): [True: 0, False: 35.0M]
  ------------------
   46|  35.0M|        buffer->offset + offset > buffer->size) {    // exceed buffer size
  ------------------
  |  Branch (46:9): [True: 3.03k, False: 35.0M]
  ------------------
   47|  3.03k|        return false;
   48|  3.03k|    }
   49|       |
   50|  35.0M|    buffer->offset += offset;
   51|       |
   52|  35.0M|    return true;
   53|  35.0M|}
buffer_read_u32:
   97|  27.6M|{
   98|  27.6M|    if (!buffer_can_read(buffer, 4)) {
  ------------------
  |  Branch (98:9): [True: 1.79M, False: 25.8M]
  ------------------
   99|  1.79M|        *value = 0;
  100|       |
  101|  1.79M|        return false;
  102|  1.79M|    }
  103|       |
  104|  25.8M|    *value = ((endianness == BE) ? read_u32_be(buffer->ptr, buffer->offset)
  ------------------
  |  Branch (104:15): [True: 25.8M, False: 0]
  ------------------
  105|  25.8M|                                 : read_u32_le(buffer->ptr, buffer->offset));
  106|       |
  107|  25.8M|    buffer_seek_cur(buffer, 4);
  108|       |
  109|  25.8M|    return true;
  110|  27.6M|}
buffer_read_u64:
  113|  24.7k|{
  114|  24.7k|    if (!buffer_can_read(buffer, 8)) {
  ------------------
  |  Branch (114:9): [True: 29, False: 24.7k]
  ------------------
  115|     29|        *value = 0;
  116|       |
  117|     29|        return false;
  118|     29|    }
  119|       |
  120|  24.7k|    *value = ((endianness == BE) ? read_u64_be(buffer->ptr, buffer->offset)
  ------------------
  |  Branch (120:15): [True: 24.7k, False: 0]
  ------------------
  121|  24.7k|                                 : read_u64_le(buffer->ptr, buffer->offset));
  122|       |
  123|  24.7k|    buffer_seek_cur(buffer, 8);
  124|       |
  125|  24.7k|    return true;
  126|  24.7k|}

format_hex:
  157|  1.03k|{
  158|  1.03k|    if (out_len < 2 * in_len + 1) {
  ------------------
  |  Branch (158:9): [True: 0, False: 1.03k]
  ------------------
  159|      0|        return -1;
  160|      0|    }
  161|       |
  162|  1.03k|    const char hex[]   = "0123456789ABCDEF";
  163|  1.03k|    size_t     i       = 0;
  164|  1.03k|    int        written = 0;
  165|       |
  166|  35.7k|    while (i < in_len && (i * 2 + (2 + 1)) <= out_len) {
  ------------------
  |  Branch (166:12): [True: 34.6k, False: 1.03k]
  |  Branch (166:26): [True: 34.6k, False: 0]
  ------------------
  167|  34.6k|        uint8_t high_nibble = (in[i] & 0xF0) >> 4;
  168|  34.6k|        *out                = hex[high_nibble];
  169|  34.6k|        out++;
  170|       |
  171|  34.6k|        uint8_t low_nibble = in[i] & 0x0F;
  172|  34.6k|        *out               = hex[low_nibble];
  173|  34.6k|        out++;
  174|       |
  175|  34.6k|        i++;
  176|  34.6k|        written += 2;
  177|  34.6k|    }
  178|       |
  179|  1.03k|    *out = '\0';
  180|       |
  181|  1.03k|    return written + 1;
  182|  1.03k|}

read_u32_be:
   27|  25.8M|{
   28|  25.8M|    return (uint32_t) ptr[offset + 0] << 24 |  //
   29|  25.8M|           (uint32_t) ptr[offset + 1] << 16 |  //
   30|  25.8M|           (uint32_t) ptr[offset + 2] << 8 |   //
   31|  25.8M|           (uint32_t) ptr[offset + 3] << 0;
   32|  25.8M|}
read_u64_be:
   35|  24.7k|{
   36|  24.7k|    return (uint64_t) ptr[offset + 0] << 56 |  //
   37|  24.7k|           (uint64_t) ptr[offset + 1] << 48 |  //
   38|  24.7k|           (uint64_t) ptr[offset + 2] << 40 |  //
   39|  24.7k|           (uint64_t) ptr[offset + 3] << 32 |  //
   40|  24.7k|           (uint64_t) ptr[offset + 4] << 24 |  //
   41|  24.7k|           (uint64_t) ptr[offset + 5] << 16 |  //
   42|  24.7k|           (uint64_t) ptr[offset + 6] << 8 |   //
   43|  24.7k|           (uint64_t) ptr[offset + 7] << 0;
   44|  24.7k|}

LLVMFuzzerTestOneInput:
   23|  16.4k|int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   24|  16.4k|    envelope_t envelope;
   25|  16.4k|    bool data_exists = true;
   26|  16.4k|    bool is_op_header = false;
   27|  16.4k|    char detail_caption[DETAIL_CAPTION_MAX_LENGTH];
   28|  16.4k|    char detail_value[DETAIL_VALUE_MAX_LENGTH];
   29|  16.4k|    uint8_t signing_key[] = {0xe9, 0x33, 0x88, 0xbb, 0xfd, 0x2f, 0xbd, 0x11, 0x80, 0x6d, 0xd0,
   30|  16.4k|                             0xbd, 0x59, 0xce, 0xa9, 0x7,  0x9e, 0x7c, 0xc7, 0xc,  0xe7, 0xb1,
   31|  16.4k|                             0xe1, 0x54, 0xf1, 0x14, 0xcd, 0xfe, 0x4e, 0x46, 0x6e, 0xcd};
   32|       |
   33|  16.4k|    memset(&envelope, 0, sizeof(envelope_t));
   34|  16.4k|    if (parse_transaction_envelope(data, size, &envelope)) {
  ------------------
  |  Branch (34:9): [True: 5.21k, False: 11.2k]
  ------------------
   35|  5.21k|        formatter_data_t tx_fdata = {
   36|  5.21k|            .raw_data = data,
   37|  5.21k|            .raw_data_len = size,
   38|  5.21k|            .envelope = &envelope,
   39|  5.21k|            .caption = detail_caption,
   40|  5.21k|            .value = detail_value,
   41|  5.21k|            .signing_key = signing_key,
   42|  5.21k|            .caption_len = DETAIL_CAPTION_MAX_LENGTH,
  ------------------
  |  |    9|  5.21k|#define DETAIL_CAPTION_MAX_LENGTH 21
  ------------------
   43|  5.21k|            .value_len = DETAIL_VALUE_MAX_LENGTH,
  ------------------
  |  |   10|  5.21k|#define DETAIL_VALUE_MAX_LENGTH   105
  ------------------
   44|  5.21k|            .display_sequence = true,
   45|  5.21k|        };
   46|  5.21k|        reset_formatter();
   47|       |
   48|   156k|        while (true) {
   49|   156k|            if (!get_next_data(&tx_fdata, true, &data_exists, &is_op_header)) {
  ------------------
  |  Branch (49:17): [True: 197, False: 156k]
  ------------------
   50|    197|                break;
   51|    197|            }
   52|       |
   53|   156k|            if (!data_exists) {
  ------------------
  |  Branch (53:17): [True: 5.01k, False: 151k]
  ------------------
   54|  5.01k|                break;
   55|  5.01k|            }
   56|   156k|        }
   57|  5.21k|    }
   58|       |
   59|  16.4k|    memset(&envelope, 0, sizeof(envelope_t));
   60|  16.4k|    if (parse_soroban_authorization_envelope(data, size, &envelope)) {
  ------------------
  |  Branch (60:9): [True: 6.75k, False: 9.67k]
  ------------------
   61|  6.75k|        formatter_data_t auth_fdata = {
   62|  6.75k|            .raw_data = data,
   63|  6.75k|            .raw_data_len = size,
   64|  6.75k|            .envelope = &envelope,
   65|  6.75k|            .caption = detail_caption,
   66|  6.75k|            .value = detail_value,
   67|  6.75k|            .signing_key = signing_key,
   68|  6.75k|            .caption_len = DETAIL_CAPTION_MAX_LENGTH,
  ------------------
  |  |    9|  6.75k|#define DETAIL_CAPTION_MAX_LENGTH 21
  ------------------
   69|  6.75k|            .value_len = DETAIL_VALUE_MAX_LENGTH,
  ------------------
  |  |   10|  6.75k|#define DETAIL_VALUE_MAX_LENGTH   105
  ------------------
   70|  6.75k|            .display_sequence = true,
   71|  6.75k|            .plugin_check_presence = &plugin_check_presence,
   72|  6.75k|            .plugin_init_contract = &plugin_init_contract,
   73|  6.75k|            .plugin_query_data_pair_count = &plugin_query_data_pair_count,
   74|  6.75k|            .plugin_query_data_pair = &plugin_query_data_pair,
   75|  6.75k|        };
   76|       |
   77|  6.75k|        reset_formatter();
   78|       |
   79|   101k|        while (true) {
   80|   101k|            if (!get_next_data(&auth_fdata, true, &data_exists, &is_op_header)) {
  ------------------
  |  Branch (80:17): [True: 2.53k, False: 98.9k]
  ------------------
   81|  2.53k|                break;
   82|  2.53k|            }
   83|       |
   84|  98.9k|            if (!data_exists) {
  ------------------
  |  Branch (84:17): [True: 4.22k, False: 94.7k]
  ------------------
   85|  4.22k|                break;
   86|  4.22k|            }
   87|  98.9k|        }
   88|  6.75k|    }
   89|       |
   90|  16.4k|    return 0;
   91|  16.4k|}
fuzz_tx.c:plugin_check_presence:
   93|  30.0k|static bool plugin_check_presence(const uint8_t *contract_address) {
   94|  30.0k|    uint8_t expected[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   95|  30.0k|                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   96|  30.0k|                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
   97|  30.0k|    return memcmp(contract_address, expected, 32) == 0;
   98|  30.0k|}
fuzz_tx.c:plugin_init_contract:
  100|  3.59k|stellar_plugin_result_t plugin_init_contract(const uint8_t *contract_address) {
  101|       |    // Build-in token plugin
  102|  3.59k|    if (plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (102:9): [True: 3.59k, False: 0]
  ------------------
  103|  3.59k|        return STELLAR_PLUGIN_RESULT_OK;
  104|  3.59k|    }
  105|      0|    return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  106|  3.59k|}
fuzz_tx.c:plugin_query_data_pair_count:
  109|  3.59k|                                                     uint8_t *data_pair_count) {
  110|       |    // Build-in token plugin
  111|  3.59k|    if (plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (111:9): [True: 3.59k, False: 0]
  ------------------
  112|  3.59k|        *data_pair_count = 3;
  113|  3.59k|        return STELLAR_PLUGIN_RESULT_OK;
  114|  3.59k|    }
  115|      0|    return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  116|  3.59k|}
fuzz_tx.c:plugin_query_data_pair:
  123|  10.7k|                                               uint8_t value_len) {
  124|  10.7k|    if (!plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (124:9): [True: 0, False: 10.7k]
  ------------------
  125|      0|        return STELLAR_PLUGIN_RESULT_UNAVAILABLE;
  126|      0|    }
  127|  10.7k|    switch (data_pair_index) {
  128|  3.59k|        case 0:
  ------------------
  |  Branch (128:9): [True: 3.59k, False: 7.18k]
  ------------------
  129|  3.59k|            strncpy(caption, "caption 0", caption_len);
  130|  3.59k|            strncpy(value, "value 0", value_len);
  131|  3.59k|            break;
  132|  3.59k|        case 1:
  ------------------
  |  Branch (132:9): [True: 3.59k, False: 7.18k]
  ------------------
  133|  3.59k|            strncpy(caption, "caption 1", caption_len);
  134|  3.59k|            strncpy(value, "value 1", value_len);
  135|  3.59k|            break;
  136|  3.59k|        case 2:
  ------------------
  |  Branch (136:9): [True: 3.59k, False: 7.18k]
  ------------------
  137|  3.59k|            strncpy(caption, "caption 2", caption_len);
  138|  3.59k|            strncpy(value, "value 2", value_len);
  139|  3.59k|            break;
  140|      0|        default:
  ------------------
  |  Branch (140:9): [True: 0, False: 10.7k]
  ------------------
  141|      0|            return STELLAR_PLUGIN_RESULT_ERROR;
  142|  10.7k|    }
  143|  10.7k|    return STELLAR_PLUGIN_RESULT_OK;
  144|  10.7k|}

base32_encode:
   64|  47.4k|int base32_encode(const uint8_t *data, int length, uint8_t *result, int buf_size) {
   65|  47.4k|    if (length < 0 || length > (1 << 28)) {
  ------------------
  |  Branch (65:9): [True: 0, False: 47.4k]
  |  Branch (65:23): [True: 0, False: 47.4k]
  ------------------
   66|      0|        return -1;
   67|      0|    }
   68|  47.4k|    int count = 0;
   69|  47.4k|    if (length > 0) {
  ------------------
  |  Branch (69:9): [True: 47.4k, False: 0]
  ------------------
   70|  47.4k|        uint32_t buffer = data[0];
   71|  47.4k|        int next = 1;
   72|  47.4k|        int bits_left = 8;
   73|  2.71M|        while (count < buf_size && (bits_left > 0 || next < length)) {
  ------------------
  |  Branch (73:16): [True: 2.67M, False: 46.9k]
  |  Branch (73:37): [True: 2.38M, False: 287k]
  |  Branch (73:54): [True: 286k, False: 544]
  ------------------
   74|  2.67M|            if (bits_left < 5) {
  ------------------
  |  Branch (74:17): [True: 1.62M, False: 1.04M]
  ------------------
   75|  1.62M|                if (next < length) {
  ------------------
  |  Branch (75:21): [True: 1.62M, False: 535]
  ------------------
   76|  1.62M|                    buffer <<= 8;
   77|  1.62M|                    buffer |= data[next++] & 0xFF;
   78|  1.62M|                    bits_left += 8;
   79|  1.62M|                } else {
   80|    535|                    int pad = 5 - bits_left;
   81|    535|                    buffer <<= pad;
   82|    535|                    bits_left += pad;
   83|    535|                }
   84|  1.62M|            }
   85|  2.67M|            int index = 0x1F & (buffer >> (bits_left - 5));
   86|  2.67M|            bits_left -= 5;
   87|  2.67M|            result[count++] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"[index];
   88|  2.67M|        }
   89|  47.4k|    }
   90|  47.4k|    if (count < buf_size) {
  ------------------
  |  Branch (90:9): [True: 544, False: 46.9k]
  ------------------
   91|    544|        result[count] = '\000';
   92|    544|    }
   93|  47.4k|    return count;
   94|  47.4k|}

base64_encode:
   11|    106|bool base64_encode(const uint8_t *data, size_t in_len, char *out, size_t out_len) {
   12|    106|    size_t encoded_len = 4 * ((in_len + 2) / 3);
   13|    106|    if (encoded_len > out_len) {
  ------------------
  |  Branch (13:9): [True: 0, False: 106]
  ------------------
   14|      0|        return false;
   15|      0|    }
   16|       |
   17|    607|    for (unsigned int i = 0, j = 0; i < in_len;) {
  ------------------
  |  Branch (17:37): [True: 501, False: 106]
  ------------------
   18|    501|        uint32_t octet_a = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (18:28): [True: 501, False: 0]
  ------------------
   19|    501|        uint32_t octet_b = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (19:28): [True: 454, False: 47]
  ------------------
   20|    501|        uint32_t octet_c = i < in_len ? data[i++] : 0;
  ------------------
  |  Branch (20:28): [True: 431, False: 70]
  ------------------
   21|       |
   22|    501|        uint32_t triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;
   23|       |
   24|    501|        out[j++] = BASE64_ALPHABET[(triple >> 3 * 6) & 0x3F];
   25|    501|        out[j++] = BASE64_ALPHABET[(triple >> 2 * 6) & 0x3F];
   26|    501|        out[j++] = BASE64_ALPHABET[(triple >> 1 * 6) & 0x3F];
   27|    501|        out[j++] = BASE64_ALPHABET[(triple >> 0 * 6) & 0x3F];
   28|    501|    }
   29|       |
   30|    223|    for (int i = 0; i < BASE64_MOD_TABLE[in_len % 3]; i++) {
  ------------------
  |  Branch (30:21): [True: 117, False: 106]
  ------------------
   31|    117|        out[encoded_len - 1 - i] = '=';
   32|    117|    }
   33|       |
   34|    106|    out[encoded_len] = '\0';
   35|    106|    return true;
   36|    106|}

reset_formatter:
 2428|  11.9k|void reset_formatter(void) {
 2429|  11.9k|    explicit_bzero(formatter_stack, sizeof(formatter_stack));
 2430|  11.9k|    formatter_index = 0;
 2431|  11.9k|    current_data_index = 0;
 2432|  11.9k|}
get_next_data:
 2434|   257k|bool get_next_data(formatter_data_t *fdata, bool forward, bool *data_exists, bool *is_op_header) {
 2435|   257k|    if (current_data_index == 0 && formatter_index == 0 && !forward) {
  ------------------
  |  Branch (2435:9): [True: 128k, False: 129k]
  |  Branch (2435:36): [True: 11.9k, False: 116k]
  |  Branch (2435:60): [True: 0, False: 11.9k]
  ------------------
 2436|      0|        return false;
 2437|      0|    }
 2438|   257k|    explicit_bzero(fdata->caption, fdata->caption_len);
 2439|   257k|    explicit_bzero(fdata->value, fdata->value_len);
 2440|   257k|    *is_op_header = false;
 2441|   257k|    uint8_t total_data = get_data_count(fdata);
 2442|       |    // printf("current_data_index: %d, formatter_index: %d\n", current_data_index,
 2443|       |    // formatter_index);
 2444|   257k|    if (forward) {
  ------------------
  |  Branch (2444:9): [True: 257k, False: 0]
  ------------------
 2445|   257k|        if (current_data_index == 0 && formatter_index == 0) {
  ------------------
  |  Branch (2445:13): [True: 128k, False: 129k]
  |  Branch (2445:40): [True: 11.9k, False: 116k]
  ------------------
 2446|  11.9k|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|  11.9k|    {                           \
  |  |   31|  11.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 11.9k]
  |  |  ------------------
  |  |   32|  11.9k|    }
  ------------------
 2447|  11.9k|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2447:17): [True: 0, False: 11.9k]
  ------------------
 2448|      0|                return false;
 2449|      0|            }
 2450|  11.9k|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|  11.9k|    {                           \
  |  |   31|  11.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 11.9k]
  |  |  ------------------
  |  |   32|  11.9k|    }
  ------------------
 2451|  11.9k|            *data_exists = true;
 2452|   245k|        } else if (current_data_index < total_data - 1 &&
  ------------------
  |  Branch (2452:20): [True: 128k, False: 116k]
  ------------------
 2453|   245k|                   formatter_stack[formatter_index - 1] == NULL) {
  ------------------
  |  Branch (2453:20): [True: 32.2k, False: 96.6k]
  ------------------
 2454|  32.2k|            current_data_index++;
 2455|  32.2k|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|  32.2k|    {                           \
  |  |   31|  32.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32.2k]
  |  |  ------------------
  |  |   32|  32.2k|    }
  ------------------
 2456|  32.2k|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2456:17): [True: 0, False: 32.2k]
  ------------------
 2457|      0|                return false;
 2458|      0|            }
 2459|  32.2k|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|  32.2k|    {                           \
  |  |   31|  32.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 10, False: 32.2k]
  |  |  ------------------
  |  |   32|  32.2k|    }
  ------------------
 2460|  32.2k|            *is_op_header = true;
 2461|  32.2k|            *data_exists = true;
 2462|   213k|        } else if (current_data_index == total_data - 1 &&
  ------------------
  |  Branch (2462:20): [True: 116k, False: 96.6k]
  ------------------
 2463|   213k|                   formatter_stack[formatter_index - 1] == NULL) {
  ------------------
  |  Branch (2463:20): [True: 9.23k, False: 107k]
  ------------------
 2464|  9.23k|            formatter_index++;  // we can back from the approve page
 2465|  9.23k|            *data_exists = false;
 2466|   204k|        } else {
 2467|   204k|            FORMATTER_CHECK(formatter_stack[formatter_index - 1](fdata));
  ------------------
  |  |   30|   204k|    {                           \
  |  |   31|   204k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 2.72k, False: 201k]
  |  |  ------------------
  |  |   32|   204k|    }
  ------------------
 2468|   201k|            *data_exists = true;
 2469|   201k|        }
 2470|   257k|    } else {
 2471|      0|        if (current_data_index == 0 && formatter_index == 2) {
  ------------------
  |  Branch (2471:13): [True: 0, False: 0]
  |  Branch (2471:40): [True: 0, False: 0]
  ------------------
 2472|      0|            formatter_index = 0;
 2473|      0|            *data_exists = false;
 2474|      0|        } else if (current_data_index > 0 && formatter_index == 2) {
  ------------------
  |  Branch (2474:20): [True: 0, False: 0]
  |  Branch (2474:46): [True: 0, False: 0]
  ------------------
 2475|      0|            current_data_index -= 1;
 2476|      0|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2477|      0|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2477:17): [True: 0, False: 0]
  ------------------
 2478|      0|                return false;
 2479|      0|            }
 2480|      0|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2481|      0|            *data_exists = true;
 2482|      0|            if (current_data_index > 0) {
  ------------------
  |  Branch (2482:17): [True: 0, False: 0]
  ------------------
 2483|      0|                *is_op_header = true;
 2484|      0|            }
 2485|      0|        } else {
 2486|      0|            FORMATTER_CHECK(format(fdata, current_data_index));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2487|      0|            if (formatter_stack[0] == NULL) {
  ------------------
  |  Branch (2487:17): [True: 0, False: 0]
  ------------------
 2488|      0|                return false;
 2489|      0|            }
 2490|      0|            FORMATTER_CHECK(formatter_stack[0](fdata));
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
 2491|      0|            *data_exists = true;
 2492|      0|            if (current_data_index > 0) {
  ------------------
  |  Branch (2492:17): [True: 0, False: 0]
  ------------------
 2493|      0|                *is_op_header = true;
 2494|      0|            }
 2495|      0|        }
 2496|      0|    }
 2497|       |
 2498|   255k|    return true;
 2499|   257k|}
formatter.c:get_data_count:
 2420|   257k|static uint8_t get_data_count(formatter_data_t *fdata) {
 2421|   257k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2421:9): [True: 101k, False: 156k]
  ------------------
 2422|   101k|        return 1;
 2423|   101k|    }
 2424|   156k|    uint8_t op_cnt = fdata->envelope->tx_details.tx.operations_count;
 2425|   156k|    return op_cnt + 1;
 2426|   257k|}
formatter.c:format:
 2398|  44.2k|static bool format(formatter_data_t *fdata, uint8_t data_index) {
 2399|  44.2k|    explicit_bzero(formatter_stack, sizeof(formatter_stack));
 2400|  44.2k|    formatter_index = 0;
 2401|  44.2k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2401:9): [True: 6.75k, False: 37.5k]
  ------------------
 2402|  6.75k|        return format_soroban_authorization(fdata);
 2403|  37.5k|    } else {
 2404|  37.5k|        if (data_index == 0) {
  ------------------
  |  Branch (2404:13): [True: 5.21k, False: 32.2k]
  ------------------
 2405|  5.21k|            return format_transaction_info(fdata);
 2406|  32.2k|        } else {
 2407|  32.2k|            uint8_t op_index = data_index - 1;
 2408|  32.2k|            if (!parse_transaction_operation(fdata->raw_data,
  ------------------
  |  Branch (2408:17): [True: 0, False: 32.2k]
  ------------------
 2409|  32.2k|                                             fdata->raw_data_len,
 2410|  32.2k|                                             fdata->envelope,
 2411|  32.2k|                                             op_index)) {
 2412|      0|                return false;
 2413|  32.2k|            };
 2414|  32.2k|            FORMATTER_CHECK(push_to_formatter_stack(&format_confirm_operation))
  ------------------
  |  |   30|  32.2k|    {                           \
  |  |   31|  32.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 32.2k]
  |  |  ------------------
  |  |   32|  32.2k|    }
  ------------------
 2415|  32.2k|        }
 2416|  37.5k|    }
 2417|  32.2k|    return true;
 2418|  44.2k|}
formatter.c:format_soroban_authorization:
 2389|  6.75k|static bool format_soroban_authorization(formatter_data_t *fdata) {
 2390|  6.75k|    if (fdata->envelope->network != 0) {
  ------------------
  |  Branch (2390:9): [True: 6.38k, False: 367]
  ------------------
 2391|  6.38k|        FORMATTER_CHECK(push_to_formatter_stack(&format_network))
  ------------------
  |  |   30|  6.38k|    {                           \
  |  |   31|  6.38k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.38k]
  |  |  ------------------
  |  |   32|  6.38k|    }
  ------------------
 2392|  6.38k|    } else {
 2393|    367|        FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_nonce))
  ------------------
  |  |   30|    367|    {                           \
  |  |   31|    367|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 367]
  |  |  ------------------
  |  |   32|    367|    }
  ------------------
 2394|    367|    }
 2395|  6.75k|    return true;
 2396|  6.75k|}
formatter.c:format_network:
 2369|  11.3k|static bool format_network(formatter_data_t *fdata) {
 2370|  11.3k|    STRLCPY(fdata->caption, "Network", fdata->caption_len);
  ------------------
  |  |   35|  11.3k|    {                                         \
  |  |   36|  11.3k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  11.3k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 11.3k]
  |  |  ------------------
  |  |   38|  11.3k|    }
  ------------------
 2371|  11.3k|    STRLCPY(fdata->value, (char *) PIC(NETWORK_NAMES[fdata->envelope->network]), fdata->value_len);
  ------------------
  |  |   35|  11.3k|    {                                         \
  |  |   36|  11.3k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  11.3k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 11.3k]
  |  |  ------------------
  |  |   38|  11.3k|    }
  ------------------
 2372|  11.3k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2372:9): [True: 6.38k, False: 4.92k]
  ------------------
 2373|  6.38k|        FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_nonce))
  ------------------
  |  |   30|  6.38k|    {                           \
  |  |   31|  6.38k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.38k]
  |  |  ------------------
  |  |   32|  6.38k|    }
  ------------------
 2374|  6.38k|    } else {
 2375|  4.92k|        return get_tx_details_formatter(fdata);
 2376|  4.92k|    }
 2377|  6.38k|    return true;
 2378|  11.3k|}
formatter.c:get_tx_details_formatter:
 2328|  5.21k|static bool get_tx_details_formatter(formatter_data_t *fdata) {
 2329|  5.21k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX_FEE_BUMP) {
  ------------------
  |  Branch (2329:9): [True: 56, False: 5.15k]
  ------------------
 2330|     56|        FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_details))
  ------------------
  |  |   30|     56|    {                           \
  |  |   31|     56|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 56]
  |  |  ------------------
  |  |   32|     56|    }
  ------------------
 2331|     56|    }
 2332|       |
 2333|  5.21k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX) {
  ------------------
  |  Branch (2333:9): [True: 5.15k, False: 56]
  ------------------
 2334|  5.15k|        if (fdata->envelope->tx_details.tx.memo.type != MEMO_NONE) {
  ------------------
  |  Branch (2334:13): [True: 340, False: 4.81k]
  ------------------
 2335|    340|            FORMATTER_CHECK(push_to_formatter_stack(&format_memo))
  ------------------
  |  |   30|    340|    {                           \
  |  |   31|    340|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 340]
  |  |  ------------------
  |  |   32|    340|    }
  ------------------
 2336|  4.81k|        } else {
 2337|  4.81k|            FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|  4.81k|    {                           \
  |  |   31|  4.81k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.81k]
  |  |  ------------------
  |  |   32|  4.81k|    }
  ------------------
 2338|  4.81k|        }
 2339|  5.15k|    }
 2340|       |
 2341|  5.21k|    return true;
 2342|  5.21k|}
formatter.c:format_fee_bump_transaction_details:
 2320|     56|static bool format_fee_bump_transaction_details(formatter_data_t *fdata) {
 2321|     56|    (void) fdata;
 2322|     56|    STRLCPY(fdata->caption, "Fee Bump", fdata->caption_len);
  ------------------
  |  |   35|     56|    {                                         \
  |  |   36|     56|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     56|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 56]
  |  |  ------------------
  |  |   38|     56|    }
  ------------------
 2323|     56|    STRLCPY(fdata->value, "Transaction Details", fdata->value_len);
  ------------------
  |  |   35|     56|    {                                         \
  |  |   36|     56|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     56|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 56]
  |  |  ------------------
  |  |   38|     56|    }
  ------------------
 2324|     56|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_source))
  ------------------
  |  |   30|     56|    {                           \
  |  |   31|     56|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 56]
  |  |  ------------------
  |  |   32|     56|    }
  ------------------
 2325|     56|    return true;
 2326|     56|}
formatter.c:format_fee_bump_transaction_source:
 2297|     56|static bool format_fee_bump_transaction_source(formatter_data_t *fdata) {
 2298|     56|    STRLCPY(fdata->caption, "Fee Source", fdata->caption_len);
  ------------------
  |  |   35|     56|    {                                         \
  |  |   36|     56|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     56|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 56]
  |  |  ------------------
  |  |   38|     56|    }
  ------------------
 2299|     56|    if (fdata->envelope->type == ENVELOPE_TYPE_TX_FEE_BUMP &&
  ------------------
  |  Branch (2299:9): [True: 56, False: 0]
  ------------------
 2300|     56|        fdata->envelope->tx_details.fee_bump_tx.fee_source.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (2300:9): [True: 52, False: 4]
  ------------------
 2301|     56|        memcmp(fdata->envelope->tx_details.fee_bump_tx.fee_source.ed25519,
  ------------------
  |  Branch (2301:9): [True: 19, False: 33]
  ------------------
 2302|     52|               fdata->signing_key,
 2303|     52|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|     52|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 2304|     19|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.fee_bump_tx.fee_source,
  ------------------
  |  |   30|     19|    {                           \
  |  |   31|     19|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 19]
  |  |  ------------------
  |  |   32|     19|    }
  ------------------
 2305|     19|                                            fdata->value,
 2306|     19|                                            fdata->value_len,
 2307|     19|                                            6,
 2308|     19|                                            6))
 2309|     37|    } else {
 2310|     37|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.fee_bump_tx.fee_source,
  ------------------
  |  |   30|     37|    {                           \
  |  |   31|     37|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   32|     37|    }
  ------------------
 2311|     37|                                            fdata->value,
 2312|     37|                                            fdata->value_len,
 2313|     37|                                            0,
 2314|     37|                                            0))
 2315|     37|    }
 2316|     56|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee_bump_transaction_fee))
  ------------------
  |  |   30|     56|    {                           \
  |  |   31|     56|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 56]
  |  |  ------------------
  |  |   32|     56|    }
  ------------------
 2317|     56|    return true;
 2318|     56|}
formatter.c:format_fee_bump_transaction_fee:
 2285|     56|static bool format_fee_bump_transaction_fee(formatter_data_t *fdata) {
 2286|     56|    STRLCPY(fdata->caption, "Max Fee", fdata->caption_len);
  ------------------
  |  |   35|     56|    {                                         \
  |  |   36|     56|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     56|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 56]
  |  |  ------------------
  |  |   38|     56|    }
  ------------------
 2287|     56|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
 2288|     56|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.fee_bump_tx.fee,
  ------------------
  |  |   30|     56|    {                           \
  |  |   31|     56|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 56]
  |  |  ------------------
  |  |   32|     56|    }
  ------------------
 2289|     56|                                 &asset,
 2290|     56|                                 fdata->envelope->network,
 2291|     56|                                 fdata->value,
 2292|     56|                                 fdata->value_len))
 2293|     56|    FORMATTER_CHECK(push_to_formatter_stack(&format_transaction_details))
  ------------------
  |  |   30|     56|    {                           \
  |  |   31|     56|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 56]
  |  |  ------------------
  |  |   32|     56|    }
  ------------------
 2294|     56|    return true;
 2295|     56|}
formatter.c:format_transaction_details:
  285|     56|static bool format_transaction_details(formatter_data_t *fdata) {
  286|     56|    switch (fdata->envelope->type) {
  287|     56|        case ENVELOPE_TYPE_TX_FEE_BUMP:
  ------------------
  |  Branch (287:9): [True: 56, False: 0]
  ------------------
  288|     56|            STRLCPY(fdata->caption, "InnerTx", fdata->caption_len);
  ------------------
  |  |   35|     56|    {                                         \
  |  |   36|     56|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     56|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 56]
  |  |  ------------------
  |  |   38|     56|    }
  ------------------
  289|     56|            break;
  290|      0|        case ENVELOPE_TYPE_TX:
  ------------------
  |  Branch (290:9): [True: 0, False: 56]
  ------------------
  291|      0|            STRLCPY(fdata->caption, "Transaction", fdata->caption_len);
  ------------------
  |  |   35|      0|    {                                         \
  |  |   36|      0|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      0|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   38|      0|    }
  ------------------
  292|      0|            break;
  293|      0|        default:
  ------------------
  |  Branch (293:9): [True: 0, False: 56]
  ------------------
  294|      0|            return false;
  295|     56|    }
  296|     56|    STRLCPY(fdata->value, "Details", fdata->value_len);
  ------------------
  |  |   35|     56|    {                                         \
  |  |   36|     56|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     56|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 56]
  |  |  ------------------
  |  |   38|     56|    }
  ------------------
  297|     56|    if (fdata->envelope->tx_details.tx.memo.type != MEMO_NONE) {
  ------------------
  |  Branch (297:9): [True: 33, False: 23]
  ------------------
  298|     33|        FORMATTER_CHECK(push_to_formatter_stack(&format_memo))
  ------------------
  |  |   30|     33|    {                           \
  |  |   31|     33|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 33]
  |  |  ------------------
  |  |   32|     33|    }
  ------------------
  299|     33|    } else {
  300|     23|        FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|     23|    {                           \
  |  |   31|     23|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 23]
  |  |  ------------------
  |  |   32|     23|    }
  ------------------
  301|     23|    }
  302|     56|    return true;
  303|     56|}
formatter.c:format_memo:
  242|    373|static bool format_memo(formatter_data_t *fdata) {
  243|    373|    memo_t *memo = &fdata->envelope->tx_details.tx.memo;
  244|    373|    switch (memo->type) {
  245|     26|        case MEMO_ID: {
  ------------------
  |  Branch (245:9): [True: 26, False: 347]
  ------------------
  246|     26|            STRLCPY(fdata->caption, "Memo ID", fdata->caption_len);
  ------------------
  |  |   35|     26|    {                                         \
  |  |   36|     26|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     26|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   38|     26|    }
  ------------------
  247|     26|            FORMATTER_CHECK(print_uint64_num(memo->id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     26|    {                           \
  |  |   31|     26|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 26]
  |  |  ------------------
  |  |   32|     26|    }
  ------------------
  248|     26|            break;
  249|     26|        }
  250|    335|        case MEMO_TEXT: {
  ------------------
  |  Branch (250:9): [True: 335, False: 38]
  ------------------
  251|    335|            STRLCPY(fdata->caption, "Memo Text", fdata->caption_len);
  ------------------
  |  |   35|    335|    {                                         \
  |  |   36|    335|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    335|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 335]
  |  |  ------------------
  |  |   38|    335|    }
  ------------------
  252|    335|            if (is_printable_binary(memo->text.text, memo->text.text_size)) {
  ------------------
  |  Branch (252:17): [True: 238, False: 97]
  ------------------
  253|    238|                FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|    238|    {                           \
  |  |   31|    238|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 238]
  |  |  ------------------
  |  |   32|    238|    }
  ------------------
  254|    238|                                             fdata->value_len,
  255|    238|                                             memo->text.text,
  256|    238|                                             memo->text.text_size))
  257|    238|            } else {
  258|     97|                STRLCPY(fdata->value, "Base64: ", fdata->value_len)
  ------------------
  |  |   35|     97|    {                                         \
  |  |   36|     97|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     97|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 97]
  |  |  ------------------
  |  |   38|     97|    }
  ------------------
  259|     97|                FORMATTER_CHECK(base64_encode(memo->text.text,
  ------------------
  |  |   30|     97|    {                           \
  |  |   31|     97|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 97]
  |  |  ------------------
  |  |   32|     97|    }
  ------------------
  260|     97|                                              memo->text.text_size,
  261|     97|                                              fdata->value + strlen(fdata->value),
  262|     97|                                              fdata->value_len - strlen(fdata->value)))
  263|     97|            }
  264|    335|            break;
  265|    335|        }
  266|    335|        case MEMO_HASH: {
  ------------------
  |  Branch (266:9): [True: 6, False: 367]
  ------------------
  267|      6|            STRLCPY(fdata->caption, "Memo Hash", fdata->caption_len);
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
  268|      6|            FORMATTER_CHECK(
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
  269|      6|                print_binary(memo->hash, HASH_SIZE, fdata->value, fdata->value_len, 0, 0))
  270|      6|            break;
  271|      6|        }
  272|      6|        case MEMO_RETURN: {
  ------------------
  |  Branch (272:9): [True: 6, False: 367]
  ------------------
  273|      6|            STRLCPY(fdata->caption, "Memo Return", fdata->caption_len);
  ------------------
  |  |   35|      6|    {                                         \
  |  |   36|      6|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      6|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   38|      6|    }
  ------------------
  274|      6|            FORMATTER_CHECK(
  ------------------
  |  |   30|      6|    {                           \
  |  |   31|      6|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6]
  |  |  ------------------
  |  |   32|      6|    }
  ------------------
  275|      6|                print_binary(memo->hash, HASH_SIZE, fdata->value, fdata->value_len, 0, 0))
  276|      6|            break;
  277|      6|        }
  278|      6|        default:
  ------------------
  |  Branch (278:9): [True: 0, False: 373]
  ------------------
  279|      0|            return false;
  280|    373|    }
  281|    373|    FORMATTER_CHECK(push_to_formatter_stack(&format_fee))
  ------------------
  |  |   30|    373|    {                           \
  |  |   31|    373|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 373]
  |  |  ------------------
  |  |   32|    373|    }
  ------------------
  282|    373|    return true;
  283|    373|}
formatter.c:format_fee:
  226|  5.21k|static bool format_fee(formatter_data_t *fdata) {
  227|  5.21k|    STRLCPY(fdata->caption, "Max Fee", fdata->caption_len);
  ------------------
  |  |   35|  5.21k|    {                                         \
  |  |   36|  5.21k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  5.21k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.21k]
  |  |  ------------------
  |  |   38|  5.21k|    }
  ------------------
  228|  5.21k|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
  229|  5.21k|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.fee,
  ------------------
  |  |   30|  5.21k|    {                           \
  |  |   31|  5.21k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.21k]
  |  |  ------------------
  |  |   32|  5.21k|    }
  ------------------
  230|  5.21k|                                 &asset,
  231|  5.21k|                                 fdata->envelope->network,
  232|  5.21k|                                 fdata->value,
  233|  5.21k|                                 fdata->value_len))
  234|  5.21k|    if (fdata->display_sequence) {
  ------------------
  |  Branch (234:9): [True: 5.21k, False: 0]
  ------------------
  235|  5.21k|        FORMATTER_CHECK(push_to_formatter_stack(&format_sequence))
  ------------------
  |  |   30|  5.21k|    {                           \
  |  |   31|  5.21k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.21k]
  |  |  ------------------
  |  |   32|  5.21k|    }
  ------------------
  236|  5.21k|    } else {
  237|      0|        FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds))
  ------------------
  |  |   30|      0|    {                           \
  |  |   31|      0|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   32|      0|    }
  ------------------
  238|      0|    }
  239|  5.21k|    return true;
  240|  5.21k|}
formatter.c:format_sequence:
  217|  5.21k|static bool format_sequence(formatter_data_t *fdata) {
  218|  5.21k|    STRLCPY(fdata->caption, "Sequence Num", fdata->caption_len);
  ------------------
  |  |   35|  5.21k|    {                                         \
  |  |   36|  5.21k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  5.21k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.21k]
  |  |  ------------------
  |  |   38|  5.21k|    }
  ------------------
  219|  5.21k|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.sequence_number,
  ------------------
  |  |   30|  5.21k|    {                           \
  |  |   31|  5.21k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.21k]
  |  |  ------------------
  |  |   32|  5.21k|    }
  ------------------
  220|  5.21k|                                     fdata->value,
  221|  5.21k|                                     fdata->value_len))
  222|  5.21k|    FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds))
  ------------------
  |  |   30|  5.21k|    {                           \
  |  |   31|  5.21k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.21k]
  |  |  ------------------
  |  |   32|  5.21k|    }
  ------------------
  223|  5.21k|    return true;
  224|  5.21k|}
formatter.c:format_time_bounds:
  204|  5.21k|static bool format_time_bounds(formatter_data_t *fdata) {
  205|  5.21k|    if (!fdata->envelope->tx_details.tx.cond.time_bounds_present ||
  ------------------
  |  Branch (205:9): [True: 4.81k, False: 402]
  ------------------
  206|  5.21k|        (fdata->envelope->tx_details.tx.cond.time_bounds.min_time == 0 &&
  ------------------
  |  Branch (206:10): [True: 323, False: 79]
  ------------------
  207|  4.92k|         fdata->envelope->tx_details.tx.cond.time_bounds.max_time == 0)) {
  ------------------
  |  Branch (207:10): [True: 111, False: 212]
  ------------------
  208|  4.92k|        return format_ledger_bounds(fdata);
  209|  4.92k|    } else if (fdata->envelope->tx_details.tx.cond.time_bounds.min_time != 0) {
  ------------------
  |  Branch (209:16): [True: 79, False: 212]
  ------------------
  210|     79|        return format_time_bounds_min_time(fdata);
  211|    212|    } else {
  212|    212|        return format_time_bounds_max_time(fdata);
  213|    212|    }
  214|      0|    return true;
  215|  5.21k|}
formatter.c:format_ledger_bounds:
  168|  5.17k|static bool format_ledger_bounds(formatter_data_t *fdata) {
  169|  5.17k|    if (!fdata->envelope->tx_details.tx.cond.ledger_bounds_present ||
  ------------------
  |  Branch (169:9): [True: 5.12k, False: 49]
  ------------------
  170|  5.17k|        (fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger == 0 &&
  ------------------
  |  Branch (170:10): [True: 20, False: 29]
  ------------------
  171|  5.13k|         fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger == 0)) {
  ------------------
  |  Branch (171:10): [True: 12, False: 8]
  ------------------
  172|  5.13k|        return format_min_seq_num_prepare(fdata);
  173|  5.13k|    } else if (fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger != 0) {
  ------------------
  |  Branch (173:16): [True: 29, False: 8]
  ------------------
  174|     29|        return format_ledger_bounds_min_ledger(fdata);
  175|     29|    } else {
  176|      8|        return format_ledger_bounds_max_ledger(fdata);
  177|      8|    }
  178|      0|    return true;
  179|  5.17k|}
formatter.c:format_min_seq_num_prepare:
  137|  5.17k|static bool format_min_seq_num_prepare(formatter_data_t *fdata) {
  138|  5.17k|    if (!fdata->envelope->tx_details.tx.cond.min_seq_num_present ||
  ------------------
  |  Branch (138:9): [True: 5.14k, False: 26]
  ------------------
  139|  5.17k|        fdata->envelope->tx_details.tx.cond.min_seq_num == 0) {
  ------------------
  |  Branch (139:9): [True: 19, False: 7]
  ------------------
  140|  5.16k|        return format_min_seq_age_prepare(fdata);
  141|  5.16k|    } else {
  142|      7|        return format_min_seq_num(fdata);
  143|      7|    }
  144|  5.17k|}
formatter.c:format_min_seq_age_prepare:
  119|  5.17k|static bool format_min_seq_age_prepare(formatter_data_t *fdata) {
  120|  5.17k|    if (fdata->envelope->tx_details.tx.cond.min_seq_age == 0) {
  ------------------
  |  Branch (120:9): [True: 5.13k, False: 34]
  ------------------
  121|  5.13k|        format_min_seq_ledger_gap_prepare(fdata);
  122|  5.13k|    } else {
  123|     34|        format_min_seq_age(fdata);
  124|     34|    }
  125|  5.17k|    return true;
  126|  5.17k|}
formatter.c:format_min_seq_ledger_gap_prepare:
  102|  5.17k|static bool format_min_seq_ledger_gap_prepare(formatter_data_t *fdata) {
  103|  5.17k|    if (fdata->envelope->tx_details.tx.cond.min_seq_ledger_gap == 0) {
  ------------------
  |  Branch (103:9): [True: 5.15k, False: 14]
  ------------------
  104|  5.15k|        return format_transaction_source(fdata);
  105|  5.15k|    } else {
  106|     14|        return format_min_seq_ledger_gap(fdata);
  107|     14|    }
  108|  5.17k|}
formatter.c:format_transaction_source:
   70|  5.17k|static bool format_transaction_source(formatter_data_t *fdata) {
   71|  5.17k|    STRLCPY(fdata->caption, "Tx Source", fdata->caption_len);
  ------------------
  |  |   35|  5.17k|    {                                         \
  |  |   36|  5.17k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  5.17k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.17k]
  |  |  ------------------
  |  |   38|  5.17k|    }
  ------------------
   72|  5.17k|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (72:9): [True: 5.11k, False: 56]
  ------------------
   73|  5.17k|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (73:9): [True: 5.04k, False: 68]
  ------------------
   74|  5.17k|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (74:9): [True: 517, False: 4.53k]
  ------------------
   75|  5.04k|               fdata->signing_key,
   76|  5.04k|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|  5.04k|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
   77|    517|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.source_account,
  ------------------
  |  |   30|    517|    {                           \
  |  |   31|    517|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 517]
  |  |  ------------------
  |  |   32|    517|    }
  ------------------
   78|    517|                                            fdata->value,
   79|    517|                                            fdata->value_len,
   80|    517|                                            6,
   81|    517|                                            6))
   82|  4.65k|    } else {
   83|  4.65k|        FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.source_account,
  ------------------
  |  |   30|  4.65k|    {                           \
  |  |   31|  4.65k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.65k]
  |  |  ------------------
  |  |   32|  4.65k|    }
  ------------------
   84|  4.65k|                                            fdata->value,
   85|  4.65k|                                            fdata->value_len,
   86|  4.65k|                                            0,
   87|  4.65k|                                            0))
   88|  4.65k|    }
   89|  5.17k|    FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  5.17k|    {                           \
  |  |   31|  5.17k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.17k]
  |  |  ------------------
  |  |   32|  5.17k|    }
  ------------------
   90|  5.17k|    return true;
   91|  5.17k|}
formatter.c:format_min_seq_ledger_gap:
   93|     14|static bool format_min_seq_ledger_gap(formatter_data_t *fdata) {
   94|     14|    STRLCPY(fdata->caption, "Min Seq Ledger Gap", fdata->caption_len);
  ------------------
  |  |   35|     14|    {                                         \
  |  |   36|     14|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     14|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   38|     14|    }
  ------------------
   95|     14|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_ledger_gap,
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
   96|     14|                                     fdata->value,
   97|     14|                                     fdata->value_len))
   98|     14|    FORMATTER_CHECK(push_to_formatter_stack(&format_transaction_source))
  ------------------
  |  |   30|     14|    {                           \
  |  |   31|     14|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 14]
  |  |  ------------------
  |  |   32|     14|    }
  ------------------
   99|     14|    return true;
  100|     14|}
formatter.c:format_min_seq_age:
  110|     34|static bool format_min_seq_age(formatter_data_t *fdata) {
  111|     34|    STRLCPY(fdata->caption, "Min Seq Age", fdata->caption_len);
  ------------------
  |  |   35|     34|    {                                         \
  |  |   36|     34|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     34|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   38|     34|    }
  ------------------
  112|     34|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_age,
  ------------------
  |  |   30|     34|    {                           \
  |  |   31|     34|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   32|     34|    }
  ------------------
  113|     34|                                     fdata->value,
  114|     34|                                     fdata->value_len))
  115|     34|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_ledger_gap_prepare))
  ------------------
  |  |   30|     34|    {                           \
  |  |   31|     34|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 34]
  |  |  ------------------
  |  |   32|     34|    }
  ------------------
  116|     34|    return true;
  117|     34|}
formatter.c:format_min_seq_num:
  128|      7|static bool format_min_seq_num(formatter_data_t *fdata) {
  129|      7|    STRLCPY(fdata->caption, "Min Seq Num", fdata->caption_len);
  ------------------
  |  |   35|      7|    {                                         \
  |  |   36|      7|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      7|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   38|      7|    }
  ------------------
  130|      7|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.min_seq_num,
  ------------------
  |  |   30|      7|    {                           \
  |  |   31|      7|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   32|      7|    }
  ------------------
  131|      7|                                     fdata->value,
  132|      7|                                     fdata->value_len))
  133|      7|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_age_prepare))
  ------------------
  |  |   30|      7|    {                           \
  |  |   31|      7|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   32|      7|    }
  ------------------
  134|      7|    return true;
  135|      7|}
formatter.c:format_ledger_bounds_min_ledger:
  155|     29|static bool format_ledger_bounds_min_ledger(formatter_data_t *fdata) {
  156|     29|    STRLCPY(fdata->caption, "Ledger Bounds Min", fdata->caption_len);
  ------------------
  |  |   35|     29|    {                                         \
  |  |   36|     29|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     29|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   38|     29|    }
  ------------------
  157|     29|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.ledger_bounds.min_ledger,
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  158|     29|                                     fdata->value,
  159|     29|                                     fdata->value_len))
  160|     29|    if (fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger != 0) {
  ------------------
  |  Branch (160:9): [True: 17, False: 12]
  ------------------
  161|     17|        FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds_max_ledger))
  ------------------
  |  |   30|     17|    {                           \
  |  |   31|     17|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   32|     17|    }
  ------------------
  162|     17|    } else {
  163|     12|        FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_num_prepare))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  164|     12|    }
  165|     29|    return true;
  166|     29|}
formatter.c:format_ledger_bounds_max_ledger:
  146|     25|static bool format_ledger_bounds_max_ledger(formatter_data_t *fdata) {
  147|     25|    STRLCPY(fdata->caption, "Ledger Bounds Max", fdata->caption_len);
  ------------------
  |  |   35|     25|    {                                         \
  |  |   36|     25|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     25|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   38|     25|    }
  ------------------
  148|     25|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.cond.ledger_bounds.max_ledger,
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  149|     25|                                     fdata->value,
  150|     25|                                     fdata->value_len))
  151|     25|    FORMATTER_CHECK(push_to_formatter_stack(&format_min_seq_num_prepare))
  ------------------
  |  |   30|     25|    {                           \
  |  |   31|     25|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25]
  |  |  ------------------
  |  |   32|     25|    }
  ------------------
  152|     25|    return true;
  153|     25|}
formatter.c:format_time_bounds_min_time:
  190|     79|static bool format_time_bounds_min_time(formatter_data_t *fdata) {
  191|     79|    STRLCPY(fdata->caption, "Valid After (UTC)", fdata->caption_len);
  ------------------
  |  |   35|     79|    {                                         \
  |  |   36|     79|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     79|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 79]
  |  |  ------------------
  |  |   38|     79|    }
  ------------------
  192|     79|    FORMATTER_CHECK(print_time(fdata->envelope->tx_details.tx.cond.time_bounds.min_time,
  ------------------
  |  |   30|     79|    {                           \
  |  |   31|     79|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 29, False: 50]
  |  |  ------------------
  |  |   32|     79|    }
  ------------------
  193|     79|                               fdata->value,
  194|     79|                               fdata->value_len))
  195|       |
  196|     50|    if (fdata->envelope->tx_details.tx.cond.time_bounds.max_time != 0) {
  ------------------
  |  Branch (196:9): [True: 38, False: 12]
  ------------------
  197|     38|        FORMATTER_CHECK(push_to_formatter_stack(&format_time_bounds_max_time))
  ------------------
  |  |   30|     38|    {                           \
  |  |   31|     38|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 38]
  |  |  ------------------
  |  |   32|     38|    }
  ------------------
  198|     38|    } else {
  199|     12|        FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds))
  ------------------
  |  |   30|     12|    {                           \
  |  |   31|     12|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 12]
  |  |  ------------------
  |  |   32|     12|    }
  ------------------
  200|     12|    }
  201|     50|    return true;
  202|     50|}
formatter.c:format_time_bounds_max_time:
  181|    250|static bool format_time_bounds_max_time(formatter_data_t *fdata) {
  182|    250|    STRLCPY(fdata->caption, "Valid Before (UTC)", fdata->caption_len);
  ------------------
  |  |   35|    250|    {                                         \
  |  |   36|    250|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    250|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 250]
  |  |  ------------------
  |  |   38|    250|    }
  ------------------
  183|    250|    FORMATTER_CHECK(print_time(fdata->envelope->tx_details.tx.cond.time_bounds.max_time,
  ------------------
  |  |   30|    250|    {                           \
  |  |   31|    250|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 14, False: 236]
  |  |  ------------------
  |  |   32|    250|    }
  ------------------
  184|    250|                               fdata->value,
  185|    250|                               fdata->value_len))
  186|    236|    FORMATTER_CHECK(push_to_formatter_stack(&format_ledger_bounds))
  ------------------
  |  |   30|    236|    {                           \
  |  |   31|    236|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 236]
  |  |  ------------------
  |  |   32|    236|    }
  ------------------
  187|    236|    return true;
  188|    236|}
formatter.c:format_soroban_authorization_nonce:
 2354|  6.75k|static bool format_soroban_authorization_nonce(formatter_data_t *fdata) {
 2355|       |    // avoid the root invoke_contract_args be overwritten by the sub-invocation
 2356|  6.75k|    if (!parse_soroban_authorization_envelope(fdata->raw_data,
  ------------------
  |  Branch (2356:9): [True: 0, False: 6.75k]
  ------------------
 2357|  6.75k|                                              fdata->raw_data_len,
 2358|  6.75k|                                              fdata->envelope)) {
 2359|      0|        return false;
 2360|  6.75k|    };
 2361|  6.75k|    STRLCPY(fdata->caption, "Nonce", fdata->caption_len);
  ------------------
  |  |   35|  6.75k|    {                                         \
  |  |   36|  6.75k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.75k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.75k]
  |  |  ------------------
  |  |   38|  6.75k|    }
  ------------------
 2362|  6.75k|    FORMATTER_CHECK(print_uint64_num(fdata->envelope->soroban_authorization.nonce,
  ------------------
  |  |   30|  6.75k|    {                           \
  |  |   31|  6.75k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.75k]
  |  |  ------------------
  |  |   32|  6.75k|    }
  ------------------
 2363|  6.75k|                                     fdata->value,
 2364|  6.75k|                                     fdata->value_len))
 2365|  6.75k|    FORMATTER_CHECK(push_to_formatter_stack(&format_soroban_authorization_sig_exp))
  ------------------
  |  |   30|  6.75k|    {                           \
  |  |   31|  6.75k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.75k]
  |  |  ------------------
  |  |   32|  6.75k|    }
  ------------------
 2366|  6.75k|    return true;
 2367|  6.75k|}
formatter.c:format_soroban_authorization_sig_exp:
 2344|  6.75k|static bool format_soroban_authorization_sig_exp(formatter_data_t *fdata) {
 2345|  6.75k|    STRLCPY(fdata->caption, "Sig Exp Ledger", fdata->caption_len);
  ------------------
  |  |   35|  6.75k|    {                                         \
  |  |   36|  6.75k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.75k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.75k]
  |  |  ------------------
  |  |   38|  6.75k|    }
  ------------------
 2346|  6.75k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  6.75k|    {                           \
  |  |   31|  6.75k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.75k]
  |  |  ------------------
  |  |   32|  6.75k|    }
  ------------------
 2347|  6.75k|        print_uint64_num(fdata->envelope->soroban_authorization.signature_expiration_ledger,
 2348|  6.75k|                         fdata->value,
 2349|  6.75k|                         fdata->value_len))
 2350|  6.75k|    FORMATTER_CHECK(push_to_formatter_stack(&format_auth_function));
  ------------------
  |  |   30|  6.75k|    {                           \
  |  |   31|  6.75k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.75k]
  |  |  ------------------
  |  |   32|  6.75k|    }
  ------------------
 2351|  6.75k|    return true;
 2352|  6.75k|}
formatter.c:format_auth_function:
 2203|  6.75k|static bool format_auth_function(formatter_data_t *fdata) {
 2204|  6.75k|    switch (fdata->envelope->soroban_authorization.auth_function_type) {
 2205|  6.64k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
  ------------------
  |  Branch (2205:9): [True: 6.64k, False: 107]
  ------------------
 2206|  6.64k|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|  6.64k|    {                                         \
  |  |   36|  6.64k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.64k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.64k]
  |  |  ------------------
  |  |   38|  6.64k|    }
  ------------------
 2207|  6.64k|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|  6.64k|    {                                         \
  |  |   36|  6.64k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  6.64k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 6.64k]
  |  |  ------------------
  |  |   38|  6.64k|    }
  ------------------
 2208|  6.64k|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_contract_id));
  ------------------
  |  |   30|  6.64k|    {                           \
  |  |   31|  6.64k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.64k]
  |  |  ------------------
  |  |   32|  6.64k|    }
  ------------------
 2209|  6.64k|            break;
 2210|    107|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (2210:9): [True: 107, False: 6.64k]
  ------------------
 2211|    107|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    107|    {                                         \
  |  |   36|    107|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    107|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 107]
  |  |  ------------------
  |  |   38|    107|    }
  ------------------
 2212|    107|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|    107|    {                                         \
  |  |   36|    107|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    107|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 107]
  |  |  ------------------
  |  |   38|    107|    }
  ------------------
 2213|       |            // we dont need to care the sub-invocation here
 2214|    107|            FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|    107|    {                           \
  |  |   31|    107|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 107]
  |  |  ------------------
  |  |   32|    107|    }
  ------------------
 2215|    107|            break;
 2216|    107|        default:
  ------------------
  |  Branch (2216:9): [True: 0, False: 6.75k]
  ------------------
 2217|      0|            return false;
 2218|  6.75k|    }
 2219|  6.75k|    return true;
 2220|  6.75k|}
formatter.c:format_invoke_host_function_contract_id:
 2156|  7.12k|static bool format_invoke_host_function_contract_id(formatter_data_t *fdata) {
 2157|  7.12k|    sc_address_t *address =
 2158|  7.12k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2158:9): [True: 6.64k, False: 478]
  ------------------
 2159|  7.12k|            ? &fdata->envelope->soroban_authorization.invoke_contract_args.address
 2160|  7.12k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2161|    478|                   .invoke_contract_args.address;
 2162|       |
 2163|  7.12k|    STRLCPY(fdata->caption, "Contract ID", fdata->caption_len);
  ------------------
  |  |   35|  7.12k|    {                                         \
  |  |   36|  7.12k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  7.12k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7.12k]
  |  |  ------------------
  |  |   38|  7.12k|    }
  ------------------
 2164|       |
 2165|  7.12k|    FORMATTER_CHECK(print_sc_address(address, fdata->value, fdata->value_len, 0, 0))
  ------------------
  |  |   30|  7.12k|    {                           \
  |  |   31|  7.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.12k]
  |  |  ------------------
  |  |   32|  7.12k|    }
  ------------------
 2166|  7.12k|    push_to_formatter_stack(&format_invoke_host_function_func_name);
 2167|  7.12k|    return true;
 2168|  7.12k|}
formatter.c:format_invoke_host_function_func_name:
 2124|  7.12k|static bool format_invoke_host_function_func_name(formatter_data_t *fdata) {
 2125|  7.12k|    invoke_contract_args_t invoke_contract_args;
 2126|  7.12k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2126:9): [True: 6.64k, False: 478]
  ------------------
 2127|  6.64k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2128|  6.64k|    } else {
 2129|    478|        invoke_contract_args =
 2130|    478|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2131|    478|    }
 2132|  7.12k|    STRLCPY(fdata->caption, "Function", fdata->caption_len);
  ------------------
  |  |   35|  7.12k|    {                                         \
  |  |   36|  7.12k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  7.12k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 7.12k]
  |  |  ------------------
  |  |   38|  7.12k|    }
  ------------------
 2133|  7.12k|    FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|  7.12k|    {                           \
  |  |   31|  7.12k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.12k]
  |  |  ------------------
  |  |   32|  7.12k|    }
  ------------------
 2134|  7.12k|                                 fdata->value_len,
 2135|  7.12k|                                 invoke_contract_args.function.name,
 2136|  7.12k|                                 invoke_contract_args.function.name_size))
 2137|       |
 2138|  7.12k|    uint8_t data_count = should_move_control_to_plugin(fdata);
 2139|  7.12k|    if (data_count == 0) {
  ------------------
  |  Branch (2139:9): [True: 6.80k, False: 323]
  ------------------
 2140|       |        // we should not move control to plugin
 2141|  6.80k|        if (invoke_contract_args.parameters_length == 0) {
  ------------------
  |  Branch (2141:13): [True: 1.42k, False: 5.37k]
  ------------------
 2142|  1.42k|            return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2143|  5.37k|        } else {
 2144|  5.37k|            parameters_index = 0;
 2145|  5.37k|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args))
  ------------------
  |  |   30|  5.37k|    {                           \
  |  |   31|  5.37k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.37k]
  |  |  ------------------
  |  |   32|  5.37k|    }
  ------------------
 2146|  5.37k|        }
 2147|  6.80k|    } else {
 2148|    323|        PRINTF("we should move control to plugin\n");
 2149|    323|        parameters_index = 0;
 2150|    323|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args_with_plugin))
  ------------------
  |  |   30|    323|    {                           \
  |  |   31|    323|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 323]
  |  |  ------------------
  |  |   32|    323|    }
  ------------------
 2151|    323|    }
 2152|       |
 2153|  5.70k|    return true;
 2154|  7.12k|}
formatter.c:should_move_control_to_plugin:
 1662|  12.9k|static bool should_move_control_to_plugin(formatter_data_t *fdata) {
 1663|  12.9k|    if (fdata->plugin_check_presence == NULL || fdata->plugin_init_contract == NULL ||
  ------------------
  |  Branch (1663:9): [True: 869, False: 12.0k]
  |  Branch (1663:49): [True: 0, False: 12.0k]
  ------------------
 1664|  12.9k|        fdata->plugin_query_data_pair_count == NULL || fdata->plugin_query_data_pair == NULL) {
  ------------------
  |  Branch (1664:9): [True: 0, False: 12.0k]
  |  Branch (1664:56): [True: 0, False: 12.0k]
  ------------------
 1665|    869|        return false;
 1666|    869|    }
 1667|       |
 1668|  12.0k|    invoke_contract_args_t invoke_contract_args;
 1669|  12.0k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1669:9): [True: 12.0k, False: 0]
  ------------------
 1670|  12.0k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1671|  12.0k|    } else {
 1672|      0|        invoke_contract_args =
 1673|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1674|      0|    }
 1675|       |
 1676|  12.0k|    const uint8_t *contract_address = invoke_contract_args.address.address;
 1677|       |
 1678|       |    // check if plugin exists
 1679|  12.0k|    if (!fdata->plugin_check_presence(contract_address)) {
  ------------------
  |  Branch (1679:9): [True: 8.45k, False: 3.59k]
  ------------------
 1680|  8.45k|        return false;
 1681|  8.45k|    }
 1682|       |
 1683|       |    // init plugin
 1684|  3.59k|    if (fdata->plugin_init_contract(contract_address) != STELLAR_PLUGIN_RESULT_OK) {
  ------------------
  |  Branch (1684:9): [True: 0, False: 3.59k]
  ------------------
 1685|      0|        return false;
 1686|      0|    }
 1687|       |
 1688|       |    // get data count
 1689|  3.59k|    if (fdata->plugin_query_data_pair_count(contract_address, &plugin_data_pair_count) !=
  ------------------
  |  Branch (1689:9): [True: 0, False: 3.59k]
  ------------------
 1690|  3.59k|        STELLAR_PLUGIN_RESULT_OK) {
 1691|      0|        return false;
 1692|      0|    }
 1693|       |
 1694|  3.59k|    return plugin_data_pair_count != 0;
 1695|  3.59k|}
formatter.c:format_operation_source_prepare_for_invoke_host_function_op:
 2025|  4.66k|static bool format_operation_source_prepare_for_invoke_host_function_op(formatter_data_t *fdata) {
 2026|  4.66k|    if (fdata->envelope->type != ENVELOPE_TYPE_SOROBAN_AUTHORIZATION &&
  ------------------
  |  Branch (2026:9): [True: 447, False: 4.22k]
  ------------------
 2027|  4.66k|        fdata->envelope->tx_details.tx.op_details.source_account_present) {
  ------------------
  |  Branch (2027:9): [True: 181, False: 266]
  ------------------
 2028|       |        // If the source exists, when the user clicks the next button,
 2029|       |        // it will jump to the page showing the source
 2030|    181|        FORMATTER_CHECK(
  ------------------
  |  |   30|    181|    {                           \
  |  |   31|    181|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 181]
  |  |  ------------------
  |  |   32|    181|    }
  ------------------
 2031|    181|            push_to_formatter_stack(&format_operation_source_for_invoke_host_function_op))
 2032|  4.48k|    } else {
 2033|  4.48k|        uint8_t sub_invocations_count =
 2034|  4.48k|            fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2034:13): [True: 4.22k, False: 266]
  ------------------
 2035|  4.48k|                ? fdata->envelope->soroban_authorization.sub_invocations_count
 2036|  4.48k|                : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2037|    266|                      .sub_invocations_count;
 2038|  4.48k|        if (sub_invocations_count > 0) {
  ------------------
  |  Branch (2038:13): [True: 1.00k, False: 3.48k]
  ------------------
 2039|  1.00k|            formatter_index = 0;
 2040|  1.00k|            FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_start))
  ------------------
  |  |   30|  1.00k|    {                           \
  |  |   31|  1.00k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.00k]
  |  |  ------------------
  |  |   32|  1.00k|    }
  ------------------
 2041|  3.48k|        } else {
 2042|  3.48k|            FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  3.48k|    {                           \
  |  |   31|  3.48k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 29, False: 3.45k]
  |  |  ------------------
  |  |   32|  3.48k|    }
  ------------------
 2043|  3.48k|        }
 2044|  4.48k|    }
 2045|  4.64k|    return true;
 2046|  4.66k|}
formatter.c:format_operation_source_for_invoke_host_function_op:
 1986|    181|static bool format_operation_source_for_invoke_host_function_op(formatter_data_t *fdata) {
 1987|    181|    STRLCPY(fdata->caption, "Op Source", fdata->caption_len);
  ------------------
  |  |   35|    181|    {                                         \
  |  |   36|    181|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    181|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 181]
  |  |  ------------------
  |  |   38|    181|    }
  ------------------
 1988|    181|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (1988:9): [True: 181, False: 0]
  ------------------
 1989|    181|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (1989:9): [True: 178, False: 3]
  ------------------
 1990|    181|        fdata->envelope->tx_details.tx.op_details.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (1990:9): [True: 177, False: 1]
  ------------------
 1991|    181|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (1991:9): [True: 125, False: 52]
  ------------------
 1992|    177|               fdata->signing_key,
 1993|    177|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0 &&
  ------------------
  |  |   18|    177|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 1994|    181|        memcmp(fdata->envelope->tx_details.tx.op_details.source_account.ed25519,
  ------------------
  |  Branch (1994:9): [True: 95, False: 30]
  ------------------
 1995|    125|               fdata->signing_key,
 1996|    125|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|    125|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
 1997|     95|        FORMATTER_CHECK(
  ------------------
  |  |   30|     95|    {                           \
  |  |   31|     95|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 95]
  |  |  ------------------
  |  |   32|     95|    }
  ------------------
 1998|     95|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
 1999|     95|                                fdata->value,
 2000|     95|                                fdata->value_len,
 2001|     95|                                6,
 2002|     95|                                6))
 2003|     95|    } else {
 2004|     86|        FORMATTER_CHECK(
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 2005|     86|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
 2006|     86|                                fdata->value,
 2007|     86|                                fdata->value_len,
 2008|     86|                                0,
 2009|     86|                                0))
 2010|     86|    }
 2011|    181|    uint8_t sub_invocations_count =
 2012|    181|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (2012:9): [True: 0, False: 181]
  ------------------
 2013|    181|            ? fdata->envelope->soroban_authorization.sub_invocations_count
 2014|    181|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 2015|    181|                  .sub_invocations_count;
 2016|    181|    if (sub_invocations_count > 0) {
  ------------------
  |  Branch (2016:9): [True: 86, False: 95]
  ------------------
 2017|     86|        formatter_index = 0;
 2018|     86|        FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_start))
  ------------------
  |  |   30|     86|    {                           \
  |  |   31|     86|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 86]
  |  |  ------------------
  |  |   32|     86|    }
  ------------------
 2019|     95|    } else {
 2020|     95|        FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|     95|    {                           \
  |  |   31|     95|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 95]
  |  |  ------------------
  |  |   32|     95|    }
  ------------------
 2021|     95|    }
 2022|    181|    return true;
 2023|    181|}
formatter.c:format_sub_invocation_start:
 1939|  5.97k|static bool format_sub_invocation_start(formatter_data_t *fdata) {
 1940|  5.97k|    uint8_t sub_invocation_index = 0;
 1941|  5.97k|    uint8_t sub_invocations_count = 0;
 1942|  5.97k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1942:9): [True: 5.54k, False: 431]
  ------------------
 1943|  5.54k|        sub_invocation_index = fdata->envelope->soroban_authorization.sub_invocation_index;
 1944|  5.54k|        sub_invocations_count = fdata->envelope->soroban_authorization.sub_invocations_count;
 1945|  5.54k|    } else {
 1946|    431|        sub_invocation_index =
 1947|    431|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocation_index;
 1948|    431|        sub_invocations_count =
 1949|    431|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocations_count;
 1950|    431|    }
 1951|       |
 1952|  5.97k|    STRLCPY(fdata->caption, "Nested Authorization", fdata->caption_len);
  ------------------
  |  |   35|  5.97k|    {                                         \
  |  |   36|  5.97k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  5.97k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.97k]
  |  |  ------------------
  |  |   38|  5.97k|    }
  ------------------
 1953|       |
 1954|  5.97k|    FORMATTER_CHECK(print_uint64_num(sub_invocation_index + 1, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  5.97k|    {                           \
  |  |   31|  5.97k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.97k]
  |  |  ------------------
  |  |   32|  5.97k|    }
  ------------------
 1955|  5.97k|    STRLCAT(fdata->value, " of ", fdata->value_len)
  ------------------
  |  |   41|  5.97k|    {                                         \
  |  |   42|  5.97k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  5.97k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 5.97k]
  |  |  ------------------
  |  |   44|  5.97k|    }
  ------------------
 1956|  5.97k|    FORMATTER_CHECK(print_uint64_num(sub_invocations_count,
  ------------------
  |  |   30|  5.97k|    {                           \
  |  |   31|  5.97k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.97k]
  |  |  ------------------
  |  |   32|  5.97k|    }
  ------------------
 1957|  5.97k|                                     fdata->value + strlen(fdata->value),
 1958|  5.97k|                                     fdata->value_len - strlen(fdata->value)))
 1959|       |
 1960|  5.97k|    buffer_t buffer = {
 1961|  5.97k|        .ptr = fdata->raw_data,
 1962|  5.97k|        .size = fdata->raw_data_len,
 1963|  5.97k|        .offset = fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1963:19): [True: 5.54k, False: 431]
  ------------------
 1964|  5.97k|                      ? fdata->envelope->soroban_authorization
 1965|  5.54k|                            .sub_invocation_positions[sub_invocation_index]
 1966|  5.97k|                      : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1967|    431|                            .sub_invocation_positions[sub_invocation_index]};
 1968|       |
 1969|       |    // here we parse the sub-invocation, and store it in the invoke_contract_args
 1970|  5.97k|    FORMATTER_CHECK(parse_auth_function(
  ------------------
  |  |   30|  5.97k|    {                           \
  |  |   31|  23.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.97k]
  |  |  |  Branch (31:15): [True: 5.54k, False: 431]
  |  |  |  Branch (31:15): [True: 5.54k, False: 431]
  |  |  ------------------
  |  |   32|  5.97k|    }
  ------------------
 1971|  5.97k|        &buffer,
 1972|  5.97k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
 1973|  5.97k|            ? &fdata->envelope->soroban_authorization.auth_function_type
 1974|  5.97k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.auth_function_type,
 1975|  5.97k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
 1976|  5.97k|            ? &fdata->envelope->soroban_authorization.invoke_contract_args
 1977|  5.97k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1978|  5.97k|                   .invoke_contract_args))
 1979|       |
 1980|  5.97k|    FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_auth_function))
  ------------------
  |  |   30|  5.97k|    {                           \
  |  |   31|  5.97k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.97k]
  |  |  ------------------
  |  |   32|  5.97k|    }
  ------------------
 1981|  5.97k|    return true;
 1982|  5.97k|}
formatter.c:format_sub_invocation_auth_function:
 1915|  5.97k|static bool format_sub_invocation_auth_function(formatter_data_t *fdata) {
 1916|  5.97k|    soroban_authorization_function_type_t auth_function_type =
 1917|  5.97k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1917:9): [True: 5.54k, False: 431]
  ------------------
 1918|  5.97k|            ? fdata->envelope->soroban_authorization.auth_function_type
 1919|  5.97k|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.auth_function_type;
 1920|  5.97k|    PRINTF("auth_function_type: %d\n", auth_function_type);
 1921|  5.97k|    switch (auth_function_type) {
 1922|  5.79k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
  ------------------
  |  Branch (1922:9): [True: 5.79k, False: 182]
  ------------------
 1923|  5.79k|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|  5.79k|    {                                         \
  |  |   36|  5.79k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  5.79k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.79k]
  |  |  ------------------
  |  |   38|  5.79k|    }
  ------------------
 1924|  5.79k|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|  5.79k|    {                                         \
  |  |   36|  5.79k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  5.79k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.79k]
  |  |  ------------------
  |  |   38|  5.79k|    }
  ------------------
 1925|  5.79k|            FORMATTER_CHECK(
  ------------------
  |  |   30|  5.79k|    {                           \
  |  |   31|  5.79k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.79k]
  |  |  ------------------
  |  |   32|  5.79k|    }
  ------------------
 1926|  5.79k|                push_to_formatter_stack(&format_sub_invocation_invoke_host_function_contract_id));
 1927|  5.79k|            break;
 1928|    182|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1928:9): [True: 182, False: 5.79k]
  ------------------
 1929|    182|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    182|    {                                         \
  |  |   36|    182|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    182|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 182]
  |  |  ------------------
  |  |   38|    182|    }
  ------------------
 1930|    182|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|    182|    {                                         \
  |  |   36|    182|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    182|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 182]
  |  |  ------------------
  |  |   38|    182|    }
  ------------------
 1931|    182|            FORMATTER_CHECK(format_next_sub_invocation(fdata));
  ------------------
  |  |   30|    182|    {                           \
  |  |   31|    182|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 182]
  |  |  ------------------
  |  |   32|    182|    }
  ------------------
 1932|    182|            break;
 1933|      0|        default:
  ------------------
  |  Branch (1933:9): [True: 0, False: 5.97k]
  ------------------
 1934|      0|            return false;
 1935|  5.97k|    }
 1936|  5.97k|    return true;
 1937|  5.97k|}
formatter.c:format_sub_invocation_invoke_host_function_contract_id:
 1898|  5.79k|static bool format_sub_invocation_invoke_host_function_contract_id(formatter_data_t *fdata) {
 1899|  5.79k|    invoke_contract_args_t invoke_contract_args;
 1900|  5.79k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1900:9): [True: 5.40k, False: 391]
  ------------------
 1901|  5.40k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1902|  5.40k|    } else {
 1903|    391|        invoke_contract_args =
 1904|    391|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1905|    391|    }
 1906|       |
 1907|  5.79k|    STRLCPY(fdata->caption, "Contract ID", fdata->caption_len);
  ------------------
  |  |   35|  5.79k|    {                                         \
  |  |   36|  5.79k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  5.79k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.79k]
  |  |  ------------------
  |  |   38|  5.79k|    }
  ------------------
 1908|       |
 1909|  5.79k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  5.79k|    {                           \
  |  |   31|  5.79k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.79k]
  |  |  ------------------
  |  |   32|  5.79k|    }
  ------------------
 1910|  5.79k|        print_sc_address(&invoke_contract_args.address, fdata->value, fdata->value_len, 0, 0))
 1911|  5.79k|    push_to_formatter_stack(&format_sub_invocation_invoke_host_function_func_name);
 1912|  5.79k|    return true;
 1913|  5.79k|}
formatter.c:format_sub_invocation_invoke_host_function_func_name:
 1864|  5.79k|static bool format_sub_invocation_invoke_host_function_func_name(formatter_data_t *fdata) {
 1865|  5.79k|    invoke_contract_args_t invoke_contract_args;
 1866|  5.79k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1866:9): [True: 5.40k, False: 391]
  ------------------
 1867|  5.40k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1868|  5.40k|    } else {
 1869|    391|        invoke_contract_args =
 1870|    391|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1871|    391|    }
 1872|  5.79k|    STRLCPY(fdata->caption, "Function", fdata->caption_len);
  ------------------
  |  |   35|  5.79k|    {                                         \
  |  |   36|  5.79k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  5.79k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5.79k]
  |  |  ------------------
  |  |   38|  5.79k|    }
  ------------------
 1873|  5.79k|    FORMATTER_CHECK(print_string(fdata->value,
  ------------------
  |  |   30|  5.79k|    {                           \
  |  |   31|  5.79k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 5.79k]
  |  |  ------------------
  |  |   32|  5.79k|    }
  ------------------
 1874|  5.79k|                                 fdata->value_len,
 1875|  5.79k|                                 invoke_contract_args.function.name,
 1876|  5.79k|                                 invoke_contract_args.function.name_size))
 1877|       |
 1878|  5.79k|    uint8_t data_count = should_move_control_to_plugin(fdata);
 1879|  5.79k|    if (data_count == 0) {
  ------------------
  |  Branch (1879:9): [True: 2.52k, False: 3.26k]
  ------------------
 1880|       |        // we should not move control to plugin
 1881|  2.52k|        if (invoke_contract_args.parameters_length == 0) {
  ------------------
  |  Branch (1881:13): [True: 1.53k, False: 987]
  ------------------
 1882|  1.53k|            return format_next_sub_invocation(fdata);
 1883|  1.53k|        } else {
 1884|    987|            parameters_index = 0;
 1885|    987|            FORMATTER_CHECK(
  ------------------
  |  |   30|    987|    {                           \
  |  |   31|    987|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 987]
  |  |  ------------------
  |  |   32|    987|    }
  ------------------
 1886|    987|                push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args))
 1887|    987|        }
 1888|  3.26k|    } else {
 1889|  3.26k|        PRINTF("we should move control to plugin\n");
 1890|  3.26k|        parameters_index = 0;
 1891|  3.26k|        FORMATTER_CHECK(
  ------------------
  |  |   30|  3.26k|    {                           \
  |  |   31|  3.26k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 3.26k]
  |  |  ------------------
  |  |   32|  3.26k|    }
  ------------------
 1892|  3.26k|            push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args_with_plugin))
 1893|  3.26k|    }
 1894|       |
 1895|  4.25k|    return true;
 1896|  5.79k|}
formatter.c:format_sub_invocation_invoke_host_function_args:
 1792|  2.92k|static bool format_sub_invocation_invoke_host_function_args(formatter_data_t *fdata) {
 1793|  2.92k|    invoke_contract_args_t invoke_contract_args;
 1794|  2.92k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1794:9): [True: 2.73k, False: 195]
  ------------------
 1795|  2.73k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1796|  2.73k|    } else {
 1797|    195|        invoke_contract_args =
 1798|    195|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1799|    195|    }
 1800|       |
 1801|  2.92k|    size_t length;
 1802|  2.92k|    STRLCPY(fdata->caption, "Arg ", fdata->caption_len);
  ------------------
  |  |   35|  2.92k|    {                                         \
  |  |   36|  2.92k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.92k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.92k]
  |  |  ------------------
  |  |   38|  2.92k|    }
  ------------------
 1803|  2.92k|    length = strlen(fdata->caption);
 1804|  2.92k|    FORMATTER_CHECK(print_uint64_num(parameters_index + 1,
  ------------------
  |  |   30|  2.92k|    {                           \
  |  |   31|  2.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.92k]
  |  |  ------------------
  |  |   32|  2.92k|    }
  ------------------
 1805|  2.92k|                                     fdata->caption + length,
 1806|  2.92k|                                     fdata->caption_len - length))
 1807|       |
 1808|  2.92k|    STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  2.92k|    {                                         \
  |  |   42|  2.92k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  2.92k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 2.92k]
  |  |  ------------------
  |  |   44|  2.92k|    }
  ------------------
 1809|  2.92k|    length = strlen(fdata->caption);
 1810|  2.92k|    FORMATTER_CHECK(print_uint64_num(invoke_contract_args.parameters_length,
  ------------------
  |  |   30|  2.92k|    {                           \
  |  |   31|  2.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 2.92k]
  |  |  ------------------
  |  |   32|  2.92k|    }
  ------------------
 1811|  2.92k|                                     fdata->caption + length,
 1812|  2.92k|                                     fdata->caption_len - length))
 1813|       |
 1814|  2.92k|    buffer_t buffer = {.ptr = fdata->raw_data,
 1815|  2.92k|                       .size = fdata->raw_data_len,
 1816|  2.92k|                       .offset = invoke_contract_args.parameters_position};
 1817|       |    // Content
 1818|  10.4k|    for (uint8_t i = 0; i < parameters_index; i++) {
  ------------------
  |  Branch (1818:25): [True: 7.47k, False: 2.92k]
  ------------------
 1819|  7.47k|        FORMATTER_CHECK(read_scval_advance(&buffer))
  ------------------
  |  |   30|  7.47k|    {                           \
  |  |   31|  7.47k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7.47k]
  |  |  ------------------
  |  |   32|  7.47k|    }
  ------------------
 1820|  7.47k|    }
 1821|       |
 1822|  2.92k|    FORMATTER_CHECK(print_scval(buffer, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  2.92k|    {                           \
  |  |   31|  2.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 82, False: 2.84k]
  |  |  ------------------
  |  |   32|  2.92k|    }
  ------------------
 1823|       |
 1824|  2.84k|    parameters_index++;
 1825|  2.84k|    if (parameters_index == invoke_contract_args.parameters_length) {
  ------------------
  |  Branch (1825:9): [True: 905, False: 1.93k]
  ------------------
 1826|    905|        return format_next_sub_invocation(fdata);
 1827|  1.93k|    } else {
 1828|  1.93k|        FORMATTER_CHECK(push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args))
  ------------------
  |  |   30|  1.93k|    {                           \
  |  |   31|  1.93k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.93k]
  |  |  ------------------
  |  |   32|  1.93k|    }
  ------------------
 1829|  1.93k|    }
 1830|  1.93k|    return true;
 1831|  2.84k|}
formatter.c:print_scval:
 1697|  25.5k|static bool print_scval(buffer_t buffer, char *value, uint8_t value_len) {
 1698|  25.5k|    uint32_t sc_type;
 1699|  25.5k|    FORMATTER_CHECK(parse_uint32(&buffer, &sc_type))
  ------------------
  |  |   30|  25.5k|    {                           \
  |  |   31|  25.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 25.5k]
  |  |  ------------------
  |  |   32|  25.5k|    }
  ------------------
 1700|       |
 1701|  25.5k|    switch (sc_type) {
 1702|  14.6k|        case SCV_BOOL: {
  ------------------
  |  Branch (1702:9): [True: 14.6k, False: 10.8k]
  ------------------
 1703|  14.6k|            bool b;
 1704|  14.6k|            FORMATTER_CHECK(parse_bool(&buffer, &b))
  ------------------
  |  |   30|  14.6k|    {                           \
  |  |   31|  14.6k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1.48k, False: 13.1k]
  |  |  ------------------
  |  |   32|  14.6k|    }
  ------------------
 1705|  13.1k|            STRLCPY(value, b ? "true" : "false", value_len);
  ------------------
  |  |   35|  13.1k|    {                                         \
  |  |   36|  26.3k|        size_t len = strlcpy(dst, src, size); \
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 38, False: 13.1k]
  |  |  ------------------
  |  |   37|  13.1k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 13.1k]
  |  |  ------------------
  |  |   38|  13.1k|    }
  ------------------
 1706|  13.1k|            break;
 1707|  13.1k|        }
 1708|    684|        case SCV_VOID:
  ------------------
  |  Branch (1708:9): [True: 684, False: 24.8k]
  ------------------
 1709|    684|            STRLCPY(value, "[void]", value_len);
  ------------------
  |  |   35|    684|    {                                         \
  |  |   36|    684|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    684|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 684]
  |  |  ------------------
  |  |   38|    684|    }
  ------------------
 1710|    684|            break;  // void
 1711|    501|        case SCV_U32:
  ------------------
  |  Branch (1711:9): [True: 501, False: 25.0k]
  ------------------
 1712|    501|            FORMATTER_CHECK(print_uint32(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    501|    {                           \
  |  |   31|    501|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 501]
  |  |  ------------------
  |  |   32|    501|    }
  ------------------
 1713|    501|            break;
 1714|  1.03k|        case SCV_I32:
  ------------------
  |  Branch (1714:9): [True: 1.03k, False: 24.4k]
  ------------------
 1715|  1.03k|            FORMATTER_CHECK(print_int32(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|  1.03k|    {                           \
  |  |   31|  1.03k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.03k]
  |  |  ------------------
  |  |   32|  1.03k|    }
  ------------------
 1716|  1.03k|            break;
 1717|     95|        case SCV_U64:
  ------------------
  |  Branch (1717:9): [True: 95, False: 25.4k]
  ------------------
 1718|     95|            FORMATTER_CHECK(print_uint64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|     95|    {                           \
  |  |   31|     95|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 95]
  |  |  ------------------
  |  |   32|     95|    }
  ------------------
 1719|     95|            break;
 1720|    189|        case SCV_I64:
  ------------------
  |  Branch (1720:9): [True: 189, False: 25.3k]
  ------------------
 1721|    189|            FORMATTER_CHECK(print_int64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    189|    {                           \
  |  |   31|    189|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 189]
  |  |  ------------------
  |  |   32|    189|    }
  ------------------
 1722|    189|            break;
 1723|  1.25k|        case SCV_TIMEPOINT: {
  ------------------
  |  Branch (1723:9): [True: 1.25k, False: 24.2k]
  ------------------
 1724|  1.25k|            uint64_t timepoint;
 1725|  1.25k|            FORMATTER_CHECK(parse_uint64(&buffer, &timepoint));
  ------------------
  |  |   30|  1.25k|    {                           \
  |  |   31|  1.25k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.25k]
  |  |  ------------------
  |  |   32|  1.25k|    }
  ------------------
 1726|  1.25k|            FORMATTER_CHECK(print_time(timepoint, value, value_len));
  ------------------
  |  |   30|  1.25k|    {                           \
  |  |   31|  1.25k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 1.03k, False: 219]
  |  |  ------------------
  |  |   32|  1.25k|    }
  ------------------
 1727|    219|            break;
 1728|  1.25k|        }
 1729|    314|        case SCV_DURATION:
  ------------------
  |  Branch (1729:9): [True: 314, False: 25.2k]
  ------------------
 1730|    314|            FORMATTER_CHECK(print_int64(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    314|    {                           \
  |  |   31|    314|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 314]
  |  |  ------------------
  |  |   32|    314|    }
  ------------------
 1731|    314|            break;
 1732|    680|        case SCV_U128:
  ------------------
  |  Branch (1732:9): [True: 680, False: 24.8k]
  ------------------
 1733|    680|            FORMATTER_CHECK(print_uint128(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    680|    {                           \
  |  |   31|    680|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 680]
  |  |  ------------------
  |  |   32|    680|    }
  ------------------
 1734|    680|            break;
 1735|  1.45k|        case SCV_I128:
  ------------------
  |  Branch (1735:9): [True: 1.45k, False: 24.0k]
  ------------------
 1736|  1.45k|            FORMATTER_CHECK(print_int128(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|  1.45k|    {                           \
  |  |   31|  1.45k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.45k]
  |  |  ------------------
  |  |   32|  1.45k|    }
  ------------------
 1737|  1.45k|            break;
 1738|    307|        case SCV_U256:
  ------------------
  |  Branch (1738:9): [True: 307, False: 25.2k]
  ------------------
 1739|    307|            FORMATTER_CHECK(print_uint256(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    307|    {                           \
  |  |   31|    307|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 307]
  |  |  ------------------
  |  |   32|    307|    }
  ------------------
 1740|    307|            break;
 1741|    367|        case SCV_I256:
  ------------------
  |  Branch (1741:9): [True: 367, False: 25.1k]
  ------------------
 1742|    367|            FORMATTER_CHECK(print_int256(buffer.ptr + buffer.offset, 0, value, value_len, true));
  ------------------
  |  |   30|    367|    {                           \
  |  |   31|    367|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 367]
  |  |  ------------------
  |  |   32|    367|    }
  ------------------
 1743|    367|            break;
 1744|    137|        case SCV_BYTES:
  ------------------
  |  Branch (1744:9): [True: 137, False: 25.3k]
  ------------------
 1745|    137|            STRLCPY(value, "[Bytes Data]", value_len);
  ------------------
  |  |   35|    137|    {                                         \
  |  |   36|    137|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    137|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 137]
  |  |  ------------------
  |  |   38|    137|    }
  ------------------
 1746|    137|            break;
 1747|    535|        case SCV_STRING: {
  ------------------
  |  Branch (1747:9): [True: 535, False: 24.9k]
  ------------------
 1748|    535|            scv_string_t scv_string;
 1749|    535|            FORMATTER_CHECK(parse_scv_string(&buffer, &scv_string));
  ------------------
  |  |   30|    535|    {                           \
  |  |   31|    535|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 4, False: 531]
  |  |  ------------------
  |  |   32|    535|    }
  ------------------
 1750|    531|            FORMATTER_CHECK(print_scv_string(&scv_string, value, value_len));
  ------------------
  |  |   30|    531|    {                           \
  |  |   31|    531|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 531]
  |  |  ------------------
  |  |   32|    531|    }
  ------------------
 1751|    531|            break;
 1752|    531|        }
 1753|    153|        case SCV_SYMBOL: {
  ------------------
  |  Branch (1753:9): [True: 153, False: 25.3k]
  ------------------
 1754|    153|            scv_symbol_t scv_symbol;
 1755|    153|            FORMATTER_CHECK(parse_scv_symbol(&buffer, &scv_symbol));
  ------------------
  |  |   30|    153|    {                           \
  |  |   31|    153|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 10, False: 143]
  |  |  ------------------
  |  |   32|    153|    }
  ------------------
 1756|    143|            FORMATTER_CHECK(print_scv_symbol(&scv_symbol, value, value_len));
  ------------------
  |  |   30|    143|    {                           \
  |  |   31|    143|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 7, False: 136]
  |  |  ------------------
  |  |   32|    143|    }
  ------------------
 1757|    136|            break;
 1758|    143|        }
 1759|    490|        case SCV_ADDRESS: {
  ------------------
  |  Branch (1759:9): [True: 490, False: 25.0k]
  ------------------
 1760|    490|            sc_address_t sc_address;
 1761|    490|            FORMATTER_CHECK(parse_sc_address(&buffer, &sc_address));
  ------------------
  |  |   30|    490|    {                           \
  |  |   31|    490|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 490]
  |  |  ------------------
  |  |   32|    490|    }
  ------------------
 1762|    490|            FORMATTER_CHECK(print_sc_address(&sc_address, value, value_len, 0, 0));
  ------------------
  |  |   30|    490|    {                           \
  |  |   31|    490|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 490]
  |  |  ------------------
  |  |   32|    490|    }
  ------------------
 1763|    490|            break;
 1764|    490|        }
 1765|  2.68k|        default:
  ------------------
  |  Branch (1765:9): [True: 2.68k, False: 22.8k]
  ------------------
 1766|  2.68k|            STRLCPY(value, "[unable to display]", value_len);
  ------------------
  |  |   35|  2.68k|    {                                         \
  |  |   36|  2.68k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  2.68k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 2.68k]
  |  |  ------------------
  |  |   38|  2.68k|    }
  ------------------
 1767|  25.5k|    }
 1768|  22.9k|    return true;
 1769|  25.5k|}
formatter.c:format_sub_invocation_invoke_host_function_args_with_plugin:
 1833|  9.80k|static bool format_sub_invocation_invoke_host_function_args_with_plugin(formatter_data_t *fdata) {
 1834|  9.80k|    invoke_contract_args_t invoke_contract_args;
 1835|  9.80k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1835:9): [True: 9.80k, False: 0]
  ------------------
 1836|  9.80k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 1837|  9.80k|    } else {
 1838|      0|        invoke_contract_args =
 1839|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 1840|      0|    }
 1841|       |
 1842|  9.80k|    const uint8_t *contract_address = invoke_contract_args.address.address;
 1843|       |
 1844|       |    // get data pair
 1845|  9.80k|    if (fdata->plugin_query_data_pair(contract_address,
  ------------------
  |  Branch (1845:9): [True: 0, False: 9.80k]
  ------------------
 1846|  9.80k|                                      parameters_index,
 1847|  9.80k|                                      fdata->caption,
 1848|  9.80k|                                      fdata->caption_len,
 1849|  9.80k|                                      fdata->value,
 1850|  9.80k|                                      fdata->value_len) != STELLAR_PLUGIN_RESULT_OK) {
 1851|      0|        return false;
 1852|      0|    }
 1853|       |
 1854|  9.80k|    parameters_index++;
 1855|  9.80k|    if (parameters_index == plugin_data_pair_count) {
  ------------------
  |  Branch (1855:9): [True: 3.26k, False: 6.53k]
  ------------------
 1856|  3.26k|        return format_next_sub_invocation(fdata);
 1857|  6.53k|    } else {
 1858|  6.53k|        FORMATTER_CHECK(
  ------------------
  |  |   30|  6.53k|    {                           \
  |  |   31|  6.53k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 6.53k]
  |  |  ------------------
  |  |   32|  6.53k|    }
  ------------------
 1859|  6.53k|            push_to_formatter_stack(&format_sub_invocation_invoke_host_function_args_with_plugin))
 1860|  6.53k|    }
 1861|  6.53k|    return true;
 1862|  9.80k|}
formatter.c:format_next_sub_invocation:
 1772|  5.89k|static bool format_next_sub_invocation(formatter_data_t *fdata) {
 1773|  5.89k|    uint8_t sub_invocations_count =
 1774|  5.89k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1774:9): [True: 5.46k, False: 428]
  ------------------
 1775|  5.89k|            ? fdata->envelope->soroban_authorization.sub_invocations_count
 1776|  5.89k|            : fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1777|    428|                  .sub_invocations_count;
 1778|  5.89k|    uint8_t *sub_invocation_index =
 1779|  5.89k|        fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  ------------------
  |  Branch (1779:9): [True: 5.46k, False: 428]
  ------------------
 1780|  5.89k|            ? &fdata->envelope->soroban_authorization.sub_invocation_index
 1781|  5.89k|            : &fdata->envelope->tx_details.tx.op_details.invoke_host_function_op
 1782|    428|                   .sub_invocation_index;
 1783|  5.89k|    (*sub_invocation_index)++;
 1784|  5.89k|    if (*sub_invocation_index == sub_invocations_count) {
  ------------------
  |  Branch (1784:9): [True: 1.01k, False: 4.88k]
  ------------------
 1785|  1.01k|        return push_to_formatter_stack(NULL);
 1786|  4.88k|    } else {
 1787|  4.88k|        formatter_index = 0;
 1788|  4.88k|        return push_to_formatter_stack(format_sub_invocation_start);
 1789|  4.88k|    }
 1790|  5.89k|}
formatter.c:format_invoke_host_function_args:
 2048|  22.6k|static bool format_invoke_host_function_args(formatter_data_t *fdata) {
 2049|  22.6k|    invoke_contract_args_t invoke_contract_args;
 2050|  22.6k|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2050:9): [True: 21.9k, False: 641]
  ------------------
 2051|  21.9k|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2052|  21.9k|    } else {
 2053|    641|        invoke_contract_args =
 2054|    641|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2055|    641|    }
 2056|       |
 2057|  22.6k|    size_t length;
 2058|  22.6k|    STRLCPY(fdata->caption, "Arg ", fdata->caption_len);
  ------------------
  |  |   35|  22.6k|    {                                         \
  |  |   36|  22.6k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  22.6k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 22.6k]
  |  |  ------------------
  |  |   38|  22.6k|    }
  ------------------
 2059|  22.6k|    length = strlen(fdata->caption);
 2060|  22.6k|    FORMATTER_CHECK(print_uint64_num(parameters_index + 1,
  ------------------
  |  |   30|  22.6k|    {                           \
  |  |   31|  22.6k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 22.6k]
  |  |  ------------------
  |  |   32|  22.6k|    }
  ------------------
 2061|  22.6k|                                     fdata->caption + length,
 2062|  22.6k|                                     fdata->caption_len - length))
 2063|       |
 2064|  22.6k|    STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  22.6k|    {                                         \
  |  |   42|  22.6k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  22.6k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 22.6k]
  |  |  ------------------
  |  |   44|  22.6k|    }
  ------------------
 2065|  22.6k|    length = strlen(fdata->caption);
 2066|  22.6k|    FORMATTER_CHECK(print_uint64_num(invoke_contract_args.parameters_length,
  ------------------
  |  |   30|  22.6k|    {                           \
  |  |   31|  22.6k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 22.6k]
  |  |  ------------------
  |  |   32|  22.6k|    }
  ------------------
 2067|  22.6k|                                     fdata->caption + length,
 2068|  22.6k|                                     fdata->caption_len - length))
 2069|       |
 2070|  22.6k|    buffer_t buffer = {.ptr = fdata->raw_data,
 2071|  22.6k|                       .size = fdata->raw_data_len,
 2072|  22.6k|                       .offset = invoke_contract_args.parameters_position};
 2073|       |    // Content
 2074|  78.1k|    for (uint8_t i = 0; i < parameters_index; i++) {
  ------------------
  |  Branch (2074:25): [True: 55.5k, False: 22.6k]
  ------------------
 2075|  55.5k|        FORMATTER_CHECK(read_scval_advance(&buffer))
  ------------------
  |  |   30|  55.5k|    {                           \
  |  |   31|  55.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 55.5k]
  |  |  ------------------
  |  |   32|  55.5k|    }
  ------------------
 2076|  55.5k|    }
 2077|       |
 2078|  22.6k|    FORMATTER_CHECK(print_scval(buffer, fdata->value, fdata->value_len))
  ------------------
  |  |   30|  22.6k|    {                           \
  |  |   31|  22.6k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 2.45k, False: 20.1k]
  |  |  ------------------
  |  |   32|  22.6k|    }
  ------------------
 2079|       |
 2080|  20.1k|    parameters_index++;
 2081|  20.1k|    if (parameters_index == invoke_contract_args.parameters_length) {
  ------------------
  |  Branch (2081:9): [True: 2.92k, False: 17.2k]
  ------------------
 2082|  2.92k|        return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2083|  17.2k|    } else {
 2084|  17.2k|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args))
  ------------------
  |  |   30|  17.2k|    {                           \
  |  |   31|  17.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 17.2k]
  |  |  ------------------
  |  |   32|  17.2k|    }
  ------------------
 2085|  17.2k|    }
 2086|  17.2k|    return true;
 2087|  20.1k|}
formatter.c:format_invoke_host_function_args_with_plugin:
 2089|    969|static bool format_invoke_host_function_args_with_plugin(formatter_data_t *fdata) {
 2090|    969|    invoke_contract_args_t invoke_contract_args;
 2091|    969|    if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (2091:9): [True: 969, False: 0]
  ------------------
 2092|    969|        invoke_contract_args = fdata->envelope->soroban_authorization.invoke_contract_args;
 2093|    969|    } else {
 2094|      0|        invoke_contract_args =
 2095|      0|            fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.invoke_contract_args;
 2096|      0|    }
 2097|       |
 2098|    969|    const uint8_t *contract_address = invoke_contract_args.address.address;
 2099|       |
 2100|       |    // get data pair
 2101|    969|    if (fdata->plugin_query_data_pair(contract_address,
  ------------------
  |  Branch (2101:9): [True: 0, False: 969]
  ------------------
 2102|    969|                                      parameters_index,
 2103|    969|                                      fdata->caption,
 2104|    969|                                      fdata->caption_len,
 2105|    969|                                      fdata->value,
 2106|    969|                                      fdata->value_len) != STELLAR_PLUGIN_RESULT_OK) {
 2107|      0|        return false;
 2108|      0|    }
 2109|       |
 2110|    969|    parameters_index++;
 2111|    969|    if (parameters_index == plugin_data_pair_count) {
  ------------------
  |  Branch (2111:9): [True: 323, False: 646]
  ------------------
 2112|       |        // if (fdata->envelope->type == ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
 2113|       |        //     FORMATTER_CHECK(push_to_formatter_stack(NULL))
 2114|       |        // } else {
 2115|       |        //     return format_operation_source_prepare(fdata);
 2116|       |        // }
 2117|    323|        return format_operation_source_prepare_for_invoke_host_function_op(fdata);
 2118|    646|    } else {
 2119|    646|        FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_args_with_plugin))
  ------------------
  |  |   30|    646|    {                           \
  |  |   31|    646|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 646]
  |  |  ------------------
  |  |   32|    646|    }
  ------------------
 2120|    646|    }
 2121|    646|    return true;
 2122|    969|}
formatter.c:format_transaction_info:
 2380|  5.21k|static bool format_transaction_info(formatter_data_t *fdata) {
 2381|  5.21k|    if (fdata->envelope->network != 0) {
  ------------------
  |  Branch (2381:9): [True: 4.92k, False: 287]
  ------------------
 2382|  4.92k|        FORMATTER_CHECK(push_to_formatter_stack(&format_network))
  ------------------
  |  |   30|  4.92k|    {                           \
  |  |   31|  4.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 4.92k]
  |  |  ------------------
  |  |   32|  4.92k|    }
  ------------------
 2383|  4.92k|    } else {
 2384|    287|        return get_tx_details_formatter(fdata);
 2385|    287|    }
 2386|  4.92k|    return true;
 2387|  5.21k|}
formatter.c:push_to_formatter_stack:
   59|   290k|static bool push_to_formatter_stack(format_function_t formatter) {
   60|   290k|    if (formatter_index >= MAX_FORMATTERS_PER_OPERATION) {
  ------------------
  |  |   47|   290k|#define MAX_FORMATTERS_PER_OPERATION 16
  ------------------
  |  Branch (60:9): [True: 29, False: 290k]
  ------------------
   61|     29|        PRINTF("Formatter stack overflow\n");
   62|     29|        return false;
   63|     29|    }
   64|       |
   65|   290k|    formatter_stack[formatter_index++] = formatter;
   66|       |
   67|   290k|    return true;
   68|   290k|}
formatter.c:format_confirm_operation:
 2262|  32.2k|static bool format_confirm_operation(formatter_data_t *fdata) {
 2263|  32.2k|    if (fdata->envelope->tx_details.tx.operations_count > 1) {
  ------------------
  |  Branch (2263:9): [True: 31.3k, False: 973]
  ------------------
 2264|  31.3k|        size_t length;
 2265|  31.3k|        STRLCPY(fdata->caption, "Operation ", fdata->caption_len);
  ------------------
  |  |   35|  31.3k|    {                                         \
  |  |   36|  31.3k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  31.3k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 31.3k]
  |  |  ------------------
  |  |   38|  31.3k|    }
  ------------------
 2266|  31.3k|        length = strlen(fdata->caption);
 2267|  31.3k|        FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.operation_index + 1,
  ------------------
  |  |   30|  31.3k|    {                           \
  |  |   31|  31.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31.3k]
  |  |  ------------------
  |  |   32|  31.3k|    }
  ------------------
 2268|  31.3k|                                         fdata->caption + length,
 2269|  31.3k|                                         fdata->caption_len - length))
 2270|  31.3k|        STRLCAT(fdata->caption, " of ", fdata->caption_len);
  ------------------
  |  |   41|  31.3k|    {                                         \
  |  |   42|  31.3k|        size_t len = strlcat(dst, src, size); \
  |  |   43|  31.3k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 31.3k]
  |  |  ------------------
  |  |   44|  31.3k|    }
  ------------------
 2271|  31.3k|        length = strlen(fdata->caption);
 2272|  31.3k|        FORMATTER_CHECK(print_uint64_num(fdata->envelope->tx_details.tx.operations_count,
  ------------------
  |  |   30|  31.3k|    {                           \
  |  |   31|  31.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31.3k]
  |  |  ------------------
  |  |   32|  31.3k|    }
  ------------------
 2273|  31.3k|                                         fdata->caption + length,
 2274|  31.3k|                                         fdata->caption_len - length))
 2275|       |
 2276|  31.3k|        FORMATTER_CHECK(push_to_formatter_stack(
  ------------------
  |  |   30|  31.3k|    {                           \
  |  |   31|  31.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 31.3k]
  |  |  ------------------
  |  |   32|  31.3k|    }
  ------------------
 2277|  31.3k|            ((format_function_t) PIC(formatters[fdata->envelope->tx_details.tx.op_details.type]))));
 2278|  31.3k|    } else {
 2279|    973|        format_function_t func = PIC(formatters[fdata->envelope->tx_details.tx.op_details.type]);
  ------------------
  |  |    6|    973|#define PIC(x) x
  ------------------
 2280|    973|        FORMATTER_CHECK(func(fdata));
  ------------------
  |  |   30|    973|    {                           \
  |  |   31|    973|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 10, False: 963]
  |  |  ------------------
  |  |   32|    973|    }
  ------------------
 2281|    963|    }
 2282|  32.2k|    return true;
 2283|  32.2k|}
formatter.c:format_create_account:
 1134|  21.2k|static bool format_create_account(formatter_data_t *fdata) {
 1135|  21.2k|    (void) fdata;
 1136|  21.2k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  21.2k|    {                                         \
  |  |   36|  21.2k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  21.2k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 21.2k]
  |  |  ------------------
  |  |   38|  21.2k|    }
  ------------------
 1137|  21.2k|    STRLCPY(fdata->value, "Create Account", fdata->value_len);
  ------------------
  |  |   35|  21.2k|    {                                         \
  |  |   36|  21.2k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  21.2k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 21.2k]
  |  |  ------------------
  |  |   38|  21.2k|    }
  ------------------
 1138|  21.2k|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_account_destination))
  ------------------
  |  |   30|  21.2k|    {                           \
  |  |   31|  21.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 21.2k]
  |  |  ------------------
  |  |   32|  21.2k|    }
  ------------------
 1139|  21.2k|    return true;
 1140|  21.2k|}
formatter.c:format_create_account_destination:
 1122|  21.2k|static bool format_create_account_destination(formatter_data_t *fdata) {
 1123|  21.2k|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|  21.2k|    {                                         \
  |  |   36|  21.2k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  21.2k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 21.2k]
  |  |  ------------------
  |  |   38|  21.2k|    }
  ------------------
 1124|  21.2k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  21.2k|    {                           \
  |  |   31|  21.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 21.2k]
  |  |  ------------------
  |  |   32|  21.2k|    }
  ------------------
 1125|  21.2k|        print_account_id(fdata->envelope->tx_details.tx.op_details.create_account_op.destination,
 1126|  21.2k|                         fdata->value,
 1127|  21.2k|                         fdata->value_len,
 1128|  21.2k|                         0,
 1129|  21.2k|                         0))
 1130|  21.2k|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_account_amount))
  ------------------
  |  |   30|  21.2k|    {                           \
  |  |   31|  21.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 21.2k]
  |  |  ------------------
  |  |   32|  21.2k|    }
  ------------------
 1131|  21.2k|    return true;
 1132|  21.2k|}
formatter.c:format_create_account_amount:
 1110|  21.2k|static bool format_create_account_amount(formatter_data_t *fdata) {
 1111|  21.2k|    STRLCPY(fdata->caption, "Starting Balance", fdata->caption_len);
  ------------------
  |  |   35|  21.2k|    {                                         \
  |  |   36|  21.2k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  21.2k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 21.2k]
  |  |  ------------------
  |  |   38|  21.2k|    }
  ------------------
 1112|  21.2k|    asset_t asset = {.type = ASSET_TYPE_NATIVE};
 1113|  21.2k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  21.2k|    {                           \
  |  |   31|  21.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 21.2k]
  |  |  ------------------
  |  |   32|  21.2k|    }
  ------------------
 1114|  21.2k|        print_amount(fdata->envelope->tx_details.tx.op_details.create_account_op.starting_balance,
 1115|  21.2k|                     &asset,
 1116|  21.2k|                     fdata->envelope->network,
 1117|  21.2k|                     fdata->value,
 1118|  21.2k|                     fdata->value_len))
 1119|  21.2k|    return format_operation_source_prepare(fdata);
 1120|  21.2k|}
formatter.c:format_operation_source_prepare:
  334|  31.6k|static bool format_operation_source_prepare(formatter_data_t *fdata) {
  335|  31.6k|    if (fdata->envelope->tx_details.tx.op_details.source_account_present) {
  ------------------
  |  Branch (335:9): [True: 959, False: 30.7k]
  ------------------
  336|       |        // If the source exists, when the user clicks the next button,
  337|       |        // it will jump to the page showing the source
  338|    959|        FORMATTER_CHECK(push_to_formatter_stack(&format_operation_source))
  ------------------
  |  |   30|    959|    {                           \
  |  |   31|    959|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 959]
  |  |  ------------------
  |  |   32|    959|    }
  ------------------
  339|  30.7k|    } else {
  340|  30.7k|        FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|  30.7k|    {                           \
  |  |   31|  30.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30.7k]
  |  |  ------------------
  |  |   32|  30.7k|    }
  ------------------
  341|  30.7k|    }
  342|  31.6k|    return true;
  343|  31.6k|}
formatter.c:format_operation_source:
  305|    959|static bool format_operation_source(formatter_data_t *fdata) {
  306|    959|    STRLCPY(fdata->caption, "Op Source", fdata->caption_len);
  ------------------
  |  |   35|    959|    {                                         \
  |  |   36|    959|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    959|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 959]
  |  |  ------------------
  |  |   38|    959|    }
  ------------------
  307|    959|    if (fdata->envelope->type == ENVELOPE_TYPE_TX &&
  ------------------
  |  Branch (307:9): [True: 924, False: 35]
  ------------------
  308|    959|        fdata->envelope->tx_details.tx.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (308:9): [True: 851, False: 73]
  ------------------
  309|    959|        fdata->envelope->tx_details.tx.op_details.source_account.type == KEY_TYPE_ED25519 &&
  ------------------
  |  Branch (309:9): [True: 710, False: 141]
  ------------------
  310|    959|        memcmp(fdata->envelope->tx_details.tx.source_account.ed25519,
  ------------------
  |  Branch (310:9): [True: 447, False: 263]
  ------------------
  311|    710|               fdata->signing_key,
  312|    710|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0 &&
  ------------------
  |  |   18|    710|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  313|    959|        memcmp(fdata->envelope->tx_details.tx.op_details.source_account.ed25519,
  ------------------
  |  Branch (313:9): [True: 260, False: 187]
  ------------------
  314|    447|               fdata->signing_key,
  315|    447|               RAW_ED25519_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |   18|    447|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  316|    260|        FORMATTER_CHECK(
  ------------------
  |  |   30|    260|    {                           \
  |  |   31|    260|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 260]
  |  |  ------------------
  |  |   32|    260|    }
  ------------------
  317|    260|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
  318|    260|                                fdata->value,
  319|    260|                                fdata->value_len,
  320|    260|                                6,
  321|    260|                                6))
  322|    699|    } else {
  323|    699|        FORMATTER_CHECK(
  ------------------
  |  |   30|    699|    {                           \
  |  |   31|    699|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 699]
  |  |  ------------------
  |  |   32|    699|    }
  ------------------
  324|    699|            print_muxed_account(&fdata->envelope->tx_details.tx.op_details.source_account,
  325|    699|                                fdata->value,
  326|    699|                                fdata->value_len,
  327|    699|                                0,
  328|    699|                                0))
  329|    699|    }
  330|    959|    FORMATTER_CHECK(push_to_formatter_stack(NULL))
  ------------------
  |  |   30|    959|    {                           \
  |  |   31|    959|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 959]
  |  |  ------------------
  |  |   32|    959|    }
  ------------------
  331|    959|    return true;
  332|    959|}
formatter.c:format_payment:
 1099|    535|static bool format_payment(formatter_data_t *fdata) {
 1100|    535|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|    535|    {                                         \
  |  |   36|    535|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    535|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 535]
  |  |  ------------------
  |  |   38|    535|    }
  ------------------
 1101|    535|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.payment_op.amount,
  ------------------
  |  |   30|    535|    {                           \
  |  |   31|    535|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 535]
  |  |  ------------------
  |  |   32|    535|    }
  ------------------
 1102|    535|                                 &fdata->envelope->tx_details.tx.op_details.payment_op.asset,
 1103|    535|                                 fdata->envelope->network,
 1104|    535|                                 fdata->value,
 1105|    535|                                 fdata->value_len))
 1106|    535|    FORMATTER_CHECK(push_to_formatter_stack(&format_payment_destination))
  ------------------
  |  |   30|    535|    {                           \
  |  |   31|    535|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 535]
  |  |  ------------------
  |  |   32|    535|    }
  ------------------
 1107|    535|    return true;
 1108|    535|}
formatter.c:format_payment_destination:
 1088|    535|static bool format_payment_destination(formatter_data_t *fdata) {
 1089|    535|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    535|    {                                         \
  |  |   36|    535|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    535|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 535]
  |  |  ------------------
  |  |   38|    535|    }
  ------------------
 1090|    535|    FORMATTER_CHECK(
  ------------------
  |  |   30|    535|    {                           \
  |  |   31|    535|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 535]
  |  |  ------------------
  |  |   32|    535|    }
  ------------------
 1091|    535|        print_muxed_account(&fdata->envelope->tx_details.tx.op_details.payment_op.destination,
 1092|    535|                            fdata->value,
 1093|    535|                            fdata->value_len,
 1094|    535|                            0,
 1095|    535|                            0))
 1096|    535|    return format_operation_source_prepare(fdata);
 1097|    535|}
formatter.c:format_path_payment_strict_receive:
 1041|    297|static bool format_path_payment_strict_receive(formatter_data_t *fdata) {
 1042|    297|    STRLCPY(fdata->caption, "Send Max", fdata->caption_len);
  ------------------
  |  |   35|    297|    {                                         \
  |  |   36|    297|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    297|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 297]
  |  |  ------------------
  |  |   38|    297|    }
  ------------------
 1043|    297|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    297|    {                           \
  |  |   31|    297|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 297]
  |  |  ------------------
  |  |   32|    297|    }
  ------------------
 1044|    297|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.send_max,
 1045|    297|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.send_asset,
 1046|    297|        fdata->envelope->network,
 1047|    297|        fdata->value,
 1048|    297|        fdata->value_len))
 1049|    297|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_receive_destination))
  ------------------
  |  |   30|    297|    {                           \
  |  |   31|    297|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 297]
  |  |  ------------------
  |  |   32|    297|    }
  ------------------
 1050|    297|    return true;
 1051|    297|}
formatter.c:format_path_payment_strict_receive_destination:
 1029|    297|static bool format_path_payment_strict_receive_destination(formatter_data_t *fdata) {
 1030|    297|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    297|    {                                         \
  |  |   36|    297|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    297|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 297]
  |  |  ------------------
  |  |   38|    297|    }
  ------------------
 1031|    297|    FORMATTER_CHECK(print_muxed_account(
  ------------------
  |  |   30|    297|    {                           \
  |  |   31|    297|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 297]
  |  |  ------------------
  |  |   32|    297|    }
  ------------------
 1032|    297|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.destination,
 1033|    297|        fdata->value,
 1034|    297|        fdata->value_len,
 1035|    297|        0,
 1036|    297|        0))
 1037|    297|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_receive_receive))
  ------------------
  |  |   30|    297|    {                           \
  |  |   31|    297|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 297]
  |  |  ------------------
  |  |   32|    297|    }
  ------------------
 1038|    297|    return true;
 1039|    297|}
formatter.c:format_path_payment_strict_receive_receive:
 1018|    297|static bool format_path_payment_strict_receive_receive(formatter_data_t *fdata) {
 1019|    297|    STRLCPY(fdata->caption, "Receive", fdata->caption_len);
  ------------------
  |  |   35|    297|    {                                         \
  |  |   36|    297|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    297|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 297]
  |  |  ------------------
  |  |   38|    297|    }
  ------------------
 1020|    297|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    297|    {                           \
  |  |   31|    297|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 297]
  |  |  ------------------
  |  |   32|    297|    }
  ------------------
 1021|    297|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.dest_amount,
 1022|    297|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_receive_op.dest_asset,
 1023|    297|        fdata->envelope->network,
 1024|    297|        fdata->value,
 1025|    297|        fdata->value_len))
 1026|    297|    return format_operation_source_prepare(fdata);
 1027|    297|}
formatter.c:format_manage_sell_offer:
  897|    231|static bool format_manage_sell_offer(formatter_data_t *fdata) {
  898|    231|    if (!fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.amount) {
  ------------------
  |  Branch (898:9): [True: 40, False: 191]
  ------------------
  899|     40|        STRLCPY(fdata->caption, "Remove Offer", fdata->caption_len);
  ------------------
  |  |   35|     40|    {                                         \
  |  |   36|     40|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     40|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 40]
  |  |  ------------------
  |  |   38|     40|    }
  ------------------
  900|     40|        FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|     40|    {                           \
  |  |   31|     40|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 40]
  |  |  ------------------
  |  |   32|     40|    }
  ------------------
  901|     40|            fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id,
  902|     40|            fdata->value,
  903|     40|            fdata->value_len))
  904|     40|        return format_operation_source_prepare(fdata);
  905|    191|    } else {
  906|    191|        if (fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id) {
  ------------------
  |  Branch (906:13): [True: 145, False: 46]
  ------------------
  907|    145|            STRLCPY(fdata->caption, "Change Offer", fdata->caption_len);
  ------------------
  |  |   35|    145|    {                                         \
  |  |   36|    145|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    145|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 145]
  |  |  ------------------
  |  |   38|    145|    }
  ------------------
  908|    145|            FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|    145|    {                           \
  |  |   31|    145|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 145]
  |  |  ------------------
  |  |   32|    145|    }
  ------------------
  909|    145|                fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.offer_id,
  910|    145|                fdata->value,
  911|    145|                fdata->value_len))
  912|    145|        } else {
  913|     46|            STRLCPY(fdata->caption, "Create Offer", fdata->caption_len);
  ------------------
  |  |   35|     46|    {                                         \
  |  |   36|     46|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     46|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 46]
  |  |  ------------------
  |  |   38|     46|    }
  ------------------
  914|     46|        }
  915|    191|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_buy))
  ------------------
  |  |   30|    191|    {                           \
  |  |   31|    191|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 191]
  |  |  ------------------
  |  |   32|    191|    }
  ------------------
  916|    191|    }
  917|    191|    return true;
  918|    231|}
formatter.c:format_manage_sell_offer_buy:
  886|    191|static bool format_manage_sell_offer_buy(formatter_data_t *fdata) {
  887|    191|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|    191|    {                                         \
  |  |   36|    191|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    191|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 191]
  |  |  ------------------
  |  |   38|    191|    }
  ------------------
  888|    191|    FORMATTER_CHECK(
  ------------------
  |  |   30|    191|    {                           \
  |  |   31|    191|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 191]
  |  |  ------------------
  |  |   32|    191|    }
  ------------------
  889|    191|        print_asset(&fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.buying,
  890|    191|                    fdata->envelope->network,
  891|    191|                    fdata->value,
  892|    191|                    fdata->value_len))
  893|    191|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_sell))
  ------------------
  |  |   30|    191|    {                           \
  |  |   31|    191|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 191]
  |  |  ------------------
  |  |   32|    191|    }
  ------------------
  894|    191|    return true;
  895|    191|}
formatter.c:format_manage_sell_offer_sell:
  874|    191|static bool format_manage_sell_offer_sell(formatter_data_t *fdata) {
  875|    191|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|    191|    {                                         \
  |  |   36|    191|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    191|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 191]
  |  |  ------------------
  |  |   38|    191|    }
  ------------------
  876|    191|    FORMATTER_CHECK(
  ------------------
  |  |   30|    191|    {                           \
  |  |   31|    191|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 191]
  |  |  ------------------
  |  |   32|    191|    }
  ------------------
  877|    191|        print_amount(fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.amount,
  878|    191|                     &fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op.selling,
  879|    191|                     fdata->envelope->network,
  880|    191|                     fdata->value,
  881|    191|                     fdata->value_len))
  882|    191|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_sell_offer_price))
  ------------------
  |  |   30|    191|    {                           \
  |  |   31|    191|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 191]
  |  |  ------------------
  |  |   32|    191|    }
  ------------------
  883|    191|    return true;
  884|    191|}
formatter.c:format_manage_sell_offer_price:
  862|    191|static bool format_manage_sell_offer_price(formatter_data_t *fdata) {
  863|    191|    manage_sell_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_sell_offer_op;
  864|    191|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|    191|    {                                         \
  |  |   36|    191|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    191|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 191]
  |  |  ------------------
  |  |   38|    191|    }
  ------------------
  865|    191|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|    191|    {                           \
  |  |   31|    191|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 191]
  |  |  ------------------
  |  |   32|    191|    }
  ------------------
  866|    191|                                &op->buying,
  867|    191|                                &op->selling,
  868|    191|                                fdata->envelope->network,
  869|    191|                                fdata->value,
  870|    191|                                fdata->value_len))
  871|    191|    return format_operation_source_prepare(fdata);
  872|    191|}
formatter.c:format_create_passive_sell_offer:
 1010|    309|static bool format_create_passive_sell_offer(formatter_data_t *fdata) {
 1011|    309|    (void) fdata;
 1012|    309|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    309|    {                                         \
  |  |   36|    309|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    309|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 309]
  |  |  ------------------
  |  |   38|    309|    }
  ------------------
 1013|    309|    STRLCPY(fdata->value, "Create Passive Sell Offer", fdata->value_len);
  ------------------
  |  |   35|    309|    {                                         \
  |  |   36|    309|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    309|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 309]
  |  |  ------------------
  |  |   38|    309|    }
  ------------------
 1014|    309|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_buy))
  ------------------
  |  |   30|    309|    {                           \
  |  |   31|    309|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 309]
  |  |  ------------------
  |  |   32|    309|    }
  ------------------
 1015|    309|    return true;
 1016|    309|}
formatter.c:format_create_passive_sell_offer_buy:
  999|    309|static bool format_create_passive_sell_offer_buy(formatter_data_t *fdata) {
 1000|    309|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|    309|    {                                         \
  |  |   36|    309|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    309|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 309]
  |  |  ------------------
  |  |   38|    309|    }
  ------------------
 1001|    309|    FORMATTER_CHECK(
  ------------------
  |  |   30|    309|    {                           \
  |  |   31|    309|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 309]
  |  |  ------------------
  |  |   32|    309|    }
  ------------------
 1002|    309|        print_asset(&fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.buying,
 1003|    309|                    fdata->envelope->network,
 1004|    309|                    fdata->value,
 1005|    309|                    fdata->value_len))
 1006|    309|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_sell))
  ------------------
  |  |   30|    309|    {                           \
  |  |   31|    309|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 309]
  |  |  ------------------
  |  |   32|    309|    }
  ------------------
 1007|    309|    return true;
 1008|    309|}
formatter.c:format_create_passive_sell_offer_sell:
  987|    309|static bool format_create_passive_sell_offer_sell(formatter_data_t *fdata) {
  988|    309|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|    309|    {                                         \
  |  |   36|    309|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    309|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 309]
  |  |  ------------------
  |  |   38|    309|    }
  ------------------
  989|    309|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    309|    {                           \
  |  |   31|    309|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 309]
  |  |  ------------------
  |  |   32|    309|    }
  ------------------
  990|    309|        fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.amount,
  991|    309|        &fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op.selling,
  992|    309|        fdata->envelope->network,
  993|    309|        fdata->value,
  994|    309|        fdata->value_len))
  995|    309|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_passive_sell_offer_price))
  ------------------
  |  |   30|    309|    {                           \
  |  |   31|    309|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 309]
  |  |  ------------------
  |  |   32|    309|    }
  ------------------
  996|    309|    return true;
  997|    309|}
formatter.c:format_create_passive_sell_offer_price:
  974|    309|static bool format_create_passive_sell_offer_price(formatter_data_t *fdata) {
  975|    309|    create_passive_sell_offer_op_t *op =
  976|    309|        &fdata->envelope->tx_details.tx.op_details.create_passive_sell_offer_op;
  977|    309|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|    309|    {                                         \
  |  |   36|    309|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    309|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 309]
  |  |  ------------------
  |  |   38|    309|    }
  ------------------
  978|    309|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|    309|    {                           \
  |  |   31|    309|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 309]
  |  |  ------------------
  |  |   32|    309|    }
  ------------------
  979|    309|                                &op->buying,
  980|    309|                                &op->selling,
  981|    309|                                fdata->envelope->network,
  982|    309|                                fdata->value,
  983|    309|                                fdata->value_len))
  984|    309|    return format_operation_source_prepare(fdata);
  985|    309|}
formatter.c:format_set_options:
  763|  1.59k|static bool format_set_options(formatter_data_t *fdata) {
  764|       |    // this operation is a special one among all operations, because all its
  765|       |    // fields are optional.
  766|  1.59k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  1.59k|    {                                         \
  |  |   36|  1.59k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.59k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.59k]
  |  |  ------------------
  |  |   38|  1.59k|    }
  ------------------
  767|  1.59k|    STRLCPY(fdata->value, "Set Options", fdata->value_len);
  ------------------
  |  |   35|  1.59k|    {                                         \
  |  |   36|  1.59k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.59k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.59k]
  |  |  ------------------
  |  |   38|  1.59k|    }
  ------------------
  768|  1.59k|    if (is_empty_set_options_body(fdata)) {
  ------------------
  |  Branch (768:9): [True: 471, False: 1.12k]
  ------------------
  769|    471|        FORMATTER_CHECK(push_to_formatter_stack(format_set_options_empty_body))
  ------------------
  |  |   30|    471|    {                           \
  |  |   31|    471|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 471]
  |  |  ------------------
  |  |   32|    471|    }
  ------------------
  770|  1.12k|    } else {
  771|  1.12k|        format_set_option_inflation_destination_prepare(fdata);
  772|  1.12k|    }
  773|  1.59k|    return true;
  774|  1.59k|}
formatter.c:is_empty_set_options_body:
  750|  1.59k|static bool is_empty_set_options_body(formatter_data_t *fdata) {
  751|  1.59k|    return !(
  752|  1.59k|        fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination_present ||
  ------------------
  |  Branch (752:9): [True: 50, False: 1.54k]
  ------------------
  753|  1.59k|        fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags_present ||
  ------------------
  |  Branch (753:9): [True: 95, False: 1.44k]
  ------------------
  754|  1.59k|        fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags_present ||
  ------------------
  |  Branch (754:9): [True: 52, False: 1.39k]
  ------------------
  755|  1.59k|        fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight_present ||
  ------------------
  |  Branch (755:9): [True: 80, False: 1.31k]
  ------------------
  756|  1.59k|        fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold_present ||
  ------------------
  |  Branch (756:9): [True: 281, False: 1.03k]
  ------------------
  757|  1.59k|        fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold_present ||
  ------------------
  |  Branch (757:9): [True: 224, False: 810]
  ------------------
  758|  1.59k|        fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold_present ||
  ------------------
  |  Branch (758:9): [True: 28, False: 782]
  ------------------
  759|  1.59k|        fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_present ||
  ------------------
  |  Branch (759:9): [True: 278, False: 504]
  ------------------
  760|  1.59k|        fdata->envelope->tx_details.tx.op_details.set_options_op.signer_present);
  ------------------
  |  Branch (760:9): [True: 33, False: 471]
  ------------------
  761|  1.59k|}
formatter.c:format_set_options_empty_body:
  743|    471|static bool format_set_options_empty_body(formatter_data_t *fdata) {
  744|    471|    (void) fdata;
  745|    471|    STRLCPY(fdata->caption, "SET OPTIONS", fdata->caption_len);
  ------------------
  |  |   35|    471|    {                                         \
  |  |   36|    471|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    471|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 471]
  |  |  ------------------
  |  |   38|    471|    }
  ------------------
  746|    471|    STRLCPY(fdata->value, "[BODY IS EMPTY]", fdata->value_len);
  ------------------
  |  |   35|    471|    {                                         \
  |  |   36|    471|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    471|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 471]
  |  |  ------------------
  |  |   38|    471|    }
  ------------------
  747|    471|    return format_operation_source_prepare(fdata);
  748|    471|}
formatter.c:format_set_option_inflation_destination_prepare:
  734|  1.12k|static bool format_set_option_inflation_destination_prepare(formatter_data_t *fdata) {
  735|  1.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination_present) {
  ------------------
  |  Branch (735:9): [True: 50, False: 1.07k]
  ------------------
  736|     50|        FORMATTER_CHECK(push_to_formatter_stack(format_set_option_inflation_destination))
  ------------------
  |  |   30|     50|    {                           \
  |  |   31|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   32|     50|    }
  ------------------
  737|  1.07k|    } else {
  738|  1.07k|        format_set_option_clear_flags_prepare(fdata);
  739|  1.07k|    }
  740|  1.12k|    return true;
  741|  1.12k|}
formatter.c:format_set_option_inflation_destination:
  722|     50|static bool format_set_option_inflation_destination(formatter_data_t *fdata) {
  723|     50|    STRLCPY(fdata->caption, "Inflation Dest", fdata->caption_len);
  ------------------
  |  |   35|     50|    {                                         \
  |  |   36|     50|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     50|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   38|     50|    }
  ------------------
  724|     50|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|     50|    {                           \
  |  |   31|     50|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 50]
  |  |  ------------------
  |  |   32|     50|    }
  ------------------
  725|     50|        fdata->envelope->tx_details.tx.op_details.set_options_op.inflation_destination,
  726|     50|        fdata->value,
  727|     50|        fdata->value_len,
  728|     50|        0,
  729|     50|        0))
  730|     50|    format_set_option_clear_flags_prepare(fdata);
  731|     50|    return true;
  732|     50|}
formatter.c:format_set_option_clear_flags_prepare:
  713|  1.12k|static bool format_set_option_clear_flags_prepare(formatter_data_t *fdata) {
  714|  1.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags_present) {
  ------------------
  |  Branch (714:9): [True: 142, False: 979]
  ------------------
  715|    142|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_clear_flags))
  ------------------
  |  |   30|    142|    {                           \
  |  |   31|    142|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 142]
  |  |  ------------------
  |  |   32|    142|    }
  ------------------
  716|    979|    } else {
  717|    979|        format_set_option_set_flags_prepare(fdata);
  718|    979|    }
  719|  1.12k|    return true;
  720|  1.12k|}
formatter.c:format_set_option_clear_flags:
  703|    142|static bool format_set_option_clear_flags(formatter_data_t *fdata) {
  704|    142|    STRLCPY(fdata->caption, "Clear Flags", fdata->caption_len);
  ------------------
  |  |   35|    142|    {                                         \
  |  |   36|    142|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    142|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 142]
  |  |  ------------------
  |  |   38|    142|    }
  ------------------
  705|    142|    FORMATTER_CHECK(
  ------------------
  |  |   30|    142|    {                           \
  |  |   31|    142|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 142]
  |  |  ------------------
  |  |   32|    142|    }
  ------------------
  706|    142|        print_account_flags(fdata->envelope->tx_details.tx.op_details.set_options_op.clear_flags,
  707|    142|                            fdata->value,
  708|    142|                            fdata->value_len))
  709|    142|    format_set_option_set_flags_prepare(fdata);
  710|    142|    return true;
  711|    142|}
formatter.c:format_set_option_set_flags_prepare:
  694|  1.12k|static bool format_set_option_set_flags_prepare(formatter_data_t *fdata) {
  695|  1.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags_present) {
  ------------------
  |  Branch (695:9): [True: 174, False: 947]
  ------------------
  696|    174|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_set_flags))
  ------------------
  |  |   30|    174|    {                           \
  |  |   31|    174|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 174]
  |  |  ------------------
  |  |   32|    174|    }
  ------------------
  697|    947|    } else {
  698|    947|        format_set_option_master_weight_prepare(fdata);
  699|    947|    }
  700|  1.12k|    return true;
  701|  1.12k|}
formatter.c:format_set_option_set_flags:
  684|    174|static bool format_set_option_set_flags(formatter_data_t *fdata) {
  685|    174|    STRLCPY(fdata->caption, "Set Flags", fdata->caption_len);
  ------------------
  |  |   35|    174|    {                                         \
  |  |   36|    174|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    174|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 174]
  |  |  ------------------
  |  |   38|    174|    }
  ------------------
  686|    174|    FORMATTER_CHECK(
  ------------------
  |  |   30|    174|    {                           \
  |  |   31|    174|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 174]
  |  |  ------------------
  |  |   32|    174|    }
  ------------------
  687|    174|        print_account_flags(fdata->envelope->tx_details.tx.op_details.set_options_op.set_flags,
  688|    174|                            fdata->value,
  689|    174|                            fdata->value_len))
  690|    174|    format_set_option_master_weight_prepare(fdata);
  691|    174|    return true;
  692|    174|}
formatter.c:format_set_option_master_weight_prepare:
  675|  1.12k|static bool format_set_option_master_weight_prepare(formatter_data_t *fdata) {
  676|  1.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight_present) {
  ------------------
  |  Branch (676:9): [True: 123, False: 998]
  ------------------
  677|    123|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_master_weight))
  ------------------
  |  |   30|    123|    {                           \
  |  |   31|    123|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 123]
  |  |  ------------------
  |  |   32|    123|    }
  ------------------
  678|    998|    } else {
  679|    998|        format_set_option_low_threshold_prepare(fdata);
  680|    998|    }
  681|  1.12k|    return true;
  682|  1.12k|}
formatter.c:format_set_option_master_weight:
  665|    123|static bool format_set_option_master_weight(formatter_data_t *fdata) {
  666|    123|    STRLCPY(fdata->caption, "Master Weight", fdata->caption_len);
  ------------------
  |  |   35|    123|    {                                         \
  |  |   36|    123|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    123|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 123]
  |  |  ------------------
  |  |   38|    123|    }
  ------------------
  667|    123|    FORMATTER_CHECK(
  ------------------
  |  |   30|    123|    {                           \
  |  |   31|    123|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 123]
  |  |  ------------------
  |  |   32|    123|    }
  ------------------
  668|    123|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.master_weight,
  669|    123|                         fdata->value,
  670|    123|                         fdata->value_len))
  671|    123|    format_set_option_low_threshold_prepare(fdata);
  672|    123|    return true;
  673|    123|}
formatter.c:format_set_option_low_threshold_prepare:
  656|  1.12k|static bool format_set_option_low_threshold_prepare(formatter_data_t *fdata) {
  657|  1.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold_present) {
  ------------------
  |  Branch (657:9): [True: 326, False: 795]
  ------------------
  658|    326|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_low_threshold))
  ------------------
  |  |   30|    326|    {                           \
  |  |   31|    326|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 326]
  |  |  ------------------
  |  |   32|    326|    }
  ------------------
  659|    795|    } else {
  660|    795|        format_set_option_medium_threshold_prepare(fdata);
  661|    795|    }
  662|  1.12k|    return true;
  663|  1.12k|}
formatter.c:format_set_option_low_threshold:
  646|    326|static bool format_set_option_low_threshold(formatter_data_t *fdata) {
  647|    326|    STRLCPY(fdata->caption, "Low Threshold", fdata->caption_len);
  ------------------
  |  |   35|    326|    {                                         \
  |  |   36|    326|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    326|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 326]
  |  |  ------------------
  |  |   38|    326|    }
  ------------------
  648|    326|    FORMATTER_CHECK(
  ------------------
  |  |   30|    326|    {                           \
  |  |   31|    326|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 326]
  |  |  ------------------
  |  |   32|    326|    }
  ------------------
  649|    326|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.low_threshold,
  650|    326|                         fdata->value,
  651|    326|                         fdata->value_len))
  652|    326|    format_set_option_medium_threshold_prepare(fdata);
  653|    326|    return true;
  654|    326|}
formatter.c:format_set_option_medium_threshold_prepare:
  637|  1.12k|static bool format_set_option_medium_threshold_prepare(formatter_data_t *fdata) {
  638|  1.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold_present) {
  ------------------
  |  Branch (638:9): [True: 268, False: 853]
  ------------------
  639|    268|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_medium_threshold))
  ------------------
  |  |   30|    268|    {                           \
  |  |   31|    268|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 268]
  |  |  ------------------
  |  |   32|    268|    }
  ------------------
  640|    853|    } else {
  641|    853|        format_set_option_high_threshold_prepare(fdata);
  642|    853|    }
  643|  1.12k|    return true;
  644|  1.12k|}
formatter.c:format_set_option_medium_threshold:
  627|    268|static bool format_set_option_medium_threshold(formatter_data_t *fdata) {
  628|    268|    STRLCPY(fdata->caption, "Medium Threshold", fdata->caption_len);
  ------------------
  |  |   35|    268|    {                                         \
  |  |   36|    268|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    268|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 268]
  |  |  ------------------
  |  |   38|    268|    }
  ------------------
  629|    268|    FORMATTER_CHECK(
  ------------------
  |  |   30|    268|    {                           \
  |  |   31|    268|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 268]
  |  |  ------------------
  |  |   32|    268|    }
  ------------------
  630|    268|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.medium_threshold,
  631|    268|                         fdata->value,
  632|    268|                         fdata->value_len))
  633|    268|    format_set_option_high_threshold_prepare(fdata);
  634|    268|    return true;
  635|    268|}
formatter.c:format_set_option_high_threshold_prepare:
  618|  1.12k|static bool format_set_option_high_threshold_prepare(formatter_data_t *fdata) {
  619|  1.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold_present) {
  ------------------
  |  Branch (619:9): [True: 67, False: 1.05k]
  ------------------
  620|     67|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_high_threshold))
  ------------------
  |  |   30|     67|    {                           \
  |  |   31|     67|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 67]
  |  |  ------------------
  |  |   32|     67|    }
  ------------------
  621|  1.05k|    } else {
  622|  1.05k|        format_set_option_home_domain_prepare(fdata);
  623|  1.05k|    }
  624|  1.12k|    return true;
  625|  1.12k|}
formatter.c:format_set_option_high_threshold:
  608|     67|static bool format_set_option_high_threshold(formatter_data_t *fdata) {
  609|     67|    STRLCPY(fdata->caption, "High Threshold", fdata->caption_len);
  ------------------
  |  |   35|     67|    {                                         \
  |  |   36|     67|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     67|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 67]
  |  |  ------------------
  |  |   38|     67|    }
  ------------------
  610|     67|    FORMATTER_CHECK(
  ------------------
  |  |   30|     67|    {                           \
  |  |   31|     67|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 67]
  |  |  ------------------
  |  |   32|     67|    }
  ------------------
  611|     67|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.high_threshold,
  612|     67|                         fdata->value,
  613|     67|                         fdata->value_len))
  614|     67|    format_set_option_home_domain_prepare(fdata);
  615|     67|    return true;
  616|     67|}
formatter.c:format_set_option_home_domain_prepare:
  599|  1.12k|static bool format_set_option_home_domain_prepare(formatter_data_t *fdata) {
  600|  1.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_present) {
  ------------------
  |  Branch (600:9): [True: 326, False: 795]
  ------------------
  601|    326|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_home_domain))
  ------------------
  |  |   30|    326|    {                           \
  |  |   31|    326|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 326]
  |  |  ------------------
  |  |   32|    326|    }
  ------------------
  602|    795|    } else {
  603|    795|        format_set_option_signer_prepare(fdata);
  604|    795|    }
  605|  1.12k|    return true;
  606|  1.12k|}
formatter.c:format_set_option_home_domain:
  584|    326|static bool format_set_option_home_domain(formatter_data_t *fdata) {
  585|    326|    STRLCPY(fdata->caption, "Home Domain", fdata->caption_len);
  ------------------
  |  |   35|    326|    {                                         \
  |  |   36|    326|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    326|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 326]
  |  |  ------------------
  |  |   38|    326|    }
  ------------------
  586|    326|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_size) {
  ------------------
  |  Branch (586:9): [True: 194, False: 132]
  ------------------
  587|    194|        FORMATTER_CHECK(
  ------------------
  |  |   30|    194|    {                           \
  |  |   31|    194|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 194]
  |  |  ------------------
  |  |   32|    194|    }
  ------------------
  588|    194|            print_string(fdata->value,
  589|    194|                         fdata->value_len,
  590|    194|                         fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain,
  591|    194|                         fdata->envelope->tx_details.tx.op_details.set_options_op.home_domain_size))
  592|    194|    } else {
  593|    132|        STRLCPY(fdata->value, "[remove home domain from account]", fdata->value_len);
  ------------------
  |  |   35|    132|    {                                         \
  |  |   36|    132|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    132|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 132]
  |  |  ------------------
  |  |   38|    132|    }
  ------------------
  594|    132|    }
  595|    326|    format_set_option_signer_prepare(fdata);
  596|    326|    return true;
  597|    326|}
formatter.c:format_set_option_signer_prepare:
  575|  1.12k|static bool format_set_option_signer_prepare(formatter_data_t *fdata) {
  576|  1.12k|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.signer_present) {
  ------------------
  |  Branch (576:9): [True: 222, False: 899]
  ------------------
  577|    222|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer))
  ------------------
  |  |   30|    222|    {                           \
  |  |   31|    222|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 222]
  |  |  ------------------
  |  |   32|    222|    }
  ------------------
  578|    899|    } else {
  579|    899|        return format_operation_source_prepare(fdata);
  580|    899|    }
  581|    222|    return true;
  582|  1.12k|}
formatter.c:format_set_option_signer:
  544|    222|static bool format_set_option_signer(formatter_data_t *fdata) {
  545|    222|    signer_t *signer = &fdata->envelope->tx_details.tx.op_details.set_options_op.signer;
  546|    222|    if (signer->weight) {
  ------------------
  |  Branch (546:9): [True: 111, False: 111]
  ------------------
  547|    111|        STRLCPY(fdata->caption, "Add Signer", fdata->caption_len);
  ------------------
  |  |   35|    111|    {                                         \
  |  |   36|    111|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    111|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 111]
  |  |  ------------------
  |  |   38|    111|    }
  ------------------
  548|    111|    } else {
  549|    111|        STRLCPY(fdata->caption, "Remove Signer", fdata->caption_len);
  ------------------
  |  |   35|    111|    {                                         \
  |  |   36|    111|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    111|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 111]
  |  |  ------------------
  |  |   38|    111|    }
  ------------------
  550|    111|    }
  551|    222|    switch (signer->key.type) {
  552|    209|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (552:9): [True: 209, False: 13]
  ------------------
  553|    209|            STRLCPY(fdata->value, "Type Public Key", fdata->value_len);
  ------------------
  |  |   35|    209|    {                                         \
  |  |   36|    209|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    209|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 209]
  |  |  ------------------
  |  |   38|    209|    }
  ------------------
  554|    209|            break;
  555|    209|        }
  556|      4|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (556:9): [True: 4, False: 218]
  ------------------
  557|      4|            STRLCPY(fdata->value, "Type Hash(x)", fdata->value_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  558|      4|            break;
  559|      4|        }
  560|      4|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (560:9): [True: 4, False: 218]
  ------------------
  561|      4|            STRLCPY(fdata->value, "Type Pre-Auth", fdata->value_len);
  ------------------
  |  |   35|      4|    {                                         \
  |  |   36|      4|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      4|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 4]
  |  |  ------------------
  |  |   38|      4|    }
  ------------------
  562|      4|            break;
  563|      4|        }
  564|      5|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (564:9): [True: 5, False: 217]
  ------------------
  565|      5|            STRLCPY(fdata->value, "Type Ed25519 Signed Payload", fdata->value_len);
  ------------------
  |  |   35|      5|    {                                         \
  |  |   36|      5|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      5|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 5]
  |  |  ------------------
  |  |   38|      5|    }
  ------------------
  566|      5|            break;
  567|      5|        }
  568|      0|        default:
  ------------------
  |  Branch (568:9): [True: 0, False: 222]
  ------------------
  569|      0|            return false;
  570|    222|    }
  571|    222|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer_detail))
  ------------------
  |  |   30|    222|    {                           \
  |  |   31|    222|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 222]
  |  |  ------------------
  |  |   32|    222|    }
  ------------------
  572|    222|    return true;
  573|    222|}
formatter.c:format_set_option_signer_detail:
  530|    222|static bool format_set_option_signer_detail(formatter_data_t *fdata) {
  531|    222|    STRLCPY(fdata->caption, "Signer Key", fdata->caption_len);
  ------------------
  |  |   35|    222|    {                                         \
  |  |   36|    222|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    222|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 222]
  |  |  ------------------
  |  |   38|    222|    }
  ------------------
  532|    222|    signer_key_t *key = &fdata->envelope->tx_details.tx.op_details.set_options_op.signer.key;
  533|       |
  534|    222|    FORMATTER_CHECK(print_signer_key_detail(key, fdata->value, fdata->value_len))
  ------------------
  |  |   30|    222|    {                           \
  |  |   31|    222|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 222]
  |  |  ------------------
  |  |   32|    222|    }
  ------------------
  535|       |
  536|    222|    if (fdata->envelope->tx_details.tx.op_details.set_options_op.signer.weight != 0) {
  ------------------
  |  Branch (536:9): [True: 111, False: 111]
  ------------------
  537|    111|        FORMATTER_CHECK(push_to_formatter_stack(&format_set_option_signer_weight))
  ------------------
  |  |   30|    111|    {                           \
  |  |   31|    111|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 111]
  |  |  ------------------
  |  |   32|    111|    }
  ------------------
  538|    111|    } else {
  539|    111|        return format_operation_source_prepare(fdata);
  540|    111|    }
  541|    111|    return true;
  542|    222|}
formatter.c:print_signer_key_detail:
  502|  1.00k|static bool print_signer_key_detail(signer_key_t *key, char *value, size_t value_len) {
  503|  1.00k|    switch (key->type) {
  504|    555|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (504:9): [True: 555, False: 449]
  ------------------
  505|    555|            FORMATTER_CHECK(print_account_id(key->ed25519, value, value_len, 0, 0))
  ------------------
  |  |   30|    555|    {                           \
  |  |   31|    555|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 555]
  |  |  ------------------
  |  |   32|    555|    }
  ------------------
  506|    555|            break;
  507|    555|        }
  508|    555|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (508:9): [True: 91, False: 913]
  ------------------
  509|     91|            FORMATTER_CHECK(print_hash_x_key(key->hash_x, value, value_len, 0, 0))
  ------------------
  |  |   30|     91|    {                           \
  |  |   31|     91|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 91]
  |  |  ------------------
  |  |   32|     91|    }
  ------------------
  510|     91|            break;
  511|     91|        }
  512|    195|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (512:9): [True: 195, False: 809]
  ------------------
  513|    195|            FORMATTER_CHECK(print_pre_auth_x_key(key->pre_auth_tx, value, value_len, 0, 0))
  ------------------
  |  |   30|    195|    {                           \
  |  |   31|    195|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 195]
  |  |  ------------------
  |  |   32|    195|    }
  ------------------
  514|    195|            break;
  515|    195|        }
  516|    195|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (516:9): [True: 163, False: 841]
  ------------------
  517|    163|            FORMATTER_CHECK(print_ed25519_signed_payload(&key->ed25519_signed_payload,
  ------------------
  |  |   30|    163|    {                           \
  |  |   31|    163|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 163]
  |  |  ------------------
  |  |   32|    163|    }
  ------------------
  518|    163|                                                         value,
  519|    163|                                                         value_len,
  520|    163|                                                         12,
  521|    163|                                                         12))
  522|    163|            break;
  523|    163|        }
  524|    163|        default:
  ------------------
  |  Branch (524:9): [True: 0, False: 1.00k]
  ------------------
  525|      0|            return false;
  526|  1.00k|    }
  527|  1.00k|    return true;
  528|  1.00k|}
formatter.c:format_set_option_signer_weight:
  493|    111|static bool format_set_option_signer_weight(formatter_data_t *fdata) {
  494|    111|    STRLCPY(fdata->caption, "Weight", fdata->caption_len);
  ------------------
  |  |   35|    111|    {                                         \
  |  |   36|    111|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    111|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 111]
  |  |  ------------------
  |  |   38|    111|    }
  ------------------
  495|    111|    FORMATTER_CHECK(
  ------------------
  |  |   30|    111|    {                           \
  |  |   31|    111|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 111]
  |  |  ------------------
  |  |   32|    111|    }
  ------------------
  496|    111|        print_uint64_num(fdata->envelope->tx_details.tx.op_details.set_options_op.signer.weight,
  497|    111|                         fdata->value,
  498|    111|                         fdata->value_len))
  499|    111|    return format_operation_source_prepare(fdata);
  500|    111|}
formatter.c:format_change_trust:
  829|    526|static bool format_change_trust(formatter_data_t *fdata) {
  830|    526|    if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit) {
  ------------------
  |  Branch (830:9): [True: 354, False: 172]
  ------------------
  831|    354|        STRLCPY(fdata->caption, "Change Trust", fdata->caption_len);
  ------------------
  |  |   35|    354|    {                                         \
  |  |   36|    354|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    354|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 354]
  |  |  ------------------
  |  |   38|    354|    }
  ------------------
  832|    354|    } else {
  833|    172|        STRLCPY(fdata->caption, "Remove Trust", fdata->caption_len);
  ------------------
  |  |   35|    172|    {                                         \
  |  |   36|    172|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    172|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 172]
  |  |  ------------------
  |  |   38|    172|    }
  ------------------
  834|    172|    }
  835|    526|    uint8_t asset_type = fdata->envelope->tx_details.tx.op_details.change_trust_op.line.type;
  836|    526|    switch (asset_type) {
  837|    222|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (837:9): [True: 222, False: 304]
  ------------------
  838|    365|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (838:9): [True: 143, False: 383]
  ------------------
  839|    365|            FORMATTER_CHECK(print_asset(
  ------------------
  |  |   30|    365|    {                           \
  |  |   31|    365|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 365]
  |  |  ------------------
  |  |   32|    365|    }
  ------------------
  840|    365|                (asset_t *) &fdata->envelope->tx_details.tx.op_details.change_trust_op.line,
  841|    365|                fdata->envelope->network,
  842|    365|                fdata->value,
  843|    365|                fdata->value_len))
  844|    365|            if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit &&
  ------------------
  |  Branch (844:17): [True: 250, False: 115]
  ------------------
  845|    365|                fdata->envelope->tx_details.tx.op_details.change_trust_op.limit != INT64_MAX) {
  ------------------
  |  Branch (845:17): [True: 250, False: 0]
  ------------------
  846|    250|                FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_limit))
  ------------------
  |  |   30|    250|    {                           \
  |  |   31|    250|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 250]
  |  |  ------------------
  |  |   32|    250|    }
  ------------------
  847|    250|            } else {
  848|    115|                return format_operation_source_prepare(fdata);
  849|    115|            }
  850|    250|            break;
  851|    250|        case ASSET_TYPE_POOL_SHARE:
  ------------------
  |  Branch (851:9): [True: 41, False: 485]
  ------------------
  852|     41|            STRLCPY(fdata->value, "Liquidity Pool Asset", fdata->value_len);
  ------------------
  |  |   35|     41|    {                                         \
  |  |   36|     41|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     41|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   38|     41|    }
  ------------------
  853|     41|            FORMATTER_CHECK(
  ------------------
  |  |   30|     41|    {                           \
  |  |   31|     41|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   32|     41|    }
  ------------------
  854|     41|                push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_asset_a))
  855|     41|            break;
  856|    120|        default:
  ------------------
  |  Branch (856:9): [True: 120, False: 406]
  ------------------
  857|    120|            return false;
  858|    526|    }
  859|    291|    return true;
  860|    526|}
formatter.c:format_change_trust_limit:
  776|    280|static bool format_change_trust_limit(formatter_data_t *fdata) {
  777|    280|    STRLCPY(fdata->caption, "Trust Limit", fdata->caption_len);
  ------------------
  |  |   35|    280|    {                                         \
  |  |   36|    280|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    280|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 280]
  |  |  ------------------
  |  |   38|    280|    }
  ------------------
  778|    280|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.change_trust_op.limit,
  ------------------
  |  |   30|    280|    {                           \
  |  |   31|    280|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 280]
  |  |  ------------------
  |  |   32|    280|    }
  ------------------
  779|    280|                                 NULL,
  780|    280|                                 fdata->envelope->network,
  781|    280|                                 fdata->value,
  782|    280|                                 fdata->value_len))
  783|    280|    return format_operation_source_prepare(fdata);
  784|    280|}
formatter.c:format_change_trust_detail_liquidity_pool_asset_a:
  818|     41|static bool format_change_trust_detail_liquidity_pool_asset_a(formatter_data_t *fdata) {
  819|     41|    STRLCPY(fdata->caption, "Asset A", fdata->caption_len);
  ------------------
  |  |   35|     41|    {                                         \
  |  |   36|     41|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     41|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   38|     41|    }
  ------------------
  820|     41|    FORMATTER_CHECK(print_asset(&fdata->envelope->tx_details.tx.op_details.change_trust_op.line
  ------------------
  |  |   30|     41|    {                           \
  |  |   31|     41|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   32|     41|    }
  ------------------
  821|     41|                                     .liquidity_pool.constant_product.asset_a,
  822|     41|                                fdata->envelope->network,
  823|     41|                                fdata->value,
  824|     41|                                fdata->value_len))
  825|     41|    FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_asset_b))
  ------------------
  |  |   30|     41|    {                           \
  |  |   31|     41|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   32|     41|    }
  ------------------
  826|     41|    return true;
  827|     41|}
formatter.c:format_change_trust_detail_liquidity_pool_asset_b:
  807|     41|static bool format_change_trust_detail_liquidity_pool_asset_b(formatter_data_t *fdata) {
  808|     41|    STRLCPY(fdata->caption, "Asset B", fdata->caption_len);
  ------------------
  |  |   35|     41|    {                                         \
  |  |   36|     41|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     41|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   38|     41|    }
  ------------------
  809|     41|    FORMATTER_CHECK(print_asset(&fdata->envelope->tx_details.tx.op_details.change_trust_op.line
  ------------------
  |  |   30|     41|    {                           \
  |  |   31|     41|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   32|     41|    }
  ------------------
  810|     41|                                     .liquidity_pool.constant_product.asset_b,
  811|     41|                                fdata->envelope->network,
  812|     41|                                fdata->value,
  813|     41|                                fdata->value_len))
  814|     41|    FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_detail_liquidity_pool_fee))
  ------------------
  |  |   30|     41|    {                           \
  |  |   31|     41|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   32|     41|    }
  ------------------
  815|     41|    return true;
  816|     41|}
formatter.c:format_change_trust_detail_liquidity_pool_fee:
  786|     41|static bool format_change_trust_detail_liquidity_pool_fee(formatter_data_t *fdata) {
  787|     41|    STRLCPY(fdata->caption, "Pool Fee Rate", fdata->caption_len);
  ------------------
  |  |   35|     41|    {                                         \
  |  |   36|     41|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     41|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   38|     41|    }
  ------------------
  788|       |
  789|     41|    uint8_t fee[4] = {0};
  790|    205|    for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (790:21): [True: 164, False: 41]
  ------------------
  791|    164|        fee[i] = fdata->envelope->tx_details.tx.op_details.change_trust_op.line.liquidity_pool
  792|    164|                     .constant_product.fee >>
  793|    164|                 (8 * (3 - i));
  794|    164|    }
  795|     41|    FORMATTER_CHECK(print_int32(fee, 2, fdata->value, fdata->value_len, false))
  ------------------
  |  |   30|     41|    {                           \
  |  |   31|     41|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   32|     41|    }
  ------------------
  796|       |
  797|     41|    STRLCAT(fdata->value, "%", fdata->value_len);
  ------------------
  |  |   41|     41|    {                                         \
  |  |   42|     41|        size_t len = strlcat(dst, src, size); \
  |  |   43|     41|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (43:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   44|     41|    }
  ------------------
  798|     41|    if (fdata->envelope->tx_details.tx.op_details.change_trust_op.limit &&
  ------------------
  |  Branch (798:9): [True: 31, False: 10]
  ------------------
  799|     41|        fdata->envelope->tx_details.tx.op_details.change_trust_op.limit != INT64_MAX) {
  ------------------
  |  Branch (799:9): [True: 30, False: 1]
  ------------------
  800|     30|        FORMATTER_CHECK(push_to_formatter_stack(&format_change_trust_limit))
  ------------------
  |  |   30|     30|    {                           \
  |  |   31|     30|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 30]
  |  |  ------------------
  |  |   32|     30|    }
  ------------------
  801|     30|    } else {
  802|     11|        return format_operation_source_prepare(fdata);
  803|     11|    }
  804|     30|    return true;
  805|     41|}
formatter.c:format_allow_trust:
  485|     95|static bool format_allow_trust(formatter_data_t *fdata) {
  486|     95|    (void) fdata;
  487|     95|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     95|    {                                         \
  |  |   36|     95|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     95|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 95]
  |  |  ------------------
  |  |   38|     95|    }
  ------------------
  488|     95|    STRLCPY(fdata->value, "Allow Trust", fdata->value_len);
  ------------------
  |  |   35|     95|    {                                         \
  |  |   36|     95|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     95|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 95]
  |  |  ------------------
  |  |   38|     95|    }
  ------------------
  489|     95|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_trustor))
  ------------------
  |  |   30|     95|    {                           \
  |  |   31|     95|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 95]
  |  |  ------------------
  |  |   32|     95|    }
  ------------------
  490|     95|    return true;
  491|     95|}
formatter.c:format_allow_trust_trustor:
  473|     95|static bool format_allow_trust_trustor(formatter_data_t *fdata) {
  474|     95|    STRLCPY(fdata->caption, "Trustor", fdata->caption_len);
  ------------------
  |  |   35|     95|    {                                         \
  |  |   36|     95|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     95|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 95]
  |  |  ------------------
  |  |   38|     95|    }
  ------------------
  475|     95|    FORMATTER_CHECK(
  ------------------
  |  |   30|     95|    {                           \
  |  |   31|     95|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 95]
  |  |  ------------------
  |  |   32|     95|    }
  ------------------
  476|     95|        print_account_id(fdata->envelope->tx_details.tx.op_details.allow_trust_op.trustor,
  477|     95|                         fdata->value,
  478|     95|                         fdata->value_len,
  479|     95|                         0,
  480|     95|                         0))
  481|     95|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_asset_code))
  ------------------
  |  |   30|     95|    {                           \
  |  |   31|     95|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 95]
  |  |  ------------------
  |  |   32|     95|    }
  ------------------
  482|     95|    return true;
  483|     95|}
formatter.c:format_allow_trust_asset_code:
  446|     95|static bool format_allow_trust_asset_code(formatter_data_t *fdata) {
  447|     95|    STRLCPY(fdata->caption, "Asset Code", fdata->caption_len);
  ------------------
  |  |   35|     95|    {                                         \
  |  |   36|     95|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     95|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 95]
  |  |  ------------------
  |  |   38|     95|    }
  ------------------
  448|     95|    switch (fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_type) {
  449|     41|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (449:9): [True: 41, False: 54]
  ------------------
  450|     41|            FORMATTER_CHECK(
  ------------------
  |  |   30|     41|    {                           \
  |  |   31|     41|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 41]
  |  |  ------------------
  |  |   32|     41|    }
  ------------------
  451|     41|                print_string(fdata->value,
  452|     41|                             fdata->value_len,
  453|     41|                             fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_code,
  454|     41|                             4))
  455|       |
  456|     41|            break;
  457|     41|        }
  458|     54|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (458:9): [True: 54, False: 41]
  ------------------
  459|     54|            FORMATTER_CHECK(
  ------------------
  |  |   30|     54|    {                           \
  |  |   31|     54|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 54]
  |  |  ------------------
  |  |   32|     54|    }
  ------------------
  460|     54|                print_string(fdata->value,
  461|     54|                             fdata->value_len,
  462|     54|                             fdata->envelope->tx_details.tx.op_details.allow_trust_op.asset_code,
  463|     54|                             12))
  464|     54|            break;
  465|     54|        }
  466|     54|        default:
  ------------------
  |  Branch (466:9): [True: 0, False: 95]
  ------------------
  467|      0|            return false;  // unknown asset type
  468|     95|    }
  469|     95|    FORMATTER_CHECK(push_to_formatter_stack(&format_allow_trust_authorize))
  ------------------
  |  |   30|     95|    {                           \
  |  |   31|     95|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 95]
  |  |  ------------------
  |  |   32|     95|    }
  ------------------
  470|     95|    return true;
  471|     95|}
formatter.c:format_allow_trust_authorize:
  437|     95|static bool format_allow_trust_authorize(formatter_data_t *fdata) {
  438|     95|    STRLCPY(fdata->caption, "Authorize Flag", fdata->caption_len);
  ------------------
  |  |   35|     95|    {                                         \
  |  |   36|     95|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     95|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 95]
  |  |  ------------------
  |  |   38|     95|    }
  ------------------
  439|     95|    FORMATTER_CHECK(
  ------------------
  |  |   30|     95|    {                           \
  |  |   31|     95|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 95]
  |  |  ------------------
  |  |   32|     95|    }
  ------------------
  440|     95|        print_allow_trust_flags(fdata->envelope->tx_details.tx.op_details.allow_trust_op.authorize,
  441|     95|                                fdata->value,
  442|     95|                                fdata->value_len))
  443|     95|    return format_operation_source_prepare(fdata);
  444|     95|}
formatter.c:format_account_merge:
  387|    282|static bool format_account_merge(formatter_data_t *fdata) {
  388|    282|    (void) fdata;
  389|    282|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    282|    {                                         \
  |  |   36|    282|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    282|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   38|    282|    }
  ------------------
  390|    282|    STRLCPY(fdata->value, "Account Merge", fdata->value_len);
  ------------------
  |  |   35|    282|    {                                         \
  |  |   36|    282|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    282|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   38|    282|    }
  ------------------
  391|    282|    FORMATTER_CHECK(push_to_formatter_stack(&format_account_merge_detail))
  ------------------
  |  |   30|    282|    {                           \
  |  |   31|    282|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   32|    282|    }
  ------------------
  392|    282|    return true;
  393|    282|}
formatter.c:format_account_merge_detail:
  380|    282|static bool format_account_merge_detail(formatter_data_t *fdata) {
  381|    282|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|    282|    {                                         \
  |  |   36|    282|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    282|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   38|    282|    }
  ------------------
  382|    282|    STRLCPY(fdata->value, "All Funds", fdata->value_len);
  ------------------
  |  |   35|    282|    {                                         \
  |  |   36|    282|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    282|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   38|    282|    }
  ------------------
  383|    282|    FORMATTER_CHECK(push_to_formatter_stack(&format_account_merge_destination))
  ------------------
  |  |   30|    282|    {                           \
  |  |   31|    282|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   32|    282|    }
  ------------------
  384|    282|    return true;
  385|    282|}
formatter.c:format_account_merge_destination:
  369|    282|static bool format_account_merge_destination(formatter_data_t *fdata) {
  370|    282|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|    282|    {                                         \
  |  |   36|    282|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    282|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   38|    282|    }
  ------------------
  371|    282|    FORMATTER_CHECK(
  ------------------
  |  |   30|    282|    {                           \
  |  |   31|    282|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 282]
  |  |  ------------------
  |  |   32|    282|    }
  ------------------
  372|    282|        print_muxed_account(&fdata->envelope->tx_details.tx.op_details.account_merge_op.destination,
  373|    282|                            fdata->value,
  374|    282|                            fdata->value_len,
  375|    282|                            0,
  376|    282|                            0))
  377|    282|    return format_operation_source_prepare(fdata);
  378|    282|}
formatter.c:format_inflation:
  362|    584|static bool format_inflation(formatter_data_t *fdata) {
  363|    584|    (void) fdata;
  364|    584|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    584|    {                                         \
  |  |   36|    584|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    584|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 584]
  |  |  ------------------
  |  |   38|    584|    }
  ------------------
  365|    584|    STRLCPY(fdata->value, "Inflation", fdata->value_len);
  ------------------
  |  |   35|    584|    {                                         \
  |  |   36|    584|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    584|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 584]
  |  |  ------------------
  |  |   38|    584|    }
  ------------------
  366|    584|    return format_operation_source_prepare(fdata);
  367|    584|}
formatter.c:format_manage_data:
  420|    377|static bool format_manage_data(formatter_data_t *fdata) {
  421|    377|    FORMATTER_CHECK(
  ------------------
  |  |   30|    377|    {                           \
  |  |   31|    377|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 377]
  |  |  ------------------
  |  |   32|    377|    }
  ------------------
  422|    377|        print_string(fdata->value,
  423|    377|                     fdata->value_len,
  424|    377|                     fdata->envelope->tx_details.tx.op_details.manage_data_op.data_name,
  425|    377|                     fdata->envelope->tx_details.tx.op_details.manage_data_op.data_name_size))
  426|       |
  427|    377|    if (fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size) {
  ------------------
  |  Branch (427:9): [True: 16, False: 361]
  ------------------
  428|     16|        STRLCPY(fdata->caption, "Set Data", fdata->caption_len);
  ------------------
  |  |   35|     16|    {                                         \
  |  |   36|     16|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     16|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 16]
  |  |  ------------------
  |  |   38|     16|    }
  ------------------
  429|     16|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_data_value))
  ------------------
  |  |   30|     16|    {                           \
  |  |   31|     16|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 16]
  |  |  ------------------
  |  |   32|     16|    }
  ------------------
  430|    361|    } else {
  431|    361|        STRLCPY(fdata->caption, "Remove Data", fdata->caption_len);
  ------------------
  |  |   35|    361|    {                                         \
  |  |   36|    361|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    361|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 361]
  |  |  ------------------
  |  |   38|    361|    }
  ------------------
  432|    361|        return format_operation_source_prepare(fdata);
  433|    361|    }
  434|     16|    return true;
  435|    377|}
formatter.c:format_manage_data_value:
  395|     16|static bool format_manage_data_value(formatter_data_t *fdata) {
  396|     16|    STRLCPY(fdata->caption, "Data Value", fdata->caption_len);
  ------------------
  |  |   35|     16|    {                                         \
  |  |   36|     16|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     16|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 16]
  |  |  ------------------
  |  |   38|     16|    }
  ------------------
  397|     16|    if (is_printable_binary(
  ------------------
  |  Branch (397:9): [True: 7, False: 9]
  ------------------
  398|     16|            fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  399|     16|            fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size)) {
  400|      7|        if (fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size >=
  ------------------
  |  Branch (400:13): [True: 0, False: 7]
  ------------------
  401|      7|            fdata->value_len) {
  402|      0|            return false;
  403|      0|        }
  404|      7|        FORMATTER_CHECK(
  ------------------
  |  |   30|      7|    {                           \
  |  |   31|      7|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 7]
  |  |  ------------------
  |  |   32|      7|    }
  ------------------
  405|      7|            print_string(fdata->value,
  406|      7|                         fdata->value_len,
  407|      7|                         fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  408|      7|                         fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size))
  409|      9|    } else {
  410|      9|        STRLCPY(fdata->value, "Base64: ", fdata->value_len)
  ------------------
  |  |   35|      9|    {                                         \
  |  |   36|      9|        size_t len = strlcpy(dst, src, size); \
  |  |   37|      9|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 9]
  |  |  ------------------
  |  |   38|      9|    }
  ------------------
  411|      9|        FORMATTER_CHECK(
  ------------------
  |  |   30|      9|    {                           \
  |  |   31|      9|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 9]
  |  |  ------------------
  |  |   32|      9|    }
  ------------------
  412|      9|            base64_encode(fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value,
  413|      9|                          fdata->envelope->tx_details.tx.op_details.manage_data_op.data_value_size,
  414|      9|                          fdata->value + strlen(fdata->value),
  415|      9|                          fdata->value_len - strlen(fdata->value)))
  416|      9|    }
  417|     16|    return format_operation_source_prepare(fdata);
  418|     16|}
formatter.c:format_bump_sequence:
  354|    215|static bool format_bump_sequence(formatter_data_t *fdata) {
  355|    215|    (void) fdata;
  356|    215|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    215|    {                                         \
  |  |   36|    215|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    215|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 215]
  |  |  ------------------
  |  |   38|    215|    }
  ------------------
  357|    215|    STRLCPY(fdata->value, "Bump Sequence", fdata->value_len);
  ------------------
  |  |   35|    215|    {                                         \
  |  |   36|    215|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    215|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 215]
  |  |  ------------------
  |  |   38|    215|    }
  ------------------
  358|    215|    FORMATTER_CHECK(push_to_formatter_stack(&format_bump_sequence_bump_to))
  ------------------
  |  |   30|    215|    {                           \
  |  |   31|    215|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 215]
  |  |  ------------------
  |  |   32|    215|    }
  ------------------
  359|    215|    return true;
  360|    215|}
formatter.c:format_bump_sequence_bump_to:
  345|    215|static bool format_bump_sequence_bump_to(formatter_data_t *fdata) {
  346|    215|    STRLCPY(fdata->caption, "Bump To", fdata->caption_len);
  ------------------
  |  |   35|    215|    {                                         \
  |  |   36|    215|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    215|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 215]
  |  |  ------------------
  |  |   38|    215|    }
  ------------------
  347|    215|    FORMATTER_CHECK(
  ------------------
  |  |   30|    215|    {                           \
  |  |   31|    215|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 215]
  |  |  ------------------
  |  |   32|    215|    }
  ------------------
  348|    215|        print_int64_num(fdata->envelope->tx_details.tx.op_details.bump_sequence_op.bump_to,
  349|    215|                        fdata->value,
  350|    215|                        fdata->value_len))
  351|    215|    return format_operation_source_prepare(fdata);
  352|    215|}
formatter.c:format_manage_buy_offer:
  955|    152|static bool format_manage_buy_offer(formatter_data_t *fdata) {
  956|    152|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  957|       |
  958|    152|    if (op->buy_amount == 0) {
  ------------------
  |  Branch (958:9): [True: 84, False: 68]
  ------------------
  959|     84|        STRLCPY(fdata->caption, "Remove Offer", fdata->caption_len);
  ------------------
  |  |   35|     84|    {                                         \
  |  |   36|     84|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     84|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   38|     84|    }
  ------------------
  960|     84|        FORMATTER_CHECK(print_uint64_num(op->offer_id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     84|    {                           \
  |  |   31|     84|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 84]
  |  |  ------------------
  |  |   32|     84|    }
  ------------------
  961|     84|        return format_operation_source_prepare(fdata);
  962|     84|    } else {
  963|     68|        if (op->offer_id) {
  ------------------
  |  Branch (963:13): [True: 29, False: 39]
  ------------------
  964|     29|            STRLCPY(fdata->caption, "Change Offer", fdata->caption_len);
  ------------------
  |  |   35|     29|    {                                         \
  |  |   36|     29|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     29|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   38|     29|    }
  ------------------
  965|     29|            FORMATTER_CHECK(print_uint64_num(op->offer_id, fdata->value, fdata->value_len))
  ------------------
  |  |   30|     29|    {                           \
  |  |   31|     29|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 29]
  |  |  ------------------
  |  |   32|     29|    }
  ------------------
  966|     39|        } else {
  967|     39|            STRLCPY(fdata->caption, "Create Offer", fdata->caption_len);
  ------------------
  |  |   35|     39|    {                                         \
  |  |   36|     39|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     39|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 39]
  |  |  ------------------
  |  |   38|     39|    }
  ------------------
  968|     39|        }
  969|     68|        FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_sell))
  ------------------
  |  |   30|     68|    {                           \
  |  |   31|     68|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 68]
  |  |  ------------------
  |  |   32|     68|    }
  ------------------
  970|     68|    }
  971|     68|    return true;
  972|    152|}
formatter.c:format_manage_buy_offer_sell:
  945|     68|static bool format_manage_buy_offer_sell(formatter_data_t *fdata) {
  946|     68|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  947|       |
  948|     68|    STRLCPY(fdata->caption, "Sell", fdata->caption_len);
  ------------------
  |  |   35|     68|    {                                         \
  |  |   36|     68|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     68|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 68]
  |  |  ------------------
  |  |   38|     68|    }
  ------------------
  949|     68|    FORMATTER_CHECK(
  ------------------
  |  |   30|     68|    {                           \
  |  |   31|     68|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 68]
  |  |  ------------------
  |  |   32|     68|    }
  ------------------
  950|     68|        print_asset(&op->selling, fdata->envelope->network, fdata->value, fdata->value_len))
  951|     68|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_buy))
  ------------------
  |  |   30|     68|    {                           \
  |  |   31|     68|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 68]
  |  |  ------------------
  |  |   32|     68|    }
  ------------------
  952|     68|    return true;
  953|     68|}
formatter.c:format_manage_buy_offer_buy:
  932|     68|static bool format_manage_buy_offer_buy(formatter_data_t *fdata) {
  933|     68|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  934|       |
  935|     68|    STRLCPY(fdata->caption, "Buy", fdata->caption_len);
  ------------------
  |  |   35|     68|    {                                         \
  |  |   36|     68|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     68|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 68]
  |  |  ------------------
  |  |   38|     68|    }
  ------------------
  936|     68|    FORMATTER_CHECK(print_amount(op->buy_amount,
  ------------------
  |  |   30|     68|    {                           \
  |  |   31|     68|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 68]
  |  |  ------------------
  |  |   32|     68|    }
  ------------------
  937|     68|                                 &op->buying,
  938|     68|                                 fdata->envelope->network,
  939|     68|                                 fdata->value,
  940|     68|                                 fdata->value_len))
  941|     68|    FORMATTER_CHECK(push_to_formatter_stack(&format_manage_buy_offer_price))
  ------------------
  |  |   30|     68|    {                           \
  |  |   31|     68|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 68]
  |  |  ------------------
  |  |   32|     68|    }
  ------------------
  942|     68|    return true;
  943|     68|}
formatter.c:format_manage_buy_offer_price:
  920|     68|static bool format_manage_buy_offer_price(formatter_data_t *fdata) {
  921|     68|    manage_buy_offer_op_t *op = &fdata->envelope->tx_details.tx.op_details.manage_buy_offer_op;
  922|     68|    STRLCPY(fdata->caption, "Price", fdata->caption_len);
  ------------------
  |  |   35|     68|    {                                         \
  |  |   36|     68|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     68|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 68]
  |  |  ------------------
  |  |   38|     68|    }
  ------------------
  923|     68|    FORMATTER_CHECK(print_price(&op->price,
  ------------------
  |  |   30|     68|    {                           \
  |  |   31|     68|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 68]
  |  |  ------------------
  |  |   32|     68|    }
  ------------------
  924|     68|                                &op->selling,
  925|     68|                                &op->buying,
  926|     68|                                fdata->envelope->network,
  927|     68|                                fdata->value,
  928|     68|                                fdata->value_len))
  929|     68|    return format_operation_source_prepare(fdata);
  930|     68|}
formatter.c:format_path_payment_strict_send:
 1076|     61|static bool format_path_payment_strict_send(formatter_data_t *fdata) {
 1077|     61|    STRLCPY(fdata->caption, "Send", fdata->caption_len);
  ------------------
  |  |   35|     61|    {                                         \
  |  |   36|     61|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     61|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 61]
  |  |  ------------------
  |  |   38|     61|    }
  ------------------
 1078|     61|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     61|    {                           \
  |  |   31|     61|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 61]
  |  |  ------------------
  |  |   32|     61|    }
  ------------------
 1079|     61|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.send_amount,
 1080|     61|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.send_asset,
 1081|     61|        fdata->envelope->network,
 1082|     61|        fdata->value,
 1083|     61|        fdata->value_len))
 1084|     61|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_send_destination))
  ------------------
  |  |   30|     61|    {                           \
  |  |   31|     61|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 61]
  |  |  ------------------
  |  |   32|     61|    }
  ------------------
 1085|     61|    return true;
 1086|     61|}
formatter.c:format_path_payment_strict_send_destination:
 1064|     61|static bool format_path_payment_strict_send_destination(formatter_data_t *fdata) {
 1065|     61|    STRLCPY(fdata->caption, "Destination", fdata->caption_len);
  ------------------
  |  |   35|     61|    {                                         \
  |  |   36|     61|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     61|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 61]
  |  |  ------------------
  |  |   38|     61|    }
  ------------------
 1066|     61|    FORMATTER_CHECK(print_muxed_account(
  ------------------
  |  |   30|     61|    {                           \
  |  |   31|     61|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 61]
  |  |  ------------------
  |  |   32|     61|    }
  ------------------
 1067|     61|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.destination,
 1068|     61|        fdata->value,
 1069|     61|        fdata->value_len,
 1070|     61|        0,
 1071|     61|        0))
 1072|     61|    FORMATTER_CHECK(push_to_formatter_stack(&format_path_payment_strict_send_receive))
  ------------------
  |  |   30|     61|    {                           \
  |  |   31|     61|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 61]
  |  |  ------------------
  |  |   32|     61|    }
  ------------------
 1073|     61|    return true;
 1074|     61|}
formatter.c:format_path_payment_strict_send_receive:
 1053|     61|static bool format_path_payment_strict_send_receive(formatter_data_t *fdata) {
 1054|     61|    STRLCPY(fdata->caption, "Receive Min", fdata->caption_len);
  ------------------
  |  |   35|     61|    {                                         \
  |  |   36|     61|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     61|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 61]
  |  |  ------------------
  |  |   38|     61|    }
  ------------------
 1055|     61|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     61|    {                           \
  |  |   31|     61|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 61]
  |  |  ------------------
  |  |   32|     61|    }
  ------------------
 1056|     61|        fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.dest_min,
 1057|     61|        &fdata->envelope->tx_details.tx.op_details.path_payment_strict_send_op.dest_asset,
 1058|     61|        fdata->envelope->network,
 1059|     61|        fdata->value,
 1060|     61|        fdata->value_len))
 1061|     61|    return format_operation_source_prepare(fdata);
 1062|     61|}
formatter.c:format_create_claimable_balance:
 1165|    321|static bool format_create_claimable_balance(formatter_data_t *fdata) {
 1166|    321|    (void) fdata;
 1167|    321|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    321|    {                                         \
  |  |   36|    321|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    321|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 321]
  |  |  ------------------
  |  |   38|    321|    }
  ------------------
 1168|    321|    STRLCPY(fdata->value, "Create Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|    321|    {                                         \
  |  |   36|    321|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    321|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 321]
  |  |  ------------------
  |  |   38|    321|    }
  ------------------
 1169|    321|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_claimable_balance_balance))
  ------------------
  |  |   30|    321|    {                           \
  |  |   31|    321|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 321]
  |  |  ------------------
  |  |   32|    321|    }
  ------------------
 1170|    321|    return true;
 1171|    321|}
formatter.c:format_create_claimable_balance_balance:
 1153|    321|static bool format_create_claimable_balance_balance(formatter_data_t *fdata) {
 1154|    321|    STRLCPY(fdata->caption, "Balance", fdata->caption_len);
  ------------------
  |  |   35|    321|    {                                         \
  |  |   36|    321|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    321|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 321]
  |  |  ------------------
  |  |   38|    321|    }
  ------------------
 1155|    321|    FORMATTER_CHECK(
  ------------------
  |  |   30|    321|    {                           \
  |  |   31|    321|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 321]
  |  |  ------------------
  |  |   32|    321|    }
  ------------------
 1156|    321|        print_amount(fdata->envelope->tx_details.tx.op_details.create_claimable_balance_op.amount,
 1157|    321|                     &fdata->envelope->tx_details.tx.op_details.create_claimable_balance_op.asset,
 1158|    321|                     fdata->envelope->network,
 1159|    321|                     fdata->value,
 1160|    321|                     fdata->value_len))
 1161|    321|    FORMATTER_CHECK(push_to_formatter_stack(&format_create_claimable_balance_warning))
  ------------------
  |  |   30|    321|    {                           \
  |  |   31|    321|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 321]
  |  |  ------------------
  |  |   32|    321|    }
  ------------------
 1162|    321|    return true;
 1163|    321|}
formatter.c:format_create_claimable_balance_warning:
 1142|    321|static bool format_create_claimable_balance_warning(formatter_data_t *fdata) {
 1143|    321|    (void) fdata;
 1144|       |    // The claimant can be very complicated. I haven't figured out how to
 1145|       |    // display it for the time being, so let's display an WARNING here first.
 1146|    321|    STRLCPY(fdata->caption, "WARNING", fdata->caption_len);
  ------------------
  |  |   35|    321|    {                                         \
  |  |   36|    321|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    321|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 321]
  |  |  ------------------
  |  |   38|    321|    }
  ------------------
 1147|    321|    STRLCPY(fdata->value,
  ------------------
  |  |   35|    321|    {                                         \
  |  |   36|    321|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    321|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 321]
  |  |  ------------------
  |  |   38|    321|    }
  ------------------
 1148|    321|            "Currently does not support displaying claimant details",
 1149|    321|            fdata->value_len);
 1150|    321|    return format_operation_source_prepare(fdata);
 1151|    321|}
formatter.c:format_claim_claimable_balance:
 1184|    166|static bool format_claim_claimable_balance(formatter_data_t *fdata) {
 1185|    166|    (void) fdata;
 1186|    166|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    166|    {                                         \
  |  |   36|    166|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    166|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 166]
  |  |  ------------------
  |  |   38|    166|    }
  ------------------
 1187|    166|    STRLCPY(fdata->value, "Claim Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|    166|    {                                         \
  |  |   36|    166|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    166|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 166]
  |  |  ------------------
  |  |   38|    166|    }
  ------------------
 1188|    166|    FORMATTER_CHECK(push_to_formatter_stack(&format_claim_claimable_balance_balance_id))
  ------------------
  |  |   30|    166|    {                           \
  |  |   31|    166|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 166]
  |  |  ------------------
  |  |   32|    166|    }
  ------------------
 1189|    166|    return true;
 1190|    166|}
formatter.c:format_claim_claimable_balance_balance_id:
 1173|    166|static bool format_claim_claimable_balance_balance_id(formatter_data_t *fdata) {
 1174|    166|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|    166|    {                                         \
  |  |   36|    166|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    166|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 166]
  |  |  ------------------
  |  |   38|    166|    }
  ------------------
 1175|    166|    FORMATTER_CHECK(print_claimable_balance_id(
  ------------------
  |  |   30|    166|    {                           \
  |  |   31|    166|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 166]
  |  |  ------------------
  |  |   32|    166|    }
  ------------------
 1176|    166|        &fdata->envelope->tx_details.tx.op_details.claim_claimable_balance_op.balance_id,
 1177|    166|        fdata->value,
 1178|    166|        fdata->value_len,
 1179|    166|        12,
 1180|    166|        12))
 1181|    166|    return format_operation_source_prepare(fdata);
 1182|    166|}
formatter.c:format_begin_sponsoring_future_reserves:
 1203|    325|static bool format_begin_sponsoring_future_reserves(formatter_data_t *fdata) {
 1204|    325|    (void) fdata;
 1205|    325|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    325|    {                                         \
  |  |   36|    325|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    325|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 325]
  |  |  ------------------
  |  |   38|    325|    }
  ------------------
 1206|    325|    STRLCPY(fdata->value, "Begin Sponsoring Future Reserves", fdata->value_len);
  ------------------
  |  |   35|    325|    {                                         \
  |  |   36|    325|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    325|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 325]
  |  |  ------------------
  |  |   38|    325|    }
  ------------------
 1207|    325|    FORMATTER_CHECK(push_to_formatter_stack(&format_claim_claimable_balance_sponsored_id))
  ------------------
  |  |   30|    325|    {                           \
  |  |   31|    325|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 325]
  |  |  ------------------
  |  |   32|    325|    }
  ------------------
 1208|    325|    return true;
 1209|    325|}
formatter.c:format_claim_claimable_balance_sponsored_id:
 1192|    325|static bool format_claim_claimable_balance_sponsored_id(formatter_data_t *fdata) {
 1193|    325|    STRLCPY(fdata->caption, "Sponsored ID", fdata->caption_len);
  ------------------
  |  |   35|    325|    {                                         \
  |  |   36|    325|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    325|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 325]
  |  |  ------------------
  |  |   38|    325|    }
  ------------------
 1194|    325|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|    325|    {                           \
  |  |   31|    325|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 325]
  |  |  ------------------
  |  |   32|    325|    }
  ------------------
 1195|    325|        fdata->envelope->tx_details.tx.op_details.begin_sponsoring_future_reserves_op.sponsored_id,
 1196|    325|        fdata->value,
 1197|    325|        fdata->value_len,
 1198|    325|        0,
 1199|    325|        0))
 1200|    325|    return format_operation_source_prepare(fdata);
 1201|    325|}
formatter.c:format_end_sponsoring_future_reserves:
 1211|    179|static bool format_end_sponsoring_future_reserves(formatter_data_t *fdata) {
 1212|    179|    (void) fdata;
 1213|    179|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    179|    {                                         \
  |  |   36|    179|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    179|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 179]
  |  |  ------------------
  |  |   38|    179|    }
  ------------------
 1214|    179|    STRLCPY(fdata->value, "End Sponsoring Future Reserves", fdata->value_len);
  ------------------
  |  |   35|    179|    {                                         \
  |  |   36|    179|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    179|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 179]
  |  |  ------------------
  |  |   38|    179|    }
  ------------------
 1215|    179|    return format_operation_source_prepare(fdata);
 1216|    179|}
formatter.c:format_revoke_sponsorship:
 1383|  1.82k|static bool format_revoke_sponsorship(formatter_data_t *fdata) {
 1384|  1.82k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  1.82k|    {                                         \
  |  |   36|  1.82k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.82k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.82k]
  |  |  ------------------
  |  |   38|  1.82k|    }
  ------------------
 1385|  1.82k|    if (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.type ==
  ------------------
  |  Branch (1385:9): [True: 782, False: 1.03k]
  ------------------
 1386|  1.82k|        REVOKE_SPONSORSHIP_SIGNER) {
 1387|    782|        STRLCPY(fdata->value, "Revoke Sponsorship (SIGNER_KEY)", fdata->value_len);
  ------------------
  |  |   35|    782|    {                                         \
  |  |   36|    782|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    782|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 782]
  |  |  ------------------
  |  |   38|    782|    }
  ------------------
 1388|    782|        FORMATTER_CHECK(
  ------------------
  |  |   30|    782|    {                           \
  |  |   31|    782|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 782]
  |  |  ------------------
  |  |   32|    782|    }
  ------------------
 1389|    782|            push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_account))
 1390|  1.03k|    } else {
 1391|  1.03k|        switch (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.type) {
 1392|    190|            case ACCOUNT:
  ------------------
  |  Branch (1392:13): [True: 190, False: 849]
  ------------------
 1393|    190|                STRLCPY(fdata->value, "Revoke Sponsorship (ACCOUNT)", fdata->value_len);
  ------------------
  |  |   35|    190|    {                                         \
  |  |   36|    190|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    190|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 190]
  |  |  ------------------
  |  |   38|    190|    }
  ------------------
 1394|    190|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_account))
  ------------------
  |  |   30|    190|    {                           \
  |  |   31|    190|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 190]
  |  |  ------------------
  |  |   32|    190|    }
  ------------------
 1395|    190|                break;
 1396|    190|            case OFFER:
  ------------------
  |  Branch (1396:13): [True: 75, False: 964]
  ------------------
 1397|     75|                STRLCPY(fdata->value, "Revoke Sponsorship (OFFER)", fdata->value_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1398|     75|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_offer_seller_id))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1399|     75|                break;
 1400|    324|            case TRUSTLINE:
  ------------------
  |  Branch (1400:13): [True: 324, False: 715]
  ------------------
 1401|    324|                STRLCPY(fdata->value, "Revoke Sponsorship (TRUSTLINE)", fdata->value_len);
  ------------------
  |  |   35|    324|    {                                         \
  |  |   36|    324|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    324|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 324]
  |  |  ------------------
  |  |   38|    324|    }
  ------------------
 1402|    324|                FORMATTER_CHECK(
  ------------------
  |  |   30|    324|    {                           \
  |  |   31|    324|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 324]
  |  |  ------------------
  |  |   32|    324|    }
  ------------------
 1403|    324|                    push_to_formatter_stack(&format_revoke_sponsorship_trust_line_account))
 1404|    324|                break;
 1405|    324|            case DATA:
  ------------------
  |  Branch (1405:13): [True: 101, False: 938]
  ------------------
 1406|    101|                STRLCPY(fdata->value, "Revoke Sponsorship (DATA)", fdata->value_len);
  ------------------
  |  |   35|    101|    {                                         \
  |  |   36|    101|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    101|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 101]
  |  |  ------------------
  |  |   38|    101|    }
  ------------------
 1407|    101|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_data_account))
  ------------------
  |  |   30|    101|    {                           \
  |  |   31|    101|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 101]
  |  |  ------------------
  |  |   32|    101|    }
  ------------------
 1408|    101|                break;
 1409|    122|            case CLAIMABLE_BALANCE:
  ------------------
  |  Branch (1409:13): [True: 122, False: 917]
  ------------------
 1410|    122|                STRLCPY(fdata->value, "Revoke Sponsorship (CLAIMABLE_BALANCE)", fdata->value_len);
  ------------------
  |  |   35|    122|    {                                         \
  |  |   36|    122|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    122|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 122]
  |  |  ------------------
  |  |   38|    122|    }
  ------------------
 1411|    122|                FORMATTER_CHECK(
  ------------------
  |  |   30|    122|    {                           \
  |  |   31|    122|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 122]
  |  |  ------------------
  |  |   32|    122|    }
  ------------------
 1412|    122|                    push_to_formatter_stack(&format_revoke_sponsorship_claimable_balance))
 1413|    122|                break;
 1414|    227|            case LIQUIDITY_POOL:
  ------------------
  |  Branch (1414:13): [True: 227, False: 812]
  ------------------
 1415|    227|                STRLCPY(fdata->value, "Revoke Sponsorship (LIQUIDITY_POOL)", fdata->value_len);
  ------------------
  |  |   35|    227|    {                                         \
  |  |   36|    227|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    227|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 227]
  |  |  ------------------
  |  |   38|    227|    }
  ------------------
 1416|    227|                FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_liquidity_pool))
  ------------------
  |  |   30|    227|    {                           \
  |  |   31|    227|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 227]
  |  |  ------------------
  |  |   32|    227|    }
  ------------------
 1417|    227|                break;
 1418|    227|            default:
  ------------------
  |  Branch (1418:13): [True: 0, False: 1.03k]
  ------------------
 1419|      0|                return false;
 1420|  1.03k|        }
 1421|  1.03k|    }
 1422|  1.82k|    return true;
 1423|  1.82k|}
formatter.c:format_revoke_sponsorship_claimable_signer_account:
 1370|    782|static bool format_revoke_sponsorship_claimable_signer_account(formatter_data_t *fdata) {
 1371|    782|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    782|    {                                         \
  |  |   36|    782|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    782|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 782]
  |  |  ------------------
  |  |   38|    782|    }
  ------------------
 1372|    782|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|    782|    {                           \
  |  |   31|    782|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 782]
  |  |  ------------------
  |  |   32|    782|    }
  ------------------
 1373|    782|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.account_id,
 1374|    782|        fdata->value,
 1375|    782|        fdata->value_len,
 1376|    782|        0,
 1377|    782|        0))
 1378|    782|    FORMATTER_CHECK(
  ------------------
  |  |   30|    782|    {                           \
  |  |   31|    782|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 782]
  |  |  ------------------
  |  |   32|    782|    }
  ------------------
 1379|    782|        push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_signer_key_type))
 1380|    782|    return true;
 1381|    782|}
formatter.c:format_revoke_sponsorship_claimable_signer_signer_key_type:
 1341|    782|static bool format_revoke_sponsorship_claimable_signer_signer_key_type(formatter_data_t *fdata) {
 1342|    782|    STRLCPY(fdata->caption, "Signer Key Type", fdata->caption_len);
  ------------------
  |  |   35|    782|    {                                         \
  |  |   36|    782|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    782|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 782]
  |  |  ------------------
  |  |   38|    782|    }
  ------------------
 1343|    782|    switch (
 1344|    782|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.signer_key.type) {
 1345|    346|        case SIGNER_KEY_TYPE_ED25519: {
  ------------------
  |  Branch (1345:9): [True: 346, False: 436]
  ------------------
 1346|    346|            STRLCPY(fdata->value, "Public Key", fdata->value_len);
  ------------------
  |  |   35|    346|    {                                         \
  |  |   36|    346|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    346|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 346]
  |  |  ------------------
  |  |   38|    346|    }
  ------------------
 1347|    346|            break;
 1348|    346|        }
 1349|     87|        case SIGNER_KEY_TYPE_HASH_X: {
  ------------------
  |  Branch (1349:9): [True: 87, False: 695]
  ------------------
 1350|     87|            STRLCPY(fdata->value, "Hash(x)", fdata->value_len);
  ------------------
  |  |   35|     87|    {                                         \
  |  |   36|     87|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     87|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 87]
  |  |  ------------------
  |  |   38|     87|    }
  ------------------
 1351|     87|            break;
 1352|     87|        }
 1353|    191|        case SIGNER_KEY_TYPE_PRE_AUTH_TX: {
  ------------------
  |  Branch (1353:9): [True: 191, False: 591]
  ------------------
 1354|    191|            STRLCPY(fdata->value, "Pre-Auth", fdata->value_len);
  ------------------
  |  |   35|    191|    {                                         \
  |  |   36|    191|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    191|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 191]
  |  |  ------------------
  |  |   38|    191|    }
  ------------------
 1355|    191|            break;
 1356|    191|        }
 1357|    158|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD: {
  ------------------
  |  Branch (1357:9): [True: 158, False: 624]
  ------------------
 1358|    158|            STRLCPY(fdata->value, "Ed25519 Signed Payload", fdata->value_len);
  ------------------
  |  |   35|    158|    {                                         \
  |  |   36|    158|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    158|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 158]
  |  |  ------------------
  |  |   38|    158|    }
  ------------------
 1359|    158|            break;
 1360|    158|        }
 1361|      0|        default:
  ------------------
  |  Branch (1361:9): [True: 0, False: 782]
  ------------------
 1362|      0|            return false;
 1363|    782|    }
 1364|       |
 1365|    782|    FORMATTER_CHECK(
  ------------------
  |  |   30|    782|    {                           \
  |  |   31|    782|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 782]
  |  |  ------------------
  |  |   32|    782|    }
  ------------------
 1366|    782|        push_to_formatter_stack(&format_revoke_sponsorship_claimable_signer_signer_key_detail))
 1367|    782|    return true;
 1368|    782|}
formatter.c:format_revoke_sponsorship_claimable_signer_signer_key_detail:
 1332|    782|static bool format_revoke_sponsorship_claimable_signer_signer_key_detail(formatter_data_t *fdata) {
 1333|    782|    STRLCPY(fdata->caption, "Signer Key", fdata->caption_len);
  ------------------
  |  |   35|    782|    {                                         \
  |  |   36|    782|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    782|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 782]
  |  |  ------------------
  |  |   38|    782|    }
  ------------------
 1334|    782|    signer_key_t *key =
 1335|    782|        &fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.signer.signer_key;
 1336|       |
 1337|    782|    FORMATTER_CHECK(print_signer_key_detail(key, fdata->value, fdata->value_len))
  ------------------
  |  |   30|    782|    {                           \
  |  |   31|    782|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 782]
  |  |  ------------------
  |  |   32|    782|    }
  ------------------
 1338|    782|    return format_operation_source_prepare(fdata);
 1339|    782|}
formatter.c:format_revoke_sponsorship_account:
 1218|    190|static bool format_revoke_sponsorship_account(formatter_data_t *fdata) {
 1219|    190|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    190|    {                                         \
  |  |   36|    190|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    190|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 190]
  |  |  ------------------
  |  |   38|    190|    }
  ------------------
 1220|    190|    FORMATTER_CHECK(print_account_id(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|    190|    {                           \
  |  |   31|    190|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 190]
  |  |  ------------------
  |  |   32|    190|    }
  ------------------
 1221|    190|                                         .ledger_key.account.account_id,
 1222|    190|                                     fdata->value,
 1223|    190|                                     fdata->value_len,
 1224|    190|                                     0,
 1225|    190|                                     0))
 1226|    190|    return format_operation_source_prepare(fdata);
 1227|    190|}
formatter.c:format_revoke_sponsorship_offer_seller_id:
 1273|     75|static bool format_revoke_sponsorship_offer_seller_id(formatter_data_t *fdata) {
 1274|     75|    STRLCPY(fdata->caption, "Seller ID", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1275|     75|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1276|     75|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.offer.seller_id,
 1277|     75|        fdata->value,
 1278|     75|        fdata->value_len,
 1279|     75|        0,
 1280|     75|        0))
 1281|     75|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_offer_offer_id))
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1282|     75|    return true;
 1283|     75|}
formatter.c:format_revoke_sponsorship_offer_offer_id:
 1263|     75|static bool format_revoke_sponsorship_offer_offer_id(formatter_data_t *fdata) {
 1264|     75|    STRLCPY(fdata->caption, "Offer ID", fdata->caption_len);
  ------------------
  |  |   35|     75|    {                                         \
  |  |   36|     75|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     75|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   38|     75|    }
  ------------------
 1265|     75|    FORMATTER_CHECK(print_uint64_num(
  ------------------
  |  |   30|     75|    {                           \
  |  |   31|     75|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 75]
  |  |  ------------------
  |  |   32|     75|    }
  ------------------
 1266|     75|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.offer.offer_id,
 1267|     75|        fdata->value,
 1268|     75|        fdata->value_len))
 1269|       |
 1270|     75|    return format_operation_source_prepare(fdata);
 1271|     75|}
formatter.c:format_revoke_sponsorship_trust_line_account:
 1251|    324|static bool format_revoke_sponsorship_trust_line_account(formatter_data_t *fdata) {
 1252|    324|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    324|    {                                         \
  |  |   36|    324|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    324|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 324]
  |  |  ------------------
  |  |   38|    324|    }
  ------------------
 1253|    324|    FORMATTER_CHECK(print_account_id(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|    324|    {                           \
  |  |   31|    324|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 324]
  |  |  ------------------
  |  |   32|    324|    }
  ------------------
 1254|    324|                                         .ledger_key.trust_line.account_id,
 1255|    324|                                     fdata->value,
 1256|    324|                                     fdata->value_len,
 1257|    324|                                     0,
 1258|    324|                                     0))
 1259|    324|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_trust_line_asset))
  ------------------
  |  |   30|    324|    {                           \
  |  |   31|    324|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 324]
  |  |  ------------------
  |  |   32|    324|    }
  ------------------
 1260|    324|    return true;
 1261|    324|}
formatter.c:format_revoke_sponsorship_trust_line_asset:
 1229|    324|static bool format_revoke_sponsorship_trust_line_asset(formatter_data_t *fdata) {
 1230|    324|    if (fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.trust_line.asset
  ------------------
  |  Branch (1230:9): [True: 72, False: 252]
  ------------------
 1231|    324|            .type == ASSET_TYPE_POOL_SHARE) {
 1232|     72|        STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     72|    {                                         \
  |  |   36|     72|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     72|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 72]
  |  |  ------------------
  |  |   38|     72|    }
  ------------------
 1233|     72|        FORMATTER_CHECK(print_binary(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|     72|    {                           \
  |  |   31|     72|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 72]
  |  |  ------------------
  |  |   32|     72|    }
  ------------------
 1234|     72|                                         .ledger_key.trust_line.asset.liquidity_pool_id,
 1235|     72|                                     LIQUIDITY_POOL_ID_SIZE,
 1236|     72|                                     fdata->value,
 1237|     72|                                     fdata->value_len,
 1238|     72|                                     0,
 1239|     72|                                     0))
 1240|    252|    } else {
 1241|    252|        STRLCPY(fdata->caption, "Asset", fdata->caption_len);
  ------------------
  |  |   35|    252|    {                                         \
  |  |   36|    252|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    252|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 252]
  |  |  ------------------
  |  |   38|    252|    }
  ------------------
 1242|    252|        FORMATTER_CHECK(print_asset((asset_t *) &fdata->envelope->tx_details.tx.op_details
  ------------------
  |  |   30|    252|    {                           \
  |  |   31|    252|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 252]
  |  |  ------------------
  |  |   32|    252|    }
  ------------------
 1243|    252|                                        .revoke_sponsorship_op.ledger_key.trust_line.asset,
 1244|    252|                                    fdata->envelope->network,
 1245|    252|                                    fdata->value,
 1246|    252|                                    fdata->value_len))
 1247|    252|    }
 1248|    324|    return format_operation_source_prepare(fdata);
 1249|    324|}
formatter.c:format_revoke_sponsorship_data_account:
 1296|    101|static bool format_revoke_sponsorship_data_account(formatter_data_t *fdata) {
 1297|    101|    STRLCPY(fdata->caption, "Account ID", fdata->caption_len);
  ------------------
  |  |   35|    101|    {                                         \
  |  |   36|    101|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    101|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 101]
  |  |  ------------------
  |  |   38|    101|    }
  ------------------
 1298|    101|    FORMATTER_CHECK(print_account_id(
  ------------------
  |  |   30|    101|    {                           \
  |  |   31|    101|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 101]
  |  |  ------------------
  |  |   32|    101|    }
  ------------------
 1299|    101|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data.account_id,
 1300|    101|        fdata->value,
 1301|    101|        fdata->value_len,
 1302|    101|        0,
 1303|    101|        0))
 1304|    101|    FORMATTER_CHECK(push_to_formatter_stack(&format_revoke_sponsorship_data_data_name))
  ------------------
  |  |   30|    101|    {                           \
  |  |   31|    101|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 101]
  |  |  ------------------
  |  |   32|    101|    }
  ------------------
 1305|    101|    return true;
 1306|    101|}
formatter.c:format_revoke_sponsorship_data_data_name:
 1285|    101|static bool format_revoke_sponsorship_data_data_name(formatter_data_t *fdata) {
 1286|    101|    STRLCPY(fdata->caption, "Data Name", fdata->caption_len);
  ------------------
  |  |   35|    101|    {                                         \
  |  |   36|    101|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    101|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 101]
  |  |  ------------------
  |  |   38|    101|    }
  ------------------
 1287|    101|    FORMATTER_CHECK(print_string(
  ------------------
  |  |   30|    101|    {                           \
  |  |   31|    101|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 101]
  |  |  ------------------
  |  |   32|    101|    }
  ------------------
 1288|    101|        fdata->value,
 1289|    101|        fdata->value_len,
 1290|    101|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data.data_name,
 1291|    101|        fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op.ledger_key.data
 1292|    101|            .data_name_size))
 1293|    101|    return format_operation_source_prepare(fdata);
 1294|    101|}
formatter.c:format_revoke_sponsorship_claimable_balance:
 1308|    122|static bool format_revoke_sponsorship_claimable_balance(formatter_data_t *fdata) {
 1309|    122|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|    122|    {                                         \
  |  |   36|    122|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    122|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 122]
  |  |  ------------------
  |  |   38|    122|    }
  ------------------
 1310|    122|    FORMATTER_CHECK(
  ------------------
  |  |   30|    122|    {                           \
  |  |   31|    122|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 122]
  |  |  ------------------
  |  |   32|    122|    }
  ------------------
 1311|    122|        print_claimable_balance_id(&fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
 1312|    122|                                        .ledger_key.claimable_balance.balance_id,
 1313|    122|                                   fdata->value,
 1314|    122|                                   fdata->value_len,
 1315|    122|                                   0,
 1316|    122|                                   0))
 1317|    122|    return format_operation_source_prepare(fdata);
 1318|    122|}
formatter.c:format_revoke_sponsorship_liquidity_pool:
 1320|    227|static bool format_revoke_sponsorship_liquidity_pool(formatter_data_t *fdata) {
 1321|    227|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|    227|    {                                         \
  |  |   36|    227|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    227|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 227]
  |  |  ------------------
  |  |   38|    227|    }
  ------------------
 1322|    227|    FORMATTER_CHECK(print_binary(fdata->envelope->tx_details.tx.op_details.revoke_sponsorship_op
  ------------------
  |  |   30|    227|    {                           \
  |  |   31|    227|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 227]
  |  |  ------------------
  |  |   32|    227|    }
  ------------------
 1323|    227|                                     .ledger_key.liquidity_pool.liquidity_pool_id,
 1324|    227|                                 LIQUIDITY_POOL_ID_SIZE,
 1325|    227|                                 fdata->value,
 1326|    227|                                 fdata->value_len,
 1327|    227|                                 0,
 1328|    227|                                 0))
 1329|    227|    return format_operation_source_prepare(fdata);
 1330|    227|}
formatter.c:format_clawback:
 1446|     93|static bool format_clawback(formatter_data_t *fdata) {
 1447|     93|    (void) fdata;
 1448|     93|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     93|    {                                         \
  |  |   36|     93|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     93|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 93]
  |  |  ------------------
  |  |   38|     93|    }
  ------------------
 1449|     93|    STRLCPY(fdata->value, "Clawback", fdata->value_len);
  ------------------
  |  |   35|     93|    {                                         \
  |  |   36|     93|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     93|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 93]
  |  |  ------------------
  |  |   38|     93|    }
  ------------------
 1450|     93|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_amount))
  ------------------
  |  |   30|     93|    {                           \
  |  |   31|     93|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 93]
  |  |  ------------------
  |  |   32|     93|    }
  ------------------
 1451|     93|    return true;
 1452|     93|}
formatter.c:format_clawback_amount:
 1435|     93|static bool format_clawback_amount(formatter_data_t *fdata) {
 1436|     93|    STRLCPY(fdata->caption, "Clawback Balance", fdata->caption_len);
  ------------------
  |  |   35|     93|    {                                         \
  |  |   36|     93|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     93|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 93]
  |  |  ------------------
  |  |   38|     93|    }
  ------------------
 1437|     93|    FORMATTER_CHECK(print_amount(fdata->envelope->tx_details.tx.op_details.clawback_op.amount,
  ------------------
  |  |   30|     93|    {                           \
  |  |   31|     93|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 93]
  |  |  ------------------
  |  |   32|     93|    }
  ------------------
 1438|     93|                                 &fdata->envelope->tx_details.tx.op_details.clawback_op.asset,
 1439|     93|                                 fdata->envelope->network,
 1440|     93|                                 fdata->value,
 1441|     93|                                 fdata->value_len))
 1442|     93|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_from))
  ------------------
  |  |   30|     93|    {                           \
  |  |   31|     93|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 93]
  |  |  ------------------
  |  |   32|     93|    }
  ------------------
 1443|     93|    return true;
 1444|     93|}
formatter.c:format_clawback_from:
 1425|     93|static bool format_clawback_from(formatter_data_t *fdata) {
 1426|     93|    STRLCPY(fdata->caption, "From", fdata->caption_len);
  ------------------
  |  |   35|     93|    {                                         \
  |  |   36|     93|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     93|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 93]
  |  |  ------------------
  |  |   38|     93|    }
  ------------------
 1427|     93|    FORMATTER_CHECK(print_muxed_account(&fdata->envelope->tx_details.tx.op_details.clawback_op.from,
  ------------------
  |  |   30|     93|    {                           \
  |  |   31|     93|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 93]
  |  |  ------------------
  |  |   32|     93|    }
  ------------------
 1428|     93|                                        fdata->value,
 1429|     93|                                        fdata->value_len,
 1430|     93|                                        0,
 1431|     93|                                        0))
 1432|     93|    return format_operation_source_prepare(fdata);
 1433|     93|}
formatter.c:format_clawback_claimable_balance:
 1465|    142|static bool format_clawback_claimable_balance(formatter_data_t *fdata) {
 1466|    142|    (void) fdata;
 1467|    142|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    142|    {                                         \
  |  |   36|    142|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    142|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 142]
  |  |  ------------------
  |  |   38|    142|    }
  ------------------
 1468|    142|    STRLCPY(fdata->value, "Clawback Claimable Balance", fdata->value_len);
  ------------------
  |  |   35|    142|    {                                         \
  |  |   36|    142|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    142|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 142]
  |  |  ------------------
  |  |   38|    142|    }
  ------------------
 1469|    142|    FORMATTER_CHECK(push_to_formatter_stack(&format_clawback_claimable_balance_balance_id))
  ------------------
  |  |   30|    142|    {                           \
  |  |   31|    142|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 142]
  |  |  ------------------
  |  |   32|    142|    }
  ------------------
 1470|    142|    return true;
 1471|    142|}
formatter.c:format_clawback_claimable_balance_balance_id:
 1454|    142|static bool format_clawback_claimable_balance_balance_id(formatter_data_t *fdata) {
 1455|    142|    STRLCPY(fdata->caption, "Balance ID", fdata->caption_len);
  ------------------
  |  |   35|    142|    {                                         \
  |  |   36|    142|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    142|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 142]
  |  |  ------------------
  |  |   38|    142|    }
  ------------------
 1456|    142|    FORMATTER_CHECK(print_claimable_balance_id(
  ------------------
  |  |   30|    142|    {                           \
  |  |   31|    142|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 142]
  |  |  ------------------
  |  |   32|    142|    }
  ------------------
 1457|    142|        &fdata->envelope->tx_details.tx.op_details.clawback_claimable_balance_op.balance_id,
 1458|    142|        fdata->value,
 1459|    142|        fdata->value_len,
 1460|    142|        0,
 1461|    142|        0))
 1462|    142|    return format_operation_source_prepare(fdata);
 1463|    142|}
formatter.c:format_set_trust_line_flags:
 1523|  1.40k|static bool format_set_trust_line_flags(formatter_data_t *fdata) {
 1524|  1.40k|    (void) fdata;
 1525|  1.40k|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|  1.40k|    {                                         \
  |  |   36|  1.40k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.40k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.40k]
  |  |  ------------------
  |  |   38|  1.40k|    }
  ------------------
 1526|  1.40k|    STRLCPY(fdata->value, "Set Trust Line Flags", fdata->value_len);
  ------------------
  |  |   35|  1.40k|    {                                         \
  |  |   36|  1.40k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.40k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.40k]
  |  |  ------------------
  |  |   38|  1.40k|    }
  ------------------
 1527|  1.40k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_trustor))
  ------------------
  |  |   30|  1.40k|    {                           \
  |  |   31|  1.40k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.40k]
  |  |  ------------------
  |  |   32|  1.40k|    }
  ------------------
 1528|  1.40k|    return true;
 1529|  1.40k|}
formatter.c:format_set_trust_line_trustor:
 1511|  1.40k|static bool format_set_trust_line_trustor(formatter_data_t *fdata) {
 1512|  1.40k|    STRLCPY(fdata->caption, "Trustor", fdata->caption_len);
  ------------------
  |  |   35|  1.40k|    {                                         \
  |  |   36|  1.40k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.40k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.40k]
  |  |  ------------------
  |  |   38|  1.40k|    }
  ------------------
 1513|  1.40k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.40k|    {                           \
  |  |   31|  1.40k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.40k]
  |  |  ------------------
  |  |   32|  1.40k|    }
  ------------------
 1514|  1.40k|        print_account_id(fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.trustor,
 1515|  1.40k|                         fdata->value,
 1516|  1.40k|                         fdata->value_len,
 1517|  1.40k|                         0,
 1518|  1.40k|                         0))
 1519|  1.40k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_asset))
  ------------------
  |  |   30|  1.40k|    {                           \
  |  |   31|  1.40k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.40k]
  |  |  ------------------
  |  |   32|  1.40k|    }
  ------------------
 1520|  1.40k|    return true;
 1521|  1.40k|}
formatter.c:format_set_trust_line_asset:
 1500|  1.40k|static bool format_set_trust_line_asset(formatter_data_t *fdata) {
 1501|  1.40k|    STRLCPY(fdata->caption, "Asset", fdata->caption_len);
  ------------------
  |  |   35|  1.40k|    {                                         \
  |  |   36|  1.40k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.40k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.40k]
  |  |  ------------------
  |  |   38|  1.40k|    }
  ------------------
 1502|  1.40k|    FORMATTER_CHECK(
  ------------------
  |  |   30|  1.40k|    {                           \
  |  |   31|  1.40k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.40k]
  |  |  ------------------
  |  |   32|  1.40k|    }
  ------------------
 1503|  1.40k|        print_asset(&fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.asset,
 1504|  1.40k|                    fdata->envelope->network,
 1505|  1.40k|                    fdata->value,
 1506|  1.40k|                    fdata->value_len))
 1507|  1.40k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_clear_flags))
  ------------------
  |  |   30|  1.40k|    {                           \
  |  |   31|  1.40k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.40k]
  |  |  ------------------
  |  |   32|  1.40k|    }
  ------------------
 1508|  1.40k|    return true;
 1509|  1.40k|}
formatter.c:format_set_trust_line_clear_flags:
 1486|  1.40k|static bool format_set_trust_line_clear_flags(formatter_data_t *fdata) {
 1487|  1.40k|    STRLCPY(fdata->caption, "Clear Flags", fdata->caption_len);
  ------------------
  |  |   35|  1.40k|    {                                         \
  |  |   36|  1.40k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.40k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.40k]
  |  |  ------------------
  |  |   38|  1.40k|    }
  ------------------
 1488|  1.40k|    if (fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.clear_flags) {
  ------------------
  |  Branch (1488:9): [True: 735, False: 665]
  ------------------
 1489|    735|        FORMATTER_CHECK(print_trust_line_flags(
  ------------------
  |  |   30|    735|    {                           \
  |  |   31|    735|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 735]
  |  |  ------------------
  |  |   32|    735|    }
  ------------------
 1490|    735|            fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.clear_flags,
 1491|    735|            fdata->value,
 1492|    735|            fdata->value_len))
 1493|    735|    } else {
 1494|    665|        STRLCPY(fdata->value, "[none]", fdata->value_len);
  ------------------
  |  |   35|    665|    {                                         \
  |  |   36|    665|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    665|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 665]
  |  |  ------------------
  |  |   38|    665|    }
  ------------------
 1495|    665|    }
 1496|  1.40k|    FORMATTER_CHECK(push_to_formatter_stack(&format_set_trust_line_set_flags))
  ------------------
  |  |   30|  1.40k|    {                           \
  |  |   31|  1.40k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 1.40k]
  |  |  ------------------
  |  |   32|  1.40k|    }
  ------------------
 1497|  1.40k|    return true;
 1498|  1.40k|}
formatter.c:format_set_trust_line_set_flags:
 1473|  1.40k|static bool format_set_trust_line_set_flags(formatter_data_t *fdata) {
 1474|  1.40k|    STRLCPY(fdata->caption, "Set Flags", fdata->caption_len);
  ------------------
  |  |   35|  1.40k|    {                                         \
  |  |   36|  1.40k|        size_t len = strlcpy(dst, src, size); \
  |  |   37|  1.40k|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 1.40k]
  |  |  ------------------
  |  |   38|  1.40k|    }
  ------------------
 1475|  1.40k|    if (fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.set_flags) {
  ------------------
  |  Branch (1475:9): [True: 681, False: 719]
  ------------------
 1476|    681|        FORMATTER_CHECK(print_trust_line_flags(
  ------------------
  |  |   30|    681|    {                           \
  |  |   31|    681|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 681]
  |  |  ------------------
  |  |   32|    681|    }
  ------------------
 1477|    681|            fdata->envelope->tx_details.tx.op_details.set_trust_line_flags_op.set_flags,
 1478|    681|            fdata->value,
 1479|    681|            fdata->value_len))
 1480|    719|    } else {
 1481|    719|        STRLCPY(fdata->value, "[none]", fdata->value_len);
  ------------------
  |  |   35|    719|    {                                         \
  |  |   36|    719|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    719|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 719]
  |  |  ------------------
  |  |   38|    719|    }
  ------------------
 1482|    719|    }
 1483|  1.40k|    return format_operation_source_prepare(fdata);
 1484|  1.40k|}
formatter.c:format_liquidity_pool_deposit:
 1595|     42|static bool format_liquidity_pool_deposit(formatter_data_t *fdata) {
 1596|     42|    (void) fdata;
 1597|     42|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|     42|    {                                         \
  |  |   36|     42|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     42|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   38|     42|    }
  ------------------
 1598|     42|    STRLCPY(fdata->value, "Liquidity Pool Deposit", fdata->value_len);
  ------------------
  |  |   35|     42|    {                                         \
  |  |   36|     42|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     42|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   38|     42|    }
  ------------------
 1599|     42|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_liquidity_pool_id))
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1600|     42|    return true;
 1601|     42|}
formatter.c:format_liquidity_pool_deposit_liquidity_pool_id:
 1582|     42|static bool format_liquidity_pool_deposit_liquidity_pool_id(formatter_data_t *fdata) {
 1583|     42|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|     42|    {                                         \
  |  |   36|     42|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     42|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   38|     42|    }
  ------------------
 1584|     42|    FORMATTER_CHECK(print_binary(
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1585|     42|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.liquidity_pool_id,
 1586|     42|        LIQUIDITY_POOL_ID_SIZE,
 1587|     42|        fdata->value,
 1588|     42|        fdata->value_len,
 1589|     42|        0,
 1590|     42|        0))
 1591|     42|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_amount_a))
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1592|     42|    return true;
 1593|     42|}
formatter.c:format_liquidity_pool_deposit_max_amount_a:
 1570|     42|static bool format_liquidity_pool_deposit_max_amount_a(formatter_data_t *fdata) {
 1571|     42|    STRLCPY(fdata->caption, "Max Amount A", fdata->caption_len);
  ------------------
  |  |   35|     42|    {                                         \
  |  |   36|     42|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     42|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   38|     42|    }
  ------------------
 1572|     42|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1573|     42|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.max_amount_a,
 1574|     42|        NULL,
 1575|     42|        fdata->envelope->network,
 1576|     42|        fdata->value,
 1577|     42|        fdata->value_len))
 1578|     42|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_amount_b))
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1579|     42|    return true;
 1580|     42|}
formatter.c:format_liquidity_pool_deposit_max_amount_b:
 1558|     42|static bool format_liquidity_pool_deposit_max_amount_b(formatter_data_t *fdata) {
 1559|     42|    STRLCPY(fdata->caption, "Max Amount B", fdata->caption_len);
  ------------------
  |  |   35|     42|    {                                         \
  |  |   36|     42|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     42|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   38|     42|    }
  ------------------
 1560|     42|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1561|     42|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op.max_amount_b,
 1562|     42|        NULL,
 1563|     42|        fdata->envelope->network,
 1564|     42|        fdata->value,
 1565|     42|        fdata->value_len))
 1566|     42|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_min_price))
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1567|     42|    return true;
 1568|     42|}
formatter.c:format_liquidity_pool_deposit_min_price:
 1544|     42|static bool format_liquidity_pool_deposit_min_price(formatter_data_t *fdata) {
 1545|     42|    liquidity_pool_deposit_op_t *op =
 1546|     42|        &fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op;
 1547|     42|    STRLCPY(fdata->caption, "Min Price", fdata->caption_len);
  ------------------
  |  |   35|     42|    {                                         \
  |  |   36|     42|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     42|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   38|     42|    }
  ------------------
 1548|     42|    FORMATTER_CHECK(print_price(&op->min_price,
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1549|     42|                                NULL,
 1550|     42|                                NULL,
 1551|     42|                                fdata->envelope->network,
 1552|     42|                                fdata->value,
 1553|     42|                                fdata->value_len))
 1554|     42|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_deposit_max_price))
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1555|     42|    return true;
 1556|     42|}
formatter.c:format_liquidity_pool_deposit_max_price:
 1531|     42|static bool format_liquidity_pool_deposit_max_price(formatter_data_t *fdata) {
 1532|     42|    liquidity_pool_deposit_op_t *op =
 1533|     42|        &fdata->envelope->tx_details.tx.op_details.liquidity_pool_deposit_op;
 1534|     42|    STRLCPY(fdata->caption, "Max Price", fdata->caption_len);
  ------------------
  |  |   35|     42|    {                                         \
  |  |   36|     42|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     42|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   38|     42|    }
  ------------------
 1535|     42|    FORMATTER_CHECK(print_price(&op->max_price,
  ------------------
  |  |   30|     42|    {                           \
  |  |   31|     42|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 42]
  |  |  ------------------
  |  |   32|     42|    }
  ------------------
 1536|     42|                                NULL,
 1537|     42|                                NULL,
 1538|     42|                                fdata->envelope->network,
 1539|     42|                                fdata->value,
 1540|     42|                                fdata->value_len))
 1541|     42|    return format_operation_source_prepare(fdata);
 1542|     42|}
formatter.c:format_liquidity_pool_withdraw:
 1651|    247|static bool format_liquidity_pool_withdraw(formatter_data_t *fdata) {
 1652|    247|    (void) fdata;
 1653|    247|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    247|    {                                         \
  |  |   36|    247|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    247|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   38|    247|    }
  ------------------
 1654|    247|    STRLCPY(fdata->value, "Liquidity Pool Withdraw", fdata->value_len);
  ------------------
  |  |   35|    247|    {                                         \
  |  |   36|    247|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    247|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   38|    247|    }
  ------------------
 1655|    247|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_liquidity_pool_id))
  ------------------
  |  |   30|    247|    {                           \
  |  |   31|    247|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   32|    247|    }
  ------------------
 1656|    247|    return true;
 1657|    247|}
formatter.c:format_liquidity_pool_withdraw_liquidity_pool_id:
 1638|    247|static bool format_liquidity_pool_withdraw_liquidity_pool_id(formatter_data_t *fdata) {
 1639|    247|    STRLCPY(fdata->caption, "Liquidity Pool ID", fdata->caption_len);
  ------------------
  |  |   35|    247|    {                                         \
  |  |   36|    247|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    247|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   38|    247|    }
  ------------------
 1640|    247|    FORMATTER_CHECK(print_binary(
  ------------------
  |  |   30|    247|    {                           \
  |  |   31|    247|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   32|    247|    }
  ------------------
 1641|    247|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.liquidity_pool_id,
 1642|    247|        LIQUIDITY_POOL_ID_SIZE,
 1643|    247|        fdata->value,
 1644|    247|        fdata->value_len,
 1645|    247|        0,
 1646|    247|        0))
 1647|    247|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_amount))
  ------------------
  |  |   30|    247|    {                           \
  |  |   31|    247|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   32|    247|    }
  ------------------
 1648|    247|    return true;
 1649|    247|}
formatter.c:format_liquidity_pool_withdraw_amount:
 1626|    247|static bool format_liquidity_pool_withdraw_amount(formatter_data_t *fdata) {
 1627|    247|    STRLCPY(fdata->caption, "Amount", fdata->caption_len);
  ------------------
  |  |   35|    247|    {                                         \
  |  |   36|    247|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    247|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   38|    247|    }
  ------------------
 1628|    247|    FORMATTER_CHECK(
  ------------------
  |  |   30|    247|    {                           \
  |  |   31|    247|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   32|    247|    }
  ------------------
 1629|    247|        print_amount(fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.amount,
 1630|    247|                     NULL,
 1631|    247|                     fdata->envelope->network,
 1632|    247|                     fdata->value,
 1633|    247|                     fdata->value_len))
 1634|    247|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_min_amount_a))
  ------------------
  |  |   30|    247|    {                           \
  |  |   31|    247|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   32|    247|    }
  ------------------
 1635|    247|    return true;
 1636|    247|}
formatter.c:format_liquidity_pool_withdraw_min_amount_a:
 1614|    247|static bool format_liquidity_pool_withdraw_min_amount_a(formatter_data_t *fdata) {
 1615|    247|    STRLCPY(fdata->caption, "Min Amount A", fdata->caption_len);
  ------------------
  |  |   35|    247|    {                                         \
  |  |   36|    247|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    247|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   38|    247|    }
  ------------------
 1616|    247|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    247|    {                           \
  |  |   31|    247|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   32|    247|    }
  ------------------
 1617|    247|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.min_amount_a,
 1618|    247|        NULL,
 1619|    247|        fdata->envelope->network,
 1620|    247|        fdata->value,
 1621|    247|        fdata->value_len))
 1622|    247|    FORMATTER_CHECK(push_to_formatter_stack(&format_liquidity_pool_withdraw_min_amount_b))
  ------------------
  |  |   30|    247|    {                           \
  |  |   31|    247|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   32|    247|    }
  ------------------
 1623|    247|    return true;
 1624|    247|}
formatter.c:format_liquidity_pool_withdraw_min_amount_b:
 1603|    247|static bool format_liquidity_pool_withdraw_min_amount_b(formatter_data_t *fdata) {
 1604|    247|    STRLCPY(fdata->caption, "Min Amount B", fdata->caption_len);
  ------------------
  |  |   35|    247|    {                                         \
  |  |   36|    247|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    247|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   38|    247|    }
  ------------------
 1605|    247|    FORMATTER_CHECK(print_amount(
  ------------------
  |  |   30|    247|    {                           \
  |  |   31|    247|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 247]
  |  |  ------------------
  |  |   32|    247|    }
  ------------------
 1606|    247|        fdata->envelope->tx_details.tx.op_details.liquidity_pool_withdraw_op.min_amount_b,
 1607|    247|        NULL,
 1608|    247|        fdata->envelope->network,
 1609|    247|        fdata->value,
 1610|    247|        fdata->value_len))
 1611|    247|    return format_operation_source_prepare(fdata);
 1612|    247|}
formatter.c:format_invoke_host_function:
 2170|    602|static bool format_invoke_host_function(formatter_data_t *fdata) {
 2171|       |    // avoid the host function op be overwritten by the sub-invocation
 2172|    602|    if (fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.sub_invocations_count) {
  ------------------
  |  Branch (2172:9): [True: 91, False: 511]
  ------------------
 2173|     91|        if (!parse_transaction_operation(fdata->raw_data,
  ------------------
  |  Branch (2173:13): [True: 0, False: 91]
  ------------------
 2174|     91|                                         fdata->raw_data_len,
 2175|     91|                                         fdata->envelope,
 2176|     91|                                         fdata->envelope->tx_details.tx.operation_index)) {
 2177|      0|            return false;
 2178|     91|        };
 2179|     91|    }
 2180|    602|    switch (fdata->envelope->tx_details.tx.op_details.invoke_host_function_op.host_function_type) {
 2181|    478|        case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:
  ------------------
  |  Branch (2181:9): [True: 478, False: 124]
  ------------------
 2182|    478|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|    478|    {                                         \
  |  |   36|    478|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    478|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 478]
  |  |  ------------------
  |  |   38|    478|    }
  ------------------
 2183|    478|            STRLCPY(fdata->value, INVOKE_SMART_CONTRACT, fdata->value_len);
  ------------------
  |  |   35|    478|    {                                         \
  |  |   36|    478|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    478|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 478]
  |  |  ------------------
  |  |   38|    478|    }
  ------------------
 2184|    478|            FORMATTER_CHECK(push_to_formatter_stack(&format_invoke_host_function_contract_id));
  ------------------
  |  |   30|    478|    {                           \
  |  |   31|    478|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (31:13): [True: 0, False: 478]
  |  |  ------------------
  |  |   32|    478|    }
  ------------------
 2185|    478|            break;
 2186|     87|        case HOST_FUNCTION_TYPE_CREATE_CONTRACT:
  ------------------
  |  Branch (2186:9): [True: 87, False: 515]
  ------------------
 2187|     87|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|     87|    {                                         \
  |  |   36|     87|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     87|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 87]
  |  |  ------------------
  |  |   38|     87|    }
  ------------------
 2188|     87|            STRLCPY(fdata->value, "Create Smart Contract", fdata->value_len);
  ------------------
  |  |   35|     87|    {                                         \
  |  |   36|     87|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     87|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 87]
  |  |  ------------------
  |  |   38|     87|    }
  ------------------
 2189|       |            // we dont need to care the sub-invocation here
 2190|     87|            return format_operation_source_prepare(fdata);
 2191|      0|            break;
 2192|     37|        case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM:
  ------------------
  |  Branch (2192:9): [True: 37, False: 565]
  ------------------
 2193|     37|            STRLCPY(fdata->caption, "Soroban", fdata->caption_len);
  ------------------
  |  |   35|     37|    {                                         \
  |  |   36|     37|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     37|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   38|     37|    }
  ------------------
 2194|     37|            STRLCPY(fdata->value, "Upload Smart Contract Wasm", fdata->value_len);
  ------------------
  |  |   35|     37|    {                                         \
  |  |   36|     37|        size_t len = strlcpy(dst, src, size); \
  |  |   37|     37|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 37]
  |  |  ------------------
  |  |   38|     37|    }
  ------------------
 2195|     37|            return format_operation_source_prepare(fdata);
 2196|      0|            break;
 2197|      0|        default:
  ------------------
  |  Branch (2197:9): [True: 0, False: 602]
  ------------------
 2198|      0|            return false;
 2199|    602|    }
 2200|    478|    return true;
 2201|    602|}
formatter.c:format_extend_footprint_ttl:
 2222|    167|static bool format_extend_footprint_ttl(formatter_data_t *fdata) {
 2223|    167|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    167|    {                                         \
  |  |   36|    167|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    167|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 167]
  |  |  ------------------
  |  |   38|    167|    }
  ------------------
 2224|    167|    STRLCPY(fdata->value, "Extend Footprint TTL", fdata->value_len);
  ------------------
  |  |   35|    167|    {                                         \
  |  |   36|    167|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    167|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 167]
  |  |  ------------------
  |  |   38|    167|    }
  ------------------
 2225|    167|    return format_operation_source_prepare(fdata);
 2226|    167|}
formatter.c:format_restore_footprint:
 2228|    290|static bool format_restore_footprint(formatter_data_t *fdata) {
 2229|    290|    STRLCPY(fdata->caption, "Operation Type", fdata->caption_len);
  ------------------
  |  |   35|    290|    {                                         \
  |  |   36|    290|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    290|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 290]
  |  |  ------------------
  |  |   38|    290|    }
  ------------------
 2230|    290|    STRLCPY(fdata->value, "Restore Footprint", fdata->value_len);
  ------------------
  |  |   35|    290|    {                                         \
  |  |   36|    290|        size_t len = strlcpy(dst, src, size); \
  |  |   37|    290|        if (len >= size) return false;        \
  |  |  ------------------
  |  |  |  Branch (37:13): [True: 0, False: 290]
  |  |  ------------------
  |  |   38|    290|    }
  ------------------
 2231|    290|    return format_operation_source_prepare(fdata);
 2232|    290|}

parse_bool:
   48|  4.93M|bool parse_bool(buffer_t *buffer, bool *b) {
   49|  4.93M|    uint32_t val;
   50|       |
   51|  4.93M|    if (!parse_uint32(buffer, &val)) {
  ------------------
  |  Branch (51:9): [True: 279, False: 4.93M]
  ------------------
   52|    279|        return false;
   53|    279|    }
   54|  4.93M|    if (val != 0 && val != 1) {
  ------------------
  |  Branch (54:9): [True: 4.54M, False: 387k]
  |  Branch (54:21): [True: 75.1k, False: 4.47M]
  ------------------
   55|  75.1k|        return false;
   56|  75.1k|    }
   57|  4.85M|    *b = val == 1 ? true : false;
  ------------------
  |  Branch (57:10): [True: 4.47M, False: 387k]
  ------------------
   58|  4.85M|    return true;
   59|  4.93M|}
parse_uint64:
   61|  24.7k|bool parse_uint64(buffer_t *buffer, uint64_t *n) {
   62|  24.7k|    return buffer_read_u64(buffer, n, BE);
   63|  24.7k|}
parse_int64:
   65|   197k|bool parse_int64(buffer_t *buffer, int64_t *n) {
   66|   197k|    if (!buffer_can_read(buffer, 8)) {
  ------------------
  |  Branch (66:9): [True: 141, False: 197k]
  ------------------
   67|    141|        *n = 0;
   68|    141|        return false;
   69|    141|    }
   70|   197k|    *n = read_i64_be(buffer->ptr, buffer->offset);
   71|   197k|    return buffer_seek_cur(buffer, 8);
   72|   197k|}
parse_uint32:
   74|  27.6M|bool parse_uint32(buffer_t *buffer, uint32_t *n) {
   75|  27.6M|    return buffer_read_u32(buffer, n, BE);
   76|  27.6M|}
parse_int32:
   78|  11.4k|bool parse_int32(buffer_t *buffer, int32_t *n) {
   79|  11.4k|    if (!buffer_can_read(buffer, 4)) {
  ------------------
  |  Branch (79:9): [True: 39, False: 11.3k]
  ------------------
   80|     39|        *n = 0;
   81|     39|        return false;
   82|     39|    }
   83|  11.3k|    *n = read_i32_be(buffer->ptr, buffer->offset);
   84|  11.3k|    return buffer_seek_cur(buffer, 4);
   85|  11.4k|}
parse_scv_symbol:
  152|    153|bool parse_scv_symbol(buffer_t *buffer, scv_symbol_t *symbol) {
  153|    153|    PARSER_CHECK(
  ------------------
  |  |   15|    153|    {                           \
  |  |   16|    153|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 143]
  |  |  ------------------
  |  |   17|    153|    }
  ------------------
  154|    153|        parse_binary_string_ptr(buffer, &symbol->symbol, &symbol->size, SCV_SYMBOL_MAX_SIZE))
  155|    143|    return true;
  156|    153|}
parse_scv_string:
  158|    535|bool parse_scv_string(buffer_t *buffer, scv_string_t *string) {
  159|    535|    PARSER_CHECK(parse_binary_string_ptr(buffer, &string->string, &string->size, 0))
  ------------------
  |  |   15|    535|    {                           \
  |  |   16|    535|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 531]
  |  |  ------------------
  |  |   17|    535|    }
  ------------------
  160|    531|    return true;
  161|    535|}
parse_sc_address:
  684|  60.9k|bool parse_sc_address(buffer_t *buffer, sc_address_t *sc_address) {
  685|  60.9k|    PARSER_CHECK(parse_uint32(buffer, &sc_address->type))
  ------------------
  |  |   15|  60.9k|    {                           \
  |  |   16|  60.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 70, False: 60.8k]
  |  |  ------------------
  |  |   17|  60.9k|    }
  ------------------
  686|  60.8k|    switch (sc_address->type) {
  687|  45.9k|        case SC_ADDRESS_TYPE_ACCOUNT:
  ------------------
  |  Branch (687:9): [True: 45.9k, False: 14.9k]
  ------------------
  688|  45.9k|            PARSER_CHECK(parse_account_id(buffer, &sc_address->address))
  ------------------
  |  |   15|  45.9k|    {                           \
  |  |   16|  45.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4.16k, False: 41.8k]
  |  |  ------------------
  |  |   17|  45.9k|    }
  ------------------
  689|  41.8k|            return true;
  690|  13.8k|        case SC_ADDRESS_TYPE_CONTRACT:
  ------------------
  |  Branch (690:9): [True: 13.8k, False: 47.0k]
  ------------------
  691|  13.8k|            PARSER_CHECK(buffer_read_bytes(buffer, &sc_address->address, RAW_CONTRACT_KEY_SIZE))
  ------------------
  |  |   15|  13.8k|    {                           \
  |  |   16|  13.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 86, False: 13.7k]
  |  |  ------------------
  |  |   17|  13.8k|    }
  ------------------
  692|  13.7k|            return true;
  693|  1.06k|        default:
  ------------------
  |  Branch (693:9): [True: 1.06k, False: 59.8k]
  ------------------
  694|  1.06k|            return false;
  695|  60.8k|    }
  696|  60.8k|}
read_scval_advance:
  733|  17.2M|bool read_scval_advance(buffer_t *buffer) {
  734|  17.2M|    uint32_t sc_type;
  735|  17.2M|    PARSER_CHECK(parse_uint32(buffer, &sc_type))
  ------------------
  |  |   15|  17.2M|    {                           \
  |  |   16|  17.2M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.79M, False: 15.4M]
  |  |  ------------------
  |  |   17|  17.2M|    }
  ------------------
  736|       |
  737|  15.4M|    switch (sc_type) {
  738|  8.25M|        case SCV_BOOL:
  ------------------
  |  Branch (738:9): [True: 8.25M, False: 7.17M]
  ------------------
  739|  8.25M|            PARSER_CHECK(buffer_advance(buffer, 4))
  ------------------
  |  |   15|  8.25M|    {                           \
  |  |   16|  8.25M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 207, False: 8.25M]
  |  |  ------------------
  |  |   17|  8.25M|    }
  ------------------
  740|  8.25M|            break;
  741|  8.25M|        case SCV_VOID:
  ------------------
  |  Branch (741:9): [True: 51.8k, False: 15.3M]
  ------------------
  742|  51.8k|            break;  // void
  743|  2.68k|        case SCV_ERROR:
  ------------------
  |  Branch (743:9): [True: 2.68k, False: 15.4M]
  ------------------
  744|  2.68k|            return false;  // not implemented
  745|  6.04k|        case SCV_U32:
  ------------------
  |  Branch (745:9): [True: 6.04k, False: 15.4M]
  ------------------
  746|   293k|        case SCV_I32:
  ------------------
  |  Branch (746:9): [True: 287k, False: 15.1M]
  ------------------
  747|   293k|            PARSER_CHECK(buffer_advance(buffer, 4))
  ------------------
  |  |   15|   293k|    {                           \
  |  |   16|   293k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 293k]
  |  |  ------------------
  |  |   17|   293k|    }
  ------------------
  748|   293k|            break;
  749|   293k|        case SCV_U64:
  ------------------
  |  Branch (749:9): [True: 4.14k, False: 15.4M]
  ------------------
  750|  5.46k|        case SCV_I64:
  ------------------
  |  Branch (750:9): [True: 1.31k, False: 15.4M]
  ------------------
  751|  39.1k|        case SCV_TIMEPOINT:
  ------------------
  |  Branch (751:9): [True: 33.7k, False: 15.4M]
  ------------------
  752|  44.8k|        case SCV_DURATION:
  ------------------
  |  Branch (752:9): [True: 5.64k, False: 15.4M]
  ------------------
  753|  44.8k|            PARSER_CHECK(buffer_advance(buffer, 8))
  ------------------
  |  |   15|  44.8k|    {                           \
  |  |   16|  44.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 64, False: 44.7k]
  |  |  ------------------
  |  |   17|  44.8k|    }
  ------------------
  754|  44.7k|            break;
  755|  44.7k|        case SCV_U128:
  ------------------
  |  Branch (755:9): [True: 12.3k, False: 15.4M]
  ------------------
  756|  20.4k|        case SCV_I128:
  ------------------
  |  Branch (756:9): [True: 8.16k, False: 15.4M]
  ------------------
  757|  20.4k|            PARSER_CHECK(buffer_advance(buffer, 16))
  ------------------
  |  |   15|  20.4k|    {                           \
  |  |   16|  20.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 198, False: 20.2k]
  |  |  ------------------
  |  |   17|  20.4k|    }
  ------------------
  758|  20.2k|            break;
  759|  20.2k|        case SCV_U256:
  ------------------
  |  Branch (759:9): [True: 4.38k, False: 15.4M]
  ------------------
  760|  6.56k|        case SCV_I256:
  ------------------
  |  Branch (760:9): [True: 2.17k, False: 15.4M]
  ------------------
  761|  6.56k|            PARSER_CHECK(buffer_advance(buffer, 32))
  ------------------
  |  |   15|  6.56k|    {                           \
  |  |   16|  6.56k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 312, False: 6.24k]
  |  |  ------------------
  |  |   17|  6.56k|    }
  ------------------
  762|  6.24k|            break;
  763|  6.24k|        case SCV_BYTES:
  ------------------
  |  Branch (763:9): [True: 3.11k, False: 15.4M]
  ------------------
  764|  5.68k|        case SCV_STRING:
  ------------------
  |  Branch (764:9): [True: 2.57k, False: 15.4M]
  ------------------
  765|  6.60k|        case SCV_SYMBOL: {
  ------------------
  |  Branch (765:9): [True: 922, False: 15.4M]
  ------------------
  766|  6.60k|            size_t data_size = 0;
  767|  6.60k|            PARSER_CHECK(parse_uint32(buffer, &data_size))
  ------------------
  |  |   15|  6.60k|    {                           \
  |  |   16|  6.60k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 6.58k]
  |  |  ------------------
  |  |   17|  6.60k|    }
  ------------------
  768|  6.58k|            PARSER_CHECK(num_bytes(data_size, &data_size))
  ------------------
  |  |   15|  6.58k|    {                           \
  |  |   16|  6.58k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 6.58k]
  |  |  ------------------
  |  |   17|  6.58k|    }
  ------------------
  769|  6.58k|            PARSER_CHECK(buffer_advance(buffer, data_size))
  ------------------
  |  |   15|  6.58k|    {                           \
  |  |   16|  6.58k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.01k, False: 4.57k]
  |  |  ------------------
  |  |   17|  6.58k|    }
  ------------------
  770|  4.57k|            break;
  771|  6.58k|        }
  772|  10.0k|        case SCV_VEC: {
  ------------------
  |  Branch (772:9): [True: 10.0k, False: 15.4M]
  ------------------
  773|  10.0k|            bool vec_exists;
  774|  10.0k|            PARSER_CHECK(parse_bool(buffer, &vec_exists))
  ------------------
  |  |   15|  10.0k|    {                           \
  |  |   16|  10.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4.23k, False: 5.79k]
  |  |  ------------------
  |  |   17|  10.0k|    }
  ------------------
  775|  5.79k|            if (vec_exists) {
  ------------------
  |  Branch (775:17): [True: 2.55k, False: 3.23k]
  ------------------
  776|  2.55k|                read_scval_vec_advance(buffer);
  777|  2.55k|            }
  778|  5.79k|            break;
  779|  10.0k|        }
  780|  4.56M|        case SCV_MAP: {
  ------------------
  |  Branch (780:9): [True: 4.56M, False: 10.8M]
  ------------------
  781|  4.56M|            bool map_exists;
  782|  4.56M|            PARSER_CHECK(parse_bool(buffer, &map_exists))
  ------------------
  |  |   15|  4.56M|    {                           \
  |  |   16|  4.56M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 64.6k, False: 4.49M]
  |  |  ------------------
  |  |   17|  4.56M|    }
  ------------------
  783|  4.49M|            if (map_exists) {
  ------------------
  |  Branch (783:17): [True: 4.45M, False: 45.2k]
  ------------------
  784|  4.45M|                rad_scval_map_advance(buffer);
  785|  4.45M|            }
  786|  4.49M|            break;
  787|  4.56M|        }
  788|  14.0k|        case SCV_ADDRESS: {
  ------------------
  |  Branch (788:9): [True: 14.0k, False: 15.4M]
  ------------------
  789|  14.0k|            sc_address_t sc_address;
  790|  14.0k|            PARSER_CHECK(parse_sc_address(buffer, &sc_address));
  ------------------
  |  |   15|  14.0k|    {                           \
  |  |   16|  14.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3.99k, False: 10.1k]
  |  |  ------------------
  |  |   17|  14.0k|    }
  ------------------
  791|  10.1k|            break;
  792|  14.0k|        }
  793|  15.5k|        case SCV_CONTRACT_INSTANCE: {
  ------------------
  |  Branch (793:9): [True: 15.5k, False: 15.4M]
  ------------------
  794|  15.5k|            PARSER_CHECK(read_contract_executable_advance(buffer))
  ------------------
  |  |   15|  15.5k|    {                           \
  |  |   16|  15.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4.72k, False: 10.7k]
  |  |  ------------------
  |  |   17|  15.5k|    }
  ------------------
  795|  10.7k|            bool map_exists;
  796|  10.7k|            PARSER_CHECK(parse_bool(buffer, &map_exists))
  ------------------
  |  |   15|  10.7k|    {                           \
  |  |   16|  10.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4.70k, False: 6.06k]
  |  |  ------------------
  |  |   17|  10.7k|    }
  ------------------
  797|  6.06k|            if (map_exists) {
  ------------------
  |  Branch (797:17): [True: 5.26k, False: 805]
  ------------------
  798|  5.26k|                rad_scval_map_advance(buffer);
  799|  5.26k|            }
  800|  6.06k|            break;
  801|  10.7k|        }
  802|    898|        case SCV_LEDGER_KEY_CONTRACT_INSTANCE:
  ------------------
  |  Branch (802:9): [True: 898, False: 15.4M]
  ------------------
  803|    898|            break;  // void
  804|  1.18k|        case SCV_LEDGER_KEY_NONCE:
  ------------------
  |  Branch (804:9): [True: 1.18k, False: 15.4M]
  ------------------
  805|  1.18k|            PARSER_CHECK(buffer_advance(buffer, 8))
  ------------------
  |  |   15|  1.18k|    {                           \
  |  |   16|  1.18k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 1.16k]
  |  |  ------------------
  |  |   17|  1.18k|    }
  ------------------
  806|  1.16k|            break;
  807|  2.14M|        default:
  ------------------
  |  Branch (807:9): [True: 2.14M, False: 13.2M]
  ------------------
  808|  2.14M|            return false;
  809|  15.4M|    }
  810|  13.2M|    return true;
  811|  15.4M|}
parse_transaction_envelope:
 1307|  16.4k|bool parse_transaction_envelope(const uint8_t *data, size_t data_len, envelope_t *envelope) {
 1308|  16.4k|    PRINTF("parse_transaction_envelope\n");
 1309|  16.4k|    buffer_t buffer = {
 1310|  16.4k|        .ptr = data,
 1311|  16.4k|        .size = data_len,
 1312|  16.4k|        .offset = 0,
 1313|  16.4k|    };
 1314|       |
 1315|  16.4k|    explicit_bzero(&envelope->tx_details, sizeof(tx_details_t));
 1316|  16.4k|    uint32_t envelope_type;
 1317|  16.4k|    PARSER_CHECK(parse_network(&buffer, &envelope->network))
  ------------------
  |  |   15|  16.4k|    {                           \
  |  |   16|  16.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 16.4k]
  |  |  ------------------
  |  |   17|  16.4k|    }
  ------------------
 1318|  16.4k|    PARSER_CHECK(parse_uint32(&buffer, &envelope_type))
  ------------------
  |  |   15|  16.4k|    {                           \
  |  |   16|  16.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 16.4k]
  |  |  ------------------
  |  |   17|  16.4k|    }
  ------------------
 1319|  16.4k|    envelope->type = envelope_type;
 1320|  16.4k|    switch (envelope_type) {
 1321|  7.92k|        case ENVELOPE_TYPE_TX:
  ------------------
  |  Branch (1321:9): [True: 7.92k, False: 8.49k]
  ------------------
 1322|  7.92k|            PARSER_CHECK(parse_transaction_details(&buffer, &envelope->tx_details.tx))
  ------------------
  |  |   15|  7.92k|    {                           \
  |  |   16|  7.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 573, False: 7.35k]
  |  |  ------------------
  |  |   17|  7.92k|    }
  ------------------
 1323|  7.35k|            break;
 1324|  7.35k|        case ENVELOPE_TYPE_TX_FEE_BUMP:
  ------------------
  |  Branch (1324:9): [True: 97, False: 16.3k]
  ------------------
 1325|     97|            PARSER_CHECK(
  ------------------
  |  |   15|     97|    {                           \
  |  |   16|     97|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 77]
  |  |  ------------------
  |  |   17|     97|    }
  ------------------
 1326|     97|                parse_fee_bump_transaction_details(&buffer, &envelope->tx_details.fee_bump_tx))
 1327|     77|            uint32_t inner_envelope_type;
 1328|     77|            PARSER_CHECK(parse_uint32(&buffer, &inner_envelope_type))
  ------------------
  |  |   15|     77|    {                           \
  |  |   16|     77|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 74]
  |  |  ------------------
  |  |   17|     77|    }
  ------------------
 1329|     74|            if (inner_envelope_type != ENVELOPE_TYPE_TX) {
  ------------------
  |  Branch (1329:17): [True: 3, False: 71]
  ------------------
 1330|      3|                return false;
 1331|      3|            }
 1332|     71|            PARSER_CHECK(parse_transaction_details(&buffer, &envelope->tx_details.tx))
  ------------------
  |  |   15|     71|    {                           \
  |  |   16|     71|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 63]
  |  |  ------------------
  |  |   17|     71|    }
  ------------------
 1333|     63|            break;
 1334|  8.39k|        default:
  ------------------
  |  Branch (1334:9): [True: 8.39k, False: 8.02k]
  ------------------
 1335|  8.39k|            return false;
 1336|  16.4k|    }
 1337|       |
 1338|  7.41k|    envelope->tx_details.tx.operation_position = buffer.offset;
 1339|       |
 1340|       |    // check all operations are valid
 1341|  7.41k|    PARSER_CHECK(check_operations(&buffer, envelope->tx_details.tx.operations_count));
  ------------------
  |  |   15|  7.41k|    {                           \
  |  |   16|  7.41k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.20k, False: 5.21k]
  |  |  ------------------
  |  |   17|  7.41k|    }
  ------------------
 1342|  5.21k|    return true;
 1343|  7.41k|}
parse_transaction_operation:
 1348|  32.3k|                                 uint8_t operation_index) {
 1349|  32.3k|    buffer_t buffer = {
 1350|  32.3k|        .ptr = data,
 1351|  32.3k|        .size = data_len,
 1352|  32.3k|        .offset = envelope->tx_details.tx.operation_position,
 1353|  32.3k|    };
 1354|   231k|    for (uint8_t i = 0; i <= operation_index; i++) {
  ------------------
  |  Branch (1354:25): [True: 198k, False: 32.3k]
  ------------------
 1355|   198k|        PARSER_CHECK(parse_operation(&buffer, &envelope->tx_details.tx.op_details));
  ------------------
  |  |   15|   198k|    {                           \
  |  |   16|   198k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 198k]
  |  |  ------------------
  |  |   17|   198k|    }
  ------------------
 1356|   198k|    }
 1357|  32.3k|    envelope->tx_details.tx.operation_index = operation_index;
 1358|  32.3k|    return true;
 1359|  32.3k|}
parse_auth_function:
 1361|  26.4k|bool parse_auth_function(buffer_t *buffer, uint32_t *type, invoke_contract_args_t *args) {
 1362|       |    // function
 1363|  26.4k|    PARSER_CHECK(parse_uint32(buffer, type))
  ------------------
  |  |   15|  26.4k|    {                           \
  |  |   16|  26.4k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 26.4k]
  |  |  ------------------
  |  |   17|  26.4k|    }
  ------------------
 1364|  26.4k|    switch (*type) {
 1365|  24.8k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN: {
  ------------------
  |  Branch (1365:9): [True: 24.8k, False: 1.61k]
  ------------------
 1366|       |            // contractFn
 1367|  24.8k|            PARSER_CHECK(parse_invoke_contract_args(buffer, args))
  ------------------
  |  |   15|  24.8k|    {                           \
  |  |   16|  24.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3.33k, False: 21.5k]
  |  |  ------------------
  |  |   17|  24.8k|    }
  ------------------
 1368|  21.5k|            break;
 1369|  24.8k|        }
 1370|  21.5k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1370:9): [True: 453, False: 26.0k]
  ------------------
 1371|       |            // createContractHostFn
 1372|    453|            PARSER_CHECK(read_create_contract_args_advance(buffer))
  ------------------
  |  |   15|    453|    {                           \
  |  |   16|    453|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 45, False: 408]
  |  |  ------------------
  |  |   17|    453|    }
  ------------------
 1373|    408|            break;
 1374|  1.16k|        default:
  ------------------
  |  Branch (1374:9): [True: 1.16k, False: 25.3k]
  ------------------
 1375|  1.16k|            return false;
 1376|  26.4k|    }
 1377|  21.9k|    return true;
 1378|  26.4k|}
parse_soroban_authorization_envelope:
 1382|  23.1k|                                          envelope_t *envelope) {
 1383|  23.1k|    PRINTF("parse_soroban_authorization_envelope\n");
 1384|  23.1k|    buffer_t buffer = {
 1385|  23.1k|        .ptr = data,
 1386|  23.1k|        .size = data_len,
 1387|  23.1k|        .offset = 0,
 1388|  23.1k|    };
 1389|       |
 1390|  23.1k|    explicit_bzero(&envelope->soroban_authorization, sizeof(soroban_authorization_t));
 1391|       |
 1392|  23.1k|    uint32_t envelope_type;
 1393|  23.1k|    PARSER_CHECK(parse_uint32(&buffer, &envelope_type))
  ------------------
  |  |   15|  23.1k|    {                           \
  |  |   16|  23.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 23.1k]
  |  |  ------------------
  |  |   17|  23.1k|    }
  ------------------
 1394|  23.1k|    if (envelope_type != ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
  ------------------
  |  Branch (1394:9): [True: 2.65k, False: 20.5k]
  ------------------
 1395|  2.65k|        return false;
 1396|  2.65k|    }
 1397|  20.5k|    envelope->type = envelope_type;
 1398|       |
 1399|  20.5k|    PARSER_CHECK(parse_network(&buffer, &envelope->network))
  ------------------
  |  |   15|  20.5k|    {                           \
  |  |   16|  20.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1, False: 20.5k]
  |  |  ------------------
  |  |   17|  20.5k|    }
  ------------------
 1400|  20.5k|    PARSER_CHECK(parse_uint64(&buffer, &envelope->soroban_authorization.nonce))
  ------------------
  |  |   15|  20.5k|    {                           \
  |  |   16|  20.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 20.5k]
  |  |  ------------------
  |  |   17|  20.5k|    }
  ------------------
 1401|  20.5k|    PARSER_CHECK(
  ------------------
  |  |   15|  20.5k|    {                           \
  |  |   16|  20.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 20.5k]
  |  |  ------------------
  |  |   17|  20.5k|    }
  ------------------
 1402|  20.5k|        parse_uint32(&buffer, &envelope->soroban_authorization.signature_expiration_ledger))
 1403|       |
 1404|       |    // function
 1405|  20.5k|    PARSER_CHECK(parse_auth_function(&buffer,
  ------------------
  |  |   15|  20.5k|    {                           \
  |  |   16|  20.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4.54k, False: 15.9k]
  |  |  ------------------
  |  |   17|  20.5k|    }
  ------------------
 1406|  20.5k|                                     &envelope->soroban_authorization.auth_function_type,
 1407|  20.5k|                                     &envelope->soroban_authorization.invoke_contract_args))
 1408|       |    // subInvocations
 1409|  15.9k|    uint32_t len;
 1410|  15.9k|    uint8_t sub_invocations_count = 0;
 1411|  15.9k|    PARSER_CHECK(parse_uint32(&buffer, &len))
  ------------------
  |  |   15|  15.9k|    {                           \
  |  |   16|  15.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.59k, False: 14.3k]
  |  |  ------------------
  |  |   17|  15.9k|    }
  ------------------
 1412|  20.4k|    for (uint32_t i = 0; i < len; i++) {
  ------------------
  |  Branch (1412:26): [True: 6.91k, False: 13.5k]
  ------------------
 1413|  6.91k|        PARSER_CHECK(read_soroban_authorized_invocation_advance(
  ------------------
  |  |   15|  6.91k|    {                           \
  |  |   16|  6.91k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 868, False: 6.05k]
  |  |  ------------------
  |  |   17|  6.91k|    }
  ------------------
 1414|  6.91k|            &buffer,
 1415|  6.91k|            &sub_invocations_count,
 1416|  6.91k|            envelope->soroban_authorization.sub_invocation_positions));
 1417|  6.05k|    }
 1418|  13.5k|    envelope->soroban_authorization.sub_invocations_count = sub_invocations_count;
 1419|  13.5k|    PRINTF("sub_invocations_count=%d\n", sub_invocations_count);
 1420|       |    // for (uint8_t i = 0; i < 16; i++) {
 1421|       |    //     PRINTF("sub_invocation_positions[%d]=%d\n",
 1422|       |    //            i,
 1423|       |    //            envelope->soroban_authorization.sub_invocation_positions[i]);
 1424|       |    // }
 1425|  13.5k|    return true;
 1426|  14.3k|}
parser.c:read_i64_be:
   32|   197k|static int64_t read_i64_be(const uint8_t *ptr, size_t offset) {
   33|   197k|    uint64_t result = 0;
   34|  1.77M|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (34:21): [True: 1.58M, False: 197k]
  ------------------
   35|  1.58M|        result = (result << 8) | ptr[offset + i];
   36|  1.58M|    }
   37|   197k|    return (int64_t) result;
   38|   197k|}
parser.c:read_i32_be:
   40|  11.3k|static int32_t read_i32_be(const uint8_t *ptr, size_t offset) {
   41|  11.3k|    uint32_t result = 0;
   42|  56.8k|    for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (42:21): [True: 45.4k, False: 11.3k]
  ------------------
   43|  45.4k|        result = (result << 8) | ptr[offset + i];
   44|  45.4k|    }
   45|  11.3k|    return (int32_t) result;
   46|  11.3k|}
parser.c:parse_binary_string_ptr:
  114|  50.9k|                                    size_t max_length) {
  115|       |    /* max_length does not include terminal null character */
  116|  50.9k|    uint32_t size;
  117|       |
  118|  50.9k|    PARSER_CHECK(parse_uint32(buffer, &size))
  ------------------
  |  |   15|  50.9k|    {                           \
  |  |   16|  50.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 45, False: 50.9k]
  |  |  ------------------
  |  |   17|  50.9k|    }
  ------------------
  119|  50.9k|    if (max_length != 0 && size > max_length) {
  ------------------
  |  Branch (119:9): [True: 50.3k, False: 535]
  |  Branch (119:28): [True: 66, False: 50.3k]
  ------------------
  120|     66|        return false;
  121|     66|    }
  122|       |
  123|  50.8k|    size_t data_size = 0;
  124|  50.8k|    PARSER_CHECK(num_bytes(size, &data_size))
  ------------------
  |  |   15|  50.8k|    {                           \
  |  |   16|  50.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 50.8k]
  |  |  ------------------
  |  |   17|  50.8k|    }
  ------------------
  125|  50.8k|    PARSER_CHECK(buffer_read_bytes(buffer, string, data_size))
  ------------------
  |  |   15|  50.8k|    {                           \
  |  |   16|  50.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 76, False: 50.7k]
  |  |  ------------------
  |  |   17|  50.8k|    }
  ------------------
  126|       |    PARSER_CHECK(check_padding(*string, size, data_size))  // security check
  ------------------
  |  |   15|  50.7k|    {                           \
  |  |   16|  50.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.37k, False: 49.3k]
  |  |  ------------------
  |  |   17|  50.7k|    }
  ------------------
  127|  49.3k|    if (out_len) {
  ------------------
  |  Branch (127:9): [True: 49.3k, False: 0]
  ------------------
  128|  49.3k|        *out_len = size;
  129|  49.3k|    }
  130|  49.3k|    return true;
  131|  50.7k|}
parser.c:check_padding:
  101|  50.7k|static bool check_padding(const uint8_t *buffer, size_t offset, size_t length) {
  102|  50.7k|    size_t i;
  103|  66.3k|    for (i = 0; i < length - offset; i++) {
  ------------------
  |  Branch (103:17): [True: 16.9k, False: 49.3k]
  ------------------
  104|  16.9k|        if (buffer[offset + i] != 0x00) {
  ------------------
  |  Branch (104:13): [True: 1.37k, False: 15.5k]
  ------------------
  105|  1.37k|            return false;
  106|  1.37k|        }
  107|  16.9k|    }
  108|  49.3k|    return true;
  109|  50.7k|}
parser.c:parse_account_id:
  194|   237k|static bool parse_account_id(buffer_t *buffer, const uint8_t **account_id) {
  195|   237k|    uint32_t account_type;
  196|       |
  197|   237k|    PARSER_CHECK(parse_uint32(buffer, &account_type))
  ------------------
  |  |   15|   237k|    {                           \
  |  |   16|   237k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 123, False: 237k]
  |  |  ------------------
  |  |   17|   237k|    }
  ------------------
  198|   237k|    if (account_type != PUBLIC_KEY_TYPE_ED25519) {
  ------------------
  |  |   50|   237k|#define PUBLIC_KEY_TYPE_ED25519 0
  ------------------
  |  Branch (198:9): [True: 4.07k, False: 233k]
  ------------------
  199|  4.07k|        return false;
  200|  4.07k|    }
  201|   233k|    PARSER_CHECK(buffer_read_bytes(buffer, account_id, RAW_ED25519_PUBLIC_KEY_SIZE))
  ------------------
  |  |   15|   233k|    {                           \
  |  |   16|   233k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 201, False: 232k]
  |  |  ------------------
  |  |   17|   233k|    }
  ------------------
  202|   232k|    return true;
  203|   233k|}
parser.c:buffer_read_bytes:
   25|   374k|static bool buffer_read_bytes(buffer_t *buffer, const uint8_t **data, size_t size) {
   26|   374k|    PARSER_CHECK(buffer_can_read(buffer, size))
  ------------------
  |  |   15|   374k|    {                           \
  |  |   16|   374k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 561, False: 374k]
  |  |  ------------------
  |  |   17|   374k|    }
  ------------------
   27|   374k|    *data = buffer->ptr + buffer->offset;
   28|   374k|    PARSER_CHECK(buffer_advance(buffer, size))
  ------------------
  |  |   15|   374k|    {                           \
  |  |   16|   374k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 374k]
  |  |  ------------------
  |  |   17|   374k|    }
  ------------------
   29|   374k|    return true;
   30|   374k|}
parser.c:buffer_advance:
   21|  9.01M|static bool buffer_advance(buffer_t *buffer, size_t num_bytes) {
   22|  9.01M|    return buffer_seek_cur(buffer, num_bytes);
   23|  9.01M|}
parser.c:num_bytes:
   87|  58.1k|static bool num_bytes(size_t size, size_t *out_size) {
   88|  58.1k|    size_t remainder = size % 4;
   89|  58.1k|    if (remainder == 0) {
  ------------------
  |  Branch (89:9): [True: 48.2k, False: 9.83k]
  ------------------
   90|  48.2k|        *out_size = size;
   91|  48.2k|        return true;
   92|  48.2k|    }
   93|  9.83k|    if (size > SIZE_MAX - 4) {
  ------------------
  |  Branch (93:9): [True: 0, False: 9.83k]
  ------------------
   94|       |        // size + 4 would overflow
   95|      0|        return false;
   96|      0|    }
   97|  9.83k|    *out_size = size + 4 - remainder;
   98|  9.83k|    return true;
   99|  9.83k|}
parser.c:read_scval_vec_advance:
  698|  2.55k|static bool read_scval_vec_advance(buffer_t *buffer) {
  699|  2.55k|    uint32_t vec_len;
  700|  2.55k|    PARSER_CHECK(parse_uint32(buffer, &vec_len))
  ------------------
  |  |   15|  2.55k|    {                           \
  |  |   16|  2.55k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 2.55k]
  |  |  ------------------
  |  |   17|  2.55k|    }
  ------------------
  701|  10.3k|    for (uint32_t i = 0; i < vec_len; i++) {
  ------------------
  |  Branch (701:26): [True: 10.0k, False: 282]
  ------------------
  702|  10.0k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  10.0k|    {                           \
  |  |   16|  10.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.26k, False: 7.82k]
  |  |  ------------------
  |  |   17|  10.0k|    }
  ------------------
  703|  10.0k|    }
  704|    282|    return true;
  705|  2.55k|}
parser.c:rad_scval_map_advance:
  707|  4.45M|static bool rad_scval_map_advance(buffer_t *buffer) {
  708|  4.45M|    uint32_t map_len;
  709|  4.45M|    PARSER_CHECK(parse_uint32(buffer, &map_len))
  ------------------
  |  |   15|  4.45M|    {                           \
  |  |   16|  4.45M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 43, False: 4.45M]
  |  |  ------------------
  |  |   17|  4.45M|    }
  ------------------
  710|  10.2M|    for (uint32_t i = 0; i < map_len; i++) {
  ------------------
  |  Branch (710:26): [True: 9.80M, False: 429k]
  ------------------
  711|  9.80M|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  9.80M|    {                           \
  |  |   16|  9.80M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.52M, False: 7.27M]
  |  |  ------------------
  |  |   17|  9.80M|    }
  ------------------
  712|  7.27M|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  7.27M|    {                           \
  |  |   16|  7.27M|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.49M, False: 5.77M]
  |  |  ------------------
  |  |   17|  7.27M|    }
  ------------------
  713|  7.27M|    }
  714|   429k|    return true;
  715|  4.45M|}
parser.c:read_contract_executable_advance:
  717|  17.2k|static bool read_contract_executable_advance(buffer_t *buffer) {
  718|  17.2k|    uint32_t type;
  719|  17.2k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  17.2k|    {                           \
  |  |   16|  17.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 28, False: 17.2k]
  |  |  ------------------
  |  |   17|  17.2k|    }
  ------------------
  720|  17.2k|    switch (type) {
  721|  4.93k|        case CONTRACT_EXECUTABLE_WASM:
  ------------------
  |  |  491|  4.93k|#define CONTRACT_EXECUTABLE_WASM          0
  ------------------
  |  Branch (721:9): [True: 4.93k, False: 12.3k]
  ------------------
  722|       |            PARSER_CHECK(buffer_advance(buffer, HASH_SIZE))  // code
  ------------------
  |  |   15|  4.93k|    {                           \
  |  |   16|  4.93k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 172, False: 4.75k]
  |  |  ------------------
  |  |   17|  4.93k|    }
  ------------------
  723|  4.75k|            break;
  724|  7.72k|        case CONTRACT_EXECUTABLE_STELLAR_ASSET:
  ------------------
  |  |  492|  7.72k|#define CONTRACT_EXECUTABLE_STELLAR_ASSET 1
  ------------------
  |  Branch (724:9): [True: 7.72k, False: 9.51k]
  ------------------
  725|       |            // void
  726|  7.72k|            break;
  727|  4.58k|        default:
  ------------------
  |  Branch (727:9): [True: 4.58k, False: 12.6k]
  ------------------
  728|  4.58k|            return false;
  729|  17.2k|    }
  730|  12.4k|    return true;
  731|  17.2k|}
parser.c:parse_network:
 1293|  36.9k|static bool parse_network(buffer_t *buffer, uint8_t *network) {
 1294|  36.9k|    const uint8_t *network_id;
 1295|  36.9k|    PARSER_CHECK(buffer_read_bytes(buffer, &network_id, HASH_SIZE))
  ------------------
  |  |   15|  36.9k|    {                           \
  |  |   16|  36.9k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 36.9k]
  |  |  ------------------
  |  |   17|  36.9k|    }
  ------------------
 1296|       |
 1297|  36.9k|    if (memcmp(network_id, NETWORK_ID_PUBLIC_HASH, HASH_SIZE) == 0) {
  ------------------
  |  |   46|  36.9k|#define HASH_SIZE                 32
  ------------------
  |  Branch (1297:9): [True: 1.02k, False: 35.9k]
  ------------------
 1298|  1.02k|        *network = NETWORK_TYPE_PUBLIC;
  ------------------
  |  |   57|  1.02k|#define NETWORK_TYPE_PUBLIC  0
  ------------------
 1299|  35.9k|    } else if (memcmp(network_id, NETWORK_ID_TEST_HASH, HASH_SIZE) == 0) {
  ------------------
  |  |   46|  35.9k|#define HASH_SIZE                 32
  ------------------
  |  Branch (1299:16): [True: 357, False: 35.5k]
  ------------------
 1300|    357|        *network = NETWORK_TYPE_TEST;
  ------------------
  |  |   58|    357|#define NETWORK_TYPE_TEST    1
  ------------------
 1301|  35.5k|    } else {
 1302|  35.5k|        *network = NETWORK_TYPE_UNKNOWN;
  ------------------
  |  |   59|  35.5k|#define NETWORK_TYPE_UNKNOWN 2
  ------------------
 1303|  35.5k|    }
 1304|  36.9k|    return true;
 1305|  36.9k|}
parser.c:parse_transaction_details:
 1242|  7.99k|static bool parse_transaction_details(buffer_t *buffer, transaction_details_t *transaction) {
 1243|       |    // account used to run the (inner)transaction
 1244|  7.99k|    PARSER_CHECK(parse_transaction_source(buffer, &transaction->source_account))
  ------------------
  |  |   15|  7.99k|    {                           \
  |  |   16|  7.99k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 129, False: 7.86k]
  |  |  ------------------
  |  |   17|  7.99k|    }
  ------------------
 1245|       |
 1246|       |    // the fee the source_account will pay
 1247|  7.86k|    PARSER_CHECK(parse_transaction_fee(buffer, &transaction->fee))
  ------------------
  |  |   15|  7.86k|    {                           \
  |  |   16|  7.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 7.86k]
  |  |  ------------------
  |  |   17|  7.86k|    }
  ------------------
 1248|       |
 1249|       |    // sequence number to consume in the account
 1250|  7.86k|    PARSER_CHECK(parse_transaction_sequence(buffer, &transaction->sequence_number))
  ------------------
  |  |   15|  7.86k|    {                           \
  |  |   16|  7.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 7.86k]
  |  |  ------------------
  |  |   17|  7.86k|    }
  ------------------
 1251|       |
 1252|       |    // validity conditions
 1253|  7.86k|    PARSER_CHECK(parse_transaction_preconditions(buffer, &transaction->cond))
  ------------------
  |  |   15|  7.86k|    {                           \
  |  |   16|  7.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 145, False: 7.71k]
  |  |  ------------------
  |  |   17|  7.86k|    }
  ------------------
 1254|       |
 1255|  7.71k|    PARSER_CHECK(parse_transaction_memo(buffer, &transaction->memo))
  ------------------
  |  |   15|  7.71k|    {                           \
  |  |   16|  7.71k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 279, False: 7.43k]
  |  |  ------------------
  |  |   17|  7.71k|    }
  ------------------
 1256|  7.43k|    PARSER_CHECK(parse_transaction_operation_len(buffer, &transaction->operations_count))
  ------------------
  |  |   15|  7.43k|    {                           \
  |  |   16|  7.43k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 22, False: 7.41k]
  |  |  ------------------
  |  |   17|  7.43k|    }
  ------------------
 1257|       |
 1258|       |    // check ops is valid
 1259|       |    // size_t offset = buffer->offset;
 1260|       |    // PARSER_CHECK(check_operations(buffer, transaction->operations_count))
 1261|       |    // buffer->offset = offset;
 1262|       |
 1263|  7.41k|    return true;
 1264|  7.43k|}
parser.c:parse_transaction_source:
 1203|  7.99k|static bool parse_transaction_source(buffer_t *buffer, muxed_account_t *source) {
 1204|  7.99k|    return parse_muxed_account(buffer, source);
 1205|  7.99k|}
parser.c:parse_muxed_account:
  205|  23.0k|static bool parse_muxed_account(buffer_t *buffer, muxed_account_t *muxed_account) {
  206|  23.0k|    PARSER_CHECK(parse_uint32(buffer, &muxed_account->type))
  ------------------
  |  |   15|  23.0k|    {                           \
  |  |   16|  23.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 27, False: 23.0k]
  |  |  ------------------
  |  |   17|  23.0k|    }
  ------------------
  207|       |
  208|  23.0k|    switch (muxed_account->type) {
  209|  20.8k|        case KEY_TYPE_ED25519:
  ------------------
  |  Branch (209:9): [True: 20.8k, False: 2.18k]
  ------------------
  210|  20.8k|            PARSER_CHECK(
  ------------------
  |  |   15|  20.8k|    {                           \
  |  |   16|  20.8k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 18, False: 20.8k]
  |  |  ------------------
  |  |   17|  20.8k|    }
  ------------------
  211|  20.8k|                buffer_read_bytes(buffer, &muxed_account->ed25519, RAW_ED25519_PUBLIC_KEY_SIZE))
  212|  20.8k|            return true;
  213|  2.06k|        case KEY_TYPE_MUXED_ED25519:
  ------------------
  |  Branch (213:9): [True: 2.06k, False: 20.9k]
  ------------------
  214|  2.06k|            PARSER_CHECK(parse_uint64(buffer, &muxed_account->med25519.id))
  ------------------
  |  |   15|  2.06k|    {                           \
  |  |   16|  2.06k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 2.05k]
  |  |  ------------------
  |  |   17|  2.06k|    }
  ------------------
  215|  2.05k|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|  2.05k|    {                           \
  |  |   16|  2.05k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 2.04k]
  |  |  ------------------
  |  |   17|  2.05k|    }
  ------------------
  216|  2.05k|                                           &muxed_account->med25519.ed25519,
  217|  2.05k|                                           RAW_ED25519_PUBLIC_KEY_SIZE))
  218|  2.04k|            return true;
  219|    119|        default:
  ------------------
  |  Branch (219:9): [True: 119, False: 22.9k]
  ------------------
  220|    119|            return false;
  221|  23.0k|    }
  222|  23.0k|}
parser.c:parse_transaction_fee:
 1207|  7.86k|static bool parse_transaction_fee(buffer_t *buffer, uint32_t *fee) {
 1208|  7.86k|    return parse_uint32(buffer, fee);
 1209|  7.86k|}
parser.c:parse_transaction_sequence:
 1211|  7.86k|static bool parse_transaction_sequence(buffer_t *buffer, sequence_number_t *sequence_number) {
 1212|  7.86k|    return parse_int64(buffer, sequence_number);
 1213|  7.86k|}
parser.c:parse_transaction_preconditions:
 1215|  7.86k|static bool parse_transaction_preconditions(buffer_t *buffer, preconditions_t *preconditions) {
 1216|  7.86k|    return parse_preconditions(buffer, preconditions);
 1217|  7.86k|}
parser.c:parse_preconditions:
  249|  7.86k|static bool parse_preconditions(buffer_t *buffer, preconditions_t *cond) {
  250|  7.86k|    uint32_t precondition_type;
  251|  7.86k|    PARSER_CHECK(parse_uint32(buffer, &precondition_type))
  ------------------
  |  |   15|  7.86k|    {                           \
  |  |   16|  7.86k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 7.85k]
  |  |  ------------------
  |  |   17|  7.86k|    }
  ------------------
  252|  7.85k|    switch (precondition_type) {
  253|  7.20k|        case PRECOND_NONE:
  ------------------
  |  Branch (253:9): [True: 7.20k, False: 658]
  ------------------
  254|  7.20k|            cond->time_bounds_present = false;
  255|  7.20k|            cond->min_seq_num_present = false;
  256|  7.20k|            cond->ledger_bounds_present = false;
  257|  7.20k|            cond->min_seq_ledger_gap = 0;
  258|  7.20k|            cond->min_seq_age = 0;
  259|  7.20k|            return true;
  260|    415|        case PRECOND_TIME:
  ------------------
  |  Branch (260:9): [True: 415, False: 7.44k]
  ------------------
  261|    415|            cond->time_bounds_present = true;
  262|    415|            PARSER_CHECK(parse_time_bounds(buffer, &cond->time_bounds))
  ------------------
  |  |   15|    415|    {                           \
  |  |   16|    415|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 405]
  |  |  ------------------
  |  |   17|    415|    }
  ------------------
  263|    405|            cond->min_seq_num_present = false;
  264|    405|            cond->ledger_bounds_present = false;
  265|    405|            cond->min_seq_ledger_gap = 0;
  266|    405|            cond->min_seq_age = 0;
  267|    405|            return true;
  268|    235|        case PRECOND_V2:
  ------------------
  |  Branch (268:9): [True: 235, False: 7.62k]
  ------------------
  269|    235|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|    235|    {                           \
  |  |   16|    235|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 229]
  |  |  ------------------
  |  |   17|    235|    }
  ------------------
  270|    235|                                             (xdr_type_reader) parse_time_bounds,
  271|    235|                                             &cond->time_bounds,
  272|    235|                                             &cond->time_bounds_present))
  273|    229|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|    229|    {                           \
  |  |   16|    229|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 214]
  |  |  ------------------
  |  |   17|    229|    }
  ------------------
  274|    229|                                             (xdr_type_reader) parse_ledger_bounds,
  275|    229|                                             &cond->ledger_bounds,
  276|    229|                                             &cond->ledger_bounds_present))
  277|    214|            PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|    214|    {                           \
  |  |   16|    214|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 205]
  |  |  ------------------
  |  |   17|    214|    }
  ------------------
  278|    214|                                             (xdr_type_reader) parse_int64,
  279|    214|                                             &cond->min_seq_num,
  280|    214|                                             &cond->min_seq_num_present))
  281|    205|            PARSER_CHECK(parse_int64(buffer, &cond->min_seq_age))
  ------------------
  |  |   15|    205|    {                           \
  |  |   16|    205|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 202]
  |  |  ------------------
  |  |   17|    205|    }
  ------------------
  282|    202|            PARSER_CHECK(parse_uint32(buffer, &cond->min_seq_ledger_gap))
  ------------------
  |  |   15|    202|    {                           \
  |  |   16|    202|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 198]
  |  |  ------------------
  |  |   17|    202|    }
  ------------------
  283|    198|            PARSER_CHECK(parse_extra_signers(buffer))
  ------------------
  |  |   15|    198|    {                           \
  |  |   16|    198|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 86, False: 112]
  |  |  ------------------
  |  |   17|    198|    }
  ------------------
  284|    112|            return true;
  285|      8|        default:
  ------------------
  |  Branch (285:9): [True: 8, False: 7.85k]
  ------------------
  286|      8|            return false;
  287|  7.85k|    }
  288|  7.85k|}
parser.c:parse_time_bounds:
  224|    426|static bool parse_time_bounds(buffer_t *buffer, time_bounds_t *bounds) {
  225|    426|    PARSER_CHECK(parse_uint64(buffer, &bounds->min_time))
  ------------------
  |  |   15|    426|    {                           \
  |  |   16|    426|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 420]
  |  |  ------------------
  |  |   17|    426|    }
  ------------------
  226|    420|    PARSER_CHECK(parse_uint64(buffer, &bounds->max_time))
  ------------------
  |  |   15|    420|    {                           \
  |  |   16|    420|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 416]
  |  |  ------------------
  |  |   17|    420|    }
  ------------------
  227|    416|    return true;
  228|    420|}
parser.c:parse_optional_type:
  135|   334k|static bool parse_optional_type(buffer_t *buffer, xdr_type_reader reader, void *dst, bool *opted) {
  136|   334k|    bool is_present;
  137|       |
  138|   334k|    PARSER_CHECK(parse_bool(buffer, &is_present))
  ------------------
  |  |   15|   334k|    {                           \
  |  |   16|   334k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 375, False: 333k]
  |  |  ------------------
  |  |   17|   334k|    }
  ------------------
  139|   333k|    if (is_present) {
  ------------------
  |  Branch (139:9): [True: 10.6k, False: 323k]
  ------------------
  140|  10.6k|        if (opted) {
  ------------------
  |  Branch (140:13): [True: 10.6k, False: 0]
  ------------------
  141|  10.6k|            *opted = true;
  142|  10.6k|        }
  143|  10.6k|        return reader(buffer, dst);
  144|   323k|    } else {
  145|   323k|        if (opted) {
  ------------------
  |  Branch (145:13): [True: 323k, False: 0]
  ------------------
  146|   323k|            *opted = false;
  147|   323k|        }
  148|   323k|        return true;
  149|   323k|    }
  150|   333k|}
parser.c:parse_ledger_bounds:
  230|    109|static bool parse_ledger_bounds(buffer_t *buffer, ledger_bounds_t *ledger_bounds) {
  231|    109|    PARSER_CHECK(parse_uint32(buffer, &ledger_bounds->min_ledger))
  ------------------
  |  |   15|    109|    {                           \
  |  |   16|    109|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 104]
  |  |  ------------------
  |  |   17|    109|    }
  ------------------
  232|    104|    PARSER_CHECK(parse_uint32(buffer, &ledger_bounds->max_ledger))
  ------------------
  |  |   15|    104|    {                           \
  |  |   16|    104|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 101]
  |  |  ------------------
  |  |   17|    104|    }
  ------------------
  233|    101|    return true;
  234|    104|}
parser.c:parse_extra_signers:
  236|    198|static bool parse_extra_signers(buffer_t *buffer) {
  237|    198|    uint32_t length;
  238|    198|    PARSER_CHECK(parse_uint32(buffer, &length))
  ------------------
  |  |   15|    198|    {                           \
  |  |   16|    198|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 196]
  |  |  ------------------
  |  |   17|    198|    }
  ------------------
  239|    196|    if (length > 2) {  // maximum length is 2
  ------------------
  |  Branch (239:9): [True: 6, False: 190]
  ------------------
  240|      6|        return false;
  241|      6|    }
  242|    190|    signer_key_t signer_key;
  243|    324|    for (uint32_t i = 0; i < length; i++) {
  ------------------
  |  Branch (243:26): [True: 212, False: 112]
  ------------------
  244|    212|        PARSER_CHECK(parse_signer_key(buffer, &signer_key))
  ------------------
  |  |   15|    212|    {                           \
  |  |   16|    212|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 78, False: 134]
  |  |  ------------------
  |  |   17|    212|    }
  ------------------
  245|    212|    }
  246|    112|    return true;
  247|    190|}
parser.c:parse_signer_key:
  163|  5.48k|static bool parse_signer_key(buffer_t *buffer, signer_key_t *key) {
  164|  5.48k|    PARSER_CHECK(parse_uint32(buffer, &key->type))
  ------------------
  |  |   15|  5.48k|    {                           \
  |  |   16|  5.48k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 18, False: 5.46k]
  |  |  ------------------
  |  |   17|  5.48k|    }
  ------------------
  165|  5.46k|    switch (key->type) {
  166|  3.19k|        case SIGNER_KEY_TYPE_ED25519:
  ------------------
  |  Branch (166:9): [True: 3.19k, False: 2.26k]
  ------------------
  167|  3.19k|            PARSER_CHECK(buffer_read_bytes(buffer, &key->ed25519, RAW_ED25519_PUBLIC_KEY_SIZE))
  ------------------
  |  |   15|  3.19k|    {                           \
  |  |   16|  3.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 3.19k]
  |  |  ------------------
  |  |   17|  3.19k|    }
  ------------------
  168|  3.19k|            return true;
  169|  1.25k|        case SIGNER_KEY_TYPE_PRE_AUTH_TX:
  ------------------
  |  Branch (169:9): [True: 1.25k, False: 4.20k]
  ------------------
  170|  1.25k|            PARSER_CHECK(buffer_read_bytes(buffer, &key->pre_auth_tx, RAW_PRE_AUTH_TX_KEY_SIZE))
  ------------------
  |  |   15|  1.25k|    {                           \
  |  |   16|  1.25k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.25k]
  |  |  ------------------
  |  |   17|  1.25k|    }
  ------------------
  171|  1.25k|            return true;
  172|    461|        case SIGNER_KEY_TYPE_HASH_X:
  ------------------
  |  Branch (172:9): [True: 461, False: 5.00k]
  ------------------
  173|    461|            PARSER_CHECK(buffer_read_bytes(buffer, &key->hash_x, RAW_HASH_X_KEY_SIZE))
  ------------------
  |  |   15|    461|    {                           \
  |  |   16|    461|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 455]
  |  |  ------------------
  |  |   17|    461|    }
  ------------------
  174|    455|            return true;
  175|    525|        case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:
  ------------------
  |  Branch (175:9): [True: 525, False: 4.94k]
  ------------------
  176|    525|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|    525|    {                           \
  |  |   16|    525|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 516]
  |  |  ------------------
  |  |   17|    525|    }
  ------------------
  177|    525|                                           &key->ed25519_signed_payload.ed25519,
  178|    525|                                           RAW_ED25519_PUBLIC_KEY_SIZE))
  179|    516|            PARSER_CHECK(parse_uint32(buffer, &key->ed25519_signed_payload.payload_len))
  ------------------
  |  |   15|    516|    {                           \
  |  |   16|    516|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 512]
  |  |  ------------------
  |  |   17|    516|    }
  ------------------
  180|       |            // valid length [1, 64]
  181|    512|            if (key->ed25519_signed_payload.payload_len == 0 ||
  ------------------
  |  Branch (181:17): [True: 9, False: 503]
  ------------------
  182|    512|                key->ed25519_signed_payload.payload_len > 64) {
  ------------------
  |  Branch (182:17): [True: 8, False: 495]
  ------------------
  183|     17|                return false;
  184|     17|            }
  185|    495|            size_t data_size = 0;
  186|    495|            PARSER_CHECK(num_bytes(key->ed25519_signed_payload.payload_len, &data_size))
  ------------------
  |  |   15|    495|    {                           \
  |  |   16|    495|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 495]
  |  |  ------------------
  |  |   17|    495|    }
  ------------------
  187|    495|            PARSER_CHECK(buffer_read_bytes(buffer, &key->ed25519_signed_payload.payload, data_size))
  ------------------
  |  |   15|    495|    {                           \
  |  |   16|    495|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 481]
  |  |  ------------------
  |  |   17|    495|    }
  ------------------
  188|    481|            return true;
  189|     21|        default:
  ------------------
  |  Branch (189:9): [True: 21, False: 5.44k]
  ------------------
  190|     21|            return false;
  191|  5.46k|    }
  192|  5.46k|}
parser.c:parse_transaction_memo:
 1219|  7.71k|static bool parse_transaction_memo(buffer_t *buffer, memo_t *memo) {
 1220|  7.71k|    return parse_memo(buffer, memo);
 1221|  7.71k|}
parser.c:parse_memo:
  290|  7.71k|static bool parse_memo(buffer_t *buffer, memo_t *memo) {
  291|  7.71k|    PARSER_CHECK(parse_uint32(buffer, &memo->type))
  ------------------
  |  |   15|  7.71k|    {                           \
  |  |   16|  7.71k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 35, False: 7.68k]
  |  |  ------------------
  |  |   17|  7.71k|    }
  ------------------
  292|  7.68k|    switch (memo->type) {
  293|  7.05k|        case MEMO_NONE:
  ------------------
  |  Branch (293:9): [True: 7.05k, False: 629]
  ------------------
  294|  7.05k|            return true;
  295|     36|        case MEMO_ID:
  ------------------
  |  Branch (295:9): [True: 36, False: 7.64k]
  ------------------
  296|     36|            return parse_uint64(buffer, &memo->id);
  297|    364|        case MEMO_TEXT: {
  ------------------
  |  Branch (297:9): [True: 364, False: 7.31k]
  ------------------
  298|    364|            PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|    364|    {                           \
  |  |   16|    364|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 340]
  |  |  ------------------
  |  |   17|    364|    }
  ------------------
  299|    364|                                                 &memo->text.text,
  300|    364|                                                 &memo->text.text_size,
  301|    364|                                                 MEMO_TEXT_MAX_SIZE))
  302|    340|            return true;
  303|    364|        }
  304|     10|        case MEMO_HASH:
  ------------------
  |  Branch (304:9): [True: 10, False: 7.67k]
  ------------------
  305|     10|            return buffer_read_bytes(buffer, &memo->hash, HASH_SIZE);
  ------------------
  |  |   46|     10|#define HASH_SIZE                 32
  ------------------
  306|     13|        case MEMO_RETURN:
  ------------------
  |  Branch (306:9): [True: 13, False: 7.67k]
  ------------------
  307|     13|            return buffer_read_bytes(buffer, &memo->return_hash, HASH_SIZE);
  ------------------
  |  |   46|     13|#define HASH_SIZE                 32
  ------------------
  308|    206|        default:
  ------------------
  |  Branch (308:9): [True: 206, False: 7.47k]
  ------------------
  309|    206|            return false;  // unknown memo type
  310|  7.68k|    }
  311|  7.68k|}
parser.c:parse_transaction_operation_len:
 1223|  7.43k|static bool parse_transaction_operation_len(buffer_t *buffer, uint8_t *operations_count) {
 1224|  7.43k|    uint32_t len;
 1225|  7.43k|    PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  7.43k|    {                           \
  |  |   16|  7.43k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 7.42k]
  |  |  ------------------
  |  |   17|  7.43k|    }
  ------------------
 1226|  7.42k|    if (len > MAX_OPS) {
  ------------------
  |  |   39|  7.42k|#define MAX_OPS 35
  ------------------
  |  Branch (1226:9): [True: 10, False: 7.41k]
  ------------------
 1227|     10|        return false;
 1228|     10|    }
 1229|  7.41k|    *operations_count = len;
 1230|  7.41k|    return true;
 1231|  7.42k|}
parser.c:parse_fee_bump_transaction_details:
 1276|     97|    fee_bump_transaction_details_t *fee_bump_transaction) {
 1277|     97|    PARSER_CHECK(parse_fee_bump_transaction_fee_source(buffer, &fee_bump_transaction->fee_source))
  ------------------
  |  |   15|     97|    {                           \
  |  |   16|     97|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 82]
  |  |  ------------------
  |  |   17|     97|    }
  ------------------
 1278|     82|    PARSER_CHECK(parse_fee_bump_transaction_fee(buffer, &fee_bump_transaction->fee))
  ------------------
  |  |   15|     82|    {                           \
  |  |   16|     82|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 77]
  |  |  ------------------
  |  |   17|     82|    }
  ------------------
 1279|     77|    return true;
 1280|     82|}
parser.c:parse_fee_bump_transaction_fee_source:
 1266|     97|static bool parse_fee_bump_transaction_fee_source(buffer_t *buffer, muxed_account_t *fee_source) {
 1267|     97|    return parse_muxed_account(buffer, fee_source);
 1268|     97|}
parser.c:parse_fee_bump_transaction_fee:
 1270|     82|static bool parse_fee_bump_transaction_fee(buffer_t *buffer, int64_t *fee) {
 1271|     82|    return parse_int64(buffer, fee);
 1272|     82|}
parser.c:check_operations:
 1233|  7.41k|static bool check_operations(buffer_t *buffer, uint8_t op_count) {
 1234|  7.41k|    PRINTF("check_operations: op_count=%d, offset=%d\n", op_count, buffer->offset);
 1235|  7.41k|    operation_t op;
 1236|  42.2k|    for (uint8_t i = 0; i < op_count; i++) {
  ------------------
  |  Branch (1236:25): [True: 37.0k, False: 5.21k]
  ------------------
 1237|  37.0k|        PARSER_CHECK(parse_operation(buffer, &op))
  ------------------
  |  |   15|  37.0k|    {                           \
  |  |   16|  37.0k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2.20k, False: 34.8k]
  |  |  ------------------
  |  |   17|  37.0k|    }
  ------------------
 1238|  37.0k|    }
 1239|  5.21k|    return true;
 1240|  7.41k|}
parser.c:parse_operation:
 1101|   235k|static bool parse_operation(buffer_t *buffer, operation_t *operation) {
 1102|   235k|    PRINTF("parse_operation: offset=%d\n", buffer->offset);
 1103|   235k|    explicit_bzero(operation, sizeof(operation_t));
 1104|       |
 1105|   235k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|   235k|    {                           \
  |  |   16|   235k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 302, False: 235k]
  |  |  ------------------
  |  |   17|   235k|    }
  ------------------
 1106|   235k|                                     (xdr_type_reader) parse_muxed_account,
 1107|   235k|                                     &operation->source_account,
 1108|   235k|                                     &operation->source_account_present))
 1109|   235k|    PRINTF("operation->source_account_present: %d\n", operation->source_account_present);
 1110|       |
 1111|   235k|    PARSER_CHECK(parse_uint32(buffer, &operation->type))
  ------------------
  |  |   15|   235k|    {                           \
  |  |   16|   235k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 32, False: 235k]
  |  |  ------------------
  |  |   17|   235k|    }
  ------------------
 1112|   235k|    PRINTF("sizeof operation->type: %d\n", sizeof(operation->type));
 1113|       |
 1114|   235k|    switch (operation->type) {
 1115|   163k|        case OPERATION_TYPE_CREATE_ACCOUNT: {
  ------------------
  |  Branch (1115:9): [True: 163k, False: 71.9k]
  ------------------
 1116|   163k|            return parse_create_account(buffer, &operation->create_account_op);
 1117|      0|        }
 1118|  3.84k|        case OPERATION_TYPE_PAYMENT: {
  ------------------
  |  Branch (1118:9): [True: 3.84k, False: 231k]
  ------------------
 1119|  3.84k|            return parse_payment(buffer, &operation->payment_op);
 1120|      0|        }
 1121|  1.74k|        case OPERATION_TYPE_PATH_PAYMENT_STRICT_RECEIVE: {
  ------------------
  |  Branch (1121:9): [True: 1.74k, False: 233k]
  ------------------
 1122|  1.74k|            return parse_path_payment_strict_receive(buffer,
 1123|  1.74k|                                                     &operation->path_payment_strict_receive_op);
 1124|      0|        }
 1125|  2.85k|        case OPERATION_TYPE_CREATE_PASSIVE_SELL_OFFER: {
  ------------------
  |  Branch (1125:9): [True: 2.85k, False: 232k]
  ------------------
 1126|  2.85k|            return parse_create_passive_sell_offer(buffer,
 1127|  2.85k|                                                   &operation->create_passive_sell_offer_op);
 1128|      0|        }
 1129|  1.30k|        case OPERATION_TYPE_MANAGE_SELL_OFFER: {
  ------------------
  |  Branch (1129:9): [True: 1.30k, False: 234k]
  ------------------
 1130|  1.30k|            return parse_manage_sell_offer(buffer, &operation->manage_sell_offer_op);
 1131|      0|        }
 1132|  12.2k|        case OPERATION_TYPE_SET_OPTIONS: {
  ------------------
  |  Branch (1132:9): [True: 12.2k, False: 223k]
  ------------------
 1133|  12.2k|            return parse_set_options(buffer, &operation->set_options_op);
 1134|      0|        }
 1135|  1.79k|        case OPERATION_TYPE_CHANGE_TRUST: {
  ------------------
  |  Branch (1135:9): [True: 1.79k, False: 233k]
  ------------------
 1136|  1.79k|            return parse_change_trust(buffer, &operation->change_trust_op);
 1137|      0|        }
 1138|    357|        case OPERATION_TYPE_ALLOW_TRUST: {
  ------------------
  |  Branch (1138:9): [True: 357, False: 235k]
  ------------------
 1139|    357|            return parse_allow_trust(buffer, &operation->allow_trust_op);
 1140|      0|        }
 1141|  2.72k|        case OPERATION_TYPE_ACCOUNT_MERGE: {
  ------------------
  |  Branch (1141:9): [True: 2.72k, False: 232k]
  ------------------
 1142|  2.72k|            return parse_account_merge(buffer, &operation->account_merge_op);
 1143|      0|        }
 1144|  2.39k|        case OPERATION_TYPE_INFLATION: {
  ------------------
  |  Branch (1144:9): [True: 2.39k, False: 233k]
  ------------------
 1145|  2.39k|            return true;
 1146|      0|        }
 1147|  2.35k|        case OPERATION_TYPE_MANAGE_DATA: {
  ------------------
  |  Branch (1147:9): [True: 2.35k, False: 233k]
  ------------------
 1148|  2.35k|            return parse_manage_data(buffer, &operation->manage_data_op);
 1149|      0|        }
 1150|  1.43k|        case OPERATION_TYPE_BUMP_SEQUENCE: {
  ------------------
  |  Branch (1150:9): [True: 1.43k, False: 234k]
  ------------------
 1151|  1.43k|            return parse_bump_sequence(buffer, &operation->bump_sequence_op);
 1152|      0|        }
 1153|  1.31k|        case OPERATION_TYPE_MANAGE_BUY_OFFER: {
  ------------------
  |  Branch (1153:9): [True: 1.31k, False: 234k]
  ------------------
 1154|  1.31k|            return parse_manage_buy_offer(buffer, &operation->manage_buy_offer_op);
 1155|      0|        }
 1156|    272|        case OPERATION_TYPE_PATH_PAYMENT_STRICT_SEND: {
  ------------------
  |  Branch (1156:9): [True: 272, False: 235k]
  ------------------
 1157|    272|            return parse_path_payment_strict_send(buffer, &operation->path_payment_strict_send_op);
 1158|      0|        }
 1159|  1.53k|        case OPERATION_TYPE_CREATE_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1159:9): [True: 1.53k, False: 234k]
  ------------------
 1160|  1.53k|            return parse_create_claimable_balance(buffer, &operation->create_claimable_balance_op);
 1161|      0|        }
 1162|  1.49k|        case OPERATION_TYPE_CLAIM_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1162:9): [True: 1.49k, False: 234k]
  ------------------
 1163|  1.49k|            return parse_claim_claimable_balance(buffer, &operation->claim_claimable_balance_op);
 1164|      0|        }
 1165|  3.27k|        case OPERATION_TYPE_BEGIN_SPONSORING_FUTURE_RESERVES: {
  ------------------
  |  Branch (1165:9): [True: 3.27k, False: 232k]
  ------------------
 1166|  3.27k|            return parse_begin_sponsoring_future_reserves(
 1167|  3.27k|                buffer,
 1168|  3.27k|                &operation->begin_sponsoring_future_reserves_op);
 1169|      0|        }
 1170|  1.24k|        case OPERATION_TYPE_END_SPONSORING_FUTURE_RESERVES: {
  ------------------
  |  Branch (1170:9): [True: 1.24k, False: 234k]
  ------------------
 1171|  1.24k|            return true;
 1172|      0|        }
 1173|  12.1k|        case OPERATION_TYPE_REVOKE_SPONSORSHIP: {
  ------------------
  |  Branch (1173:9): [True: 12.1k, False: 223k]
  ------------------
 1174|  12.1k|            return parse_revoke_sponsorship(buffer, &operation->revoke_sponsorship_op);
 1175|      0|        }
 1176|    555|        case OPERATION_TYPE_CLAWBACK: {
  ------------------
  |  Branch (1176:9): [True: 555, False: 235k]
  ------------------
 1177|    555|            return parse_clawback(buffer, &operation->clawback_op);
 1178|      0|        }
 1179|    899|        case OPERATION_TYPE_CLAWBACK_CLAIMABLE_BALANCE: {
  ------------------
  |  Branch (1179:9): [True: 899, False: 234k]
  ------------------
 1180|    899|            return parse_clawback_claimable_balance(buffer,
 1181|    899|                                                    &operation->clawback_claimable_balance_op);
 1182|      0|        }
 1183|  8.00k|        case OPERATION_TYPE_SET_TRUST_LINE_FLAGS: {
  ------------------
  |  Branch (1183:9): [True: 8.00k, False: 227k]
  ------------------
 1184|  8.00k|            return parse_set_trust_line_flags(buffer, &operation->set_trust_line_flags_op);
 1185|      0|        }
 1186|    155|        case OPERATION_TYPE_LIQUIDITY_POOL_DEPOSIT:
  ------------------
  |  Branch (1186:9): [True: 155, False: 235k]
  ------------------
 1187|    155|            return parse_liquidity_pool_deposit(buffer, &operation->liquidity_pool_deposit_op);
 1188|  1.38k|        case OPERATION_TYPE_LIQUIDITY_POOL_WITHDRAW:
  ------------------
  |  Branch (1188:9): [True: 1.38k, False: 234k]
  ------------------
 1189|  1.38k|            return parse_liquidity_pool_withdraw(buffer, &operation->liquidity_pool_withdraw_op);
 1190|  3.50k|        case OPERATION_INVOKE_HOST_FUNCTION: {
  ------------------
  |  Branch (1190:9): [True: 3.50k, False: 232k]
  ------------------
 1191|  3.50k|            return parse_invoke_host_function(buffer, &operation->invoke_host_function_op);
 1192|      0|        }
 1193|    943|        case OPERATION_EXTEND_FOOTPRINT_TTL:
  ------------------
  |  Branch (1193:9): [True: 943, False: 234k]
  ------------------
 1194|    943|            return parse_extend_footprint_ttl(buffer, &operation->extend_footprint_ttl_op);
 1195|  2.21k|        case OPERATION_RESTORE_FOOTPRINT:
  ------------------
  |  Branch (1195:9): [True: 2.21k, False: 233k]
  ------------------
 1196|  2.21k|            return parse_restore_footprint(buffer, &operation->restore_footprint_op);
 1197|     17|        default:
  ------------------
  |  Branch (1197:9): [True: 17, False: 235k]
  ------------------
 1198|     17|            return false;
 1199|   235k|    }
 1200|      0|    return false;
 1201|   235k|}
parser.c:parse_create_account:
  401|   163k|static bool parse_create_account(buffer_t *buffer, create_account_op_t *create_account_op) {
  402|   163k|    PARSER_CHECK(parse_account_id(buffer, &create_account_op->destination))
  ------------------
  |  |   15|   163k|    {                           \
  |  |   16|   163k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 87, False: 163k]
  |  |  ------------------
  |  |   17|   163k|    }
  ------------------
  403|   163k|    PARSER_CHECK(parse_int64(buffer, &create_account_op->starting_balance))
  ------------------
  |  |   15|   163k|    {                           \
  |  |   16|   163k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 163k]
  |  |  ------------------
  |  |   17|   163k|    }
  ------------------
  404|   163k|    return true;
  405|   163k|}
parser.c:parse_payment:
  407|  3.84k|static bool parse_payment(buffer_t *buffer, payment_op_t *payment_op) {
  408|  3.84k|    PARSER_CHECK(parse_muxed_account(buffer, &payment_op->destination))
  ------------------
  |  |   15|  3.84k|    {                           \
  |  |   16|  3.84k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 3.83k]
  |  |  ------------------
  |  |   17|  3.84k|    }
  ------------------
  409|  3.83k|    PARSER_CHECK(parse_asset(buffer, &payment_op->asset))
  ------------------
  |  |   15|  3.83k|    {                           \
  |  |   16|  3.83k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 3.82k]
  |  |  ------------------
  |  |   17|  3.83k|    }
  ------------------
  410|  3.82k|    PARSER_CHECK(parse_int64(buffer, &payment_op->amount))
  ------------------
  |  |   15|  3.82k|    {                           \
  |  |   16|  3.82k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 3.81k]
  |  |  ------------------
  |  |   17|  3.82k|    }
  ------------------
  411|  3.81k|    return true;
  412|  3.82k|}
parser.c:parse_asset:
  325|  31.2k|static bool parse_asset(buffer_t *buffer, asset_t *asset) {
  326|  31.2k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  31.2k|    {                           \
  |  |   16|  31.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 85, False: 31.1k]
  |  |  ------------------
  |  |   17|  31.2k|    }
  ------------------
  327|  31.1k|    switch (asset->type) {
  328|  28.9k|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (328:9): [True: 28.9k, False: 2.20k]
  ------------------
  329|  28.9k|            return true;
  330|      0|        }
  331|  1.50k|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (331:9): [True: 1.50k, False: 29.6k]
  ------------------
  332|  1.50k|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  333|      0|        }
  334|    580|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (334:9): [True: 580, False: 30.5k]
  ------------------
  335|    580|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  336|      0|        }
  337|    123|        default:
  ------------------
  |  Branch (337:9): [True: 123, False: 31.0k]
  ------------------
  338|    123|            return false;  // unknown asset type
  339|  31.1k|    }
  340|  31.1k|}
parser.c:parse_alpha_num4_asset:
  313|  2.45k|static bool parse_alpha_num4_asset(buffer_t *buffer, alpha_num4_t *asset) {
  314|  2.45k|    PARSER_CHECK(buffer_read_bytes(buffer, &asset->asset_code, 4))
  ------------------
  |  |   15|  2.45k|    {                           \
  |  |   16|  2.45k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 2.43k]
  |  |  ------------------
  |  |   17|  2.45k|    }
  ------------------
  315|  2.43k|    PARSER_CHECK(parse_account_id(buffer, &asset->issuer))
  ------------------
  |  |   15|  2.43k|    {                           \
  |  |   16|  2.43k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 29, False: 2.40k]
  |  |  ------------------
  |  |   17|  2.43k|    }
  ------------------
  316|  2.40k|    return true;
  317|  2.43k|}
parser.c:parse_alpha_num12_asset:
  319|  1.26k|static bool parse_alpha_num12_asset(buffer_t *buffer, alpha_num12_t *asset) {
  320|  1.26k|    PARSER_CHECK(buffer_read_bytes(buffer, &asset->asset_code, 12))
  ------------------
  |  |   15|  1.26k|    {                           \
  |  |   16|  1.26k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 34, False: 1.22k]
  |  |  ------------------
  |  |   17|  1.26k|    }
  ------------------
  321|  1.22k|    PARSER_CHECK(parse_account_id(buffer, &asset->issuer))
  ------------------
  |  |   15|  1.22k|    {                           \
  |  |   16|  1.22k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 23, False: 1.20k]
  |  |  ------------------
  |  |   17|  1.22k|    }
  ------------------
  322|  1.20k|    return true;
  323|  1.22k|}
parser.c:parse_path_payment_strict_receive:
  415|  1.74k|                                              path_payment_strict_receive_op_t *op) {
  416|  1.74k|    uint32_t path_len;
  417|       |
  418|  1.74k|    PARSER_CHECK(parse_asset(buffer, &op->send_asset))
  ------------------
  |  |   15|  1.74k|    {                           \
  |  |   16|  1.74k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 1.72k]
  |  |  ------------------
  |  |   17|  1.74k|    }
  ------------------
  419|  1.72k|    PARSER_CHECK(parse_int64(buffer, &op->send_max))
  ------------------
  |  |   15|  1.72k|    {                           \
  |  |   16|  1.72k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 1.72k]
  |  |  ------------------
  |  |   17|  1.72k|    }
  ------------------
  420|  1.72k|    PARSER_CHECK(parse_muxed_account(buffer, &op->destination))
  ------------------
  |  |   15|  1.72k|    {                           \
  |  |   16|  1.72k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 1.71k]
  |  |  ------------------
  |  |   17|  1.72k|    }
  ------------------
  421|  1.71k|    PARSER_CHECK(parse_asset(buffer, &op->dest_asset))
  ------------------
  |  |   15|  1.71k|    {                           \
  |  |   16|  1.71k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 1.70k]
  |  |  ------------------
  |  |   17|  1.71k|    }
  ------------------
  422|  1.70k|    PARSER_CHECK(parse_int64(buffer, &op->dest_amount))
  ------------------
  |  |   15|  1.70k|    {                           \
  |  |   16|  1.70k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 18, False: 1.68k]
  |  |  ------------------
  |  |   17|  1.70k|    }
  ------------------
  423|       |
  424|  1.68k|    PARSER_CHECK(parse_uint32(buffer, &path_len))
  ------------------
  |  |   15|  1.68k|    {                           \
  |  |   16|  1.68k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.68k]
  |  |  ------------------
  |  |   17|  1.68k|    }
  ------------------
  425|  1.68k|    if (path_len > PATH_PAYMENT_MAX_PATH_LENGTH) {
  ------------------
  |  |   35|  1.68k|#define PATH_PAYMENT_MAX_PATH_LENGTH  5
  ------------------
  |  Branch (425:9): [True: 4, False: 1.67k]
  ------------------
  426|      4|        return false;
  427|      4|    }
  428|  3.17k|    for (uint32_t i = 0; i < path_len; i++) {
  ------------------
  |  Branch (428:26): [True: 1.51k, False: 1.65k]
  ------------------
  429|  1.51k|        asset_t tmp_asset;
  430|  1.51k|        PARSER_CHECK(parse_asset(buffer, &tmp_asset))
  ------------------
  |  |   15|  1.51k|    {                           \
  |  |   16|  1.51k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 1.49k]
  |  |  ------------------
  |  |   17|  1.51k|    }
  ------------------
  431|  1.51k|    }
  432|  1.65k|    return true;
  433|  1.67k|}
parser.c:parse_create_passive_sell_offer:
  500|  2.85k|static bool parse_create_passive_sell_offer(buffer_t *buffer, create_passive_sell_offer_op_t *op) {
  501|  2.85k|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|  2.85k|    {                           \
  |  |   16|  2.85k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 2.85k]
  |  |  ------------------
  |  |   17|  2.85k|    }
  ------------------
  502|  2.85k|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|  2.85k|    {                           \
  |  |   16|  2.85k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 16, False: 2.83k]
  |  |  ------------------
  |  |   17|  2.85k|    }
  ------------------
  503|  2.83k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  2.83k|    {                           \
  |  |   16|  2.83k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 2.82k]
  |  |  ------------------
  |  |   17|  2.83k|    }
  ------------------
  504|  2.82k|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|  2.82k|    {                           \
  |  |   16|  2.82k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 2.81k]
  |  |  ------------------
  |  |   17|  2.82k|    }
  ------------------
  505|  2.81k|    return true;
  506|  2.82k|}
parser.c:parse_price:
  475|  5.66k|static bool parse_price(buffer_t *buffer, price_t *price) {
  476|  5.66k|    PARSER_CHECK(parse_int32(buffer, &price->n))
  ------------------
  |  |   15|  5.66k|    {                           \
  |  |   16|  5.66k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 26, False: 5.64k]
  |  |  ------------------
  |  |   17|  5.66k|    }
  ------------------
  477|  5.64k|    PARSER_CHECK(parse_int32(buffer, &price->d))
  ------------------
  |  |   15|  5.64k|    {                           \
  |  |   16|  5.64k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 5.63k]
  |  |  ------------------
  |  |   17|  5.64k|    }
  ------------------
  478|       |    // Denominator cannot be null, as it would lead to a division by zero.
  479|  5.63k|    return price->d != 0;
  480|  5.64k|}
parser.c:parse_manage_sell_offer:
  482|  1.30k|static bool parse_manage_sell_offer(buffer_t *buffer, manage_sell_offer_op_t *op) {
  483|  1.30k|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|  1.30k|    {                           \
  |  |   16|  1.30k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.29k]
  |  |  ------------------
  |  |   17|  1.30k|    }
  ------------------
  484|  1.29k|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|  1.29k|    {                           \
  |  |   16|  1.29k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 1.28k]
  |  |  ------------------
  |  |   17|  1.29k|    }
  ------------------
  485|  1.28k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  1.28k|    {                           \
  |  |   16|  1.28k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 1.28k]
  |  |  ------------------
  |  |   17|  1.28k|    }
  ------------------
  486|  1.28k|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|  1.28k|    {                           \
  |  |   16|  1.28k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 1.26k]
  |  |  ------------------
  |  |   17|  1.28k|    }
  ------------------
  487|  1.26k|    PARSER_CHECK(parse_int64(buffer, &op->offer_id))
  ------------------
  |  |   15|  1.26k|    {                           \
  |  |   16|  1.26k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 1.26k]
  |  |  ------------------
  |  |   17|  1.26k|    }
  ------------------
  488|  1.26k|    return true;
  489|  1.26k|}
parser.c:parse_set_options:
  521|  12.2k|static bool parse_set_options(buffer_t *buffer, set_options_op_t *set_options) {
  522|  12.2k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  12.2k|    {                           \
  |  |   16|  12.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 12.2k]
  |  |  ------------------
  |  |   17|  12.2k|    }
  ------------------
  523|  12.2k|                                     (xdr_type_reader) parse_account_id,
  524|  12.2k|                                     &set_options->inflation_destination,
  525|  12.2k|                                     &set_options->inflation_destination_present))
  526|       |
  527|  12.2k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  12.2k|    {                           \
  |  |   16|  12.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 12.2k]
  |  |  ------------------
  |  |   17|  12.2k|    }
  ------------------
  528|  12.2k|                                     (xdr_type_reader) parse_uint32,
  529|  12.2k|                                     &set_options->clear_flags,
  530|  12.2k|                                     &set_options->clear_flags_present))
  531|  12.2k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  12.2k|    {                           \
  |  |   16|  12.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 12.2k]
  |  |  ------------------
  |  |   17|  12.2k|    }
  ------------------
  532|  12.2k|                                     (xdr_type_reader) parse_uint32,
  533|  12.2k|                                     &set_options->set_flags,
  534|  12.2k|                                     &set_options->set_flags_present))
  535|  12.2k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  12.2k|    {                           \
  |  |   16|  12.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 12.2k]
  |  |  ------------------
  |  |   17|  12.2k|    }
  ------------------
  536|  12.2k|                                     (xdr_type_reader) parse_uint32,
  537|  12.2k|                                     &set_options->master_weight,
  538|  12.2k|                                     &set_options->master_weight_present))
  539|  12.2k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  12.2k|    {                           \
  |  |   16|  12.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 12.2k]
  |  |  ------------------
  |  |   17|  12.2k|    }
  ------------------
  540|  12.2k|                                     (xdr_type_reader) parse_uint32,
  541|  12.2k|                                     &set_options->low_threshold,
  542|  12.2k|                                     &set_options->low_threshold_present))
  543|  12.2k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  12.2k|    {                           \
  |  |   16|  12.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 12.1k]
  |  |  ------------------
  |  |   17|  12.2k|    }
  ------------------
  544|  12.2k|                                     (xdr_type_reader) parse_uint32,
  545|  12.2k|                                     &set_options->medium_threshold,
  546|  12.2k|                                     &set_options->medium_threshold_present))
  547|  12.1k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  12.1k|    {                           \
  |  |   16|  12.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 12.1k]
  |  |  ------------------
  |  |   17|  12.1k|    }
  ------------------
  548|  12.1k|                                     (xdr_type_reader) parse_uint32,
  549|  12.1k|                                     &set_options->high_threshold,
  550|  12.1k|                                     &set_options->high_threshold_present))
  551|       |
  552|  12.1k|    uint32_t home_domain_present;
  553|  12.1k|    PARSER_CHECK(parse_uint32(buffer, &home_domain_present))
  ------------------
  |  |   15|  12.1k|    {                           \
  |  |   16|  12.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 12.1k]
  |  |  ------------------
  |  |   17|  12.1k|    }
  ------------------
  554|  12.1k|    set_options->home_domain_present = home_domain_present ? true : false;
  ------------------
  |  Branch (554:40): [True: 2.94k, False: 9.23k]
  ------------------
  555|  12.1k|    if (set_options->home_domain_present) {
  ------------------
  |  Branch (555:9): [True: 2.94k, False: 9.23k]
  ------------------
  556|  2.94k|        PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  2.94k|    {                           \
  |  |   16|  2.94k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 2.93k]
  |  |  ------------------
  |  |   17|  2.94k|    }
  ------------------
  557|  2.94k|                                             &set_options->home_domain,
  558|  2.94k|                                             &set_options->home_domain_size,
  559|  2.94k|                                             HOME_DOMAIN_MAX_SIZE))
  560|  9.23k|    } else {
  561|  9.23k|        set_options->home_domain_size = 0;
  562|  9.23k|    }
  563|       |
  564|  12.1k|    PARSER_CHECK(parse_optional_type(buffer,
  ------------------
  |  |   15|  12.1k|    {                           \
  |  |   16|  12.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 29, False: 12.1k]
  |  |  ------------------
  |  |   17|  12.1k|    }
  ------------------
  565|  12.1k|                                     (xdr_type_reader) parse_signer,
  566|  12.1k|                                     &set_options->signer,
  567|  12.1k|                                     &set_options->signer_present))
  568|  12.1k|    return true;
  569|  12.1k|}
parser.c:parse_signer:
  515|    783|static bool parse_signer(buffer_t *buffer, signer_t *signer) {
  516|    783|    PARSER_CHECK(parse_signer_key(buffer, &signer->key))
  ------------------
  |  |   15|    783|    {                           \
  |  |   16|    783|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 770]
  |  |  ------------------
  |  |   17|    783|    }
  ------------------
  517|    770|    PARSER_CHECK(parse_uint32(buffer, &signer->weight))
  ------------------
  |  |   15|    770|    {                           \
  |  |   16|    770|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 766]
  |  |  ------------------
  |  |   17|    770|    }
  ------------------
  518|    766|    return true;
  519|    770|}
parser.c:parse_change_trust:
  508|  1.79k|static bool parse_change_trust(buffer_t *buffer, change_trust_op_t *op) {
  509|  1.79k|    PARSER_CHECK(parse_change_trust_asset(buffer, &op->line))
  ------------------
  |  |   15|  1.79k|    {                           \
  |  |   16|  1.79k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 45, False: 1.74k]
  |  |  ------------------
  |  |   17|  1.79k|    }
  ------------------
  510|  1.74k|    PARSER_CHECK(parse_int64(buffer, &op->limit));
  ------------------
  |  |   15|  1.74k|    {                           \
  |  |   16|  1.74k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 1.73k]
  |  |  ------------------
  |  |   17|  1.74k|    }
  ------------------
  511|       |    // Limit cannot be negative
  512|  1.73k|    return op->limit >= 0;
  513|  1.74k|}
parser.c:parse_change_trust_asset:
  381|  1.79k|static bool parse_change_trust_asset(buffer_t *buffer, change_trust_asset_t *asset) {
  382|  1.79k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  1.79k|    {                           \
  |  |   16|  1.79k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 1.78k]
  |  |  ------------------
  |  |   17|  1.79k|    }
  ------------------
  383|  1.78k|    switch (asset->type) {
  384|    281|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (384:9): [True: 281, False: 1.50k]
  ------------------
  385|    281|            return true;
  386|      0|        }
  387|    856|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (387:9): [True: 856, False: 932]
  ------------------
  388|    856|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  389|      0|        }
  390|    525|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (390:9): [True: 525, False: 1.26k]
  ------------------
  391|    525|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  392|      0|        }
  393|    118|        case ASSET_TYPE_POOL_SHARE: {
  ------------------
  |  Branch (393:9): [True: 118, False: 1.67k]
  ------------------
  394|    118|            return parse_liquidity_pool_parameters(buffer, &asset->liquidity_pool);
  395|      0|        }
  396|      8|        default:
  ------------------
  |  Branch (396:9): [True: 8, False: 1.78k]
  ------------------
  397|      8|            return false;  // unknown asset type
  398|  1.78k|    }
  399|  1.78k|}
parser.c:parse_liquidity_pool_parameters:
  366|    118|    liquidity_pool_parameters_t *liquidity_pool_parameters) {
  367|    118|    uint32_t liquidity_pool_type;
  368|    118|    PARSER_CHECK(parse_uint32(buffer, &liquidity_pool_type))
  ------------------
  |  |   15|    118|    {                           \
  |  |   16|    118|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 116]
  |  |  ------------------
  |  |   17|    118|    }
  ------------------
  369|    116|    switch (liquidity_pool_type) {
  370|    113|        case LIQUIDITY_POOL_CONSTANT_PRODUCT: {
  ------------------
  |  Branch (370:9): [True: 113, False: 3]
  ------------------
  371|    113|            PARSER_CHECK(parse_asset(buffer, &liquidity_pool_parameters->constant_product.asset_a))
  ------------------
  |  |   15|    113|    {                           \
  |  |   16|    113|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 108]
  |  |  ------------------
  |  |   17|    113|    }
  ------------------
  372|    108|            PARSER_CHECK(parse_asset(buffer, &liquidity_pool_parameters->constant_product.asset_b))
  ------------------
  |  |   15|    108|    {                           \
  |  |   16|    108|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 103]
  |  |  ------------------
  |  |   17|    108|    }
  ------------------
  373|    103|            PARSER_CHECK(parse_int32(buffer, &liquidity_pool_parameters->constant_product.fee))
  ------------------
  |  |   15|    103|    {                           \
  |  |   16|    103|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 100]
  |  |  ------------------
  |  |   17|    103|    }
  ------------------
  374|    100|            return true;
  375|    103|        }
  376|      3|        default:
  ------------------
  |  Branch (376:9): [True: 3, False: 113]
  ------------------
  377|      3|            return false;
  378|    116|    }
  379|    116|}
parser.c:parse_allow_trust:
  435|    357|static bool parse_allow_trust(buffer_t *buffer, allow_trust_op_t *op) {
  436|    357|    PARSER_CHECK(parse_account_id(buffer, &op->trustor))
  ------------------
  |  |   15|    357|    {                           \
  |  |   16|    357|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 353]
  |  |  ------------------
  |  |   17|    357|    }
  ------------------
  437|    353|    PARSER_CHECK(parse_uint32(buffer, &op->asset_type))
  ------------------
  |  |   15|    353|    {                           \
  |  |   16|    353|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 350]
  |  |  ------------------
  |  |   17|    353|    }
  ------------------
  438|       |
  439|    350|    switch (op->asset_type) {
  440|    123|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (440:9): [True: 123, False: 227]
  ------------------
  441|    123|            PARSER_CHECK(buffer_read_bytes(buffer, &op->asset_code, 4))
  ------------------
  |  |   15|    123|    {                           \
  |  |   16|    123|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 120]
  |  |  ------------------
  |  |   17|    123|    }
  ------------------
  442|    120|            break;
  443|    220|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (443:9): [True: 220, False: 130]
  ------------------
  444|    220|            PARSER_CHECK(buffer_read_bytes(buffer, &op->asset_code, 12))
  ------------------
  |  |   15|    220|    {                           \
  |  |   16|    220|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 215]
  |  |  ------------------
  |  |   17|    220|    }
  ------------------
  445|    215|            break;
  446|    215|        default:
  ------------------
  |  Branch (446:9): [True: 7, False: 343]
  ------------------
  447|      7|            return false;  // unknown asset type
  448|    350|    }
  449|       |
  450|    335|    PARSER_CHECK(parse_uint32(buffer, &op->authorize))
  ------------------
  |  |   15|    335|    {                           \
  |  |   16|    335|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 330]
  |  |  ------------------
  |  |   17|    335|    }
  ------------------
  451|    330|    return true;
  452|    335|}
parser.c:parse_account_merge:
  454|  2.72k|static bool parse_account_merge(buffer_t *buffer, account_merge_op_t *op) {
  455|  2.72k|    return parse_muxed_account(buffer, &op->destination);
  456|  2.72k|}
parser.c:parse_manage_data:
  458|  2.35k|static bool parse_manage_data(buffer_t *buffer, manage_data_op_t *op) {
  459|  2.35k|    PARSER_CHECK(
  ------------------
  |  |   15|  2.35k|    {                           \
  |  |   16|  2.35k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 2.34k]
  |  |  ------------------
  |  |   17|  2.35k|    }
  ------------------
  460|  2.35k|        parse_binary_string_ptr(buffer, &op->data_name, &op->data_name_size, DATA_NAME_MAX_SIZE))
  461|       |
  462|  2.34k|    bool has_value;
  463|  2.34k|    PARSER_CHECK(parse_bool(buffer, &has_value))
  ------------------
  |  |   15|  2.34k|    {                           \
  |  |   16|  2.34k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 2.33k]
  |  |  ------------------
  |  |   17|  2.34k|    }
  ------------------
  464|  2.33k|    if (has_value) {
  ------------------
  |  Branch (464:9): [True: 410, False: 1.92k]
  ------------------
  465|    410|        PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|    410|    {                           \
  |  |   16|    410|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 401]
  |  |  ------------------
  |  |   17|    410|    }
  ------------------
  466|    410|                                             &op->data_value,
  467|    410|                                             &op->data_value_size,
  468|    410|                                             DATA_VALUE_MAX_SIZE))
  469|  1.92k|    } else {
  470|  1.92k|        op->data_value_size = 0;
  471|  1.92k|    }
  472|  2.32k|    return true;
  473|  2.33k|}
parser.c:parse_bump_sequence:
  571|  1.43k|static bool parse_bump_sequence(buffer_t *buffer, bump_sequence_op_t *op) {
  572|  1.43k|    return parse_int64(buffer, &op->bump_to);
  573|  1.43k|}
parser.c:parse_manage_buy_offer:
  491|  1.31k|static bool parse_manage_buy_offer(buffer_t *buffer, manage_buy_offer_op_t *op) {
  492|  1.31k|    PARSER_CHECK(parse_asset(buffer, &op->selling))
  ------------------
  |  |   15|  1.31k|    {                           \
  |  |   16|  1.31k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 17, False: 1.30k]
  |  |  ------------------
  |  |   17|  1.31k|    }
  ------------------
  493|  1.30k|    PARSER_CHECK(parse_asset(buffer, &op->buying))
  ------------------
  |  |   15|  1.30k|    {                           \
  |  |   16|  1.30k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 1.29k]
  |  |  ------------------
  |  |   17|  1.30k|    }
  ------------------
  494|  1.29k|    PARSER_CHECK(parse_int64(buffer, &op->buy_amount))
  ------------------
  |  |   15|  1.29k|    {                           \
  |  |   16|  1.29k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 1.28k]
  |  |  ------------------
  |  |   17|  1.29k|    }
  ------------------
  495|  1.28k|    PARSER_CHECK(parse_price(buffer, &op->price))
  ------------------
  |  |   15|  1.28k|    {                           \
  |  |   16|  1.28k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 1.28k]
  |  |  ------------------
  |  |   17|  1.28k|    }
  ------------------
  496|  1.28k|    PARSER_CHECK(parse_int64(buffer, &op->offer_id))
  ------------------
  |  |   15|  1.28k|    {                           \
  |  |   16|  1.28k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.27k]
  |  |  ------------------
  |  |   17|  1.28k|    }
  ------------------
  497|  1.27k|    return true;
  498|  1.28k|}
parser.c:parse_path_payment_strict_send:
  575|    272|static bool parse_path_payment_strict_send(buffer_t *buffer, path_payment_strict_send_op_t *op) {
  576|    272|    uint32_t path_len;
  577|       |
  578|    272|    PARSER_CHECK(parse_asset(buffer, &op->send_asset))
  ------------------
  |  |   15|    272|    {                           \
  |  |   16|    272|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 262]
  |  |  ------------------
  |  |   17|    272|    }
  ------------------
  579|    262|    PARSER_CHECK(parse_int64(buffer, &op->send_amount))
  ------------------
  |  |   15|    262|    {                           \
  |  |   16|    262|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 258]
  |  |  ------------------
  |  |   17|    262|    }
  ------------------
  580|    258|    PARSER_CHECK(parse_muxed_account(buffer, &op->destination))
  ------------------
  |  |   15|    258|    {                           \
  |  |   16|    258|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 255]
  |  |  ------------------
  |  |   17|    258|    }
  ------------------
  581|    255|    PARSER_CHECK(parse_asset(buffer, &op->dest_asset))
  ------------------
  |  |   15|    255|    {                           \
  |  |   16|    255|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 250]
  |  |  ------------------
  |  |   17|    255|    }
  ------------------
  582|    250|    PARSER_CHECK(parse_int64(buffer, &op->dest_min))
  ------------------
  |  |   15|    250|    {                           \
  |  |   16|    250|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 244]
  |  |  ------------------
  |  |   17|    250|    }
  ------------------
  583|    244|    PARSER_CHECK(parse_uint32(buffer, &path_len))
  ------------------
  |  |   15|    244|    {                           \
  |  |   16|    244|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 241]
  |  |  ------------------
  |  |   17|    244|    }
  ------------------
  584|    241|    if (path_len > PATH_PAYMENT_MAX_PATH_LENGTH) {
  ------------------
  |  |   35|    241|#define PATH_PAYMENT_MAX_PATH_LENGTH  5
  ------------------
  |  Branch (584:9): [True: 4, False: 237]
  ------------------
  585|      4|        return false;
  586|      4|    }
  587|    548|    for (uint32_t i = 0; i < path_len; i++) {
  ------------------
  |  Branch (587:26): [True: 327, False: 221]
  ------------------
  588|    327|        asset_t tmp_asset;
  589|    327|        PARSER_CHECK(parse_asset(buffer, &tmp_asset))
  ------------------
  |  |   15|    327|    {                           \
  |  |   16|    327|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 16, False: 311]
  |  |  ------------------
  |  |   17|    327|    }
  ------------------
  590|    327|    }
  591|    221|    return true;
  592|    237|}
parser.c:parse_create_claimable_balance:
  645|  1.53k|static bool parse_create_claimable_balance(buffer_t *buffer, create_claimable_balance_op_t *op) {
  646|  1.53k|    uint32_t claimant_len;
  647|  1.53k|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|  1.53k|    {                           \
  |  |   16|  1.53k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 1.51k]
  |  |  ------------------
  |  |   17|  1.53k|    }
  ------------------
  648|  1.51k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  1.51k|    {                           \
  |  |   16|  1.51k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 1.51k]
  |  |  ------------------
  |  |   17|  1.51k|    }
  ------------------
  649|  1.51k|    PARSER_CHECK(parse_uint32(buffer, &claimant_len))
  ------------------
  |  |   15|  1.51k|    {                           \
  |  |   16|  1.51k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.51k]
  |  |  ------------------
  |  |   17|  1.51k|    }
  ------------------
  650|  1.51k|    if (claimant_len > CLAIMANTS_MAX_LENGTH) {
  ------------------
  |  |   34|  1.51k|#define CLAIMANTS_MAX_LENGTH          10
  ------------------
  |  Branch (650:9): [True: 4, False: 1.50k]
  ------------------
  651|      4|        return false;
  652|      4|    }
  653|  1.50k|    op->claimant_len = claimant_len;
  654|  4.15k|    for (int i = 0; i < op->claimant_len; i++) {
  ------------------
  |  Branch (654:21): [True: 2.93k, False: 1.22k]
  ------------------
  655|  2.93k|        PARSER_CHECK(parse_claimant(buffer, &op->claimants[i]))
  ------------------
  |  |   15|  2.93k|    {                           \
  |  |   16|  2.93k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 286, False: 2.64k]
  |  |  ------------------
  |  |   17|  2.93k|    }
  ------------------
  656|  2.93k|    }
  657|  1.22k|    return true;
  658|  1.50k|}
parser.c:parse_claimant:
  633|  2.93k|static bool parse_claimant(buffer_t *buffer, claimant_t *claimant) {
  634|  2.93k|    PARSER_CHECK(parse_uint32(buffer, &claimant->type))
  ------------------
  |  |   15|  2.93k|    {                           \
  |  |   16|  2.93k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 50, False: 2.88k]
  |  |  ------------------
  |  |   17|  2.93k|    }
  ------------------
  635|  2.88k|    switch (claimant->type) {
  636|  2.83k|        case CLAIMANT_TYPE_V0:
  ------------------
  |  Branch (636:9): [True: 2.83k, False: 44]
  ------------------
  637|  2.83k|            PARSER_CHECK(parse_account_id(buffer, &claimant->v0.destination))
  ------------------
  |  |   15|  2.83k|    {                           \
  |  |   16|  2.83k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 24, False: 2.81k]
  |  |  ------------------
  |  |   17|  2.83k|    }
  ------------------
  638|  2.81k|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|  2.81k|    {                           \
  |  |   16|  2.81k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 168, False: 2.64k]
  |  |  ------------------
  |  |   17|  2.81k|    }
  ------------------
  639|  2.64k|            return true;
  640|     44|        default:
  ------------------
  |  Branch (640:9): [True: 44, False: 2.83k]
  ------------------
  641|     44|            return false;
  642|  2.88k|    }
  643|  2.88k|}
parser.c:parse_claimant_predicate:
  594|  3.33k|static bool parse_claimant_predicate(buffer_t *buffer) {
  595|       |    // Currently, does not support displaying claimant details.
  596|       |    // So here we will not store the parsed data, just to ensure that the data can be parsed
  597|       |    // correctly.
  598|  3.33k|    uint32_t claim_predicate_type;
  599|  3.33k|    uint32_t predicates_len;
  600|  3.33k|    bool not_predicate_present;
  601|  3.33k|    int64_t abs_before;
  602|  3.33k|    int64_t rel_before;
  603|  3.33k|    PARSER_CHECK(parse_uint32(buffer, &claim_predicate_type))
  ------------------
  |  |   15|  3.33k|    {                           \
  |  |   16|  3.33k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 26, False: 3.31k]
  |  |  ------------------
  |  |   17|  3.33k|    }
  ------------------
  604|  3.31k|    switch (claim_predicate_type) {
  605|  2.46k|        case CLAIM_PREDICATE_UNCONDITIONAL:
  ------------------
  |  Branch (605:9): [True: 2.46k, False: 851]
  ------------------
  606|  2.46k|            return true;
  607|    216|        case CLAIM_PREDICATE_AND:
  ------------------
  |  Branch (607:9): [True: 216, False: 3.09k]
  ------------------
  608|    354|        case CLAIM_PREDICATE_OR:
  ------------------
  |  Branch (608:9): [True: 138, False: 3.17k]
  ------------------
  609|    354|            PARSER_CHECK(parse_uint32(buffer, &predicates_len))
  ------------------
  |  |   15|    354|    {                           \
  |  |   16|    354|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 334]
  |  |  ------------------
  |  |   17|    354|    }
  ------------------
  610|    334|            if (predicates_len != 2) {
  ------------------
  |  Branch (610:17): [True: 61, False: 273]
  ------------------
  611|     61|                return false;
  612|     61|            }
  613|    273|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|    273|    {                           \
  |  |   16|    273|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 112, False: 161]
  |  |  ------------------
  |  |   17|    273|    }
  ------------------
  614|    161|            PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|    161|    {                           \
  |  |   16|    161|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 45, False: 116]
  |  |  ------------------
  |  |   17|    161|    }
  ------------------
  615|    116|            return true;
  616|    196|        case CLAIM_PREDICATE_NOT:
  ------------------
  |  Branch (616:9): [True: 196, False: 3.11k]
  ------------------
  617|    196|            PARSER_CHECK(parse_bool(buffer, &not_predicate_present))
  ------------------
  |  |   15|    196|    {                           \
  |  |   16|    196|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 188]
  |  |  ------------------
  |  |   17|    196|    }
  ------------------
  618|    188|            if (not_predicate_present) {
  ------------------
  |  Branch (618:17): [True: 89, False: 99]
  ------------------
  619|     89|                PARSER_CHECK(parse_claimant_predicate(buffer))
  ------------------
  |  |   15|     89|    {                           \
  |  |   16|     89|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 78]
  |  |  ------------------
  |  |   17|     89|    }
  ------------------
  620|     89|            }
  621|    177|            return true;
  622|    168|        case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:
  ------------------
  |  Branch (622:9): [True: 168, False: 3.14k]
  ------------------
  623|    168|            PARSER_CHECK(parse_int64(buffer, &abs_before))
  ------------------
  |  |   15|    168|    {                           \
  |  |   16|    168|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 160]
  |  |  ------------------
  |  |   17|    168|    }
  ------------------
  624|    160|            return true;
  625|     97|        case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:
  ------------------
  |  Branch (625:9): [True: 97, False: 3.21k]
  ------------------
  626|     97|            PARSER_CHECK(parse_int64(buffer, &rel_before))
  ------------------
  |  |   15|     97|    {                           \
  |  |   16|     97|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 88]
  |  |  ------------------
  |  |   17|     97|    }
  ------------------
  627|     88|            return true;
  628|     36|        default:
  ------------------
  |  Branch (628:9): [True: 36, False: 3.27k]
  ------------------
  629|     36|            return false;
  630|  3.31k|    }
  631|  3.31k|}
parser.c:parse_claim_claimable_balance:
  673|  1.49k|static bool parse_claim_claimable_balance(buffer_t *buffer, claim_claimable_balance_op_t *op) {
  674|  1.49k|    PARSER_CHECK(parse_claimable_balance_id(buffer, &op->balance_id))
  ------------------
  |  |   15|  1.49k|    {                           \
  |  |   16|  1.49k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 10, False: 1.48k]
  |  |  ------------------
  |  |   17|  1.49k|    }
  ------------------
  675|  1.48k|    return true;
  676|  1.49k|}
parser.c:parse_claimable_balance_id:
  661|  2.99k|                                       claimable_balance_id_t *claimable_balance_id_t) {
  662|  2.99k|    PARSER_CHECK(parse_uint32(buffer, &claimable_balance_id_t->type))
  ------------------
  |  |   15|  2.99k|    {                           \
  |  |   16|  2.99k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 2.99k]
  |  |  ------------------
  |  |   17|  2.99k|    }
  ------------------
  663|  2.99k|    switch (claimable_balance_id_t->type) {
  664|  2.98k|        case CLAIMABLE_BALANCE_ID_TYPE_V0:
  ------------------
  |  Branch (664:9): [True: 2.98k, False: 12]
  ------------------
  665|  2.98k|            PARSER_CHECK(
  ------------------
  |  |   15|  2.98k|    {                           \
  |  |   16|  2.98k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 8, False: 2.97k]
  |  |  ------------------
  |  |   17|  2.98k|    }
  ------------------
  666|  2.98k|                buffer_read_bytes(buffer, &claimable_balance_id_t->v0, CLAIMABLE_BALANCE_ID_SIZE))
  667|  2.97k|            return true;
  668|     12|        default:
  ------------------
  |  Branch (668:9): [True: 12, False: 2.98k]
  ------------------
  669|     12|            return false;
  670|  2.99k|    }
  671|  2.99k|}
parser.c:parse_begin_sponsoring_future_reserves:
  679|  3.27k|                                                   begin_sponsoring_future_reserves_op_t *op) {
  680|  3.27k|    PARSER_CHECK(parse_account_id(buffer, &op->sponsored_id))
  ------------------
  |  |   15|  3.27k|    {                           \
  |  |   16|  3.27k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 3.26k]
  |  |  ------------------
  |  |   17|  3.27k|    }
  ------------------
  681|  3.26k|    return true;
  682|  3.27k|}
parser.c:parse_revoke_sponsorship:
  849|  12.1k|static bool parse_revoke_sponsorship(buffer_t *buffer, revoke_sponsorship_op_t *op) {
  850|  12.1k|    PARSER_CHECK(parse_uint32(buffer, &op->type))
  ------------------
  |  |   15|  12.1k|    {                           \
  |  |   16|  12.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 12.1k]
  |  |  ------------------
  |  |   17|  12.1k|    }
  ------------------
  851|  12.1k|    switch (op->type) {
  852|  7.61k|        case REVOKE_SPONSORSHIP_LEDGER_ENTRY:
  ------------------
  |  Branch (852:9): [True: 7.61k, False: 4.49k]
  ------------------
  853|  7.61k|            PARSER_CHECK(parse_ledger_key(buffer, &op->ledger_key))
  ------------------
  |  |   15|  7.61k|    {                           \
  |  |   16|  7.61k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 104, False: 7.51k]
  |  |  ------------------
  |  |   17|  7.61k|    }
  ------------------
  854|  7.51k|            return true;
  855|  4.49k|        case REVOKE_SPONSORSHIP_SIGNER:
  ------------------
  |  Branch (855:9): [True: 4.49k, False: 7.62k]
  ------------------
  856|  4.49k|            PARSER_CHECK(parse_account_id(buffer, &op->signer.account_id))
  ------------------
  |  |   15|  4.49k|    {                           \
  |  |   16|  4.49k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 4.48k]
  |  |  ------------------
  |  |   17|  4.49k|    }
  ------------------
  857|  4.48k|            PARSER_CHECK(parse_signer_key(buffer, &op->signer.signer_key))
  ------------------
  |  |   15|  4.48k|    {                           \
  |  |   16|  4.48k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 4.47k]
  |  |  ------------------
  |  |   17|  4.48k|    }
  ------------------
  858|  4.47k|            return true;
  859|      4|        default:
  ------------------
  |  Branch (859:9): [True: 4, False: 12.1k]
  ------------------
  860|      4|            return false;
  861|  12.1k|    }
  862|  12.1k|}
parser.c:parse_ledger_key:
  813|  7.61k|static bool parse_ledger_key(buffer_t *buffer, ledger_key_t *ledger_key) {
  814|  7.61k|    PARSER_CHECK(parse_uint32(buffer, &ledger_key->type))
  ------------------
  |  |   15|  7.61k|    {                           \
  |  |   16|  7.61k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 7.61k]
  |  |  ------------------
  |  |   17|  7.61k|    }
  ------------------
  815|  7.61k|    switch (ledger_key->type) {
  816|  1.82k|        case ACCOUNT:
  ------------------
  |  Branch (816:9): [True: 1.82k, False: 5.79k]
  ------------------
  817|  1.82k|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->account.account_id))
  ------------------
  |  |   15|  1.82k|    {                           \
  |  |   16|  1.82k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 1.80k]
  |  |  ------------------
  |  |   17|  1.82k|    }
  ------------------
  818|  1.80k|            return true;
  819|  1.61k|        case TRUSTLINE:
  ------------------
  |  Branch (819:9): [True: 1.61k, False: 5.99k]
  ------------------
  820|  1.61k|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->trust_line.account_id))
  ------------------
  |  |   15|  1.61k|    {                           \
  |  |   16|  1.61k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.61k]
  |  |  ------------------
  |  |   17|  1.61k|    }
  ------------------
  821|  1.61k|            PARSER_CHECK(parse_trust_line_asset(buffer, &ledger_key->trust_line.asset))
  ------------------
  |  |   15|  1.61k|    {                           \
  |  |   16|  1.61k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 41, False: 1.57k]
  |  |  ------------------
  |  |   17|  1.61k|    }
  ------------------
  822|  1.57k|            return true;
  823|    369|        case OFFER:
  ------------------
  |  Branch (823:9): [True: 369, False: 7.24k]
  ------------------
  824|    369|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->offer.seller_id))
  ------------------
  |  |   15|    369|    {                           \
  |  |   16|    369|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 360]
  |  |  ------------------
  |  |   17|    369|    }
  ------------------
  825|    360|            PARSER_CHECK(parse_int64(buffer, &ledger_key->offer.offer_id))
  ------------------
  |  |   15|    360|    {                           \
  |  |   16|    360|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 357]
  |  |  ------------------
  |  |   17|    360|    }
  ------------------
  826|    357|            return true;
  827|    995|        case DATA:
  ------------------
  |  Branch (827:9): [True: 995, False: 6.61k]
  ------------------
  828|    995|            PARSER_CHECK(parse_account_id(buffer, &ledger_key->data.account_id))
  ------------------
  |  |   15|    995|    {                           \
  |  |   16|    995|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 983]
  |  |  ------------------
  |  |   17|    995|    }
  ------------------
  829|    983|            PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|    983|    {                           \
  |  |   16|    983|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 979]
  |  |  ------------------
  |  |   17|    983|    }
  ------------------
  830|    983|                                                 &ledger_key->data.data_name,
  831|    983|                                                 &ledger_key->data.data_name_size,
  832|    983|                                                 DATA_NAME_MAX_SIZE))
  833|    979|            return true;
  834|    606|        case CLAIMABLE_BALANCE:
  ------------------
  |  Branch (834:9): [True: 606, False: 7.00k]
  ------------------
  835|    606|            PARSER_CHECK(
  ------------------
  |  |   15|    606|    {                           \
  |  |   16|    606|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 603]
  |  |  ------------------
  |  |   17|    606|    }
  ------------------
  836|    606|                parse_claimable_balance_id(buffer, &ledger_key->claimable_balance.balance_id))
  837|    603|            return true;
  838|  2.19k|        case LIQUIDITY_POOL:
  ------------------
  |  Branch (838:9): [True: 2.19k, False: 5.41k]
  ------------------
  839|  2.19k|            PARSER_CHECK(buffer_read_bytes(buffer,
  ------------------
  |  |   15|  2.19k|    {                           \
  |  |   16|  2.19k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 2.19k]
  |  |  ------------------
  |  |   17|  2.19k|    }
  ------------------
  840|  2.19k|                                           &ledger_key->liquidity_pool.liquidity_pool_id,
  841|  2.19k|                                           LIQUIDITY_POOL_ID_SIZE))
  842|       |
  843|  2.19k|            return true;
  844|      6|        default:
  ------------------
  |  Branch (844:9): [True: 6, False: 7.60k]
  ------------------
  845|      6|            return false;
  846|  7.61k|    }
  847|  7.61k|}
parser.c:parse_trust_line_asset:
  342|  1.61k|static bool parse_trust_line_asset(buffer_t *buffer, trust_line_asset_t *asset) {
  343|  1.61k|    PARSER_CHECK(parse_uint32(buffer, &asset->type))
  ------------------
  |  |   15|  1.61k|    {                           \
  |  |   16|  1.61k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.60k]
  |  |  ------------------
  |  |   17|  1.61k|    }
  ------------------
  344|  1.60k|    switch (asset->type) {
  345|  1.00k|        case ASSET_TYPE_NATIVE: {
  ------------------
  |  Branch (345:9): [True: 1.00k, False: 600]
  ------------------
  346|  1.00k|            return true;
  347|      0|        }
  348|     94|        case ASSET_TYPE_CREDIT_ALPHANUM4: {
  ------------------
  |  Branch (348:9): [True: 94, False: 1.51k]
  ------------------
  349|     94|            return parse_alpha_num4_asset(buffer, &asset->alpha_num4);
  350|      0|        }
  351|    157|        case ASSET_TYPE_CREDIT_ALPHANUM12: {
  ------------------
  |  Branch (351:9): [True: 157, False: 1.45k]
  ------------------
  352|    157|            return parse_alpha_num12_asset(buffer, &asset->alpha_num12);
  353|      0|        }
  354|    338|        case ASSET_TYPE_POOL_SHARE: {
  ------------------
  |  Branch (354:9): [True: 338, False: 1.27k]
  ------------------
  355|    338|            PARSER_CHECK(
  ------------------
  |  |   15|    338|    {                           \
  |  |   16|    338|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 331]
  |  |  ------------------
  |  |   17|    338|    }
  ------------------
  356|    338|                buffer_read_bytes(buffer, &asset->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  357|    331|            return true;
  358|    338|        }
  359|     11|        default:
  ------------------
  |  Branch (359:9): [True: 11, False: 1.59k]
  ------------------
  360|     11|            return false;  // unknown asset type
  361|  1.60k|    }
  362|  1.60k|}
parser.c:parse_clawback:
  864|    555|static bool parse_clawback(buffer_t *buffer, clawback_op_t *op) {
  865|    555|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|    555|    {                           \
  |  |   16|    555|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 535]
  |  |  ------------------
  |  |   17|    555|    }
  ------------------
  866|    535|    PARSER_CHECK(parse_muxed_account(buffer, &op->from))
  ------------------
  |  |   15|    535|    {                           \
  |  |   16|    535|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 531]
  |  |  ------------------
  |  |   17|    535|    }
  ------------------
  867|    531|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|    531|    {                           \
  |  |   16|    531|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 528]
  |  |  ------------------
  |  |   17|    531|    }
  ------------------
  868|    528|    return true;
  869|    531|}
parser.c:parse_clawback_claimable_balance:
  872|    899|                                             clawback_claimable_balance_op_t *op) {
  873|    899|    PARSER_CHECK(parse_claimable_balance_id(buffer, &op->balance_id))
  ------------------
  |  |   15|    899|    {                           \
  |  |   16|    899|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 886]
  |  |  ------------------
  |  |   17|    899|    }
  ------------------
  874|    886|    return true;
  875|    899|}
parser.c:parse_set_trust_line_flags:
  877|  8.00k|static bool parse_set_trust_line_flags(buffer_t *buffer, set_trust_line_flags_op_t *op) {
  878|  8.00k|    PARSER_CHECK(parse_account_id(buffer, &op->trustor))
  ------------------
  |  |   15|  8.00k|    {                           \
  |  |   16|  8.00k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 12, False: 7.98k]
  |  |  ------------------
  |  |   17|  8.00k|    }
  ------------------
  879|  7.98k|    PARSER_CHECK(parse_asset(buffer, &op->asset))
  ------------------
  |  |   15|  7.98k|    {                           \
  |  |   16|  7.98k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 7.98k]
  |  |  ------------------
  |  |   17|  7.98k|    }
  ------------------
  880|  7.98k|    PARSER_CHECK(parse_uint32(buffer, &op->clear_flags))
  ------------------
  |  |   15|  7.98k|    {                           \
  |  |   16|  7.98k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 7.97k]
  |  |  ------------------
  |  |   17|  7.98k|    }
  ------------------
  881|  7.97k|    PARSER_CHECK(parse_uint32(buffer, &op->set_flags))
  ------------------
  |  |   15|  7.97k|    {                           \
  |  |   16|  7.97k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 7.97k]
  |  |  ------------------
  |  |   17|  7.97k|    }
  ------------------
  882|  7.97k|    return true;
  883|  7.97k|}
parser.c:parse_liquidity_pool_deposit:
  885|    155|static bool parse_liquidity_pool_deposit(buffer_t *buffer, liquidity_pool_deposit_op_t *op) {
  886|    155|    PARSER_CHECK(buffer_read_bytes(buffer, &op->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  ------------------
  |  |   15|    155|    {                           \
  |  |   16|    155|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 13, False: 142]
  |  |  ------------------
  |  |   17|    155|    }
  ------------------
  887|    142|    PARSER_CHECK(parse_int64(buffer, &op->max_amount_a))
  ------------------
  |  |   15|    142|    {                           \
  |  |   16|    142|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 139]
  |  |  ------------------
  |  |   17|    142|    }
  ------------------
  888|    139|    PARSER_CHECK(parse_int64(buffer, &op->max_amount_b))
  ------------------
  |  |   15|    139|    {                           \
  |  |   16|    139|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 137]
  |  |  ------------------
  |  |   17|    139|    }
  ------------------
  889|    137|    PARSER_CHECK(parse_price(buffer, &op->min_price))
  ------------------
  |  |   15|    137|    {                           \
  |  |   16|    137|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 134]
  |  |  ------------------
  |  |   17|    137|    }
  ------------------
  890|    134|    PARSER_CHECK(parse_price(buffer, &op->max_price))
  ------------------
  |  |   15|    134|    {                           \
  |  |   16|    134|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 127]
  |  |  ------------------
  |  |   17|    134|    }
  ------------------
  891|    127|    return true;
  892|    134|}
parser.c:parse_liquidity_pool_withdraw:
  894|  1.38k|static bool parse_liquidity_pool_withdraw(buffer_t *buffer, liquidity_pool_withdraw_op_t *op) {
  895|  1.38k|    PARSER_CHECK(buffer_read_bytes(buffer, &op->liquidity_pool_id, LIQUIDITY_POOL_ID_SIZE))
  ------------------
  |  |   15|  1.38k|    {                           \
  |  |   16|  1.38k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 1.36k]
  |  |  ------------------
  |  |   17|  1.38k|    }
  ------------------
  896|  1.36k|    PARSER_CHECK(parse_int64(buffer, &op->amount))
  ------------------
  |  |   15|  1.36k|    {                           \
  |  |   16|  1.36k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.36k]
  |  |  ------------------
  |  |   17|  1.36k|    }
  ------------------
  897|  1.36k|    PARSER_CHECK(parse_int64(buffer, &op->min_amount_a))
  ------------------
  |  |   15|  1.36k|    {                           \
  |  |   16|  1.36k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 2, False: 1.36k]
  |  |  ------------------
  |  |   17|  1.36k|    }
  ------------------
  898|  1.36k|    PARSER_CHECK(parse_int64(buffer, &op->min_amount_b))
  ------------------
  |  |   15|  1.36k|    {                           \
  |  |   16|  1.36k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 3, False: 1.36k]
  |  |  ------------------
  |  |   17|  1.36k|    }
  ------------------
  899|  1.36k|    return true;
  900|  1.36k|}
parser.c:parse_invoke_host_function:
 1035|  3.50k|static bool parse_invoke_host_function(buffer_t *buffer, invoke_host_function_op_t *op) {
 1036|       |    // hostFunction
 1037|  3.50k|    PARSER_CHECK(parse_uint32(buffer, &op->host_function_type));
  ------------------
  |  |   15|  3.50k|    {                           \
  |  |   16|  3.50k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 7, False: 3.50k]
  |  |  ------------------
  |  |   17|  3.50k|    }
  ------------------
 1038|  3.50k|    PRINTF("host_function_type=%d\n", op->host_function_type);
 1039|  3.50k|    switch (op->host_function_type) {
 1040|  2.55k|        case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:
  ------------------
  |  Branch (1040:9): [True: 2.55k, False: 943]
  ------------------
 1041|  2.55k|            PARSER_CHECK(parse_invoke_contract_args(buffer, &op->invoke_contract_args))
  ------------------
  |  |   15|  2.55k|    {                           \
  |  |   16|  2.55k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 73, False: 2.48k]
  |  |  ------------------
  |  |   17|  2.55k|    }
  ------------------
 1042|  2.48k|            break;
 1043|  2.48k|        case HOST_FUNCTION_TYPE_CREATE_CONTRACT:
  ------------------
  |  Branch (1043:9): [True: 729, False: 2.77k]
  ------------------
 1044|    729|            PARSER_CHECK(read_create_contract_args_advance(buffer))
  ------------------
  |  |   15|    729|    {                           \
  |  |   16|    729|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 70, False: 659]
  |  |  ------------------
  |  |   17|    729|    }
  ------------------
 1045|    659|            break;
 1046|    659|        case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM: {
  ------------------
  |  Branch (1046:9): [True: 210, False: 3.29k]
  ------------------
 1047|    210|            size_t data_size = 0;
 1048|    210|            PARSER_CHECK(parse_uint32(buffer, &data_size))
  ------------------
  |  |   15|    210|    {                           \
  |  |   16|    210|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 206]
  |  |  ------------------
  |  |   17|    210|    }
  ------------------
 1049|    206|            PARSER_CHECK(num_bytes(data_size, &data_size))
  ------------------
  |  |   15|    206|    {                           \
  |  |   16|    206|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 0, False: 206]
  |  |  ------------------
  |  |   17|    206|    }
  ------------------
 1050|    206|            PARSER_CHECK(buffer_advance(buffer, data_size))
  ------------------
  |  |   15|    206|    {                           \
  |  |   16|    206|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 200]
  |  |  ------------------
  |  |   17|    206|    }
  ------------------
 1051|    200|            break;
 1052|    206|        }
 1053|    200|        default:
  ------------------
  |  Branch (1053:9): [True: 4, False: 3.49k]
  ------------------
 1054|      4|            return false;
 1055|  3.50k|    }
 1056|       |
 1057|       |    // auth<>
 1058|  3.34k|    uint32_t auth_len;
 1059|  3.34k|    uint8_t sub_invocations_count = 0;
 1060|  3.34k|    PARSER_CHECK(parse_uint32(buffer, &auth_len))
  ------------------
  |  |   15|  3.34k|    {                           \
  |  |   16|  3.34k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 28, False: 3.31k]
  |  |  ------------------
  |  |   17|  3.34k|    }
  ------------------
 1061|  4.99k|    for (uint32_t i = 0; i < auth_len; i++) {
  ------------------
  |  Branch (1061:26): [True: 2.15k, False: 2.84k]
  ------------------
 1062|       |        // PARSER_CHECK(read_soroban_authorization_entry_advance(buffer,
 1063|       |        //                                                       &sub_invocations_count,
 1064|       |        //                                                       op->sub_invocation_positions))
 1065|       |        // PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, count, positions))
 1066|       |        // 1. read credentials
 1067|  2.15k|        uint32_t credentials_type;
 1068|  2.15k|        PARSER_CHECK(read_parse_soroban_credentials_advance(buffer, &credentials_type))
  ------------------
  |  |   15|  2.15k|    {                           \
  |  |   16|  2.15k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 124, False: 2.03k]
  |  |  ------------------
  |  |   17|  2.15k|    }
  ------------------
 1069|       |        // 2. read rootInvocation.function
 1070|  2.03k|        PARSER_CHECK(read_soroban_authorized_function_advance(buffer))
  ------------------
  |  |   15|  2.03k|    {                           \
  |  |   16|  2.03k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 139, False: 1.89k]
  |  |  ------------------
  |  |   17|  2.03k|    }
  ------------------
 1071|       |        // 3. read rootInvocation.subInvocations
 1072|       |        // subInvocations
 1073|  1.89k|        uint32_t len;
 1074|  1.89k|        PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  1.89k|    {                           \
  |  |   16|  1.89k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 4, False: 1.88k]
  |  |  ------------------
  |  |   17|  1.89k|    }
  ------------------
 1075|  3.25k|        for (uint32_t j = 0; j < len; j++) {
  ------------------
  |  Branch (1075:30): [True: 1.57k, False: 1.68k]
  ------------------
 1076|  1.57k|            if (credentials_type == SOROBAN_CREDENTIALS_SOURCE_ACCOUNT) {
  ------------------
  |  Branch (1076:17): [True: 701, False: 875]
  ------------------
 1077|    701|                PARSER_CHECK(
  ------------------
  |  |   15|    701|    {                           \
  |  |   16|    701|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 73, False: 628]
  |  |  ------------------
  |  |   17|    701|    }
  ------------------
 1078|    701|                    read_soroban_authorized_invocation_advance(buffer,
 1079|    701|                                                               &sub_invocations_count,
 1080|    701|                                                               op->sub_invocation_positions))
 1081|    875|            } else {
 1082|    875|                PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, NULL, NULL))
  ------------------
  |  |   15|    875|    {                           \
  |  |   16|    875|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 132, False: 743]
  |  |  ------------------
  |  |   17|    875|    }
  ------------------
 1083|    875|            }
 1084|  1.57k|        }
 1085|  1.88k|    }
 1086|  2.84k|    op->sub_invocations_count = sub_invocations_count;
 1087|       |
 1088|  2.84k|    PRINTF("sub_invocations_count=%d\n", sub_invocations_count);
 1089|       |    // for (uint8_t i = 0; i < 16; i++) {
 1090|       |    //     PRINTF("sub_invocation_positions[%d]=%d\n", i, op->sub_invocation_positions[i]);
 1091|       |    // }
 1092|  2.84k|    return true;
 1093|  3.31k|}
parser.c:read_parse_soroban_credentials_advance:
  917|  2.15k|static bool read_parse_soroban_credentials_advance(buffer_t *buffer, uint32_t *credentials_type) {
  918|  2.15k|    PARSER_CHECK(parse_uint32(buffer, credentials_type))
  ------------------
  |  |   15|  2.15k|    {                           \
  |  |   16|  2.15k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 29, False: 2.12k]
  |  |  ------------------
  |  |   17|  2.15k|    }
  ------------------
  919|  2.12k|    switch (*credentials_type) {
  920|  1.79k|        case SOROBAN_CREDENTIALS_SOURCE_ACCOUNT:
  ------------------
  |  Branch (920:9): [True: 1.79k, False: 330]
  ------------------
  921|       |            // void
  922|  1.79k|            break;
  923|    295|        case SOROBAN_CREDENTIALS_ADDRESS: {
  ------------------
  |  Branch (923:9): [True: 295, False: 1.83k]
  ------------------
  924|    295|            sc_address_t address;
  925|    295|            PARSER_CHECK(parse_sc_address(buffer, &address))
  ------------------
  |  |   15|    295|    {                           \
  |  |   16|    295|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 20, False: 275]
  |  |  ------------------
  |  |   17|    295|    }
  ------------------
  926|       |            PARSER_CHECK(buffer_advance(buffer, 8))   // nonce
  ------------------
  |  |   15|    275|    {                           \
  |  |   16|    275|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 9, False: 266]
  |  |  ------------------
  |  |   17|    275|    }
  ------------------
  927|       |            PARSER_CHECK(buffer_advance(buffer, 4))   // signatureExpirationLedger
  ------------------
  |  |   15|    266|    {                           \
  |  |   16|    266|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 252]
  |  |  ------------------
  |  |   17|    266|    }
  ------------------
  928|       |            PARSER_CHECK(read_scval_advance(buffer))  // signature
  ------------------
  |  |   15|    252|    {                           \
  |  |   16|    252|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 17, False: 235]
  |  |  ------------------
  |  |   17|    252|    }
  ------------------
  929|    235|            break;
  930|    252|        }
  931|    235|        default:
  ------------------
  |  Branch (931:9): [True: 35, False: 2.09k]
  ------------------
  932|     35|            return false;
  933|  2.12k|    }
  934|  2.03k|    return true;
  935|  2.12k|}
parser.c:read_soroban_authorized_function_advance:
  994|  18.3k|static bool read_soroban_authorized_function_advance(buffer_t *buffer) {
  995|  18.3k|    uint32_t type;
  996|  18.3k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  18.3k|    {                           \
  |  |   16|  18.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 198, False: 18.1k]
  |  |  ------------------
  |  |   17|  18.3k|    }
  ------------------
  997|  18.1k|    switch (type) {
  998|  17.1k|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN: {
  ------------------
  |  Branch (998:9): [True: 17.1k, False: 1.04k]
  ------------------
  999|       |            // contractFn
 1000|  17.1k|            invoke_contract_args_t args;
 1001|  17.1k|            PARSER_CHECK(parse_invoke_contract_args(buffer, &args));
  ------------------
  |  |   15|  17.1k|    {                           \
  |  |   16|  17.1k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 560, False: 16.5k]
  |  |  ------------------
  |  |   17|  17.1k|    }
  ------------------
 1002|  16.5k|            break;
 1003|  17.1k|        }
 1004|    747|        case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
  ------------------
  |  Branch (1004:9): [True: 747, False: 17.4k]
  ------------------
 1005|       |            // createContractHostFn
 1006|    747|            PARSER_CHECK(read_create_contract_args_advance(buffer));
  ------------------
  |  |   15|    747|    {                           \
  |  |   16|    747|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 100, False: 647]
  |  |  ------------------
  |  |   17|    747|    }
  ------------------
 1007|    647|            break;
 1008|    294|        default:
  ------------------
  |  Branch (1008:9): [True: 294, False: 17.8k]
  ------------------
 1009|    294|            return false;
 1010|  18.1k|    }
 1011|  17.2k|    return true;
 1012|  18.1k|}
parser.c:parse_extend_footprint_ttl:
 1095|    943|static bool parse_extend_footprint_ttl(buffer_t *buffer, extend_footprint_ttl_op_t *op) {
 1096|    943|    PARSER_CHECK(parse_extension_point_v0(buffer))
  ------------------
  |  |   15|    943|    {                           \
  |  |   16|    943|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 937]
  |  |  ------------------
  |  |   17|    943|    }
  ------------------
 1097|    937|    PARSER_CHECK(parse_uint32(buffer, &op->extend_to))
  ------------------
  |  |   15|    937|    {                           \
  |  |   16|    937|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 5, False: 932]
  |  |  ------------------
  |  |   17|    937|    }
  ------------------
 1098|    932|    return true;
 1099|    937|}
parser.c:parse_extension_point_v0:
  902|  3.15k|static bool parse_extension_point_v0(buffer_t *buffer) {
  903|  3.15k|    uint32_t v;
  904|  3.15k|    PARSER_CHECK(parse_uint32(buffer, &v))
  ------------------
  |  |   15|  3.15k|    {                           \
  |  |   16|  3.15k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 6, False: 3.15k]
  |  |  ------------------
  |  |   17|  3.15k|    }
  ------------------
  905|  3.15k|    if (v != 0) {
  ------------------
  |  Branch (905:9): [True: 11, False: 3.14k]
  ------------------
  906|     11|        return false;
  907|     11|    }
  908|  3.14k|    return true;
  909|  3.15k|}
parser.c:parse_restore_footprint:
  911|  2.21k|static bool parse_restore_footprint(buffer_t *buffer, restore_footprint_op_t *op) {
  912|  2.21k|    (void) op;
  913|  2.21k|    PARSER_CHECK(parse_extension_point_v0(buffer))
  ------------------
  |  |   15|  2.21k|    {                           \
  |  |   16|  2.21k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 11, False: 2.20k]
  |  |  ------------------
  |  |   17|  2.21k|    }
  ------------------
  914|  2.20k|    return true;
  915|  2.21k|}
parser.c:parse_invoke_contract_args:
  962|  44.5k|static bool parse_invoke_contract_args(buffer_t *buffer, invoke_contract_args_t *args) {
  963|       |    // contractAddress
  964|  44.5k|    PARSER_CHECK(parse_sc_address(buffer, &args->address))
  ------------------
  |  |   15|  44.5k|    {                           \
  |  |   16|  44.5k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.35k, False: 43.2k]
  |  |  ------------------
  |  |   17|  44.5k|    }
  ------------------
  965|       |    // functionName
  966|  43.2k|    PARSER_CHECK(parse_binary_string_ptr(buffer,
  ------------------
  |  |   15|  43.2k|    {                           \
  |  |   16|  43.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.50k, False: 41.7k]
  |  |  ------------------
  |  |   17|  43.2k|    }
  ------------------
  967|  43.2k|                                         &args->function.name,
  968|  43.2k|                                         &args->function.name_size,
  969|  43.2k|                                         SCV_SYMBOL_MAX_SIZE))
  970|       |
  971|       |    // args
  972|  41.7k|    uint32_t args_len;
  973|  41.7k|    PARSER_CHECK(parse_uint32(buffer, &args_len))
  ------------------
  |  |   15|  41.7k|    {                           \
  |  |   16|  41.7k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 35, False: 41.6k]
  |  |  ------------------
  |  |   17|  41.7k|    }
  ------------------
  974|       |
  975|  41.6k|    args->parameters_length = args_len;
  976|  41.6k|    args->parameters_position = buffer->offset;
  977|       |
  978|  41.6k|    if (args_len > HOST_FUNCTION_ARGS_MAX_LENGTH) {
  ------------------
  |  |   36|  41.6k|#define HOST_FUNCTION_ARGS_MAX_LENGTH 10
  ------------------
  |  Branch (978:9): [True: 568, False: 41.1k]
  ------------------
  979|       |        // We dont support more than 10 arguments
  980|    568|        return false;
  981|    568|    }
  982|       |
  983|       |    // PRINTF("function_name.text_size=%d, function_name.text=%s, args->parameters_length=%d\n",
  984|       |    //        args->function.name_size,
  985|       |    //        args->function.name,
  986|       |    //        args->parameters_length);
  987|       |
  988|   115k|    for (uint32_t i = 0; i < args_len; i++) {
  ------------------
  |  Branch (988:26): [True: 75.2k, False: 40.5k]
  ------------------
  989|  75.2k|        PARSER_CHECK(read_scval_advance(buffer))
  ------------------
  |  |   15|  75.2k|    {                           \
  |  |   16|  75.2k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 507, False: 74.7k]
  |  |  ------------------
  |  |   17|  75.2k|    }
  ------------------
  990|  75.2k|    }
  991|  40.5k|    return true;
  992|  41.1k|}
parser.c:read_create_contract_args_advance:
  937|  1.92k|static bool read_create_contract_args_advance(buffer_t *buffer) {
  938|       |    // contract_id_preimage
  939|  1.92k|    uint32_t type;
  940|  1.92k|    PARSER_CHECK(parse_uint32(buffer, &type))
  ------------------
  |  |   15|  1.92k|    {                           \
  |  |   16|  1.92k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 14, False: 1.91k]
  |  |  ------------------
  |  |   17|  1.92k|    }
  ------------------
  941|  1.91k|    switch (type) {
  942|  1.51k|        case CONTRACT_ID_PREIMAGE_FROM_ADDRESS: {
  ------------------
  |  |  489|  1.51k|#define CONTRACT_ID_PREIMAGE_FROM_ADDRESS 0
  ------------------
  |  Branch (942:9): [True: 1.51k, False: 396]
  ------------------
  943|  1.51k|            sc_address_t address;
  944|  1.51k|            PARSER_CHECK(parse_sc_address(buffer, &address))
  ------------------
  |  |   15|  1.51k|    {                           \
  |  |   16|  1.51k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 21, False: 1.49k]
  |  |  ------------------
  |  |   17|  1.51k|    }
  ------------------
  945|       |            PARSER_CHECK(buffer_advance(buffer, 32))  // salt
  ------------------
  |  |   15|  1.49k|    {                           \
  |  |   16|  1.49k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 15, False: 1.48k]
  |  |  ------------------
  |  |   17|  1.49k|    }
  ------------------
  946|  1.48k|            break;
  947|  1.49k|        }
  948|  1.48k|        case CONTRACT_ID_PREIMAGE_FROM_ASSET: {
  ------------------
  |  |  490|    364|#define CONTRACT_ID_PREIMAGE_FROM_ASSET   1
  ------------------
  |  Branch (948:9): [True: 364, False: 1.55k]
  ------------------
  949|    364|            asset_t asset;
  950|    364|            PARSER_CHECK(parse_asset(buffer, &asset))
  ------------------
  |  |   15|    364|    {                           \
  |  |   16|    364|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 75, False: 289]
  |  |  ------------------
  |  |   17|    364|    }
  ------------------
  951|    289|            break;
  952|    364|        }
  953|    289|        default:
  ------------------
  |  Branch (953:9): [True: 32, False: 1.88k]
  ------------------
  954|     32|            return false;
  955|  1.91k|    }
  956|       |
  957|       |    // executable
  958|  1.77k|    PARSER_CHECK(read_contract_executable_advance(buffer))
  ------------------
  |  |   15|  1.77k|    {                           \
  |  |   16|  1.77k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 58, False: 1.71k]
  |  |  ------------------
  |  |   17|  1.77k|    }
  ------------------
  959|  1.71k|    return true;
  960|  1.77k|}
parser.c:read_soroban_authorized_invocation_advance:
 1016|  16.3k|                                                       size_t *positions) {
 1017|  16.3k|    if (count != NULL && positions != NULL) {
  ------------------
  |  Branch (1017:9): [True: 15.4k, False: 948]
  |  Branch (1017:26): [True: 15.4k, False: 0]
  ------------------
 1018|  15.4k|        if (*count >= MAX_SUB_INVOCATIONS_SIZE) {
  ------------------
  |  |   44|  15.4k|#define MAX_SUB_INVOCATIONS_SIZE 16
  ------------------
  |  Branch (1018:13): [True: 32, False: 15.3k]
  ------------------
 1019|     32|            return false;
 1020|     32|        }
 1021|  15.3k|        positions[(*count)++] = buffer->offset;
 1022|  15.3k|    }
 1023|       |    // function
 1024|  16.3k|    PARSER_CHECK(read_soroban_authorized_function_advance(buffer))
  ------------------
  |  |   15|  16.3k|    {                           \
  |  |   16|  16.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 1.01k, False: 15.3k]
  |  |  ------------------
  |  |   17|  16.3k|    }
  ------------------
 1025|       |
 1026|       |    // subInvocations
 1027|  15.3k|    uint32_t len;
 1028|  15.3k|    PARSER_CHECK(parse_uint32(buffer, &len))
  ------------------
  |  |   15|  15.3k|    {                           \
  |  |   16|  15.3k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 28, False: 15.3k]
  |  |  ------------------
  |  |   17|  15.3k|    }
  ------------------
 1029|  22.4k|    for (uint32_t i = 0; i < len; i++) {
  ------------------
  |  Branch (1029:26): [True: 7.88k, False: 14.5k]
  ------------------
 1030|  7.88k|        PARSER_CHECK(read_soroban_authorized_invocation_advance(buffer, count, positions))
  ------------------
  |  |   15|  7.88k|    {                           \
  |  |   16|  7.88k|        if (!(x)) return false; \
  |  |  ------------------
  |  |  |  Branch (16:13): [True: 749, False: 7.13k]
  |  |  ------------------
  |  |   17|  7.88k|    }
  ------------------
 1031|  7.88k|    }
 1032|  14.5k|    return true;
 1033|  15.3k|}

crc16:
   15|  47.4k|uint16_t crc16(const uint8_t *input_str, uint32_t num_bytes) {
   16|  47.4k|    uint16_t crc = 0;
   17|  1.62M|    while (num_bytes-- > 0) {
  ------------------
  |  Branch (17:12): [True: 1.57M, False: 47.4k]
  ------------------
   18|  1.57M|        crc = crc ^ (uint32_t) *input_str++ << 8;
   19|  1.57M|        int i = 8;
   20|  12.6M|        do {
   21|  12.6M|            if (crc & 0x8000)
  ------------------
  |  Branch (21:17): [True: 6.17M, False: 6.42M]
  ------------------
   22|  6.17M|                crc = crc << 1 ^ 0x1021;
   23|  6.42M|            else
   24|  6.42M|                crc = crc << 1;
   25|  12.6M|        } while (--i);
  ------------------
  |  Branch (25:18): [True: 11.0M, False: 1.57M]
  ------------------
   26|  1.57M|    }
   27|  47.4k|    return crc;
   28|  47.4k|}
encode_key:
   30|  46.9k|bool encode_key(const uint8_t *in, uint8_t version_byte, char *out, uint8_t out_len) {
   31|  46.9k|    if (in == NULL || out_len < 56 + 1) {
  ------------------
  |  Branch (31:9): [True: 0, False: 46.9k]
  |  Branch (31:23): [True: 0, False: 46.9k]
  ------------------
   32|      0|        return false;
   33|      0|    }
   34|  46.9k|    uint8_t buffer[35] = {0};
   35|  46.9k|    buffer[0] = version_byte;
   36|  1.54M|    for (uint8_t i = 0; i < 32; i++) {
  ------------------
  |  Branch (36:25): [True: 1.50M, False: 46.9k]
  ------------------
   37|  1.50M|        buffer[i + 1] = in[i];
   38|  1.50M|    }
   39|  46.9k|    uint16_t crc = crc16(buffer, 33);  // checksum
   40|  46.9k|    buffer[33] = crc;
   41|  46.9k|    buffer[34] = crc >> 8;
   42|  46.9k|    if (base32_encode(buffer, 35, (uint8_t *) out, 56) == -1) {
  ------------------
  |  Branch (42:9): [True: 0, False: 46.9k]
  ------------------
   43|      0|        return false;
   44|      0|    }
   45|  46.9k|    out[56] = '\0';
   46|  46.9k|    return true;
   47|  46.9k|}
encode_ed25519_public_key:
   51|  43.6k|                               size_t out_len) {
   52|  43.6k|    return encode_key(raw_public_key, VERSION_BYTE_ED25519_PUBLIC_KEY, out, out_len);
  ------------------
  |  |   25|  43.6k|#define VERSION_BYTE_ED25519_PUBLIC_KEY     6 << 3
  ------------------
   53|  43.6k|}
encode_hash_x_key:
   57|     91|                       size_t out_len) {
   58|     91|    return encode_key(raw_hash_x, VERSION_BYTE_HASH_X, out, out_len);
  ------------------
  |  |   28|     91|#define VERSION_BYTE_HASH_X                 23 << 3
  ------------------
   59|     91|}
encode_pre_auth_x_key:
   63|    195|                           size_t out_len) {
   64|    195|    return encode_key(raw_pre_auth_tx, VERSION_BYTE_PRE_AUTH_TX_KEY, out, out_len);
  ------------------
  |  |   27|    195|#define VERSION_BYTE_PRE_AUTH_TX_KEY        19 << 3
  ------------------
   65|    195|}
encode_contract:
   69|  2.99k|                     size_t out_len) {
   70|  2.99k|    return encode_key(raw_contract, VERSION_BYTE_CONTRACT, out, out_len);
  ------------------
  |  |   31|  2.99k|#define VERSION_BYTE_CONTRACT               2 << 3
  ------------------
   71|  2.99k|}
encode_ed25519_signed_payload:
   75|    163|                                   size_t out_len) {
   76|    163|    if (out_len < ED25519_SIGNED_PAYLOAD_MAX_LENGTH) {  // (103 * 8 + 4) / 5
  ------------------
  |  |   12|    163|#define ED25519_SIGNED_PAYLOAD_MAX_LENGTH 166  // include the null terminator
  ------------------
  |  Branch (76:9): [True: 0, False: 163]
  ------------------
   77|      0|        return false;
   78|      0|    }
   79|    163|    if (signed_payload->payload_len > 64 || signed_payload->payload_len <= 0) {
  ------------------
  |  Branch (79:9): [True: 0, False: 163]
  |  Branch (79:45): [True: 0, False: 163]
  ------------------
   80|      0|        return false;
   81|      0|    }
   82|    163|    uint8_t data_len = RAW_ED25519_PUBLIC_KEY_SIZE + 4 + signed_payload->payload_len +
  ------------------
  |  |   18|    163|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
   83|    163|                       ((4 - signed_payload->payload_len % 4) % 4);
   84|    163|    uint8_t buffer[1 + 32 + 4 + 64 + 2] = {0};
   85|    163|    buffer[0] = VERSION_BYTE_ED25519_SIGNED_PAYLOAD;
  ------------------
  |  |   30|    163|#define VERSION_BYTE_ED25519_SIGNED_PAYLOAD 15 << 3
  ------------------
   86|  5.37k|    for (uint8_t i = 0; i < 32; i++) {
  ------------------
  |  Branch (86:25): [True: 5.21k, False: 163]
  ------------------
   87|  5.21k|        buffer[i + 1] = signed_payload->ed25519[i];
   88|  5.21k|    }
   89|    163|    buffer[36] = signed_payload->payload_len;
   90|  4.68k|    for (uint32_t i = 0; i < signed_payload->payload_len; i++) {
  ------------------
  |  Branch (90:26): [True: 4.52k, False: 163]
  ------------------
   91|  4.52k|        buffer[i + 37] = signed_payload->payload[i];
   92|  4.52k|    }
   93|    163|    uint16_t crc = crc16(buffer, data_len + 1);  // checksum
   94|    163|    buffer[1 + data_len] = crc;
   95|    163|    buffer[1 + data_len + 1] = crc >> 8;
   96|    163|    int ret = base32_encode(buffer, data_len + 3, (uint8_t *) out, out_len);
   97|    163|    if (ret == -1) {
  ------------------
  |  Branch (97:9): [True: 0, False: 163]
  ------------------
   98|      0|        return false;
   99|      0|    }
  100|    163|    out[ret] = '\0';
  101|    163|    return true;
  102|    163|}
encode_muxed_account:
  104|  7.63k|bool encode_muxed_account(const muxed_account_t *raw_muxed_account, char *out, size_t out_len) {
  105|  7.63k|    if (raw_muxed_account == NULL) {
  ------------------
  |  Branch (105:9): [True: 0, False: 7.63k]
  ------------------
  106|      0|        return false;
  107|      0|    }
  108|  7.63k|    if (raw_muxed_account->type == KEY_TYPE_ED25519) {
  ------------------
  |  Branch (108:9): [True: 7.25k, False: 381]
  ------------------
  109|  7.25k|        return encode_ed25519_public_key(raw_muxed_account->ed25519, out, out_len);
  110|  7.25k|    } else {
  111|    381|        if (out_len < ENCODED_MUXED_ACCOUNT_KEY_LENGTH) {
  ------------------
  |  |   16|    381|#define ENCODED_MUXED_ACCOUNT_KEY_LENGTH   70
  ------------------
  |  Branch (111:13): [True: 0, False: 381]
  ------------------
  112|      0|            return false;
  113|      0|        }
  114|    381|        uint8_t buffer[MUXED_ACCOUNT_MED_25519_SIZE] = {0};
  115|    381|        buffer[0] = VERSION_BYTE_MUXED_ACCOUNT;
  ------------------
  |  |   29|    381|#define VERSION_BYTE_MUXED_ACCOUNT          12 << 3
  ------------------
  116|    381|        memcpy(buffer + 1, raw_muxed_account->med25519.ed25519, RAW_ED25519_PUBLIC_KEY_SIZE);
  ------------------
  |  |   18|    381|#define RAW_ED25519_PUBLIC_KEY_SIZE  32
  ------------------
  117|  3.42k|        for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (117:25): [True: 3.04k, False: 381]
  ------------------
  118|  3.04k|            buffer[33 + i] = raw_muxed_account->med25519.id >> 8 * (7 - i);
  119|  3.04k|        }
  120|    381|        uint16_t crc = crc16(buffer, MUXED_ACCOUNT_MED_25519_SIZE - 2);  // checksum
  ------------------
  |  |   10|    381|#define MUXED_ACCOUNT_MED_25519_SIZE      43
  ------------------
  121|    381|        buffer[41] = crc;
  122|    381|        buffer[42] = crc >> 8;
  123|    381|        if (base32_encode(buffer,
  ------------------
  |  Branch (123:13): [True: 0, False: 381]
  ------------------
  124|    381|                          MUXED_ACCOUNT_MED_25519_SIZE,
  ------------------
  |  |   10|    381|#define MUXED_ACCOUNT_MED_25519_SIZE      43
  ------------------
  125|    381|                          (uint8_t *) out,
  126|    381|                          ENCODED_MUXED_ACCOUNT_KEY_LENGTH) == -1) {
  ------------------
  |  |   16|    381|#define ENCODED_MUXED_ACCOUNT_KEY_LENGTH   70
  ------------------
  127|      0|            return false;
  128|      0|        }
  129|    381|        out[69] = '\0';
  130|    381|        return true;
  131|    381|    }
  132|  7.63k|}
print_binary:
  162|  1.03k|                  uint8_t num_chars_r) {
  163|  1.03k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (163:9): [True: 166, False: 864]
  ------------------
  164|    166|        char buffer[BINARY_MAX_SIZE * 2 + 1];
  165|    166|        if (!format_hex(in, in_len, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (165:13): [True: 0, False: 166]
  ------------------
  166|      0|            return false;
  167|      0|        }
  168|    166|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  169|    166|    }
  170|    864|    return format_hex(in, in_len, out, out_len);
  171|  1.03k|}
print_account_id:
  177|  36.3k|                      uint8_t num_chars_r) {
  178|  36.3k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (178:9): [True: 836, False: 35.5k]
  ------------------
  179|    836|        char buffer[ENCODED_ED25519_PUBLIC_KEY_LENGTH];
  180|    836|        if (!encode_ed25519_public_key(account_id, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (180:13): [True: 0, False: 836]
  ------------------
  181|      0|            return false;
  182|      0|        }
  183|    836|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  184|    836|    }
  185|  35.5k|    return encode_ed25519_public_key(account_id, out, out_len);
  186|  36.3k|}
print_contract_id:
  192|  2.99k|                       uint8_t num_chars_r) {
  193|  2.99k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (193:9): [True: 0, False: 2.99k]
  ------------------
  194|      0|        char buffer[ENCODED_CONTRACT_KEY_LENGTH];
  195|      0|        if (!encode_contract(contract_id, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (195:13): [True: 0, False: 0]
  ------------------
  196|      0|            return false;
  197|      0|        }
  198|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  199|      0|    }
  200|  2.99k|    return encode_contract(contract_id, out, out_len);
  201|  2.99k|}
print_hash_x_key:
  207|     91|                      uint8_t num_chars_r) {
  208|     91|    if (num_chars_l > 0) {
  ------------------
  |  Branch (208:9): [True: 0, False: 91]
  ------------------
  209|      0|        char buffer[ENCODED_HASH_X_KEY_LENGTH];
  210|      0|        if (!encode_hash_x_key(raw_hash_x, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|            return false;
  212|      0|        }
  213|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  214|      0|    }
  215|     91|    return encode_hash_x_key(raw_hash_x, out, out_len);
  216|     91|}
print_pre_auth_x_key:
  222|    195|                          uint8_t num_chars_r) {
  223|    195|    if (num_chars_l > 0) {
  ------------------
  |  Branch (223:9): [True: 0, False: 195]
  ------------------
  224|      0|        char buffer[ENCODED_PRE_AUTH_TX_KEY_LENGTH];
  225|      0|        if (!encode_pre_auth_x_key(raw_pre_auth_tx, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (225:13): [True: 0, False: 0]
  ------------------
  226|      0|            return false;
  227|      0|        }
  228|      0|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  229|      0|    }
  230|    195|    return encode_pre_auth_x_key(raw_pre_auth_tx, out, out_len);
  231|    195|}
print_ed25519_signed_payload:
  237|    163|                                  uint8_t num_chars_r) {
  238|    163|    char tmp[ED25519_SIGNED_PAYLOAD_MAX_LENGTH];
  239|    163|    if (!encode_ed25519_signed_payload(signed_payload, tmp, sizeof(tmp))) {
  ------------------
  |  Branch (239:9): [True: 0, False: 163]
  ------------------
  240|      0|        return false;
  241|    163|    };
  242|       |
  243|    163|    if (num_chars_l > 0) {
  ------------------
  |  Branch (243:9): [True: 163, False: 0]
  ------------------
  244|    163|        if (out_len < num_chars_l + num_chars_r + 2 + 1) {
  ------------------
  |  Branch (244:13): [True: 0, False: 163]
  ------------------
  245|      0|            return false;
  246|      0|        }
  247|    163|        return print_summary(tmp, out, out_len, num_chars_l, num_chars_r);
  248|    163|    } else {
  249|      0|        if (strlcpy(out, tmp, out_len) >= out_len) {
  ------------------
  |  Branch (249:13): [True: 0, False: 0]
  ------------------
  250|      0|            return false;
  251|      0|        }
  252|      0|    }
  253|      0|    return true;
  254|    163|}
print_sc_address:
  260|  13.4k|                      uint8_t num_chars_r) {
  261|  13.4k|    if (sc_address->type == SC_ADDRESS_TYPE_ACCOUNT) {
  ------------------
  |  Branch (261:9): [True: 10.4k, False: 2.99k]
  ------------------
  262|  10.4k|        return print_account_id(sc_address->address, out, out_len, num_chars_l, num_chars_r);
  263|  10.4k|    } else {
  264|  2.99k|        return print_contract_id(sc_address->address, out, out_len, num_chars_l, num_chars_r);
  265|  2.99k|    }
  266|      0|    return true;
  267|  13.4k|}
print_muxed_account:
  273|  7.63k|                         uint8_t num_chars_r) {
  274|  7.63k|    if (num_chars_l > 0) {
  ------------------
  |  Branch (274:9): [True: 891, False: 6.74k]
  ------------------
  275|    891|        char buffer[ENCODED_MUXED_ACCOUNT_KEY_LENGTH];
  276|    891|        if (!encode_muxed_account(muxed_account, buffer, sizeof(buffer))) {
  ------------------
  |  Branch (276:13): [True: 0, False: 891]
  ------------------
  277|      0|            return false;
  278|      0|        }
  279|    891|        return print_summary(buffer, out, out_len, num_chars_l, num_chars_r);
  280|    891|    }
  281|  6.74k|    return encode_muxed_account(muxed_account, out, out_len);
  282|  7.63k|}
print_claimable_balance_id:
  288|    430|                                uint8_t num_chars_r) {
  289|    430|    if (out_len < (4 + CLAIMABLE_BALANCE_ID_SIZE) * 2 + 1) {
  ------------------
  |  |   48|    430|#define CLAIMABLE_BALANCE_ID_SIZE 32
  ------------------
  |  Branch (289:9): [True: 0, False: 430]
  ------------------
  290|      0|        return false;
  291|      0|    }
  292|    430|    uint8_t data[(4 + CLAIMABLE_BALANCE_ID_SIZE)];
  293|  2.15k|    for (uint8_t i = 0; i < 4; i++) {
  ------------------
  |  Branch (293:25): [True: 1.72k, False: 430]
  ------------------
  294|  1.72k|        data[i] = claimable_balance_id_t->type >> (8 * (3 - i));
  295|  1.72k|    }
  296|    430|    memcpy(data + 4, claimable_balance_id_t->v0, CLAIMABLE_BALANCE_ID_SIZE);
  ------------------
  |  |   48|    430|#define CLAIMABLE_BALANCE_ID_SIZE 32
  ------------------
  297|    430|    return print_binary(data, sizeof(data), out, out_len, num_chars_l, num_chars_r);
  298|    430|}
print_uint64_num:
  300|   145k|bool print_uint64_num(uint64_t num, char *out, size_t out_len) {
  301|   145k|    uint8_t data[8] = {0};
  302|  1.31M|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (302:21): [True: 1.16M, False: 145k]
  ------------------
  303|  1.16M|        data[i] = num >> (8 * (7 - i));
  304|  1.16M|    }
  305|   145k|    return print_uint64(data, 0, out, out_len, false);
  306|   145k|}
print_int64_num:
  308|    215|bool print_int64_num(int64_t num, char *out, size_t out_len) {
  309|    215|    uint8_t data[8] = {0};
  310|  1.93k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (310:21): [True: 1.72k, False: 215]
  ------------------
  311|  1.72k|        data[i] = num >> (8 * (7 - i));
  312|  1.72k|    }
  313|    215|    return print_int64(data, 0, out, out_len, false);
  314|    215|}
print_time:
  316|  1.58k|bool print_time(uint64_t seconds, char *out, size_t out_len) {
  317|  1.58k|    if (seconds > 253402300799) {
  ------------------
  |  Branch (317:9): [True: 1.07k, False: 505]
  ------------------
  318|       |        // valid range 1970-01-01 00:00:00 - 9999-12-31 23:59:59
  319|  1.07k|        return false;
  320|  1.07k|    }
  321|    505|    char time_str[20] = {0};  // 1970-01-01 00:00:00
  322|       |
  323|    505|    if (out_len < sizeof(time_str)) {
  ------------------
  |  Branch (323:9): [True: 0, False: 505]
  ------------------
  324|      0|        return false;
  325|      0|    }
  326|    505|    struct tm tm;
  327|    505|    if (!gmtime_r((time_t *) &seconds, &tm)) {
  ------------------
  |  Branch (327:9): [True: 0, False: 505]
  ------------------
  328|      0|        return false;
  329|    505|    };
  330|       |
  331|    505|    if (snprintf(time_str,
  ------------------
  |  Branch (331:9): [True: 0, False: 505]
  ------------------
  332|    505|                 sizeof(time_str),
  333|    505|                 "%04d-%02d-%02d %02d:%02d:%02d",
  334|    505|                 tm.tm_year + 1900,
  335|    505|                 tm.tm_mon + 1,
  336|    505|                 tm.tm_mday,
  337|    505|                 tm.tm_hour,
  338|    505|                 tm.tm_min,
  339|    505|                 tm.tm_sec) < 0) {
  340|      0|        return false;
  341|    505|    };
  342|    505|    if (strlcpy(out, time_str, out_len) >= out_len) {
  ------------------
  |  Branch (342:9): [True: 0, False: 505]
  ------------------
  343|      0|        return false;
  344|      0|    }
  345|    505|    return true;
  346|    505|}
print_asset_name:
  348|  32.5k|bool print_asset_name(const asset_t *asset, uint8_t network_id, char *out, size_t out_len) {
  349|  32.5k|    switch (asset->type) {
  350|  31.7k|        case ASSET_TYPE_NATIVE:
  ------------------
  |  Branch (350:9): [True: 31.7k, False: 846]
  ------------------
  351|  31.7k|            if (network_id == NETWORK_TYPE_UNKNOWN) {
  ------------------
  |  |   59|  31.7k|#define NETWORK_TYPE_UNKNOWN 2
  ------------------
  |  Branch (351:17): [True: 30.1k, False: 1.51k]
  ------------------
  352|  30.1k|                if (strlcpy(out, "native", out_len) >= out_len) {
  ------------------
  |  Branch (352:21): [True: 0, False: 30.1k]
  ------------------
  353|      0|                    return false;
  354|      0|                }
  355|  30.1k|            } else {
  356|  1.51k|                if (strlcpy(out, "XLM", out_len) >= out_len) {
  ------------------
  |  Branch (356:21): [True: 0, False: 1.51k]
  ------------------
  357|      0|                    return false;
  358|      0|                }
  359|  1.51k|            }
  360|  31.7k|            return true;
  361|    549|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (361:9): [True: 549, False: 32.0k]
  ------------------
  362|  1.70k|            for (int i = 0; i < 4; i++) {
  ------------------
  |  Branch (362:29): [True: 1.46k, False: 244]
  ------------------
  363|  1.46k|                out[i] = asset->alpha_num4.asset_code[i];
  364|  1.46k|                if (out[i] == 0) {
  ------------------
  |  Branch (364:21): [True: 305, False: 1.15k]
  ------------------
  365|    305|                    break;
  366|    305|                }
  367|  1.46k|            }
  368|    549|            out[4] = 0;
  369|    549|            return true;
  370|    297|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (370:9): [True: 297, False: 32.2k]
  ------------------
  371|    917|            for (int i = 0; i < 12; i++) {
  ------------------
  |  Branch (371:29): [True: 910, False: 7]
  ------------------
  372|    910|                out[i] = asset->alpha_num12.asset_code[i];
  373|    910|                if (out[i] == 0) {
  ------------------
  |  Branch (373:21): [True: 290, False: 620]
  ------------------
  374|    290|                    break;
  375|    290|                }
  376|    910|            }
  377|    297|            out[12] = 0;
  378|    297|            return true;
  379|      0|        default:
  ------------------
  |  Branch (379:9): [True: 0, False: 32.5k]
  ------------------
  380|      0|            return false;
  381|  32.5k|    }
  382|  32.5k|}
print_asset:
  384|  31.4k|bool print_asset(const asset_t *asset, uint8_t network_id, char *out, size_t out_len) {
  385|  31.4k|    char asset_code[12 + 1];
  386|  31.4k|    char asset_issuer[3 + 2 + 4 + 1];
  387|  31.4k|    print_asset_name(asset, network_id, asset_code, sizeof(asset_code));
  388|       |
  389|  31.4k|    switch (asset->type) {
  390|    539|        case ASSET_TYPE_CREDIT_ALPHANUM4:
  ------------------
  |  Branch (390:9): [True: 539, False: 30.8k]
  ------------------
  391|    539|            print_account_id(asset->alpha_num4.issuer, asset_issuer, sizeof(asset_issuer), 3, 4);
  392|    539|            break;
  393|    297|        case ASSET_TYPE_CREDIT_ALPHANUM12:
  ------------------
  |  Branch (393:9): [True: 297, False: 31.1k]
  ------------------
  394|    297|            print_account_id(asset->alpha_num12.issuer, asset_issuer, sizeof(asset_issuer), 3, 4);
  395|    297|            break;
  396|  30.5k|        default:
  ------------------
  |  Branch (396:9): [True: 30.5k, False: 836]
  ------------------
  397|  30.5k|            break;
  398|  31.4k|    }
  399|  31.4k|    if (strlcpy(out, asset_code, out_len) >= out_len) {
  ------------------
  |  Branch (399:9): [True: 0, False: 31.4k]
  ------------------
  400|      0|        return false;
  401|      0|    }
  402|  31.4k|    if (asset->type != ASSET_TYPE_NATIVE) {
  ------------------
  |  Branch (402:9): [True: 836, False: 30.5k]
  ------------------
  403|    836|        if (strlcat(out, "@", out_len) >= out_len) {
  ------------------
  |  Branch (403:13): [True: 0, False: 836]
  ------------------
  404|      0|            return false;
  405|      0|        }
  406|    836|        if (strlcat(out, asset_issuer, out_len) >= out_len) {
  ------------------
  |  Branch (406:13): [True: 0, False: 836]
  ------------------
  407|      0|            return false;
  408|      0|        }
  409|    836|    }
  410|  31.4k|    return true;
  411|  31.4k|}
print_flag:
  413|  1.86k|bool print_flag(const char *flag, char *out, size_t out_len) {
  414|  1.86k|    if (out[0]) {
  ------------------
  |  Branch (414:9): [True: 930, False: 937]
  ------------------
  415|    930|        if (strlcat(out, ", ", out_len) >= out_len) {
  ------------------
  |  Branch (415:13): [True: 0, False: 930]
  ------------------
  416|      0|            return false;
  417|      0|        }
  418|    930|    }
  419|  1.86k|    if (strlcat(out, flag, out_len) >= out_len) {
  ------------------
  |  Branch (419:9): [True: 0, False: 1.86k]
  ------------------
  420|      0|        return false;
  421|      0|    }
  422|  1.86k|    return true;
  423|  1.86k|}
print_account_flags:
  425|    316|bool print_account_flags(uint32_t flags, char *out, size_t out_len) {
  426|    316|    explicit_bzero(out, out_len);
  427|    316|    if (flags & 0x01u) {
  ------------------
  |  Branch (427:9): [True: 110, False: 206]
  ------------------
  428|    110|        if (!print_flag("AUTH_REQUIRED", out, out_len)) {
  ------------------
  |  Branch (428:13): [True: 0, False: 110]
  ------------------
  429|      0|            return false;
  430|      0|        }
  431|    110|    }
  432|    316|    if (flags & 0x02u) {
  ------------------
  |  Branch (432:9): [True: 63, False: 253]
  ------------------
  433|     63|        if (!print_flag("AUTH_REVOCABLE", out, out_len)) {
  ------------------
  |  Branch (433:13): [True: 0, False: 63]
  ------------------
  434|      0|            return false;
  435|      0|        }
  436|     63|    }
  437|    316|    if (flags & 0x04u) {
  ------------------
  |  Branch (437:9): [True: 59, False: 257]
  ------------------
  438|     59|        if (!print_flag("AUTH_IMMUTABLE", out, out_len)) {
  ------------------
  |  Branch (438:13): [True: 0, False: 59]
  ------------------
  439|      0|            return false;
  440|      0|        }
  441|     59|    }
  442|    316|    if (flags & 0x08u) {
  ------------------
  |  Branch (442:9): [True: 84, False: 232]
  ------------------
  443|     84|        if (!print_flag("AUTH_CLAWBACK_ENABLED", out, out_len)) {
  ------------------
  |  Branch (443:13): [True: 0, False: 84]
  ------------------
  444|      0|            return false;
  445|      0|        }
  446|     84|    }
  447|    316|    return true;
  448|    316|}
print_trust_line_flags:
  450|  1.41k|bool print_trust_line_flags(uint32_t flags, char *out, size_t out_len) {
  451|  1.41k|    explicit_bzero(out, out_len);
  452|  1.41k|    if (flags & AUTHORIZED_FLAG) {
  ------------------
  |  Branch (452:9): [True: 620, False: 796]
  ------------------
  453|    620|        if (!print_flag("AUTHORIZED", out, out_len)) {
  ------------------
  |  Branch (453:13): [True: 0, False: 620]
  ------------------
  454|      0|            return false;
  455|      0|        }
  456|    620|    }
  457|  1.41k|    if (flags & AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG) {
  ------------------
  |  Branch (457:9): [True: 542, False: 874]
  ------------------
  458|    542|        if (!print_flag("AUTHORIZED_TO_MAINTAIN_LIABILITIES", out, out_len)) {
  ------------------
  |  Branch (458:13): [True: 0, False: 542]
  ------------------
  459|      0|            return false;
  460|      0|        }
  461|    542|    }
  462|  1.41k|    if (flags & TRUSTLINE_CLAWBACK_ENABLED_FLAG) {
  ------------------
  |  Branch (462:9): [True: 389, False: 1.02k]
  ------------------
  463|    389|        if (!print_flag("TRUSTLINE_CLAWBACK_ENABLED", out, out_len)) {
  ------------------
  |  Branch (463:13): [True: 0, False: 389]
  ------------------
  464|      0|            return false;
  465|      0|        }
  466|    389|    }
  467|  1.41k|    return true;
  468|  1.41k|}
print_allow_trust_flags:
  470|     95|bool print_allow_trust_flags(uint32_t flag, char *out, size_t out_len) {
  471|     95|    explicit_bzero(out, out_len);
  472|     95|    if (flag & AUTHORIZED_FLAG) {
  ------------------
  |  Branch (472:9): [True: 5, False: 90]
  ------------------
  473|      5|        if (strlcpy(out, "AUTHORIZED", out_len) >= out_len) {
  ------------------
  |  Branch (473:13): [True: 0, False: 5]
  ------------------
  474|      0|            return false;
  475|      0|        }
  476|     90|    } else if (flag & AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG) {
  ------------------
  |  Branch (476:16): [True: 25, False: 65]
  ------------------
  477|     25|        if (strlcpy(out, "AUTHORIZED_TO_MAINTAIN_LIABILITIES", out_len) >= out_len) {
  ------------------
  |  Branch (477:13): [True: 0, False: 25]
  ------------------
  478|      0|            return false;
  479|      0|        }
  480|     65|    } else {
  481|     65|        if (strlcpy(out, "UNAUTHORIZED", out_len) >= out_len) {
  ------------------
  |  Branch (481:13): [True: 0, False: 65]
  ------------------
  482|      0|            return false;
  483|      0|        }
  484|     65|    }
  485|     95|    return true;
  486|     95|}
print_amount:
  492|  30.5k|                  size_t out_len) {
  493|  30.5k|    uint8_t data[8] = {0};
  494|   274k|    for (int i = 0; i < 8; i++) {
  ------------------
  |  Branch (494:21): [True: 244k, False: 30.5k]
  ------------------
  495|   244k|        data[i] = amount >> (8 * (7 - i));
  496|   244k|    }
  497|       |
  498|  30.5k|    if (!print_uint64(data, 7, out, out_len, true)) {
  ------------------
  |  Branch (498:9): [True: 0, False: 30.5k]
  ------------------
  499|      0|        return false;
  500|      0|    }
  501|       |
  502|  30.5k|    if (asset) {
  ------------------
  |  Branch (502:9): [True: 28.7k, False: 1.75k]
  ------------------
  503|  28.7k|        if (strlcat(out, " ", out_len) >= out_len) {
  ------------------
  |  Branch (503:13): [True: 0, False: 28.7k]
  ------------------
  504|      0|            return false;
  505|      0|        }
  506|  28.7k|        size_t length = strlen(out);
  507|  28.7k|        if (!print_asset(asset, network_id, out + length, out_len - length)) {
  ------------------
  |  Branch (507:13): [True: 0, False: 28.7k]
  ------------------
  508|      0|            return false;
  509|  28.7k|        };
  510|  28.7k|    }
  511|  30.5k|    return true;
  512|  30.5k|}
is_printable_binary:
  514|    617|bool is_printable_binary(const uint8_t *str, size_t str_len) {
  515|  4.26k|    for (size_t i = 0; i < str_len; i++) {
  ------------------
  |  Branch (515:24): [True: 3.96k, False: 293]
  ------------------
  516|  3.96k|        if (str[i] > 0x7e || str[i] < 0x20) {
  ------------------
  |  Branch (516:13): [True: 137, False: 3.83k]
  |  Branch (516:30): [True: 187, False: 3.64k]
  ------------------
  517|    324|            return false;
  518|    324|        }
  519|  3.96k|    }
  520|    293|    return true;
  521|    617|}
add_decimal_point:
  661|   181k|bool add_decimal_point(char *out, size_t out_len, uint8_t decimals) {
  662|   181k|    if (out == NULL || out_len == 0) {
  ------------------
  |  Branch (662:9): [True: 0, False: 181k]
  |  Branch (662:24): [True: 0, False: 181k]
  ------------------
  663|      0|        return false;
  664|      0|    }
  665|   181k|    if (decimals == 0) {
  ------------------
  |  Branch (665:9): [True: 150k, False: 30.5k]
  ------------------
  666|   150k|        return true;
  667|   150k|    }
  668|       |
  669|  30.5k|    bool is_negative = out[0] == '-';
  670|  30.5k|    char *start = is_negative ? out + 1 : out;
  ------------------
  |  Branch (670:19): [True: 11, False: 30.5k]
  ------------------
  671|       |
  672|  30.5k|    size_t len = strlen(start);
  673|  30.5k|    if (len == 0) {
  ------------------
  |  Branch (673:9): [True: 0, False: 30.5k]
  ------------------
  674|      0|        return true;
  675|      0|    }
  676|       |
  677|  30.5k|    if (is_negative) {
  ------------------
  |  Branch (677:9): [True: 11, False: 30.5k]
  ------------------
  678|     11|        if (decimals >= out_len - 2) {
  ------------------
  |  Branch (678:13): [True: 0, False: 11]
  ------------------
  679|       |            // Not enough space to add decimal point and leading zero.
  680|      0|            return false;
  681|      0|        }
  682|  30.5k|    } else {
  683|  30.5k|        if (decimals >= out_len - 1) {
  ------------------
  |  Branch (683:13): [True: 0, False: 30.5k]
  ------------------
  684|       |            // Not enough space to add decimal point.
  685|      0|            return false;
  686|      0|        }
  687|  30.5k|    }
  688|       |
  689|  30.5k|    if (len <= decimals) {
  ------------------
  |  Branch (689:9): [True: 23.2k, False: 7.29k]
  ------------------
  690|       |        // Shift the number to the right and add leading zeros
  691|  23.2k|        memmove(start + decimals - len + 2, start, len + 1);
  692|  23.2k|        start[0] = '0';
  693|  23.2k|        start[1] = '.';
  694|  23.2k|        memset(start + 2, '0', decimals - len);
  695|  23.2k|    } else {
  696|       |        // Insert the decimal point at the appropriate position
  697|  7.29k|        memmove(start + len - decimals + 1, start + len - decimals, decimals + 1);
  698|  7.29k|        start[len - decimals] = '.';
  699|  7.29k|    }
  700|       |
  701|       |    // Remove trailing zeros after decimal point
  702|  30.5k|    char *p = start + strlen(start) - 1;
  703|   144k|    while (p > start && *p == '0') {
  ------------------
  |  Branch (703:12): [True: 144k, False: 0]
  |  Branch (703:25): [True: 113k, False: 30.5k]
  ------------------
  704|   113k|        *p-- = '\0';
  705|   113k|    }
  706|       |
  707|       |    // Remove decimal point if it's the last character
  708|  30.5k|    if (p > start && *p == '.') {
  ------------------
  |  Branch (708:9): [True: 30.5k, False: 0]
  |  Branch (708:22): [True: 15.7k, False: 14.7k]
  ------------------
  709|  15.7k|        *p = '\0';
  710|  15.7k|    }
  711|       |
  712|       |    // Add the negative sign back if necessary
  713|  30.5k|    if (is_negative && out[0] != '-') {
  ------------------
  |  Branch (713:9): [True: 11, False: 30.5k]
  |  Branch (713:24): [True: 0, False: 11]
  ------------------
  714|      0|        memmove(out + 1, out, strlen(out) + 1);
  715|      0|        out[0] = '-';
  716|      0|    }
  717|       |
  718|  30.5k|    return true;
  719|  30.5k|}
add_separator_to_number:
  721|  35.4k|bool add_separator_to_number(char *out, size_t out_len) {
  722|  35.4k|    if (out == NULL || out_len == 0) {
  ------------------
  |  Branch (722:9): [True: 0, False: 35.4k]
  |  Branch (722:24): [True: 0, False: 35.4k]
  ------------------
  723|      0|        return false;
  724|      0|    }
  725|       |
  726|  35.4k|    size_t length = strlen(out);
  727|  35.4k|    uint8_t negative = (out[0] == '-') ? 1 : 0;  // Check if the number is negative
  ------------------
  |  Branch (727:24): [True: 486, False: 34.9k]
  ------------------
  728|       |
  729|       |    // Find the position of the decimal point
  730|  35.4k|    char *decimal_point = strchr(out, '.');
  731|  35.4k|    size_t decimal_index = decimal_point ? decimal_point - out : length;
  ------------------
  |  Branch (731:28): [True: 14.7k, False: 20.7k]
  ------------------
  732|       |
  733|       |    // Calculate the new length of the string with the commas
  734|  35.4k|    size_t new_length = 0;
  735|  35.4k|    if (negative) {
  ------------------
  |  Branch (735:9): [True: 486, False: 34.9k]
  ------------------
  736|    486|        if (decimal_index < 2) {
  ------------------
  |  Branch (736:13): [True: 0, False: 486]
  ------------------
  737|       |            // The string is too short to have a negative number
  738|      0|            return false;
  739|      0|        }
  740|    486|        new_length = decimal_index + (decimal_index - 2) / 3;
  741|  34.9k|    } else {
  742|  34.9k|        if (decimal_index < 1) {
  ------------------
  |  Branch (742:13): [True: 0, False: 34.9k]
  ------------------
  743|       |            // The string is too short to have a positive number
  744|      0|            return false;
  745|      0|        }
  746|  34.9k|        new_length = decimal_index + (decimal_index - 1) / 3;
  747|  34.9k|    }
  748|       |
  749|       |    // If the new length is greater than the maximum length, return false
  750|  35.4k|    if (new_length >= out_len || new_length >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  35.4k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (750:9): [True: 0, False: 35.4k]
  |  Branch (750:34): [True: 0, False: 35.4k]
  ------------------
  751|      0|        return false;
  752|      0|    }
  753|       |
  754|  35.4k|    char temp[NUMBER_WITH_COMMAS_MAX_LENGTH];
  755|  35.4k|    if (strlcpy(temp, out, NUMBER_WITH_COMMAS_MAX_LENGTH) >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  35.4k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
                  if (strlcpy(temp, out, NUMBER_WITH_COMMAS_MAX_LENGTH) >= NUMBER_WITH_COMMAS_MAX_LENGTH) {
  ------------------
  |  |   13|  35.4k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (755:9): [True: 0, False: 35.4k]
  ------------------
  756|      0|        return false;
  757|      0|    }
  758|       |
  759|  35.4k|    temp[new_length] = '\0';  // Set the end of the new string
  760|       |
  761|       |    // Start from the end of the string and move the digits to their new positions
  762|   209k|    for (int i = decimal_index - 1, j = new_length - 1; i >= 0; i--, j--) {
  ------------------
  |  Branch (762:57): [True: 173k, False: 35.4k]
  ------------------
  763|   173k|        temp[j] = out[i];
  764|       |
  765|       |        // If the current position is a multiple of 3 and it's not the first digit, add a comma
  766|   173k|        if ((decimal_index - i) % 3 == 0 && i != negative && j > 0) {
  ------------------
  |  Branch (766:13): [True: 46.6k, False: 126k]
  |  Branch (766:45): [True: 42.0k, False: 4.68k]
  |  Branch (766:62): [True: 41.7k, False: 284]
  ------------------
  767|  41.7k|            temp[--j] = ',';
  768|  41.7k|        }
  769|   173k|    }
  770|       |
  771|       |    // If there is a decimal point, append the part after the decimal point
  772|  35.4k|    if (decimal_point) {
  ------------------
  |  Branch (772:9): [True: 14.7k, False: 20.7k]
  ------------------
  773|  14.7k|        if (strlcpy(temp + new_length, decimal_point, NUMBER_WITH_COMMAS_MAX_LENGTH - new_length) >=
  ------------------
  |  |   13|  14.7k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  |  Branch (773:13): [True: 0, False: 14.7k]
  ------------------
  774|  14.7k|            NUMBER_WITH_COMMAS_MAX_LENGTH - new_length) {
  ------------------
  |  |   13|  14.7k|#define NUMBER_WITH_COMMAS_MAX_LENGTH     105
  ------------------
  775|      0|            return false;
  776|      0|        }
  777|  14.7k|    }
  778|       |
  779|  35.4k|    if (strlcpy(out, temp, out_len) >= out_len) {
  ------------------
  |  Branch (779:9): [True: 0, False: 35.4k]
  ------------------
  780|      0|        return false;
  781|      0|    }
  782|       |
  783|  35.4k|    return true;
  784|  35.4k|}
print_int32:
  790|  1.07k|                 bool add_separator) {
  791|  1.07k|    return int256_to_decimal(value, 4, out, out_len) && add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (791:12): [True: 1.07k, False: 0]
  |  Branch (791:57): [True: 1.07k, False: 0]
  ------------------
  792|  1.07k|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (792:13): [True: 41, False: 1.03k]
  |  Branch (792:31): [True: 1.03k, False: 0]
  ------------------
  793|  1.07k|}
print_uint32:
  799|    501|                  bool add_separator) {
  800|    501|    return uint256_to_decimal(value, 4, out, out_len) &&
  ------------------
  |  Branch (800:12): [True: 501, False: 0]
  ------------------
  801|    501|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (801:12): [True: 501, False: 0]
  ------------------
  802|    501|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (802:13): [True: 0, False: 501]
  |  Branch (802:31): [True: 501, False: 0]
  ------------------
  803|    501|}
print_int64:
  809|    718|                 bool add_separator) {
  810|    718|    return int256_to_decimal(value, 8, out, out_len) && add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (810:12): [True: 718, False: 0]
  |  Branch (810:57): [True: 718, False: 0]
  ------------------
  811|    718|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (811:13): [True: 215, False: 503]
  |  Branch (811:31): [True: 503, False: 0]
  ------------------
  812|    718|}
print_uint64:
  818|   176k|                  bool add_separator) {
  819|   176k|    return uint256_to_decimal(value, 8, out, out_len) &&
  ------------------
  |  Branch (819:12): [True: 176k, False: 0]
  ------------------
  820|   176k|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (820:12): [True: 176k, False: 0]
  ------------------
  821|   176k|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (821:13): [True: 145k, False: 30.5k]
  |  Branch (821:31): [True: 30.5k, False: 0]
  ------------------
  822|   176k|}
print_int128:
  828|  1.45k|                  bool add_separator) {
  829|  1.45k|    return int256_to_decimal(value, 16, out, out_len) &&
  ------------------
  |  Branch (829:12): [True: 1.45k, False: 0]
  ------------------
  830|  1.45k|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (830:12): [True: 1.45k, False: 0]
  ------------------
  831|  1.45k|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (831:13): [True: 0, False: 1.45k]
  |  Branch (831:31): [True: 1.45k, False: 0]
  ------------------
  832|  1.45k|}
print_uint128:
  838|    680|                   bool add_separator) {
  839|    680|    return uint256_to_decimal(value, 16, out, out_len) &&
  ------------------
  |  Branch (839:12): [True: 680, False: 0]
  ------------------
  840|    680|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (840:12): [True: 680, False: 0]
  ------------------
  841|    680|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (841:13): [True: 0, False: 680]
  |  Branch (841:31): [True: 680, False: 0]
  ------------------
  842|    680|}
print_int256:
  848|    367|                  bool add_separator) {
  849|    367|    return int256_to_decimal(value, 32, out, out_len) &&
  ------------------
  |  Branch (849:12): [True: 367, False: 0]
  ------------------
  850|    367|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (850:12): [True: 367, False: 0]
  ------------------
  851|    367|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (851:13): [True: 0, False: 367]
  |  Branch (851:31): [True: 367, False: 0]
  ------------------
  852|    367|}
print_uint256:
  858|    307|                   bool add_separator) {
  859|    307|    return uint256_to_decimal(value, 32, out, out_len) &&
  ------------------
  |  Branch (859:12): [True: 307, False: 0]
  ------------------
  860|    307|           add_decimal_point(out, out_len, decimals) &&
  ------------------
  |  Branch (860:12): [True: 307, False: 0]
  ------------------
  861|    307|           (!add_separator || add_separator_to_number(out, out_len));
  ------------------
  |  Branch (861:13): [True: 0, False: 307]
  |  Branch (861:31): [True: 307, False: 0]
  ------------------
  862|    307|}
print_scv_symbol:
  864|    143|bool print_scv_symbol(const scv_symbol_t *scv_symbol, char *out, size_t out_len) {
  865|    143|    if (scv_symbol == NULL || out == NULL) {
  ------------------
  |  Branch (865:9): [True: 0, False: 143]
  |  Branch (865:31): [True: 0, False: 143]
  ------------------
  866|      0|        return false;
  867|      0|    }
  868|    143|    if (scv_symbol->size > SCV_SYMBOL_MAX_SIZE || scv_symbol->size > out_len - 1) {
  ------------------
  |  |   55|    286|#define SCV_SYMBOL_MAX_SIZE     32
  ------------------
  |  Branch (868:9): [True: 0, False: 143]
  |  Branch (868:51): [True: 0, False: 143]
  ------------------
  869|      0|        return false;
  870|      0|    }
  871|    143|    if (scv_symbol->size == 0) {
  ------------------
  |  Branch (871:9): [True: 123, False: 20]
  ------------------
  872|       |        // print empty symbol
  873|    123|        if (strlcpy(out, "[empty symbol]", out_len) >= out_len) {
  ------------------
  |  Branch (873:13): [True: 0, False: 123]
  ------------------
  874|      0|            return false;
  875|      0|        }
  876|    123|        return true;
  877|    123|    }
  878|     20|    if (!is_printable_binary(scv_symbol->symbol, scv_symbol->size)) {
  ------------------
  |  Branch (878:9): [True: 7, False: 13]
  ------------------
  879|      7|        return false;
  880|      7|    }
  881|     13|    if (!print_string(out, out_len, scv_symbol->symbol, scv_symbol->size)) {
  ------------------
  |  Branch (881:9): [True: 0, False: 13]
  ------------------
  882|      0|        return false;
  883|      0|    }
  884|     13|    return true;
  885|     13|}
print_scv_string:
  887|    531|bool print_scv_string(const scv_string_t *scv_string, char *out, size_t out_len) {
  888|    531|    if (scv_string == NULL || out == NULL) {
  ------------------
  |  Branch (888:9): [True: 0, False: 531]
  |  Branch (888:31): [True: 0, False: 531]
  ------------------
  889|      0|        return false;
  890|      0|    }
  891|       |
  892|    531|    if (scv_string->size == 0) {
  ------------------
  |  Branch (892:9): [True: 285, False: 246]
  ------------------
  893|       |        // print empty symbol
  894|    285|        if (strlcpy(out, "[empty string]", out_len) >= out_len) {
  ------------------
  |  Branch (894:13): [True: 0, False: 285]
  ------------------
  895|      0|            return false;
  896|      0|        }
  897|    285|        return true;
  898|    285|    }
  899|       |
  900|       |    // if the string is not printable, print [unprintable string]
  901|    246|    if (!is_printable_binary(scv_string->string, scv_string->size)) {
  ------------------
  |  Branch (901:9): [True: 211, False: 35]
  ------------------
  902|    211|        if (strlcpy(out, "[unprintable string]", out_len) >= out_len) {
  ------------------
  |  Branch (902:13): [True: 0, False: 211]
  ------------------
  903|      0|            return false;
  904|      0|        }
  905|    211|        return true;
  906|    211|    }
  907|       |
  908|     35|    size_t copy_len = scv_string->size;
  909|       |
  910|       |    // If the output buffer is large enough to hold the entire scv_string, copy it directly and
  911|       |    // append a null terminator.
  912|     35|    if (out_len > copy_len) {
  ------------------
  |  Branch (912:9): [True: 35, False: 0]
  ------------------
  913|     35|        memcpy(out, scv_string->string, copy_len);
  914|     35|        out[copy_len] = '\0';  // Ensure the string is null-terminated.
  915|     35|    } else {
  916|      0|        if (out_len < 3) {
  ------------------
  |  Branch (916:13): [True: 0, False: 0]
  ------------------
  917|      0|            return false;
  918|      0|        }
  919|       |        // Calculate the lengths of the beginning and end parts that can be displayed.
  920|      0|        size_t dots_len = 2;                 // The length of two dots.
  921|      0|        size_t available_len = out_len - 1;  // Subtract 1 to reserve space for the null terminator.
  922|      0|        size_t start_copy_len = available_len / 2;
  923|      0|        size_t end_copy_len = available_len - start_copy_len - dots_len;
  924|       |
  925|       |        // Copy the beginning part of the string.
  926|      0|        memcpy(out, scv_string->string, start_copy_len);
  927|      0|        out[start_copy_len] = '.';
  928|      0|        out[start_copy_len + 1] = '.';
  929|       |
  930|       |        // Copy the end part of the string if there is space for it after the dots.
  931|      0|        if (end_copy_len > 0) {
  ------------------
  |  Branch (931:13): [True: 0, False: 0]
  ------------------
  932|      0|            memcpy(out + start_copy_len + dots_len,
  933|      0|                   scv_string->string + copy_len - end_copy_len,
  934|      0|                   end_copy_len);
  935|      0|        }
  936|       |
  937|       |        // Ensure the output string is null-terminated by placing a null character at the end of the
  938|       |        // buffer.
  939|      0|        out[out_len - 1] = '\0';
  940|      0|    }
  941|       |
  942|     35|    return true;
  943|     35|}
print_string:
  945|  13.9k|bool print_string(char *out, size_t out_len, const uint8_t *src, size_t src_size) {
  946|  13.9k|    if (out == NULL || src == NULL || out_len == 0) {
  ------------------
  |  Branch (946:9): [True: 0, False: 13.9k]
  |  Branch (946:24): [True: 0, False: 13.9k]
  |  Branch (946:39): [True: 0, False: 13.9k]
  ------------------
  947|      0|        return false;
  948|      0|    }
  949|  13.9k|    if (src_size + 1 > out_len) {
  ------------------
  |  Branch (949:9): [True: 0, False: 13.9k]
  ------------------
  950|      0|        return false;
  951|      0|    }
  952|  13.9k|    memcpy(out, src, src_size);
  953|  13.9k|    out[src_size] = '\0';
  954|  13.9k|    return true;
  955|  13.9k|}
print_price:
  962|    652|                 size_t out_len) {
  963|    652|    uint64_t scaled_price = ((uint64_t) price->n * 10000000) / price->d;
  964|    652|    if (!print_amount(scaled_price, NULL, network_id, out, out_len)) {
  ------------------
  |  Branch (964:9): [True: 0, False: 652]
  ------------------
  965|      0|        return false;
  966|      0|    }
  967|       |
  968|    652|    if (asset_a != NULL && asset_b != NULL) {
  ------------------
  |  Branch (968:9): [True: 568, False: 84]
  |  Branch (968:28): [True: 568, False: 0]
  ------------------
  969|    568|        char tmp_asset_code[ASSET_CODE_MAX_LENGTH] = {0};
  970|    568|        if (strlcat(out, " ", out_len) >= out_len ||
  ------------------
  |  Branch (970:13): [True: 0, False: 568]
  ------------------
  971|    568|            !print_asset_name(asset_a, network_id, tmp_asset_code, sizeof(tmp_asset_code)) ||
  ------------------
  |  Branch (971:13): [True: 0, False: 568]
  ------------------
  972|    568|            strlcat(out, tmp_asset_code, out_len) >= out_len ||
  ------------------
  |  Branch (972:13): [True: 0, False: 568]
  ------------------
  973|    568|            strlcat(out, "/", out_len) >= out_len ||
  ------------------
  |  Branch (973:13): [True: 0, False: 568]
  ------------------
  974|    568|            !print_asset_name(asset_b, network_id, tmp_asset_code, sizeof(tmp_asset_code)) ||
  ------------------
  |  Branch (974:13): [True: 0, False: 568]
  ------------------
  975|    568|            strlcat(out, tmp_asset_code, out_len) >= out_len) {
  ------------------
  |  Branch (975:13): [True: 0, False: 568]
  ------------------
  976|      0|            return false;
  977|      0|        }
  978|    568|    }
  979|    652|    return true;
  980|    652|}
printer.c:print_summary:
  138|  2.05k|                          uint8_t num_chars_r) {
  139|  2.05k|    uint8_t result_len = num_chars_l + num_chars_r + 2;
  140|  2.05k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (140:9): [True: 0, False: 2.05k]
  ------------------
  141|      0|        return false;
  142|      0|    }
  143|  2.05k|    uint16_t in_len = strlen(in);
  144|  2.05k|    if (in_len > result_len) {
  ------------------
  |  Branch (144:9): [True: 2.05k, False: 0]
  ------------------
  145|  2.05k|        memcpy(out, in, num_chars_l);
  146|  2.05k|        out[num_chars_l] = '.';
  147|  2.05k|        out[num_chars_l + 1] = '.';
  148|  2.05k|        memcpy(out + num_chars_l + 2, in + in_len - num_chars_r, num_chars_r);
  149|  2.05k|        out[result_len] = '\0';
  150|  2.05k|    } else {
  151|      0|        memcpy(out, in, in_len);
  152|      0|        out[in_len] = '\0';
  153|      0|    }
  154|  2.05k|    return true;
  155|  2.05k|}
printer.c:int256_to_decimal:
  595|  3.61k|static bool int256_to_decimal(const uint8_t *value, size_t value_len, char *out, size_t out_len) {
  596|  3.61k|    if (value_len > INT256_LENGTH) {
  ------------------
  |  |    9|  3.61k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (596:9): [True: 0, False: 3.61k]
  ------------------
  597|       |        // Value length is bigger than INT256_LENGTH
  598|      0|        return false;
  599|      0|    }
  600|       |
  601|  3.61k|    bool is_negative = (value[0] & 0x80) != 0;
  602|  3.61k|    uint8_t n[INT256_LENGTH] = {0};
  603|       |
  604|  3.61k|    if (is_negative) {
  ------------------
  |  Branch (604:9): [True: 497, False: 3.11k]
  ------------------
  605|       |        // Compute the absolute value using two's complement
  606|    497|        bool carry = true;
  607|  12.1k|        for (size_t i = value_len; i-- > 0;) {
  ------------------
  |  Branch (607:36): [True: 11.6k, False: 497]
  ------------------
  608|  11.6k|            n[INT256_LENGTH - value_len + i] = ~value[i] + carry;
  ------------------
  |  |    9|  11.6k|#define INT256_LENGTH                     32
  ------------------
  609|  11.6k|            carry = carry && (value[i] == 0);
  ------------------
  |  Branch (609:21): [True: 6.42k, False: 5.20k]
  |  Branch (609:30): [True: 5.92k, False: 497]
  ------------------
  610|  11.6k|        }
  611|  3.11k|    } else {
  612|  3.11k|        memcpy(n + INT256_LENGTH - value_len, value, value_len);
  ------------------
  |  |    9|  3.11k|#define INT256_LENGTH                     32
  ------------------
  613|  3.11k|    }
  614|       |
  615|  3.61k|    char *p = out + out_len;
  616|  3.61k|    size_t result_len = 0;
  617|       |
  618|  57.8k|    do {
  619|  57.8k|        if (p == out) {
  ------------------
  |  Branch (619:13): [True: 0, False: 57.8k]
  ------------------
  620|       |            // Not enough space in the output buffer
  621|      0|            return false;
  622|      0|        }
  623|       |
  624|  57.8k|        uint32_t remainder = 0;
  625|  1.90M|        for (size_t i = 0; i < INT256_LENGTH; ++i) {
  ------------------
  |  |    9|  1.90M|#define INT256_LENGTH                     32
  ------------------
  |  Branch (625:28): [True: 1.85M, False: 57.8k]
  ------------------
  626|  1.85M|            uint32_t temp = (remainder << 8) | n[i];
  627|  1.85M|            n[i] = temp / 10;
  628|  1.85M|            remainder = temp % 10;
  629|  1.85M|        }
  630|       |
  631|  57.8k|        *--p = '0' + remainder;
  632|  57.8k|        result_len++;
  633|  57.8k|    } while (!allzeroes(n, INT256_LENGTH));
  ------------------
  |  |    9|  57.8k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (633:14): [True: 54.2k, False: 3.61k]
  ------------------
  634|       |
  635|  3.61k|    if (is_negative) {
  ------------------
  |  Branch (635:9): [True: 497, False: 3.11k]
  ------------------
  636|    497|        if (p == out) {
  ------------------
  |  Branch (636:13): [True: 0, False: 497]
  ------------------
  637|       |            // Not enough space in the output buffer
  638|      0|            return false;
  639|      0|        }
  640|    497|        *--p = '-';
  641|    497|        result_len++;
  642|    497|    }
  643|       |
  644|  3.61k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (644:9): [True: 0, False: 3.61k]
  ------------------
  645|       |        // Not enough space to hold the result and \0.
  646|      0|        return false;
  647|      0|    }
  648|       |
  649|  3.61k|    memmove(out, p, result_len);
  650|  3.61k|    out[result_len] = '\0';
  651|       |
  652|       |    // Clear the rest of the 'out' array
  653|       |    // Generally speaking, this is unnecessary,
  654|       |    // but handler_get_app_configuration requires that it must be followed by `\0`.
  655|  3.61k|    if (result_len + 1 < out_len) {
  ------------------
  |  Branch (655:9): [True: 3.61k, False: 0]
  ------------------
  656|  3.61k|        memset(out + result_len + 1, 0, out_len - result_len - 1);
  657|  3.61k|    }
  658|  3.61k|    return true;
  659|  3.61k|}
printer.c:allzeroes:
  523|   869k|static int allzeroes(const void *buf, size_t n) {
  524|   869k|    uint8_t *p = (uint8_t *) buf;
  525|  26.0M|    for (size_t i = 0; i < n; ++i) {
  ------------------
  |  Branch (525:24): [True: 25.8M, False: 181k]
  ------------------
  526|  25.8M|        if (p[i]) {
  ------------------
  |  Branch (526:13): [True: 687k, False: 25.1M]
  ------------------
  527|   687k|            return 0;
  528|   687k|        }
  529|  25.8M|    }
  530|   181k|    return 1;
  531|   869k|}
printer.c:uint256_to_decimal:
  533|   177k|static bool uint256_to_decimal(const uint8_t *value, size_t value_len, char *out, size_t out_len) {
  534|   177k|    if (value_len > INT256_LENGTH) {
  ------------------
  |  |    9|   177k|#define INT256_LENGTH                     32
  ------------------
  |  Branch (534:9): [True: 0, False: 177k]
  ------------------
  535|      0|        return false;
  536|      0|    }
  537|       |
  538|   177k|    uint16_t n[16] = {0};
  539|       |    // Copy and right-align the number
  540|   177k|    memcpy((uint8_t *) n + INT256_LENGTH - value_len, value, value_len);
  ------------------
  |  |    9|   177k|#define INT256_LENGTH                     32
  ------------------
  541|       |
  542|       |    // Special case when value is 0
  543|   177k|    if (allzeroes(n, sizeof(n))) {
  ------------------
  |  Branch (543:9): [True: 23.8k, False: 154k]
  ------------------
  544|  23.8k|        if (out_len < 2) {
  ------------------
  |  Branch (544:13): [True: 0, False: 23.8k]
  ------------------
  545|       |            // Not enough space to hold "0" and \0.
  546|      0|            return false;
  547|      0|        }
  548|  23.8k|        out[0] = '0';
  549|  23.8k|        out[1] = '\0';
  550|  23.8k|        return true;
  551|  23.8k|    }
  552|       |
  553|       |    // Swap the byte order of each uint16_t element in the array
  554|  2.61M|    for (int i = 0; i < 16; i++) {
  ------------------
  |  Branch (554:21): [True: 2.46M, False: 154k]
  ------------------
  555|  2.46M|        n[i] = __builtin_bswap16(n[i]);
  556|  2.46M|    }
  557|       |
  558|   154k|    size_t result_len = 0;
  559|   154k|    int pos = out_len;
  560|       |
  561|   633k|    while (!allzeroes(n, sizeof(n))) {
  ------------------
  |  Branch (561:12): [True: 479k, False: 154k]
  ------------------
  562|   479k|        if (pos == 0) {
  ------------------
  |  Branch (562:13): [True: 0, False: 479k]
  ------------------
  563|      0|            return false;
  564|      0|        }
  565|   479k|        pos--;
  566|   479k|        result_len++;
  567|       |
  568|   479k|        uint32_t carry = 0;
  569|  8.15M|        for (int i = 0; i < 16; i++) {
  ------------------
  |  Branch (569:25): [True: 7.67M, False: 479k]
  ------------------
  570|  7.67M|            uint32_t digit = ((carry << 16) | n[i]);
  571|  7.67M|            n[i] = digit / 10;
  572|  7.67M|            carry = digit % 10;
  573|  7.67M|        }
  574|   479k|        out[pos] = '0' + carry;
  575|   479k|    }
  576|       |
  577|   154k|    if (out_len < result_len + 1) {
  ------------------
  |  Branch (577:9): [True: 0, False: 154k]
  ------------------
  578|       |        // Not enough space to hold the result and \0.
  579|      0|        return false;
  580|      0|    }
  581|       |
  582|       |    // Move the result to the beginning of the output buffer
  583|   154k|    memmove(out, out + pos, result_len);
  584|   154k|    out[result_len] = '\0';
  585|       |
  586|       |    // Clear the rest of the 'out' array
  587|       |    // Generally speaking, this is unnecessary,
  588|       |    // but handler_get_app_configuration requires that it must be followed by `\0`.
  589|   154k|    if (result_len + 1 < out_len) {
  ------------------
  |  Branch (589:9): [True: 154k, False: 0]
  ------------------
  590|   154k|        memset(out + result_len + 1, 0, out_len - result_len - 1);
  591|   154k|    }
  592|   154k|    return true;
  593|   154k|}

